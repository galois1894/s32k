   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"queue.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.xQueueGenericReset,"ax",%progbits
  21              		.align	2
  22              		.global	xQueueGenericReset
  23              		.thumb
  24              		.thumb_func
  26              	xQueueGenericReset:
  27              	.LFB4:
  28              		.file 1 "../FreeRTOS/queue.c"
   1:../FreeRTOS/queue.c **** /*
   2:../FreeRTOS/queue.c ****     FreeRTOS V8.2.1 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:../FreeRTOS/queue.c ****     All rights reserved
   4:../FreeRTOS/queue.c **** 
   5:../FreeRTOS/queue.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../FreeRTOS/queue.c **** 
   7:../FreeRTOS/queue.c ****     This file is part of the FreeRTOS distribution.
   8:../FreeRTOS/queue.c **** 
   9:../FreeRTOS/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../FreeRTOS/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../FreeRTOS/queue.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  12:../FreeRTOS/queue.c **** 
  13:../FreeRTOS/queue.c ****     ***************************************************************************
  14:../FreeRTOS/queue.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../FreeRTOS/queue.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../FreeRTOS/queue.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../FreeRTOS/queue.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../FreeRTOS/queue.c ****     ***************************************************************************
  19:../FreeRTOS/queue.c **** 
  20:../FreeRTOS/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../FreeRTOS/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../FreeRTOS/queue.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../FreeRTOS/queue.c ****     link: http://www.freertos.org/a00114.html
  24:../FreeRTOS/queue.c **** 
  25:../FreeRTOS/queue.c ****     ***************************************************************************
  26:../FreeRTOS/queue.c ****      *                                                                       *
  27:../FreeRTOS/queue.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../FreeRTOS/queue.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../FreeRTOS/queue.c ****      *    platform software that is more than just the market leader, it     *
  30:../FreeRTOS/queue.c ****      *    is the industry's de facto standard.                               *
  31:../FreeRTOS/queue.c ****      *                                                                       *
  32:../FreeRTOS/queue.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../FreeRTOS/queue.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../FreeRTOS/queue.c ****      *    tutorial book, reference manual, or both:                          *
  35:../FreeRTOS/queue.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../FreeRTOS/queue.c ****      *                                                                       *
  37:../FreeRTOS/queue.c ****     ***************************************************************************
  38:../FreeRTOS/queue.c **** 
  39:../FreeRTOS/queue.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../FreeRTOS/queue.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../FreeRTOS/queue.c ****     defined configASSERT()?
  42:../FreeRTOS/queue.c **** 
  43:../FreeRTOS/queue.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../FreeRTOS/queue.c ****     embedded software for free we request you assist our global community by
  45:../FreeRTOS/queue.c ****     participating in the support forum.
  46:../FreeRTOS/queue.c **** 
  47:../FreeRTOS/queue.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../FreeRTOS/queue.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../FreeRTOS/queue.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../FreeRTOS/queue.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../FreeRTOS/queue.c **** 
  52:../FreeRTOS/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../FreeRTOS/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../FreeRTOS/queue.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../FreeRTOS/queue.c **** 
  56:../FreeRTOS/queue.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../FreeRTOS/queue.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../FreeRTOS/queue.c **** 
  59:../FreeRTOS/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../FreeRTOS/queue.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../FreeRTOS/queue.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../FreeRTOS/queue.c **** 
  63:../FreeRTOS/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../FreeRTOS/queue.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../FreeRTOS/queue.c ****     mission critical applications that require provable dependability.
  66:../FreeRTOS/queue.c **** 
  67:../FreeRTOS/queue.c ****     1 tab == 4 spaces!
  68:../FreeRTOS/queue.c **** */
  69:../FreeRTOS/queue.c **** 
  70:../FreeRTOS/queue.c **** #include <stdlib.h>
  71:../FreeRTOS/queue.c **** #include <string.h>
  72:../FreeRTOS/queue.c **** 
  73:../FreeRTOS/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:../FreeRTOS/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:../FreeRTOS/queue.c **** task.h is included from an application file. */
  76:../FreeRTOS/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:../FreeRTOS/queue.c **** 
  78:../FreeRTOS/queue.c **** #include "FreeRTOS.h"
  79:../FreeRTOS/queue.c **** #include "task.h"
  80:../FreeRTOS/queue.c **** #include "queue.h"
  81:../FreeRTOS/queue.c **** 
  82:../FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  83:../FreeRTOS/queue.c **** 	#include "croutine.h"
  84:../FreeRTOS/queue.c **** #endif
  85:../FreeRTOS/queue.c **** 
  86:../FreeRTOS/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  87:../FreeRTOS/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  88:../FreeRTOS/queue.c **** header files above, but not in this file, in order to generate the correct
  89:../FreeRTOS/queue.c **** privileged Vs unprivileged linkage and placement. */
  90:../FreeRTOS/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  91:../FreeRTOS/queue.c **** 
  92:../FreeRTOS/queue.c **** 
  93:../FreeRTOS/queue.c **** /* Constants used with the xRxLock and xTxLock structure members. */
  94:../FreeRTOS/queue.c **** #define queueUNLOCKED					( ( BaseType_t ) -1 )
  95:../FreeRTOS/queue.c **** #define queueLOCKED_UNMODIFIED			( ( BaseType_t ) 0 )
  96:../FreeRTOS/queue.c **** 
  97:../FreeRTOS/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  98:../FreeRTOS/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  99:../FreeRTOS/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
 100:../FreeRTOS/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
 101:../FreeRTOS/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
 102:../FreeRTOS/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
 103:../FreeRTOS/queue.c **** the code is maintained despite this dual use of two structure members.  An
 104:../FreeRTOS/queue.c **** alternative implementation would be to use a union, but use of a union is
 105:../FreeRTOS/queue.c **** against the coding standard (although an exception to the standard has been
 106:../FreeRTOS/queue.c **** permitted where the dual use also significantly changes the type of the
 107:../FreeRTOS/queue.c **** structure member). */
 108:../FreeRTOS/queue.c **** #define pxMutexHolder					pcTail
 109:../FreeRTOS/queue.c **** #define uxQueueType						pcHead
 110:../FreeRTOS/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 111:../FreeRTOS/queue.c **** 
 112:../FreeRTOS/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
 113:../FreeRTOS/queue.c **** zero. */
 114:../FreeRTOS/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
 115:../FreeRTOS/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
 116:../FreeRTOS/queue.c **** 
 117:../FreeRTOS/queue.c **** #if( configUSE_PREEMPTION == 0 )
 118:../FreeRTOS/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 119:../FreeRTOS/queue.c **** 	performed just because a higher priority task has been woken. */
 120:../FreeRTOS/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
 121:../FreeRTOS/queue.c **** #else
 122:../FreeRTOS/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 123:../FreeRTOS/queue.c **** #endif
 124:../FreeRTOS/queue.c **** 
 125:../FreeRTOS/queue.c **** /*
 126:../FreeRTOS/queue.c ****  * Definition of the queue used by the scheduler.
 127:../FreeRTOS/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 128:../FreeRTOS/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
 129:../FreeRTOS/queue.c ****  */
 130:../FreeRTOS/queue.c **** typedef struct QueueDefinition
 131:../FreeRTOS/queue.c **** {
 132:../FreeRTOS/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 133:../FreeRTOS/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
 134:../FreeRTOS/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 135:../FreeRTOS/queue.c **** 
 136:../FreeRTOS/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
 137:../FreeRTOS/queue.c **** 	{
 138:../FreeRTOS/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
 139:../FreeRTOS/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
 140:../FreeRTOS/queue.c **** 	} u;
 141:../FreeRTOS/queue.c **** 
 142:../FreeRTOS/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 143:../FreeRTOS/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 144:../FreeRTOS/queue.c **** 
 145:../FreeRTOS/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 146:../FreeRTOS/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 147:../FreeRTOS/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 148:../FreeRTOS/queue.c **** 
 149:../FreeRTOS/queue.c **** 	volatile BaseType_t xRxLock;	/*< Stores the number of items received from the queue (removed from 
 150:../FreeRTOS/queue.c **** 	volatile BaseType_t xTxLock;	/*< Stores the number of items transmitted to the queue (added to the
 151:../FreeRTOS/queue.c **** 
 152:../FreeRTOS/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 153:../FreeRTOS/queue.c **** 		UBaseType_t uxQueueNumber;
 154:../FreeRTOS/queue.c **** 		uint8_t ucQueueType;
 155:../FreeRTOS/queue.c **** 	#endif
 156:../FreeRTOS/queue.c **** 
 157:../FreeRTOS/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 158:../FreeRTOS/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 159:../FreeRTOS/queue.c **** 	#endif
 160:../FreeRTOS/queue.c **** 
 161:../FreeRTOS/queue.c **** } xQUEUE;
 162:../FreeRTOS/queue.c **** 
 163:../FreeRTOS/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 164:../FreeRTOS/queue.c **** name below to enable the use of older kernel aware debuggers. */
 165:../FreeRTOS/queue.c **** typedef xQUEUE Queue_t;
 166:../FreeRTOS/queue.c **** 
 167:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 168:../FreeRTOS/queue.c **** 
 169:../FreeRTOS/queue.c **** /*
 170:../FreeRTOS/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 171:../FreeRTOS/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 172:../FreeRTOS/queue.c ****  */
 173:../FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 174:../FreeRTOS/queue.c **** 
 175:../FreeRTOS/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 176:../FreeRTOS/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 177:../FreeRTOS/queue.c **** 	more user friendly. */
 178:../FreeRTOS/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 179:../FreeRTOS/queue.c **** 	{
 180:../FreeRTOS/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 181:../FreeRTOS/queue.c **** 		QueueHandle_t xHandle;
 182:../FreeRTOS/queue.c **** 	} xQueueRegistryItem;
 183:../FreeRTOS/queue.c **** 
 184:../FreeRTOS/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 185:../FreeRTOS/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 186:../FreeRTOS/queue.c **** 	debuggers. */
 187:../FreeRTOS/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 188:../FreeRTOS/queue.c **** 
 189:../FreeRTOS/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 190:../FreeRTOS/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 191:../FreeRTOS/queue.c **** 	array position being vacant. */
 192:../FreeRTOS/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 193:../FreeRTOS/queue.c **** 
 194:../FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 195:../FreeRTOS/queue.c **** 
 196:../FreeRTOS/queue.c **** /*
 197:../FreeRTOS/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 198:../FreeRTOS/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 199:../FreeRTOS/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 200:../FreeRTOS/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 201:../FreeRTOS/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 202:../FreeRTOS/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 203:../FreeRTOS/queue.c ****  */
 204:../FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 205:../FreeRTOS/queue.c **** 
 206:../FreeRTOS/queue.c **** /*
 207:../FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 208:../FreeRTOS/queue.c ****  *
 209:../FreeRTOS/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 210:../FreeRTOS/queue.c ****  */
 211:../FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 212:../FreeRTOS/queue.c **** 
 213:../FreeRTOS/queue.c **** /*
 214:../FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 215:../FreeRTOS/queue.c ****  *
 216:../FreeRTOS/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 217:../FreeRTOS/queue.c ****  */
 218:../FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 219:../FreeRTOS/queue.c **** 
 220:../FreeRTOS/queue.c **** /*
 221:../FreeRTOS/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 222:../FreeRTOS/queue.c ****  * back of the queue.
 223:../FreeRTOS/queue.c ****  */
 224:../FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 225:../FreeRTOS/queue.c **** 
 226:../FreeRTOS/queue.c **** /*
 227:../FreeRTOS/queue.c ****  * Copies an item out of a queue.
 228:../FreeRTOS/queue.c ****  */
 229:../FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 230:../FreeRTOS/queue.c **** 
 231:../FreeRTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 232:../FreeRTOS/queue.c **** 	/*
 233:../FreeRTOS/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 234:../FreeRTOS/queue.c **** 	 * the queue set that the queue contains data.
 235:../FreeRTOS/queue.c **** 	 */
 236:../FreeRTOS/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 237:../FreeRTOS/queue.c **** #endif
 238:../FreeRTOS/queue.c **** 
 239:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 240:../FreeRTOS/queue.c **** 
 241:../FreeRTOS/queue.c **** /*
 242:../FreeRTOS/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 243:../FreeRTOS/queue.c ****  * accessing the queue event lists.
 244:../FreeRTOS/queue.c ****  */
 245:../FreeRTOS/queue.c **** #define prvLockQueue( pxQueue )								\
 246:../FreeRTOS/queue.c **** 	taskENTER_CRITICAL();									\
 247:../FreeRTOS/queue.c **** 	{														\
 248:../FreeRTOS/queue.c **** 		if( ( pxQueue )->xRxLock == queueUNLOCKED )			\
 249:../FreeRTOS/queue.c **** 		{													\
 250:../FreeRTOS/queue.c **** 			( pxQueue )->xRxLock = queueLOCKED_UNMODIFIED;	\
 251:../FreeRTOS/queue.c **** 		}													\
 252:../FreeRTOS/queue.c **** 		if( ( pxQueue )->xTxLock == queueUNLOCKED )			\
 253:../FreeRTOS/queue.c **** 		{													\
 254:../FreeRTOS/queue.c **** 			( pxQueue )->xTxLock = queueLOCKED_UNMODIFIED;	\
 255:../FreeRTOS/queue.c **** 		}													\
 256:../FreeRTOS/queue.c **** 	}														\
 257:../FreeRTOS/queue.c **** 	taskEXIT_CRITICAL()
 258:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 259:../FreeRTOS/queue.c **** 
 260:../FreeRTOS/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 261:../FreeRTOS/queue.c **** {
  29              		.loc 1 261 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 16
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 84B0     		sub	sp, sp, #16
  38              		.cfi_def_cfa_offset 24
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
  42 0008 3960     		str	r1, [r7]
 262:../FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
  43              		.loc 1 262 0
  44 000a 7B68     		ldr	r3, [r7, #4]
  45 000c FB60     		str	r3, [r7, #12]
 263:../FreeRTOS/queue.c **** 
 264:../FreeRTOS/queue.c **** 	configASSERT( pxQueue );
  46              		.loc 1 264 0
  47 000e FB68     		ldr	r3, [r7, #12]
  48 0010 002B     		cmp	r3, #0
  49 0012 09D1     		bne	.L2
  50              	.LBB74:
  51              	.LBB75:
  52              		.file 2 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../F
   1:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V8.2.1 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  12:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31 - ucPort
 192:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 206:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 207:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 208:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 209:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 210:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 212:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 214:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  53              		.loc 2 215 0 discriminator 1
  54              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
  55 0014 4FF00703 			mov r3, #7												
  56 0018 83F31188 		msr basepri, r3											
  57 001c BFF36F8F 		isb														
  58 0020 BFF34F8F 		dsb														
  59              	
  60              	@ 0 "" 2
  61              		.thumb
  62 0024 BB60     		str	r3, [r7, #8]
  63              	.L3:
  64              	.LBE75:
  65              	.LBE74:
  66              		.loc 1 264 0 discriminator 1
  67 0026 FEE7     		b	.L3
  68              	.L2:
 265:../FreeRTOS/queue.c **** 
 266:../FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
  69              		.loc 1 266 0
  70 0028 FFF7FEFF 		bl	vPortEnterCritical
 267:../FreeRTOS/queue.c **** 	{
 268:../FreeRTOS/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  71              		.loc 1 268 0
  72 002c FB68     		ldr	r3, [r7, #12]
  73 002e 1A68     		ldr	r2, [r3]
  74 0030 FB68     		ldr	r3, [r7, #12]
  75 0032 DB6B     		ldr	r3, [r3, #60]
  76 0034 F968     		ldr	r1, [r7, #12]
  77 0036 096C     		ldr	r1, [r1, #64]
  78 0038 01FB03F3 		mul	r3, r1, r3
  79 003c 1A44     		add	r2, r2, r3
  80 003e FB68     		ldr	r3, [r7, #12]
  81 0040 5A60     		str	r2, [r3, #4]
 269:../FreeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  82              		.loc 1 269 0
  83 0042 FB68     		ldr	r3, [r7, #12]
  84 0044 0022     		movs	r2, #0
  85 0046 9A63     		str	r2, [r3, #56]
 270:../FreeRTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
  86              		.loc 1 270 0
  87 0048 FB68     		ldr	r3, [r7, #12]
  88 004a 1A68     		ldr	r2, [r3]
  89 004c FB68     		ldr	r3, [r7, #12]
  90 004e 9A60     		str	r2, [r3, #8]
 271:../FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
  91              		.loc 1 271 0
  92 0050 FB68     		ldr	r3, [r7, #12]
  93 0052 1A68     		ldr	r2, [r3]
  94 0054 FB68     		ldr	r3, [r7, #12]
  95 0056 DB6B     		ldr	r3, [r3, #60]
  96 0058 013B     		subs	r3, r3, #1
  97 005a F968     		ldr	r1, [r7, #12]
  98 005c 096C     		ldr	r1, [r1, #64]
  99 005e 01FB03F3 		mul	r3, r1, r3
 100 0062 1A44     		add	r2, r2, r3
 101 0064 FB68     		ldr	r3, [r7, #12]
 102 0066 DA60     		str	r2, [r3, #12]
 272:../FreeRTOS/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 103              		.loc 1 272 0
 104 0068 FB68     		ldr	r3, [r7, #12]
 105 006a 4FF0FF32 		mov	r2, #-1
 106 006e 5A64     		str	r2, [r3, #68]
 273:../FreeRTOS/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 107              		.loc 1 273 0
 108 0070 FB68     		ldr	r3, [r7, #12]
 109 0072 4FF0FF32 		mov	r2, #-1
 110 0076 9A64     		str	r2, [r3, #72]
 274:../FreeRTOS/queue.c **** 
 275:../FreeRTOS/queue.c **** 		if( xNewQueue == pdFALSE )
 111              		.loc 1 275 0
 112 0078 3B68     		ldr	r3, [r7]
 113 007a 002B     		cmp	r3, #0
 114 007c 09D1     		bne	.L4
 276:../FreeRTOS/queue.c **** 		{
 277:../FreeRTOS/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 278:../FreeRTOS/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 279:../FreeRTOS/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 280:../FreeRTOS/queue.c **** 			the queue, then one should be unblocked as after this function exits
 281:../FreeRTOS/queue.c **** 			it will be possible to write to it. */
 282:../FreeRTOS/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 115              		.loc 1 282 0
 116 007e FB68     		ldr	r3, [r7, #12]
 117 0080 1B69     		ldr	r3, [r3, #16]
 118 0082 002B     		cmp	r3, #0
 119 0084 0FD0     		beq	.L5
 283:../FreeRTOS/queue.c **** 			{
 284:../FreeRTOS/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 120              		.loc 1 284 0
 121 0086 FB68     		ldr	r3, [r7, #12]
 122 0088 1033     		adds	r3, r3, #16
 123 008a 1846     		mov	r0, r3
 124 008c FFF7FEFF 		bl	xTaskRemoveFromEventList
 125 0090 09E0     		b	.L5
 126              	.L4:
 285:../FreeRTOS/queue.c **** 				{
 286:../FreeRTOS/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 287:../FreeRTOS/queue.c **** 				}
 288:../FreeRTOS/queue.c **** 				else
 289:../FreeRTOS/queue.c **** 				{
 290:../FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 291:../FreeRTOS/queue.c **** 				}
 292:../FreeRTOS/queue.c **** 			}
 293:../FreeRTOS/queue.c **** 			else
 294:../FreeRTOS/queue.c **** 			{
 295:../FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 296:../FreeRTOS/queue.c **** 			}
 297:../FreeRTOS/queue.c **** 		}
 298:../FreeRTOS/queue.c **** 		else
 299:../FreeRTOS/queue.c **** 		{
 300:../FreeRTOS/queue.c **** 			/* Ensure the event queues start in the correct state. */
 301:../FreeRTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 127              		.loc 1 301 0
 128 0092 FB68     		ldr	r3, [r7, #12]
 129 0094 1033     		adds	r3, r3, #16
 130 0096 1846     		mov	r0, r3
 131 0098 FFF7FEFF 		bl	vListInitialise
 302:../FreeRTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 132              		.loc 1 302 0
 133 009c FB68     		ldr	r3, [r7, #12]
 134 009e 2433     		adds	r3, r3, #36
 135 00a0 1846     		mov	r0, r3
 136 00a2 FFF7FEFF 		bl	vListInitialise
 137              	.L5:
 303:../FreeRTOS/queue.c **** 		}
 304:../FreeRTOS/queue.c **** 	}
 305:../FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
 138              		.loc 1 305 0
 139 00a6 FFF7FEFF 		bl	vPortExitCritical
 306:../FreeRTOS/queue.c **** 
 307:../FreeRTOS/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 308:../FreeRTOS/queue.c **** 	versions. */
 309:../FreeRTOS/queue.c **** 	return pdPASS;
 140              		.loc 1 309 0
 141 00aa 0123     		movs	r3, #1
 310:../FreeRTOS/queue.c **** }
 142              		.loc 1 310 0
 143 00ac 1846     		mov	r0, r3
 144 00ae 1037     		adds	r7, r7, #16
 145              		.cfi_def_cfa_offset 8
 146 00b0 BD46     		mov	sp, r7
 147              		.cfi_def_cfa_register 13
 148              		@ sp needed
 149 00b2 80BD     		pop	{r7, pc}
 150              		.cfi_endproc
 151              	.LFE4:
 153              		.section	.text.xQueueGenericCreate,"ax",%progbits
 154              		.align	2
 155              		.global	xQueueGenericCreate
 156              		.thumb
 157              		.thumb_func
 159              	xQueueGenericCreate:
 160              	.LFB5:
 311:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 312:../FreeRTOS/queue.c **** 
 313:../FreeRTOS/queue.c **** QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, c
 314:../FreeRTOS/queue.c **** {
 161              		.loc 1 314 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 40
 164              		@ frame_needed = 1, uses_anonymous_args = 0
 165 0000 80B5     		push	{r7, lr}
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 7, -8
 168              		.cfi_offset 14, -4
 169 0002 8AB0     		sub	sp, sp, #40
 170              		.cfi_def_cfa_offset 48
 171 0004 00AF     		add	r7, sp, #0
 172              		.cfi_def_cfa_register 7
 173 0006 F860     		str	r0, [r7, #12]
 174 0008 B960     		str	r1, [r7, #8]
 175 000a 1346     		mov	r3, r2
 176 000c FB71     		strb	r3, [r7, #7]
 315:../FreeRTOS/queue.c **** Queue_t *pxNewQueue;
 316:../FreeRTOS/queue.c **** size_t xQueueSizeInBytes;
 317:../FreeRTOS/queue.c **** QueueHandle_t xReturn = NULL;
 177              		.loc 1 317 0
 178 000e 0023     		movs	r3, #0
 179 0010 3B62     		str	r3, [r7, #32]
 318:../FreeRTOS/queue.c **** int8_t *pcAllocatedBuffer;
 319:../FreeRTOS/queue.c **** 
 320:../FreeRTOS/queue.c **** 	/* Remove compiler warnings about unused parameters should
 321:../FreeRTOS/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 322:../FreeRTOS/queue.c **** 	( void ) ucQueueType;
 323:../FreeRTOS/queue.c **** 
 324:../FreeRTOS/queue.c **** 	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 180              		.loc 1 324 0
 181 0012 FB68     		ldr	r3, [r7, #12]
 182 0014 002B     		cmp	r3, #0
 183 0016 09D1     		bne	.L8
 184              	.LBB76:
 185              	.LBB77:
 186              		.loc 2 215 0 discriminator 1
 187              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 188 0018 4FF00703 			mov r3, #7												
 189 001c 83F31188 		msr basepri, r3											
 190 0020 BFF36F8F 		isb														
 191 0024 BFF34F8F 		dsb														
 192              	
 193              	@ 0 "" 2
 194              		.thumb
 195 0028 7B61     		str	r3, [r7, #20]
 196              	.L9:
 197              	.LBE77:
 198              	.LBE76:
 199              		.loc 1 324 0 discriminator 1
 200 002a FEE7     		b	.L9
 201              	.L8:
 325:../FreeRTOS/queue.c **** 
 326:../FreeRTOS/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 202              		.loc 1 326 0
 203 002c BB68     		ldr	r3, [r7, #8]
 204 002e 002B     		cmp	r3, #0
 205 0030 02D1     		bne	.L10
 327:../FreeRTOS/queue.c **** 	{
 328:../FreeRTOS/queue.c **** 		/* There is not going to be a queue storage area. */
 329:../FreeRTOS/queue.c **** 		xQueueSizeInBytes = ( size_t ) 0;
 206              		.loc 1 329 0
 207 0032 0023     		movs	r3, #0
 208 0034 7B62     		str	r3, [r7, #36]
 209 0036 05E0     		b	.L11
 210              	.L10:
 330:../FreeRTOS/queue.c **** 	}
 331:../FreeRTOS/queue.c **** 	else
 332:../FreeRTOS/queue.c **** 	{
 333:../FreeRTOS/queue.c **** 		/* The queue is one byte longer than asked for to make wrap checking
 334:../FreeRTOS/queue.c **** 		easier/faster. */
 335:../FreeRTOS/queue.c **** 		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA 
 211              		.loc 1 335 0
 212 0038 FB68     		ldr	r3, [r7, #12]
 213 003a BA68     		ldr	r2, [r7, #8]
 214 003c 02FB03F3 		mul	r3, r2, r3
 215 0040 0133     		adds	r3, r3, #1
 216 0042 7B62     		str	r3, [r7, #36]
 217              	.L11:
 336:../FreeRTOS/queue.c **** 	}
 337:../FreeRTOS/queue.c **** 
 338:../FreeRTOS/queue.c **** 	/* Allocate the new queue structure and storage area. */
 339:../FreeRTOS/queue.c **** 	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 218              		.loc 1 339 0
 219 0044 7B6A     		ldr	r3, [r7, #36]
 220 0046 4C33     		adds	r3, r3, #76
 221 0048 1846     		mov	r0, r3
 222 004a FFF7FEFF 		bl	pvPortMalloc
 223 004e F861     		str	r0, [r7, #28]
 340:../FreeRTOS/queue.c **** 
 341:../FreeRTOS/queue.c **** 	if( pcAllocatedBuffer != NULL )
 224              		.loc 1 341 0
 225 0050 FB69     		ldr	r3, [r7, #28]
 226 0052 002B     		cmp	r3, #0
 227 0054 19D0     		beq	.L12
 342:../FreeRTOS/queue.c **** 	{
 343:../FreeRTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) pcAllocatedBuffer; /*lint !e826 MISRA The buffer cannot be too small b
 228              		.loc 1 343 0
 229 0056 FB69     		ldr	r3, [r7, #28]
 230 0058 BB61     		str	r3, [r7, #24]
 344:../FreeRTOS/queue.c **** 
 345:../FreeRTOS/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 231              		.loc 1 345 0
 232 005a BB68     		ldr	r3, [r7, #8]
 233 005c 002B     		cmp	r3, #0
 234 005e 03D1     		bne	.L13
 346:../FreeRTOS/queue.c **** 		{
 347:../FreeRTOS/queue.c **** 			/* No RAM was allocated for the queue storage area, but PC head
 348:../FreeRTOS/queue.c **** 			cannot be set to NULL because NULL is used as a key to say the queue
 349:../FreeRTOS/queue.c **** 			is used as a mutex.  Therefore just set pcHead to point to the queue
 350:../FreeRTOS/queue.c **** 			as a benign value that is known to be within the memory map. */
 351:../FreeRTOS/queue.c **** 			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 235              		.loc 1 351 0
 236 0060 BB69     		ldr	r3, [r7, #24]
 237 0062 BA69     		ldr	r2, [r7, #24]
 238 0064 1A60     		str	r2, [r3]
 239 0066 04E0     		b	.L14
 240              	.L13:
 352:../FreeRTOS/queue.c **** 		}
 353:../FreeRTOS/queue.c **** 		else
 354:../FreeRTOS/queue.c **** 		{
 355:../FreeRTOS/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 356:../FreeRTOS/queue.c **** 			storage area - adding the padding bytes to get a better alignment. */
 357:../FreeRTOS/queue.c **** 			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 241              		.loc 1 357 0
 242 0068 FB69     		ldr	r3, [r7, #28]
 243 006a 03F14C02 		add	r2, r3, #76
 244 006e BB69     		ldr	r3, [r7, #24]
 245 0070 1A60     		str	r2, [r3]
 246              	.L14:
 358:../FreeRTOS/queue.c **** 		}
 359:../FreeRTOS/queue.c **** 
 360:../FreeRTOS/queue.c **** 		/* Initialise the queue members as described above where the queue type
 361:../FreeRTOS/queue.c **** 		is defined. */
 362:../FreeRTOS/queue.c **** 		pxNewQueue->uxLength = uxQueueLength;
 247              		.loc 1 362 0
 248 0072 BB69     		ldr	r3, [r7, #24]
 249 0074 FA68     		ldr	r2, [r7, #12]
 250 0076 DA63     		str	r2, [r3, #60]
 363:../FreeRTOS/queue.c **** 		pxNewQueue->uxItemSize = uxItemSize;
 251              		.loc 1 363 0
 252 0078 BB69     		ldr	r3, [r7, #24]
 253 007a BA68     		ldr	r2, [r7, #8]
 254 007c 1A64     		str	r2, [r3, #64]
 364:../FreeRTOS/queue.c **** 		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 255              		.loc 1 364 0
 256 007e B869     		ldr	r0, [r7, #24]
 257 0080 0121     		movs	r1, #1
 258 0082 FFF7FEFF 		bl	xQueueGenericReset
 365:../FreeRTOS/queue.c **** 
 366:../FreeRTOS/queue.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
 367:../FreeRTOS/queue.c **** 		{
 368:../FreeRTOS/queue.c **** 			pxNewQueue->ucQueueType = ucQueueType;
 369:../FreeRTOS/queue.c **** 		}
 370:../FreeRTOS/queue.c **** 		#endif /* configUSE_TRACE_FACILITY */
 371:../FreeRTOS/queue.c **** 
 372:../FreeRTOS/queue.c **** 		#if( configUSE_QUEUE_SETS == 1 )
 373:../FreeRTOS/queue.c **** 		{
 374:../FreeRTOS/queue.c **** 			pxNewQueue->pxQueueSetContainer = NULL;
 375:../FreeRTOS/queue.c **** 		}
 376:../FreeRTOS/queue.c **** 		#endif /* configUSE_QUEUE_SETS */
 377:../FreeRTOS/queue.c **** 
 378:../FreeRTOS/queue.c **** 		traceQUEUE_CREATE( pxNewQueue );
 379:../FreeRTOS/queue.c **** 		xReturn = pxNewQueue;
 259              		.loc 1 379 0
 260 0086 BB69     		ldr	r3, [r7, #24]
 261 0088 3B62     		str	r3, [r7, #32]
 262              	.L12:
 380:../FreeRTOS/queue.c **** 	}
 381:../FreeRTOS/queue.c **** 	else
 382:../FreeRTOS/queue.c **** 	{
 383:../FreeRTOS/queue.c **** 		mtCOVERAGE_TEST_MARKER();
 384:../FreeRTOS/queue.c **** 	}
 385:../FreeRTOS/queue.c **** 
 386:../FreeRTOS/queue.c **** 	configASSERT( xReturn );
 263              		.loc 1 386 0
 264 008a 3B6A     		ldr	r3, [r7, #32]
 265 008c 002B     		cmp	r3, #0
 266 008e 09D1     		bne	.L15
 267              	.LBB78:
 268              	.LBB79:
 269              		.loc 2 215 0 discriminator 1
 270              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 271 0090 4FF00703 			mov r3, #7												
 272 0094 83F31188 		msr basepri, r3											
 273 0098 BFF36F8F 		isb														
 274 009c BFF34F8F 		dsb														
 275              	
 276              	@ 0 "" 2
 277              		.thumb
 278 00a0 3B61     		str	r3, [r7, #16]
 279              	.L16:
 280              	.LBE79:
 281              	.LBE78:
 282              		.loc 1 386 0 discriminator 2
 283 00a2 FEE7     		b	.L16
 284              	.L15:
 387:../FreeRTOS/queue.c **** 
 388:../FreeRTOS/queue.c **** 	return xReturn;
 285              		.loc 1 388 0
 286 00a4 3B6A     		ldr	r3, [r7, #32]
 389:../FreeRTOS/queue.c **** }
 287              		.loc 1 389 0
 288 00a6 1846     		mov	r0, r3
 289 00a8 2837     		adds	r7, r7, #40
 290              		.cfi_def_cfa_offset 8
 291 00aa BD46     		mov	sp, r7
 292              		.cfi_def_cfa_register 13
 293              		@ sp needed
 294 00ac 80BD     		pop	{r7, pc}
 295              		.cfi_endproc
 296              	.LFE5:
 298 00ae 00BF     		.section	.text.xQueueCreateMutex,"ax",%progbits
 299              		.align	2
 300              		.global	xQueueCreateMutex
 301              		.thumb
 302              		.thumb_func
 304              	xQueueCreateMutex:
 305              	.LFB6:
 390:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 391:../FreeRTOS/queue.c **** 
 392:../FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 393:../FreeRTOS/queue.c **** 
 394:../FreeRTOS/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 395:../FreeRTOS/queue.c **** 	{
 306              		.loc 1 395 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 16
 309              		@ frame_needed = 1, uses_anonymous_args = 0
 310 0000 80B5     		push	{r7, lr}
 311              		.cfi_def_cfa_offset 8
 312              		.cfi_offset 7, -8
 313              		.cfi_offset 14, -4
 314 0002 84B0     		sub	sp, sp, #16
 315              		.cfi_def_cfa_offset 24
 316 0004 00AF     		add	r7, sp, #0
 317              		.cfi_def_cfa_register 7
 318 0006 0346     		mov	r3, r0
 319 0008 FB71     		strb	r3, [r7, #7]
 396:../FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 397:../FreeRTOS/queue.c **** 
 398:../FreeRTOS/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 399:../FreeRTOS/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 400:../FreeRTOS/queue.c **** 		( void ) ucQueueType;
 401:../FreeRTOS/queue.c **** 
 402:../FreeRTOS/queue.c **** 		/* Allocate the new queue structure. */
 403:../FreeRTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 320              		.loc 1 403 0
 321 000a 4C20     		movs	r0, #76
 322 000c FFF7FEFF 		bl	pvPortMalloc
 323 0010 F860     		str	r0, [r7, #12]
 404:../FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 324              		.loc 1 404 0
 325 0012 FB68     		ldr	r3, [r7, #12]
 326 0014 002B     		cmp	r3, #0
 327 0016 2CD0     		beq	.L19
 405:../FreeRTOS/queue.c **** 		{
 406:../FreeRTOS/queue.c **** 			/* Information required for priority inheritance. */
 407:../FreeRTOS/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 328              		.loc 1 407 0
 329 0018 FB68     		ldr	r3, [r7, #12]
 330 001a 0022     		movs	r2, #0
 331 001c 5A60     		str	r2, [r3, #4]
 408:../FreeRTOS/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 332              		.loc 1 408 0
 333 001e FB68     		ldr	r3, [r7, #12]
 334 0020 0022     		movs	r2, #0
 335 0022 1A60     		str	r2, [r3]
 409:../FreeRTOS/queue.c **** 
 410:../FreeRTOS/queue.c **** 			/* Queues used as a mutex no data is actually copied into or out
 411:../FreeRTOS/queue.c **** 			of the queue. */
 412:../FreeRTOS/queue.c **** 			pxNewQueue->pcWriteTo = NULL;
 336              		.loc 1 412 0
 337 0024 FB68     		ldr	r3, [r7, #12]
 338 0026 0022     		movs	r2, #0
 339 0028 9A60     		str	r2, [r3, #8]
 413:../FreeRTOS/queue.c **** 			pxNewQueue->u.pcReadFrom = NULL;
 340              		.loc 1 413 0
 341 002a FB68     		ldr	r3, [r7, #12]
 342 002c 0022     		movs	r2, #0
 343 002e DA60     		str	r2, [r3, #12]
 414:../FreeRTOS/queue.c **** 
 415:../FreeRTOS/queue.c **** 			/* Each mutex has a length of 1 (like a binary semaphore) and
 416:../FreeRTOS/queue.c **** 			an item size of 0 as nothing is actually copied into or out
 417:../FreeRTOS/queue.c **** 			of the mutex. */
 418:../FreeRTOS/queue.c **** 			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 344              		.loc 1 418 0
 345 0030 FB68     		ldr	r3, [r7, #12]
 346 0032 0022     		movs	r2, #0
 347 0034 9A63     		str	r2, [r3, #56]
 419:../FreeRTOS/queue.c **** 			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 348              		.loc 1 419 0
 349 0036 FB68     		ldr	r3, [r7, #12]
 350 0038 0122     		movs	r2, #1
 351 003a DA63     		str	r2, [r3, #60]
 420:../FreeRTOS/queue.c **** 			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 352              		.loc 1 420 0
 353 003c FB68     		ldr	r3, [r7, #12]
 354 003e 0022     		movs	r2, #0
 355 0040 1A64     		str	r2, [r3, #64]
 421:../FreeRTOS/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 356              		.loc 1 421 0
 357 0042 FB68     		ldr	r3, [r7, #12]
 358 0044 4FF0FF32 		mov	r2, #-1
 359 0048 5A64     		str	r2, [r3, #68]
 422:../FreeRTOS/queue.c **** 			pxNewQueue->xTxLock = queueUNLOCKED;
 360              		.loc 1 422 0
 361 004a FB68     		ldr	r3, [r7, #12]
 362 004c 4FF0FF32 		mov	r2, #-1
 363 0050 9A64     		str	r2, [r3, #72]
 423:../FreeRTOS/queue.c **** 
 424:../FreeRTOS/queue.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 425:../FreeRTOS/queue.c **** 			{
 426:../FreeRTOS/queue.c **** 				pxNewQueue->ucQueueType = ucQueueType;
 427:../FreeRTOS/queue.c **** 			}
 428:../FreeRTOS/queue.c **** 			#endif
 429:../FreeRTOS/queue.c **** 
 430:../FreeRTOS/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
 431:../FreeRTOS/queue.c **** 			{
 432:../FreeRTOS/queue.c **** 				pxNewQueue->pxQueueSetContainer = NULL;
 433:../FreeRTOS/queue.c **** 			}
 434:../FreeRTOS/queue.c **** 			#endif
 435:../FreeRTOS/queue.c **** 
 436:../FreeRTOS/queue.c **** 			/* Ensure the event queues start with the correct state. */
 437:../FreeRTOS/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 364              		.loc 1 437 0
 365 0052 FB68     		ldr	r3, [r7, #12]
 366 0054 1033     		adds	r3, r3, #16
 367 0056 1846     		mov	r0, r3
 368 0058 FFF7FEFF 		bl	vListInitialise
 438:../FreeRTOS/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 369              		.loc 1 438 0
 370 005c FB68     		ldr	r3, [r7, #12]
 371 005e 2433     		adds	r3, r3, #36
 372 0060 1846     		mov	r0, r3
 373 0062 FFF7FEFF 		bl	vListInitialise
 439:../FreeRTOS/queue.c **** 
 440:../FreeRTOS/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 441:../FreeRTOS/queue.c **** 
 442:../FreeRTOS/queue.c **** 			/* Start with the semaphore in the expected state. */
 443:../FreeRTOS/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 374              		.loc 1 443 0
 375 0066 F868     		ldr	r0, [r7, #12]
 376 0068 0021     		movs	r1, #0
 377 006a 0022     		movs	r2, #0
 378 006c 0023     		movs	r3, #0
 379 006e FFF7FEFF 		bl	xQueueGenericSend
 380              	.L19:
 444:../FreeRTOS/queue.c **** 		}
 445:../FreeRTOS/queue.c **** 		else
 446:../FreeRTOS/queue.c **** 		{
 447:../FreeRTOS/queue.c **** 			traceCREATE_MUTEX_FAILED();
 448:../FreeRTOS/queue.c **** 		}
 449:../FreeRTOS/queue.c **** 
 450:../FreeRTOS/queue.c **** 		configASSERT( pxNewQueue );
 381              		.loc 1 450 0
 382 0072 FB68     		ldr	r3, [r7, #12]
 383 0074 002B     		cmp	r3, #0
 384 0076 09D1     		bne	.L20
 385              	.LBB80:
 386              	.LBB81:
 387              		.loc 2 215 0 discriminator 1
 388              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 389 0078 4FF00703 			mov r3, #7												
 390 007c 83F31188 		msr basepri, r3											
 391 0080 BFF36F8F 		isb														
 392 0084 BFF34F8F 		dsb														
 393              	
 394              	@ 0 "" 2
 395              		.thumb
 396 0088 BB60     		str	r3, [r7, #8]
 397              	.L21:
 398              	.LBE81:
 399              	.LBE80:
 400              		.loc 1 450 0 discriminator 1
 401 008a FEE7     		b	.L21
 402              	.L20:
 451:../FreeRTOS/queue.c **** 		return pxNewQueue;
 403              		.loc 1 451 0
 404 008c FB68     		ldr	r3, [r7, #12]
 452:../FreeRTOS/queue.c **** 	}
 405              		.loc 1 452 0
 406 008e 1846     		mov	r0, r3
 407 0090 1037     		adds	r7, r7, #16
 408              		.cfi_def_cfa_offset 8
 409 0092 BD46     		mov	sp, r7
 410              		.cfi_def_cfa_register 13
 411              		@ sp needed
 412 0094 80BD     		pop	{r7, pc}
 413              		.cfi_endproc
 414              	.LFE6:
 416 0096 00BF     		.section	.text.xQueueGetMutexHolder,"ax",%progbits
 417              		.align	2
 418              		.global	xQueueGetMutexHolder
 419              		.thumb
 420              		.thumb_func
 422              	xQueueGetMutexHolder:
 423              	.LFB7:
 453:../FreeRTOS/queue.c **** 
 454:../FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 455:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 456:../FreeRTOS/queue.c **** 
 457:../FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 458:../FreeRTOS/queue.c **** 
 459:../FreeRTOS/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 460:../FreeRTOS/queue.c **** 	{
 424              		.loc 1 460 0
 425              		.cfi_startproc
 426              		@ args = 0, pretend = 0, frame = 16
 427              		@ frame_needed = 1, uses_anonymous_args = 0
 428 0000 80B5     		push	{r7, lr}
 429              		.cfi_def_cfa_offset 8
 430              		.cfi_offset 7, -8
 431              		.cfi_offset 14, -4
 432 0002 84B0     		sub	sp, sp, #16
 433              		.cfi_def_cfa_offset 24
 434 0004 00AF     		add	r7, sp, #0
 435              		.cfi_def_cfa_register 7
 436 0006 7860     		str	r0, [r7, #4]
 461:../FreeRTOS/queue.c **** 	void *pxReturn;
 462:../FreeRTOS/queue.c **** 
 463:../FreeRTOS/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 464:../FreeRTOS/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 465:../FreeRTOS/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 466:../FreeRTOS/queue.c **** 		identity of the mutex holder, as the holder may change between the
 467:../FreeRTOS/queue.c **** 		following critical section exiting and the function returning. */
 468:../FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
 437              		.loc 1 468 0
 438 0008 FFF7FEFF 		bl	vPortEnterCritical
 469:../FreeRTOS/queue.c **** 		{
 470:../FreeRTOS/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 439              		.loc 1 470 0
 440 000c 7B68     		ldr	r3, [r7, #4]
 441 000e 1B68     		ldr	r3, [r3]
 442 0010 002B     		cmp	r3, #0
 443 0012 03D1     		bne	.L24
 471:../FreeRTOS/queue.c **** 			{
 472:../FreeRTOS/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 444              		.loc 1 472 0
 445 0014 7B68     		ldr	r3, [r7, #4]
 446 0016 5B68     		ldr	r3, [r3, #4]
 447 0018 FB60     		str	r3, [r7, #12]
 448 001a 01E0     		b	.L25
 449              	.L24:
 473:../FreeRTOS/queue.c **** 			}
 474:../FreeRTOS/queue.c **** 			else
 475:../FreeRTOS/queue.c **** 			{
 476:../FreeRTOS/queue.c **** 				pxReturn = NULL;
 450              		.loc 1 476 0
 451 001c 0023     		movs	r3, #0
 452 001e FB60     		str	r3, [r7, #12]
 453              	.L25:
 477:../FreeRTOS/queue.c **** 			}
 478:../FreeRTOS/queue.c **** 		}
 479:../FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
 454              		.loc 1 479 0
 455 0020 FFF7FEFF 		bl	vPortExitCritical
 480:../FreeRTOS/queue.c **** 
 481:../FreeRTOS/queue.c **** 		return pxReturn;
 456              		.loc 1 481 0
 457 0024 FB68     		ldr	r3, [r7, #12]
 482:../FreeRTOS/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 458              		.loc 1 482 0
 459 0026 1846     		mov	r0, r3
 460 0028 1037     		adds	r7, r7, #16
 461              		.cfi_def_cfa_offset 8
 462 002a BD46     		mov	sp, r7
 463              		.cfi_def_cfa_register 13
 464              		@ sp needed
 465 002c 80BD     		pop	{r7, pc}
 466              		.cfi_endproc
 467              	.LFE7:
 469 002e 00BF     		.section	.text.xQueueGenericSend,"ax",%progbits
 470              		.align	2
 471              		.global	xQueueGenericSend
 472              		.thumb
 473              		.thumb_func
 475              	xQueueGenericSend:
 476              	.LFB8:
 483:../FreeRTOS/queue.c **** 
 484:../FreeRTOS/queue.c **** #endif
 485:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 486:../FreeRTOS/queue.c **** 
 487:../FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 488:../FreeRTOS/queue.c **** 
 489:../FreeRTOS/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 490:../FreeRTOS/queue.c **** 	{
 491:../FreeRTOS/queue.c **** 	BaseType_t xReturn;
 492:../FreeRTOS/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 493:../FreeRTOS/queue.c **** 
 494:../FreeRTOS/queue.c **** 		configASSERT( pxMutex );
 495:../FreeRTOS/queue.c **** 
 496:../FreeRTOS/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 497:../FreeRTOS/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 498:../FreeRTOS/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 499:../FreeRTOS/queue.c **** 		this is the only condition we are interested in it does not matter if
 500:../FreeRTOS/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 501:../FreeRTOS/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 502:../FreeRTOS/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 503:../FreeRTOS/queue.c **** 		{
 504:../FreeRTOS/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 505:../FreeRTOS/queue.c **** 
 506:../FreeRTOS/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 507:../FreeRTOS/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 508:../FreeRTOS/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 509:../FreeRTOS/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 510:../FreeRTOS/queue.c **** 			uxRecursiveCallCount member. */
 511:../FreeRTOS/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 512:../FreeRTOS/queue.c **** 
 513:../FreeRTOS/queue.c **** 			/* Have we unwound the call count? */
 514:../FreeRTOS/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 515:../FreeRTOS/queue.c **** 			{
 516:../FreeRTOS/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 517:../FreeRTOS/queue.c **** 				task that might be waiting to access the mutex. */
 518:../FreeRTOS/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 519:../FreeRTOS/queue.c **** 			}
 520:../FreeRTOS/queue.c **** 			else
 521:../FreeRTOS/queue.c **** 			{
 522:../FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 523:../FreeRTOS/queue.c **** 			}
 524:../FreeRTOS/queue.c **** 
 525:../FreeRTOS/queue.c **** 			xReturn = pdPASS;
 526:../FreeRTOS/queue.c **** 		}
 527:../FreeRTOS/queue.c **** 		else
 528:../FreeRTOS/queue.c **** 		{
 529:../FreeRTOS/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 530:../FreeRTOS/queue.c **** 			holder. */
 531:../FreeRTOS/queue.c **** 			xReturn = pdFAIL;
 532:../FreeRTOS/queue.c **** 
 533:../FreeRTOS/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 534:../FreeRTOS/queue.c **** 		}
 535:../FreeRTOS/queue.c **** 
 536:../FreeRTOS/queue.c **** 		return xReturn;
 537:../FreeRTOS/queue.c **** 	}
 538:../FreeRTOS/queue.c **** 
 539:../FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 540:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 541:../FreeRTOS/queue.c **** 
 542:../FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 543:../FreeRTOS/queue.c **** 
 544:../FreeRTOS/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 545:../FreeRTOS/queue.c **** 	{
 546:../FreeRTOS/queue.c **** 	BaseType_t xReturn;
 547:../FreeRTOS/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 548:../FreeRTOS/queue.c **** 
 549:../FreeRTOS/queue.c **** 		configASSERT( pxMutex );
 550:../FreeRTOS/queue.c **** 
 551:../FreeRTOS/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 552:../FreeRTOS/queue.c **** 		xQueueGiveMutexRecursive(). */
 553:../FreeRTOS/queue.c **** 
 554:../FreeRTOS/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 555:../FreeRTOS/queue.c **** 
 556:../FreeRTOS/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 557:../FreeRTOS/queue.c **** 		{
 558:../FreeRTOS/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 559:../FreeRTOS/queue.c **** 			xReturn = pdPASS;
 560:../FreeRTOS/queue.c **** 		}
 561:../FreeRTOS/queue.c **** 		else
 562:../FreeRTOS/queue.c **** 		{
 563:../FreeRTOS/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 564:../FreeRTOS/queue.c **** 
 565:../FreeRTOS/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 566:../FreeRTOS/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 567:../FreeRTOS/queue.c **** 			before reaching here. */
 568:../FreeRTOS/queue.c **** 			if( xReturn == pdPASS )
 569:../FreeRTOS/queue.c **** 			{
 570:../FreeRTOS/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 571:../FreeRTOS/queue.c **** 			}
 572:../FreeRTOS/queue.c **** 			else
 573:../FreeRTOS/queue.c **** 			{
 574:../FreeRTOS/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 575:../FreeRTOS/queue.c **** 			}
 576:../FreeRTOS/queue.c **** 		}
 577:../FreeRTOS/queue.c **** 
 578:../FreeRTOS/queue.c **** 		return xReturn;
 579:../FreeRTOS/queue.c **** 	}
 580:../FreeRTOS/queue.c **** 
 581:../FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 582:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 583:../FreeRTOS/queue.c **** 
 584:../FreeRTOS/queue.c **** #if ( configUSE_COUNTING_SEMAPHORES == 1 )
 585:../FreeRTOS/queue.c **** 
 586:../FreeRTOS/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 587:../FreeRTOS/queue.c **** 	{
 588:../FreeRTOS/queue.c **** 	QueueHandle_t xHandle;
 589:../FreeRTOS/queue.c **** 
 590:../FreeRTOS/queue.c **** 		configASSERT( uxMaxCount != 0 );
 591:../FreeRTOS/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 592:../FreeRTOS/queue.c **** 
 593:../FreeRTOS/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 594:../FreeRTOS/queue.c **** 
 595:../FreeRTOS/queue.c **** 		if( xHandle != NULL )
 596:../FreeRTOS/queue.c **** 		{
 597:../FreeRTOS/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 598:../FreeRTOS/queue.c **** 
 599:../FreeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 600:../FreeRTOS/queue.c **** 		}
 601:../FreeRTOS/queue.c **** 		else
 602:../FreeRTOS/queue.c **** 		{
 603:../FreeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 604:../FreeRTOS/queue.c **** 		}
 605:../FreeRTOS/queue.c **** 
 606:../FreeRTOS/queue.c **** 		configASSERT( xHandle );
 607:../FreeRTOS/queue.c **** 		return xHandle;
 608:../FreeRTOS/queue.c **** 	}
 609:../FreeRTOS/queue.c **** 
 610:../FreeRTOS/queue.c **** #endif /* configUSE_COUNTING_SEMAPHORES */
 611:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 612:../FreeRTOS/queue.c **** 
 613:../FreeRTOS/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 614:../FreeRTOS/queue.c **** {
 477              		.loc 1 614 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 56
 480              		@ frame_needed = 1, uses_anonymous_args = 0
 481 0000 80B5     		push	{r7, lr}
 482              		.cfi_def_cfa_offset 8
 483              		.cfi_offset 7, -8
 484              		.cfi_offset 14, -4
 485 0002 8EB0     		sub	sp, sp, #56
 486              		.cfi_def_cfa_offset 64
 487 0004 00AF     		add	r7, sp, #0
 488              		.cfi_def_cfa_register 7
 489 0006 F860     		str	r0, [r7, #12]
 490 0008 B960     		str	r1, [r7, #8]
 491 000a 7A60     		str	r2, [r7, #4]
 492 000c 3B60     		str	r3, [r7]
 615:../FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 493              		.loc 1 615 0
 494 000e 0023     		movs	r3, #0
 495 0010 7B63     		str	r3, [r7, #52]
 616:../FreeRTOS/queue.c **** TimeOut_t xTimeOut;
 617:../FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 496              		.loc 1 617 0
 497 0012 FB68     		ldr	r3, [r7, #12]
 498 0014 3B63     		str	r3, [r7, #48]
 618:../FreeRTOS/queue.c **** 
 619:../FreeRTOS/queue.c **** 	configASSERT( pxQueue );
 499              		.loc 1 619 0
 500 0016 3B6B     		ldr	r3, [r7, #48]
 501 0018 002B     		cmp	r3, #0
 502 001a 09D1     		bne	.L28
 503              	.LBB82:
 504              	.LBB83:
 505              		.loc 2 215 0 discriminator 1
 506              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 507 001c 4FF00703 			mov r3, #7												
 508 0020 83F31188 		msr basepri, r3											
 509 0024 BFF36F8F 		isb														
 510 0028 BFF34F8F 		dsb														
 511              	
 512              	@ 0 "" 2
 513              		.thumb
 514 002c BB62     		str	r3, [r7, #40]
 515              	.L29:
 516              	.LBE83:
 517              	.LBE82:
 518              		.loc 1 619 0 discriminator 1
 519 002e FEE7     		b	.L29
 520              	.L28:
 620:../FreeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 521              		.loc 1 620 0
 522 0030 BB68     		ldr	r3, [r7, #8]
 523 0032 002B     		cmp	r3, #0
 524 0034 03D1     		bne	.L30
 525              		.loc 1 620 0 is_stmt 0 discriminator 2
 526 0036 3B6B     		ldr	r3, [r7, #48]
 527 0038 1B6C     		ldr	r3, [r3, #64]
 528 003a 002B     		cmp	r3, #0
 529 003c 01D1     		bne	.L31
 530              	.L30:
 531              		.loc 1 620 0 discriminator 3
 532 003e 0123     		movs	r3, #1
 533 0040 00E0     		b	.L32
 534              	.L31:
 535              		.loc 1 620 0 discriminator 4
 536 0042 0023     		movs	r3, #0
 537              	.L32:
 538              		.loc 1 620 0 discriminator 6
 539 0044 002B     		cmp	r3, #0
 540 0046 09D1     		bne	.L33
 541              	.LBB84:
 542              	.LBB85:
 543              		.loc 2 215 0 is_stmt 1 discriminator 7
 544              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 545 0048 4FF00703 			mov r3, #7												
 546 004c 83F31188 		msr basepri, r3											
 547 0050 BFF36F8F 		isb														
 548 0054 BFF34F8F 		dsb														
 549              	
 550              	@ 0 "" 2
 551              		.thumb
 552 0058 7B62     		str	r3, [r7, #36]
 553              	.L34:
 554              	.LBE85:
 555              	.LBE84:
 556              		.loc 1 620 0 discriminator 2
 557 005a FEE7     		b	.L34
 558              	.L33:
 621:../FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 559              		.loc 1 621 0
 560 005c 3B68     		ldr	r3, [r7]
 561 005e 022B     		cmp	r3, #2
 562 0060 03D1     		bne	.L35
 563              		.loc 1 621 0 is_stmt 0 discriminator 2
 564 0062 3B6B     		ldr	r3, [r7, #48]
 565 0064 DB6B     		ldr	r3, [r3, #60]
 566 0066 012B     		cmp	r3, #1
 567 0068 01D1     		bne	.L36
 568              	.L35:
 569              		.loc 1 621 0 discriminator 3
 570 006a 0123     		movs	r3, #1
 571 006c 00E0     		b	.L37
 572              	.L36:
 573              		.loc 1 621 0 discriminator 4
 574 006e 0023     		movs	r3, #0
 575              	.L37:
 576              		.loc 1 621 0 discriminator 6
 577 0070 002B     		cmp	r3, #0
 578 0072 09D1     		bne	.L38
 579              	.LBB86:
 580              	.LBB87:
 581              		.loc 2 215 0 is_stmt 1 discriminator 7
 582              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 583 0074 4FF00703 			mov r3, #7												
 584 0078 83F31188 		msr basepri, r3											
 585 007c BFF36F8F 		isb														
 586 0080 BFF34F8F 		dsb														
 587              	
 588              	@ 0 "" 2
 589              		.thumb
 590 0084 3B62     		str	r3, [r7, #32]
 591              	.L39:
 592              	.LBE87:
 593              	.LBE86:
 594              		.loc 1 621 0 discriminator 3
 595 0086 FEE7     		b	.L39
 596              	.L38:
 622:../FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 623:../FreeRTOS/queue.c **** 	{
 624:../FreeRTOS/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 597              		.loc 1 624 0
 598 0088 FFF7FEFF 		bl	xTaskGetSchedulerState
 599 008c 0346     		mov	r3, r0
 600 008e 002B     		cmp	r3, #0
 601 0090 02D1     		bne	.L40
 602              		.loc 1 624 0 is_stmt 0 discriminator 2
 603 0092 7B68     		ldr	r3, [r7, #4]
 604 0094 002B     		cmp	r3, #0
 605 0096 01D1     		bne	.L41
 606              	.L40:
 607              		.loc 1 624 0 discriminator 3
 608 0098 0123     		movs	r3, #1
 609 009a 00E0     		b	.L42
 610              	.L41:
 611              		.loc 1 624 0 discriminator 4
 612 009c 0023     		movs	r3, #0
 613              	.L42:
 614              		.loc 1 624 0 discriminator 6
 615 009e 002B     		cmp	r3, #0
 616 00a0 09D1     		bne	.L43
 617              	.LBB88:
 618              	.LBB89:
 619              		.loc 2 215 0 is_stmt 1 discriminator 7
 620              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 621 00a2 4FF00703 			mov r3, #7												
 622 00a6 83F31188 		msr basepri, r3											
 623 00aa BFF36F8F 		isb														
 624 00ae BFF34F8F 		dsb														
 625              	
 626              	@ 0 "" 2
 627              		.thumb
 628 00b2 FB61     		str	r3, [r7, #28]
 629              	.L44:
 630              	.LBE89:
 631              	.LBE88:
 632              		.loc 1 624 0 discriminator 4
 633 00b4 FEE7     		b	.L44
 634              	.L43:
 625:../FreeRTOS/queue.c **** 	}
 626:../FreeRTOS/queue.c **** 	#endif
 627:../FreeRTOS/queue.c **** 
 628:../FreeRTOS/queue.c **** 
 629:../FreeRTOS/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 630:../FreeRTOS/queue.c **** 	statements within the function itself.  This is done in the interest
 631:../FreeRTOS/queue.c **** 	of execution time efficiency. */
 632:../FreeRTOS/queue.c **** 	for( ;; )
 633:../FreeRTOS/queue.c **** 	{
 634:../FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
 635              		.loc 1 634 0
 636 00b6 FFF7FEFF 		bl	vPortEnterCritical
 635:../FreeRTOS/queue.c **** 		{
 636:../FreeRTOS/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 637:../FreeRTOS/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 638:../FreeRTOS/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 639:../FreeRTOS/queue.c **** 			queue is full. */
 640:../FreeRTOS/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 637              		.loc 1 640 0
 638 00ba 3B6B     		ldr	r3, [r7, #48]
 639 00bc 9A6B     		ldr	r2, [r3, #56]
 640 00be 3B6B     		ldr	r3, [r7, #48]
 641 00c0 DB6B     		ldr	r3, [r3, #60]
 642 00c2 9A42     		cmp	r2, r3
 643 00c4 02D3     		bcc	.L45
 644              		.loc 1 640 0 is_stmt 0 discriminator 1
 645 00c6 3B68     		ldr	r3, [r7]
 646 00c8 022B     		cmp	r3, #2
 647 00ca 12D1     		bne	.L46
 648              	.L45:
 641:../FreeRTOS/queue.c **** 			{
 642:../FreeRTOS/queue.c **** 				traceQUEUE_SEND( pxQueue );
 643:../FreeRTOS/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 649              		.loc 1 643 0 is_stmt 1
 650 00cc 386B     		ldr	r0, [r7, #48]
 651 00ce B968     		ldr	r1, [r7, #8]
 652 00d0 3A68     		ldr	r2, [r7]
 653 00d2 FFF7FEFF 		bl	prvCopyDataToQueue
 654 00d6 F862     		str	r0, [r7, #44]
 644:../FreeRTOS/queue.c **** 
 645:../FreeRTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 646:../FreeRTOS/queue.c **** 				{
 647:../FreeRTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 648:../FreeRTOS/queue.c **** 					{
 649:../FreeRTOS/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
 650:../FreeRTOS/queue.c **** 						{
 651:../FreeRTOS/queue.c **** 							/* The queue is a member of a queue set, and posting
 652:../FreeRTOS/queue.c **** 							to the queue set caused a higher priority task to
 653:../FreeRTOS/queue.c **** 							unblock. A context switch is required. */
 654:../FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 655:../FreeRTOS/queue.c **** 						}
 656:../FreeRTOS/queue.c **** 						else
 657:../FreeRTOS/queue.c **** 						{
 658:../FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 659:../FreeRTOS/queue.c **** 						}
 660:../FreeRTOS/queue.c **** 					}
 661:../FreeRTOS/queue.c **** 					else
 662:../FreeRTOS/queue.c **** 					{
 663:../FreeRTOS/queue.c **** 						/* If there was a task waiting for data to arrive on the
 664:../FreeRTOS/queue.c **** 						queue then unblock it now. */
 665:../FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 666:../FreeRTOS/queue.c **** 						{
 667:../FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 668:../FreeRTOS/queue.c **** 							{
 669:../FreeRTOS/queue.c **** 								/* The unblocked task has a priority higher than
 670:../FreeRTOS/queue.c **** 								our own so yield immediately.  Yes it is ok to
 671:../FreeRTOS/queue.c **** 								do this from within the critical section - the
 672:../FreeRTOS/queue.c **** 								kernel takes care of that. */
 673:../FreeRTOS/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 674:../FreeRTOS/queue.c **** 							}
 675:../FreeRTOS/queue.c **** 							else
 676:../FreeRTOS/queue.c **** 							{
 677:../FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 678:../FreeRTOS/queue.c **** 							}
 679:../FreeRTOS/queue.c **** 						}
 680:../FreeRTOS/queue.c **** 						else if( xYieldRequired != pdFALSE )
 681:../FreeRTOS/queue.c **** 						{
 682:../FreeRTOS/queue.c **** 							/* This path is a special case that will only get
 683:../FreeRTOS/queue.c **** 							executed if the task was holding multiple mutexes
 684:../FreeRTOS/queue.c **** 							and the mutexes were given back in an order that is
 685:../FreeRTOS/queue.c **** 							different to that in which they were taken. */
 686:../FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 687:../FreeRTOS/queue.c **** 						}
 688:../FreeRTOS/queue.c **** 						else
 689:../FreeRTOS/queue.c **** 						{
 690:../FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 691:../FreeRTOS/queue.c **** 						}
 692:../FreeRTOS/queue.c **** 					}
 693:../FreeRTOS/queue.c **** 				}
 694:../FreeRTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 695:../FreeRTOS/queue.c **** 				{
 696:../FreeRTOS/queue.c **** 					/* If there was a task waiting for data to arrive on the
 697:../FreeRTOS/queue.c **** 					queue then unblock it now. */
 698:../FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 655              		.loc 1 698 0
 656 00d8 3B6B     		ldr	r3, [r7, #48]
 657 00da 5B6A     		ldr	r3, [r3, #36]
 658 00dc 002B     		cmp	r3, #0
 659 00de 04D0     		beq	.L47
 699:../FreeRTOS/queue.c **** 					{
 700:../FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 660              		.loc 1 700 0
 661 00e0 3B6B     		ldr	r3, [r7, #48]
 662 00e2 2433     		adds	r3, r3, #36
 663 00e4 1846     		mov	r0, r3
 664 00e6 FFF7FEFF 		bl	xTaskRemoveFromEventList
 665              	.L47:
 701:../FreeRTOS/queue.c **** 						{
 702:../FreeRTOS/queue.c **** 							/* The unblocked task has a priority higher than
 703:../FreeRTOS/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 704:../FreeRTOS/queue.c **** 							this from within the critical section - the kernel
 705:../FreeRTOS/queue.c **** 							takes care of that. */
 706:../FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 707:../FreeRTOS/queue.c **** 						}
 708:../FreeRTOS/queue.c **** 						else
 709:../FreeRTOS/queue.c **** 						{
 710:../FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 711:../FreeRTOS/queue.c **** 						}
 712:../FreeRTOS/queue.c **** 					}
 713:../FreeRTOS/queue.c **** 					else if( xYieldRequired != pdFALSE )
 714:../FreeRTOS/queue.c **** 					{
 715:../FreeRTOS/queue.c **** 						/* This path is a special case that will only get
 716:../FreeRTOS/queue.c **** 						executed if the task was holding multiple mutexes and
 717:../FreeRTOS/queue.c **** 						the mutexes were given back in an order that is
 718:../FreeRTOS/queue.c **** 						different to that in which they were taken. */
 719:../FreeRTOS/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 720:../FreeRTOS/queue.c **** 					}
 721:../FreeRTOS/queue.c **** 					else
 722:../FreeRTOS/queue.c **** 					{
 723:../FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 724:../FreeRTOS/queue.c **** 					}
 725:../FreeRTOS/queue.c **** 				}
 726:../FreeRTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 727:../FreeRTOS/queue.c **** 
 728:../FreeRTOS/queue.c **** 				taskEXIT_CRITICAL();
 666              		.loc 1 728 0
 667 00ea FFF7FEFF 		bl	vPortExitCritical
 729:../FreeRTOS/queue.c **** 				return pdPASS;
 668              		.loc 1 729 0
 669 00ee 0123     		movs	r3, #1
 670 00f0 5FE0     		b	.L58
 671              	.L46:
 730:../FreeRTOS/queue.c **** 			}
 731:../FreeRTOS/queue.c **** 			else
 732:../FreeRTOS/queue.c **** 			{
 733:../FreeRTOS/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 672              		.loc 1 733 0
 673 00f2 7B68     		ldr	r3, [r7, #4]
 674 00f4 002B     		cmp	r3, #0
 675 00f6 03D1     		bne	.L49
 734:../FreeRTOS/queue.c **** 				{
 735:../FreeRTOS/queue.c **** 					/* The queue was full and no block time is specified (or
 736:../FreeRTOS/queue.c **** 					the block time has expired) so leave now. */
 737:../FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
 676              		.loc 1 737 0
 677 00f8 FFF7FEFF 		bl	vPortExitCritical
 738:../FreeRTOS/queue.c **** 
 739:../FreeRTOS/queue.c **** 					/* Return to the original privilege level before exiting
 740:../FreeRTOS/queue.c **** 					the function. */
 741:../FreeRTOS/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 742:../FreeRTOS/queue.c **** 					return errQUEUE_FULL;
 678              		.loc 1 742 0
 679 00fc 0023     		movs	r3, #0
 680 00fe 58E0     		b	.L58
 681              	.L49:
 743:../FreeRTOS/queue.c **** 				}
 744:../FreeRTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 682              		.loc 1 744 0
 683 0100 7B6B     		ldr	r3, [r7, #52]
 684 0102 002B     		cmp	r3, #0
 685 0104 06D1     		bne	.L50
 745:../FreeRTOS/queue.c **** 				{
 746:../FreeRTOS/queue.c **** 					/* The queue was full and a block time was specified so
 747:../FreeRTOS/queue.c **** 					configure the timeout structure. */
 748:../FreeRTOS/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 686              		.loc 1 748 0
 687 0106 07F11403 		add	r3, r7, #20
 688 010a 1846     		mov	r0, r3
 689 010c FFF7FEFF 		bl	vTaskSetTimeOutState
 749:../FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 690              		.loc 1 749 0
 691 0110 0123     		movs	r3, #1
 692 0112 7B63     		str	r3, [r7, #52]
 693              	.L50:
 750:../FreeRTOS/queue.c **** 				}
 751:../FreeRTOS/queue.c **** 				else
 752:../FreeRTOS/queue.c **** 				{
 753:../FreeRTOS/queue.c **** 					/* Entry time was already set. */
 754:../FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 755:../FreeRTOS/queue.c **** 				}
 756:../FreeRTOS/queue.c **** 			}
 757:../FreeRTOS/queue.c **** 		}
 758:../FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
 694              		.loc 1 758 0
 695 0114 FFF7FEFF 		bl	vPortExitCritical
 759:../FreeRTOS/queue.c **** 
 760:../FreeRTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 761:../FreeRTOS/queue.c **** 		now the critical section has been exited. */
 762:../FreeRTOS/queue.c **** 
 763:../FreeRTOS/queue.c **** 		vTaskSuspendAll();
 696              		.loc 1 763 0
 697 0118 FFF7FEFF 		bl	vTaskSuspendAll
 764:../FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 698              		.loc 1 764 0
 699 011c FFF7FEFF 		bl	vPortEnterCritical
 700 0120 3B6B     		ldr	r3, [r7, #48]
 701 0122 5B6C     		ldr	r3, [r3, #68]
 702 0124 B3F1FF3F 		cmp	r3, #-1
 703 0128 02D1     		bne	.L51
 704              		.loc 1 764 0 is_stmt 0 discriminator 1
 705 012a 3B6B     		ldr	r3, [r7, #48]
 706 012c 0022     		movs	r2, #0
 707 012e 5A64     		str	r2, [r3, #68]
 708              	.L51:
 709              		.loc 1 764 0 discriminator 3
 710 0130 3B6B     		ldr	r3, [r7, #48]
 711 0132 9B6C     		ldr	r3, [r3, #72]
 712 0134 B3F1FF3F 		cmp	r3, #-1
 713 0138 02D1     		bne	.L52
 714              		.loc 1 764 0 discriminator 4
 715 013a 3B6B     		ldr	r3, [r7, #48]
 716 013c 0022     		movs	r2, #0
 717 013e 9A64     		str	r2, [r3, #72]
 718              	.L52:
 719              		.loc 1 764 0 discriminator 6
 720 0140 FFF7FEFF 		bl	vPortExitCritical
 765:../FreeRTOS/queue.c **** 
 766:../FreeRTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 767:../FreeRTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 721              		.loc 1 767 0 is_stmt 1 discriminator 6
 722 0144 07F11402 		add	r2, r7, #20
 723 0148 3B1D     		adds	r3, r7, #4
 724 014a 1046     		mov	r0, r2
 725 014c 1946     		mov	r1, r3
 726 014e FFF7FEFF 		bl	xTaskCheckForTimeOut
 727 0152 0346     		mov	r3, r0
 728 0154 002B     		cmp	r3, #0
 729 0156 24D1     		bne	.L53
 768:../FreeRTOS/queue.c **** 		{
 769:../FreeRTOS/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 730              		.loc 1 769 0
 731 0158 386B     		ldr	r0, [r7, #48]
 732 015a FFF7FEFF 		bl	prvIsQueueFull
 733 015e 0346     		mov	r3, r0
 734 0160 002B     		cmp	r3, #0
 735 0162 18D0     		beq	.L54
 770:../FreeRTOS/queue.c **** 			{
 771:../FreeRTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 772:../FreeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 736              		.loc 1 772 0
 737 0164 3B6B     		ldr	r3, [r7, #48]
 738 0166 03F11002 		add	r2, r3, #16
 739 016a 7B68     		ldr	r3, [r7, #4]
 740 016c 1046     		mov	r0, r2
 741 016e 1946     		mov	r1, r3
 742 0170 FFF7FEFF 		bl	vTaskPlaceOnEventList
 773:../FreeRTOS/queue.c **** 
 774:../FreeRTOS/queue.c **** 				/* Unlocking the queue means queue events can effect the
 775:../FreeRTOS/queue.c **** 				event list.  It is possible	that interrupts occurring now
 776:../FreeRTOS/queue.c **** 				remove this task from the event	list again - but as the
 777:../FreeRTOS/queue.c **** 				scheduler is suspended the task will go onto the pending
 778:../FreeRTOS/queue.c **** 				ready last instead of the actual ready list. */
 779:../FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 743              		.loc 1 779 0
 744 0174 386B     		ldr	r0, [r7, #48]
 745 0176 FFF7FEFF 		bl	prvUnlockQueue
 780:../FreeRTOS/queue.c **** 
 781:../FreeRTOS/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 782:../FreeRTOS/queue.c **** 				ready list into the ready list - so it is feasible that this
 783:../FreeRTOS/queue.c **** 				task is already in a ready list before it yields - in which
 784:../FreeRTOS/queue.c **** 				case the yield will not cause a context switch unless there
 785:../FreeRTOS/queue.c **** 				is also a higher priority task in the pending ready list. */
 786:../FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 746              		.loc 1 786 0
 747 017a FFF7FEFF 		bl	xTaskResumeAll
 748 017e 0346     		mov	r3, r0
 749 0180 002B     		cmp	r3, #0
 750 0182 15D1     		bne	.L57
 787:../FreeRTOS/queue.c **** 				{
 788:../FreeRTOS/queue.c **** 					portYIELD_WITHIN_API();
 751              		.loc 1 788 0
 752 0184 0D4B     		ldr	r3, .L59
 753 0186 4FF08052 		mov	r2, #268435456
 754 018a 1A60     		str	r2, [r3]
 755              	@ 788 "../FreeRTOS/queue.c" 1
 756 018c BFF34F8F 		dsb
 757              	@ 0 "" 2
 758              	@ 788 "../FreeRTOS/queue.c" 1
 759 0190 BFF36F8F 		isb
 760              	@ 0 "" 2
 761              		.thumb
 762 0194 0CE0     		b	.L57
 763              	.L54:
 789:../FreeRTOS/queue.c **** 				}
 790:../FreeRTOS/queue.c **** 			}
 791:../FreeRTOS/queue.c **** 			else
 792:../FreeRTOS/queue.c **** 			{
 793:../FreeRTOS/queue.c **** 				/* Try again. */
 794:../FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 764              		.loc 1 794 0
 765 0196 386B     		ldr	r0, [r7, #48]
 766 0198 FFF7FEFF 		bl	prvUnlockQueue
 795:../FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 767              		.loc 1 795 0
 768 019c FFF7FEFF 		bl	xTaskResumeAll
 769 01a0 89E7     		b	.L43
 770              	.L53:
 796:../FreeRTOS/queue.c **** 			}
 797:../FreeRTOS/queue.c **** 		}
 798:../FreeRTOS/queue.c **** 		else
 799:../FreeRTOS/queue.c **** 		{
 800:../FreeRTOS/queue.c **** 			/* The timeout has expired. */
 801:../FreeRTOS/queue.c **** 			prvUnlockQueue( pxQueue );
 771              		.loc 1 801 0
 772 01a2 386B     		ldr	r0, [r7, #48]
 773 01a4 FFF7FEFF 		bl	prvUnlockQueue
 802:../FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 774              		.loc 1 802 0
 775 01a8 FFF7FEFF 		bl	xTaskResumeAll
 803:../FreeRTOS/queue.c **** 
 804:../FreeRTOS/queue.c **** 			/* Return to the original privilege level before exiting the
 805:../FreeRTOS/queue.c **** 			function. */
 806:../FreeRTOS/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 807:../FreeRTOS/queue.c **** 			return errQUEUE_FULL;
 776              		.loc 1 807 0
 777 01ac 0023     		movs	r3, #0
 778 01ae 00E0     		b	.L58
 779              	.L57:
 808:../FreeRTOS/queue.c **** 		}
 809:../FreeRTOS/queue.c **** 	}
 780              		.loc 1 809 0 discriminator 7
 781 01b0 81E7     		b	.L43
 782              	.L58:
 810:../FreeRTOS/queue.c **** }
 783              		.loc 1 810 0 discriminator 8
 784 01b2 1846     		mov	r0, r3
 785 01b4 3837     		adds	r7, r7, #56
 786              		.cfi_def_cfa_offset 8
 787 01b6 BD46     		mov	sp, r7
 788              		.cfi_def_cfa_register 13
 789              		@ sp needed
 790 01b8 80BD     		pop	{r7, pc}
 791              	.L60:
 792 01ba 00BF     		.align	2
 793              	.L59:
 794 01bc 04ED00E0 		.word	-536810236
 795              		.cfi_endproc
 796              	.LFE8:
 798              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 799              		.align	2
 800              		.global	xQueueGenericSendFromISR
 801              		.thumb
 802              		.thumb_func
 804              	xQueueGenericSendFromISR:
 805              	.LFB9:
 811:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 812:../FreeRTOS/queue.c **** 
 813:../FreeRTOS/queue.c **** #if ( configUSE_ALTERNATIVE_API == 1 )
 814:../FreeRTOS/queue.c **** 
 815:../FreeRTOS/queue.c **** 	BaseType_t xQueueAltGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_
 816:../FreeRTOS/queue.c **** 	{
 817:../FreeRTOS/queue.c **** 	BaseType_t xEntryTimeSet = pdFALSE;
 818:../FreeRTOS/queue.c **** 	TimeOut_t xTimeOut;
 819:../FreeRTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 820:../FreeRTOS/queue.c **** 
 821:../FreeRTOS/queue.c **** 		configASSERT( pxQueue );
 822:../FreeRTOS/queue.c **** 		configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 823:../FreeRTOS/queue.c **** 
 824:../FreeRTOS/queue.c **** 		for( ;; )
 825:../FreeRTOS/queue.c **** 		{
 826:../FreeRTOS/queue.c **** 			taskENTER_CRITICAL();
 827:../FreeRTOS/queue.c **** 			{
 828:../FreeRTOS/queue.c **** 				/* Is there room on the queue now?  To be running we must be
 829:../FreeRTOS/queue.c **** 				the highest priority task wanting to access the queue. */
 830:../FreeRTOS/queue.c **** 				if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 831:../FreeRTOS/queue.c **** 				{
 832:../FreeRTOS/queue.c **** 					traceQUEUE_SEND( pxQueue );
 833:../FreeRTOS/queue.c **** 					prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 834:../FreeRTOS/queue.c **** 
 835:../FreeRTOS/queue.c **** 					/* If there was a task waiting for data to arrive on the
 836:../FreeRTOS/queue.c **** 					queue then unblock it now. */
 837:../FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 838:../FreeRTOS/queue.c **** 					{
 839:../FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 840:../FreeRTOS/queue.c **** 						{
 841:../FreeRTOS/queue.c **** 							/* The unblocked task has a priority higher than
 842:../FreeRTOS/queue.c **** 							our own so yield immediately. */
 843:../FreeRTOS/queue.c **** 							portYIELD_WITHIN_API();
 844:../FreeRTOS/queue.c **** 						}
 845:../FreeRTOS/queue.c **** 						else
 846:../FreeRTOS/queue.c **** 						{
 847:../FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 848:../FreeRTOS/queue.c **** 						}
 849:../FreeRTOS/queue.c **** 					}
 850:../FreeRTOS/queue.c **** 					else
 851:../FreeRTOS/queue.c **** 					{
 852:../FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 853:../FreeRTOS/queue.c **** 					}
 854:../FreeRTOS/queue.c **** 
 855:../FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
 856:../FreeRTOS/queue.c **** 					return pdPASS;
 857:../FreeRTOS/queue.c **** 				}
 858:../FreeRTOS/queue.c **** 				else
 859:../FreeRTOS/queue.c **** 				{
 860:../FreeRTOS/queue.c **** 					if( xTicksToWait == ( TickType_t ) 0 )
 861:../FreeRTOS/queue.c **** 					{
 862:../FreeRTOS/queue.c **** 						taskEXIT_CRITICAL();
 863:../FreeRTOS/queue.c **** 						return errQUEUE_FULL;
 864:../FreeRTOS/queue.c **** 					}
 865:../FreeRTOS/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
 866:../FreeRTOS/queue.c **** 					{
 867:../FreeRTOS/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
 868:../FreeRTOS/queue.c **** 						xEntryTimeSet = pdTRUE;
 869:../FreeRTOS/queue.c **** 					}
 870:../FreeRTOS/queue.c **** 				}
 871:../FreeRTOS/queue.c **** 			}
 872:../FreeRTOS/queue.c **** 			taskEXIT_CRITICAL();
 873:../FreeRTOS/queue.c **** 
 874:../FreeRTOS/queue.c **** 			taskENTER_CRITICAL();
 875:../FreeRTOS/queue.c **** 			{
 876:../FreeRTOS/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 877:../FreeRTOS/queue.c **** 				{
 878:../FreeRTOS/queue.c **** 					if( prvIsQueueFull( pxQueue ) != pdFALSE )
 879:../FreeRTOS/queue.c **** 					{
 880:../FreeRTOS/queue.c **** 						traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 881:../FreeRTOS/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 882:../FreeRTOS/queue.c **** 						portYIELD_WITHIN_API();
 883:../FreeRTOS/queue.c **** 					}
 884:../FreeRTOS/queue.c **** 					else
 885:../FreeRTOS/queue.c **** 					{
 886:../FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 887:../FreeRTOS/queue.c **** 					}
 888:../FreeRTOS/queue.c **** 				}
 889:../FreeRTOS/queue.c **** 				else
 890:../FreeRTOS/queue.c **** 				{
 891:../FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
 892:../FreeRTOS/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 893:../FreeRTOS/queue.c **** 					return errQUEUE_FULL;
 894:../FreeRTOS/queue.c **** 				}
 895:../FreeRTOS/queue.c **** 			}
 896:../FreeRTOS/queue.c **** 			taskEXIT_CRITICAL();
 897:../FreeRTOS/queue.c **** 		}
 898:../FreeRTOS/queue.c **** 	}
 899:../FreeRTOS/queue.c **** 
 900:../FreeRTOS/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
 901:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 902:../FreeRTOS/queue.c **** 
 903:../FreeRTOS/queue.c **** #if ( configUSE_ALTERNATIVE_API == 1 )
 904:../FreeRTOS/queue.c **** 
 905:../FreeRTOS/queue.c **** 	BaseType_t xQueueAltGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicks
 906:../FreeRTOS/queue.c **** 	{
 907:../FreeRTOS/queue.c **** 	BaseType_t xEntryTimeSet = pdFALSE;
 908:../FreeRTOS/queue.c **** 	TimeOut_t xTimeOut;
 909:../FreeRTOS/queue.c **** 	int8_t *pcOriginalReadPosition;
 910:../FreeRTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 911:../FreeRTOS/queue.c **** 
 912:../FreeRTOS/queue.c **** 		configASSERT( pxQueue );
 913:../FreeRTOS/queue.c **** 		configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 914:../FreeRTOS/queue.c **** 
 915:../FreeRTOS/queue.c **** 		for( ;; )
 916:../FreeRTOS/queue.c **** 		{
 917:../FreeRTOS/queue.c **** 			taskENTER_CRITICAL();
 918:../FreeRTOS/queue.c **** 			{
 919:../FreeRTOS/queue.c **** 				if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 920:../FreeRTOS/queue.c **** 				{
 921:../FreeRTOS/queue.c **** 					/* Remember our read position in case we are just peeking. */
 922:../FreeRTOS/queue.c **** 					pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 923:../FreeRTOS/queue.c **** 
 924:../FreeRTOS/queue.c **** 					prvCopyDataFromQueue( pxQueue, pvBuffer );
 925:../FreeRTOS/queue.c **** 
 926:../FreeRTOS/queue.c **** 					if( xJustPeeking == pdFALSE )
 927:../FreeRTOS/queue.c **** 					{
 928:../FreeRTOS/queue.c **** 						traceQUEUE_RECEIVE( pxQueue );
 929:../FreeRTOS/queue.c **** 
 930:../FreeRTOS/queue.c **** 						/* Data is actually being removed (not just peeked). */
 931:../FreeRTOS/queue.c **** 						--( pxQueue->uxMessagesWaiting );
 932:../FreeRTOS/queue.c **** 
 933:../FreeRTOS/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
 934:../FreeRTOS/queue.c **** 						{
 935:../FreeRTOS/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 936:../FreeRTOS/queue.c **** 							{
 937:../FreeRTOS/queue.c **** 								/* Record the information required to implement
 938:../FreeRTOS/queue.c **** 								priority inheritance should it become necessary. */
 939:../FreeRTOS/queue.c **** 								pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle();
 940:../FreeRTOS/queue.c **** 							}
 941:../FreeRTOS/queue.c **** 							else
 942:../FreeRTOS/queue.c **** 							{
 943:../FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 944:../FreeRTOS/queue.c **** 							}
 945:../FreeRTOS/queue.c **** 						}
 946:../FreeRTOS/queue.c **** 						#endif
 947:../FreeRTOS/queue.c **** 
 948:../FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 949:../FreeRTOS/queue.c **** 						{
 950:../FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 951:../FreeRTOS/queue.c **** 							{
 952:../FreeRTOS/queue.c **** 								portYIELD_WITHIN_API();
 953:../FreeRTOS/queue.c **** 							}
 954:../FreeRTOS/queue.c **** 							else
 955:../FreeRTOS/queue.c **** 							{
 956:../FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 957:../FreeRTOS/queue.c **** 							}
 958:../FreeRTOS/queue.c **** 						}
 959:../FreeRTOS/queue.c **** 					}
 960:../FreeRTOS/queue.c **** 					else
 961:../FreeRTOS/queue.c **** 					{
 962:../FreeRTOS/queue.c **** 						traceQUEUE_PEEK( pxQueue );
 963:../FreeRTOS/queue.c **** 
 964:../FreeRTOS/queue.c **** 						/* The data is not being removed, so reset our read
 965:../FreeRTOS/queue.c **** 						pointer. */
 966:../FreeRTOS/queue.c **** 						pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 967:../FreeRTOS/queue.c **** 
 968:../FreeRTOS/queue.c **** 						/* The data is being left in the queue, so see if there are
 969:../FreeRTOS/queue.c **** 						any other tasks waiting for the data. */
 970:../FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 971:../FreeRTOS/queue.c **** 						{
 972:../FreeRTOS/queue.c **** 							/* Tasks that are removed from the event list will get added to
 973:../FreeRTOS/queue.c **** 							the pending ready list as the scheduler is still suspended. */
 974:../FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 975:../FreeRTOS/queue.c **** 							{
 976:../FreeRTOS/queue.c **** 								/* The task waiting has a higher priority than this task. */
 977:../FreeRTOS/queue.c **** 								portYIELD_WITHIN_API();
 978:../FreeRTOS/queue.c **** 							}
 979:../FreeRTOS/queue.c **** 							else
 980:../FreeRTOS/queue.c **** 							{
 981:../FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 982:../FreeRTOS/queue.c **** 							}
 983:../FreeRTOS/queue.c **** 						}
 984:../FreeRTOS/queue.c **** 						else
 985:../FreeRTOS/queue.c **** 						{
 986:../FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 987:../FreeRTOS/queue.c **** 						}
 988:../FreeRTOS/queue.c **** 					}
 989:../FreeRTOS/queue.c **** 
 990:../FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
 991:../FreeRTOS/queue.c **** 					return pdPASS;
 992:../FreeRTOS/queue.c **** 				}
 993:../FreeRTOS/queue.c **** 				else
 994:../FreeRTOS/queue.c **** 				{
 995:../FreeRTOS/queue.c **** 					if( xTicksToWait == ( TickType_t ) 0 )
 996:../FreeRTOS/queue.c **** 					{
 997:../FreeRTOS/queue.c **** 						taskEXIT_CRITICAL();
 998:../FreeRTOS/queue.c **** 						traceQUEUE_RECEIVE_FAILED( pxQueue );
 999:../FreeRTOS/queue.c **** 						return errQUEUE_EMPTY;
1000:../FreeRTOS/queue.c **** 					}
1001:../FreeRTOS/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
1002:../FreeRTOS/queue.c **** 					{
1003:../FreeRTOS/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
1004:../FreeRTOS/queue.c **** 						xEntryTimeSet = pdTRUE;
1005:../FreeRTOS/queue.c **** 					}
1006:../FreeRTOS/queue.c **** 				}
1007:../FreeRTOS/queue.c **** 			}
1008:../FreeRTOS/queue.c **** 			taskEXIT_CRITICAL();
1009:../FreeRTOS/queue.c **** 
1010:../FreeRTOS/queue.c **** 			taskENTER_CRITICAL();
1011:../FreeRTOS/queue.c **** 			{
1012:../FreeRTOS/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1013:../FreeRTOS/queue.c **** 				{
1014:../FreeRTOS/queue.c **** 					if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1015:../FreeRTOS/queue.c **** 					{
1016:../FreeRTOS/queue.c **** 						traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1017:../FreeRTOS/queue.c **** 
1018:../FreeRTOS/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
1019:../FreeRTOS/queue.c **** 						{
1020:../FreeRTOS/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1021:../FreeRTOS/queue.c **** 							{
1022:../FreeRTOS/queue.c **** 								taskENTER_CRITICAL();
1023:../FreeRTOS/queue.c **** 								{
1024:../FreeRTOS/queue.c **** 									vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1025:../FreeRTOS/queue.c **** 								}
1026:../FreeRTOS/queue.c **** 								taskEXIT_CRITICAL();
1027:../FreeRTOS/queue.c **** 							}
1028:../FreeRTOS/queue.c **** 							else
1029:../FreeRTOS/queue.c **** 							{
1030:../FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1031:../FreeRTOS/queue.c **** 							}
1032:../FreeRTOS/queue.c **** 						}
1033:../FreeRTOS/queue.c **** 						#endif
1034:../FreeRTOS/queue.c **** 
1035:../FreeRTOS/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1036:../FreeRTOS/queue.c **** 						portYIELD_WITHIN_API();
1037:../FreeRTOS/queue.c **** 					}
1038:../FreeRTOS/queue.c **** 					else
1039:../FreeRTOS/queue.c **** 					{
1040:../FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1041:../FreeRTOS/queue.c **** 					}
1042:../FreeRTOS/queue.c **** 				}
1043:../FreeRTOS/queue.c **** 				else
1044:../FreeRTOS/queue.c **** 				{
1045:../FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
1046:../FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1047:../FreeRTOS/queue.c **** 					return errQUEUE_EMPTY;
1048:../FreeRTOS/queue.c **** 				}
1049:../FreeRTOS/queue.c **** 			}
1050:../FreeRTOS/queue.c **** 			taskEXIT_CRITICAL();
1051:../FreeRTOS/queue.c **** 		}
1052:../FreeRTOS/queue.c **** 	}
1053:../FreeRTOS/queue.c **** 
1054:../FreeRTOS/queue.c **** 
1055:../FreeRTOS/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
1056:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1057:../FreeRTOS/queue.c **** 
1058:../FreeRTOS/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
1059:../FreeRTOS/queue.c **** {
 806              		.loc 1 1059 0
 807              		.cfi_startproc
 808              		@ args = 0, pretend = 0, frame = 56
 809              		@ frame_needed = 1, uses_anonymous_args = 0
 810 0000 80B5     		push	{r7, lr}
 811              		.cfi_def_cfa_offset 8
 812              		.cfi_offset 7, -8
 813              		.cfi_offset 14, -4
 814 0002 8EB0     		sub	sp, sp, #56
 815              		.cfi_def_cfa_offset 64
 816 0004 00AF     		add	r7, sp, #0
 817              		.cfi_def_cfa_register 7
 818 0006 F860     		str	r0, [r7, #12]
 819 0008 B960     		str	r1, [r7, #8]
 820 000a 7A60     		str	r2, [r7, #4]
 821 000c 3B60     		str	r3, [r7]
1060:../FreeRTOS/queue.c **** BaseType_t xReturn;
1061:../FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1062:../FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 822              		.loc 1 1062 0
 823 000e FB68     		ldr	r3, [r7, #12]
 824 0010 3B63     		str	r3, [r7, #48]
1063:../FreeRTOS/queue.c **** 
1064:../FreeRTOS/queue.c **** 	configASSERT( pxQueue );
 825              		.loc 1 1064 0
 826 0012 3B6B     		ldr	r3, [r7, #48]
 827 0014 002B     		cmp	r3, #0
 828 0016 09D1     		bne	.L62
 829              	.LBB90:
 830              	.LBB91:
 831              		.loc 2 215 0 discriminator 1
 832              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 833 0018 4FF00703 			mov r3, #7												
 834 001c 83F31188 		msr basepri, r3											
 835 0020 BFF36F8F 		isb														
 836 0024 BFF34F8F 		dsb														
 837              	
 838              	@ 0 "" 2
 839              		.thumb
 840 0028 BB62     		str	r3, [r7, #40]
 841              	.L63:
 842              	.LBE91:
 843              	.LBE90:
 844              		.loc 1 1064 0 discriminator 1
 845 002a FEE7     		b	.L63
 846              	.L62:
1065:../FreeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 847              		.loc 1 1065 0
 848 002c BB68     		ldr	r3, [r7, #8]
 849 002e 002B     		cmp	r3, #0
 850 0030 03D1     		bne	.L64
 851              		.loc 1 1065 0 is_stmt 0 discriminator 2
 852 0032 3B6B     		ldr	r3, [r7, #48]
 853 0034 1B6C     		ldr	r3, [r3, #64]
 854 0036 002B     		cmp	r3, #0
 855 0038 01D1     		bne	.L65
 856              	.L64:
 857              		.loc 1 1065 0 discriminator 3
 858 003a 0123     		movs	r3, #1
 859 003c 00E0     		b	.L66
 860              	.L65:
 861              		.loc 1 1065 0 discriminator 4
 862 003e 0023     		movs	r3, #0
 863              	.L66:
 864              		.loc 1 1065 0 discriminator 6
 865 0040 002B     		cmp	r3, #0
 866 0042 09D1     		bne	.L67
 867              	.LBB92:
 868              	.LBB93:
 869              		.loc 2 215 0 is_stmt 1 discriminator 7
 870              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 871 0044 4FF00703 			mov r3, #7												
 872 0048 83F31188 		msr basepri, r3											
 873 004c BFF36F8F 		isb														
 874 0050 BFF34F8F 		dsb														
 875              	
 876              	@ 0 "" 2
 877              		.thumb
 878 0054 7B62     		str	r3, [r7, #36]
 879              	.L68:
 880              	.LBE93:
 881              	.LBE92:
 882              		.loc 1 1065 0 discriminator 2
 883 0056 FEE7     		b	.L68
 884              	.L67:
1066:../FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 885              		.loc 1 1066 0
 886 0058 3B68     		ldr	r3, [r7]
 887 005a 022B     		cmp	r3, #2
 888 005c 03D1     		bne	.L69
 889              		.loc 1 1066 0 is_stmt 0 discriminator 2
 890 005e 3B6B     		ldr	r3, [r7, #48]
 891 0060 DB6B     		ldr	r3, [r3, #60]
 892 0062 012B     		cmp	r3, #1
 893 0064 01D1     		bne	.L70
 894              	.L69:
 895              		.loc 1 1066 0 discriminator 3
 896 0066 0123     		movs	r3, #1
 897 0068 00E0     		b	.L71
 898              	.L70:
 899              		.loc 1 1066 0 discriminator 4
 900 006a 0023     		movs	r3, #0
 901              	.L71:
 902              		.loc 1 1066 0 discriminator 6
 903 006c 002B     		cmp	r3, #0
 904 006e 09D1     		bne	.L72
 905              	.LBB94:
 906              	.LBB95:
 907              		.loc 2 215 0 is_stmt 1 discriminator 7
 908              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 909 0070 4FF00703 			mov r3, #7												
 910 0074 83F31188 		msr basepri, r3											
 911 0078 BFF36F8F 		isb														
 912 007c BFF34F8F 		dsb														
 913              	
 914              	@ 0 "" 2
 915              		.thumb
 916 0080 3B62     		str	r3, [r7, #32]
 917              	.L73:
 918              	.LBE95:
 919              	.LBE94:
 920              		.loc 1 1066 0 discriminator 3
 921 0082 FEE7     		b	.L73
 922              	.L72:
1067:../FreeRTOS/queue.c **** 
1068:../FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1069:../FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1070:../FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1071:../FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1072:../FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1073:../FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1074:../FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1075:../FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1076:../FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1077:../FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1078:../FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1079:../FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1080:../FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1081:../FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1082:../FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 923              		.loc 1 1082 0
 924 0084 FFF7FEFF 		bl	vPortValidateInterruptPriority
 925              	.LBB96:
 926              	.LBB97:
 216:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 217:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 218:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 219:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 220:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 221:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 222:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 223:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 224:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 225:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 228:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 230:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 927              		.loc 2 231 0
 928              	@ 231 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 929 0088 EFF31182 			mrs r2, basepri											
 930 008c 4FF00703 		mov r3, #7												
 931 0090 83F31188 		msr basepri, r3											
 932 0094 BFF36F8F 		isb														
 933 0098 BFF34F8F 		dsb														
 934              	
 935              	@ 0 "" 2
 936              		.thumb
 937 009c FA61     		str	r2, [r7, #28]
 938 009e BB61     		str	r3, [r7, #24]
 232:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 233:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 234:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 235:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 236:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 237:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 238:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 239:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 240:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 241:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 242:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 243:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 939              		.loc 2 243 0
 940 00a0 FB69     		ldr	r3, [r7, #28]
 941              	.LBE97:
 942              	.LBE96:
1083:../FreeRTOS/queue.c **** 
1084:../FreeRTOS/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
1085:../FreeRTOS/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
1086:../FreeRTOS/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1087:../FreeRTOS/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1088:../FreeRTOS/queue.c **** 	post). */
1089:../FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 943              		.loc 1 1089 0
 944 00a2 FB62     		str	r3, [r7, #44]
1090:../FreeRTOS/queue.c **** 	{
1091:../FreeRTOS/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 945              		.loc 1 1091 0
 946 00a4 3B6B     		ldr	r3, [r7, #48]
 947 00a6 9A6B     		ldr	r2, [r3, #56]
 948 00a8 3B6B     		ldr	r3, [r7, #48]
 949 00aa DB6B     		ldr	r3, [r3, #60]
 950 00ac 9A42     		cmp	r2, r3
 951 00ae 02D3     		bcc	.L75
 952              		.loc 1 1091 0 is_stmt 0 discriminator 1
 953 00b0 3B68     		ldr	r3, [r7]
 954 00b2 022B     		cmp	r3, #2
 955 00b4 24D1     		bne	.L76
 956              	.L75:
1092:../FreeRTOS/queue.c **** 		{
1093:../FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1094:../FreeRTOS/queue.c **** 
1095:../FreeRTOS/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
1096:../FreeRTOS/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
1097:../FreeRTOS/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
1098:../FreeRTOS/queue.c **** 			called here even though the disinherit function does not check if
1099:../FreeRTOS/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
1100:../FreeRTOS/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 957              		.loc 1 1100 0 is_stmt 1
 958 00b6 386B     		ldr	r0, [r7, #48]
 959 00b8 B968     		ldr	r1, [r7, #8]
 960 00ba 3A68     		ldr	r2, [r7]
 961 00bc FFF7FEFF 		bl	prvCopyDataToQueue
1101:../FreeRTOS/queue.c **** 
1102:../FreeRTOS/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1103:../FreeRTOS/queue.c **** 			be done when the queue is unlocked later. */
1104:../FreeRTOS/queue.c **** 			if( pxQueue->xTxLock == queueUNLOCKED )
 962              		.loc 1 1104 0
 963 00c0 3B6B     		ldr	r3, [r7, #48]
 964 00c2 9B6C     		ldr	r3, [r3, #72]
 965 00c4 B3F1FF3F 		cmp	r3, #-1
 966 00c8 12D1     		bne	.L77
1105:../FreeRTOS/queue.c **** 			{
1106:../FreeRTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1107:../FreeRTOS/queue.c **** 				{
1108:../FreeRTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1109:../FreeRTOS/queue.c **** 					{
1110:../FreeRTOS/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
1111:../FreeRTOS/queue.c **** 						{
1112:../FreeRTOS/queue.c **** 							/* The queue is a member of a queue set, and posting
1113:../FreeRTOS/queue.c **** 							to the queue set caused a higher priority task to
1114:../FreeRTOS/queue.c **** 							unblock.  A context switch is required. */
1115:../FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1116:../FreeRTOS/queue.c **** 							{
1117:../FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1118:../FreeRTOS/queue.c **** 							}
1119:../FreeRTOS/queue.c **** 							else
1120:../FreeRTOS/queue.c **** 							{
1121:../FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1122:../FreeRTOS/queue.c **** 							}
1123:../FreeRTOS/queue.c **** 						}
1124:../FreeRTOS/queue.c **** 						else
1125:../FreeRTOS/queue.c **** 						{
1126:../FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1127:../FreeRTOS/queue.c **** 						}
1128:../FreeRTOS/queue.c **** 					}
1129:../FreeRTOS/queue.c **** 					else
1130:../FreeRTOS/queue.c **** 					{
1131:../FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1132:../FreeRTOS/queue.c **** 						{
1133:../FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1134:../FreeRTOS/queue.c **** 							{
1135:../FreeRTOS/queue.c **** 								/* The task waiting has a higher priority so
1136:../FreeRTOS/queue.c **** 								record that a context switch is required. */
1137:../FreeRTOS/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1138:../FreeRTOS/queue.c **** 								{
1139:../FreeRTOS/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1140:../FreeRTOS/queue.c **** 								}
1141:../FreeRTOS/queue.c **** 								else
1142:../FreeRTOS/queue.c **** 								{
1143:../FreeRTOS/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1144:../FreeRTOS/queue.c **** 								}
1145:../FreeRTOS/queue.c **** 							}
1146:../FreeRTOS/queue.c **** 							else
1147:../FreeRTOS/queue.c **** 							{
1148:../FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1149:../FreeRTOS/queue.c **** 							}
1150:../FreeRTOS/queue.c **** 						}
1151:../FreeRTOS/queue.c **** 						else
1152:../FreeRTOS/queue.c **** 						{
1153:../FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1154:../FreeRTOS/queue.c **** 						}
1155:../FreeRTOS/queue.c **** 					}
1156:../FreeRTOS/queue.c **** 				}
1157:../FreeRTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1158:../FreeRTOS/queue.c **** 				{
1159:../FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 967              		.loc 1 1159 0
 968 00ca 3B6B     		ldr	r3, [r7, #48]
 969 00cc 5B6A     		ldr	r3, [r3, #36]
 970 00ce 002B     		cmp	r3, #0
 971 00d0 13D0     		beq	.L78
1160:../FreeRTOS/queue.c **** 					{
1161:../FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 972              		.loc 1 1161 0
 973 00d2 3B6B     		ldr	r3, [r7, #48]
 974 00d4 2433     		adds	r3, r3, #36
 975 00d6 1846     		mov	r0, r3
 976 00d8 FFF7FEFF 		bl	xTaskRemoveFromEventList
 977 00dc 0346     		mov	r3, r0
 978 00de 002B     		cmp	r3, #0
 979 00e0 0BD0     		beq	.L78
1162:../FreeRTOS/queue.c **** 						{
1163:../FreeRTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
1164:../FreeRTOS/queue.c **** 							context	switch is required. */
1165:../FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 980              		.loc 1 1165 0
 981 00e2 7B68     		ldr	r3, [r7, #4]
 982 00e4 002B     		cmp	r3, #0
 983 00e6 08D0     		beq	.L78
1166:../FreeRTOS/queue.c **** 							{
1167:../FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 984              		.loc 1 1167 0
 985 00e8 7B68     		ldr	r3, [r7, #4]
 986 00ea 0122     		movs	r2, #1
 987 00ec 1A60     		str	r2, [r3]
 988 00ee 04E0     		b	.L78
 989              	.L77:
1168:../FreeRTOS/queue.c **** 							}
1169:../FreeRTOS/queue.c **** 							else
1170:../FreeRTOS/queue.c **** 							{
1171:../FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1172:../FreeRTOS/queue.c **** 							}
1173:../FreeRTOS/queue.c **** 						}
1174:../FreeRTOS/queue.c **** 						else
1175:../FreeRTOS/queue.c **** 						{
1176:../FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1177:../FreeRTOS/queue.c **** 						}
1178:../FreeRTOS/queue.c **** 					}
1179:../FreeRTOS/queue.c **** 					else
1180:../FreeRTOS/queue.c **** 					{
1181:../FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1182:../FreeRTOS/queue.c **** 					}
1183:../FreeRTOS/queue.c **** 				}
1184:../FreeRTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1185:../FreeRTOS/queue.c **** 			}
1186:../FreeRTOS/queue.c **** 			else
1187:../FreeRTOS/queue.c **** 			{
1188:../FreeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1189:../FreeRTOS/queue.c **** 				knows that data was posted while it was locked. */
1190:../FreeRTOS/queue.c **** 				++( pxQueue->xTxLock );
 990              		.loc 1 1190 0
 991 00f0 3B6B     		ldr	r3, [r7, #48]
 992 00f2 9B6C     		ldr	r3, [r3, #72]
 993 00f4 5A1C     		adds	r2, r3, #1
 994 00f6 3B6B     		ldr	r3, [r7, #48]
 995 00f8 9A64     		str	r2, [r3, #72]
 996              	.L78:
1191:../FreeRTOS/queue.c **** 			}
1192:../FreeRTOS/queue.c **** 
1193:../FreeRTOS/queue.c **** 			xReturn = pdPASS;
 997              		.loc 1 1193 0
 998 00fa 0123     		movs	r3, #1
 999 00fc 7B63     		str	r3, [r7, #52]
 1000 00fe 01E0     		b	.L79
 1001              	.L76:
1194:../FreeRTOS/queue.c **** 		}
1195:../FreeRTOS/queue.c **** 		else
1196:../FreeRTOS/queue.c **** 		{
1197:../FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1198:../FreeRTOS/queue.c **** 			xReturn = errQUEUE_FULL;
 1002              		.loc 1 1198 0
 1003 0100 0023     		movs	r3, #0
 1004 0102 7B63     		str	r3, [r7, #52]
 1005              	.L79:
 1006 0104 FB6A     		ldr	r3, [r7, #44]
 1007 0106 7B61     		str	r3, [r7, #20]
 1008              	.LBB98:
 1009              	.LBB99:
 244:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 245:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 246:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 248:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 249:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1010              		.loc 2 249 0
 1011 0108 7B69     		ldr	r3, [r7, #20]
 1012              	@ 249 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 1013 010a 83F31188 			msr basepri, r3	
 1014              	@ 0 "" 2
 1015              		.thumb
 1016              	.LBE99:
 1017              	.LBE98:
1199:../FreeRTOS/queue.c **** 		}
1200:../FreeRTOS/queue.c **** 	}
1201:../FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1202:../FreeRTOS/queue.c **** 
1203:../FreeRTOS/queue.c **** 	return xReturn;
 1018              		.loc 1 1203 0
 1019 010e 7B6B     		ldr	r3, [r7, #52]
1204:../FreeRTOS/queue.c **** }
 1020              		.loc 1 1204 0
 1021 0110 1846     		mov	r0, r3
 1022 0112 3837     		adds	r7, r7, #56
 1023              		.cfi_def_cfa_offset 8
 1024 0114 BD46     		mov	sp, r7
 1025              		.cfi_def_cfa_register 13
 1026              		@ sp needed
 1027 0116 80BD     		pop	{r7, pc}
 1028              		.cfi_endproc
 1029              	.LFE9:
 1031              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1032              		.align	2
 1033              		.global	xQueueGiveFromISR
 1034              		.thumb
 1035              		.thumb_func
 1037              	xQueueGiveFromISR:
 1038              	.LFB10:
1205:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1206:../FreeRTOS/queue.c **** 
1207:../FreeRTOS/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1208:../FreeRTOS/queue.c **** {
 1039              		.loc 1 1208 0
 1040              		.cfi_startproc
 1041              		@ args = 0, pretend = 0, frame = 48
 1042              		@ frame_needed = 1, uses_anonymous_args = 0
 1043 0000 80B5     		push	{r7, lr}
 1044              		.cfi_def_cfa_offset 8
 1045              		.cfi_offset 7, -8
 1046              		.cfi_offset 14, -4
 1047 0002 8CB0     		sub	sp, sp, #48
 1048              		.cfi_def_cfa_offset 56
 1049 0004 00AF     		add	r7, sp, #0
 1050              		.cfi_def_cfa_register 7
 1051 0006 7860     		str	r0, [r7, #4]
 1052 0008 3960     		str	r1, [r7]
1209:../FreeRTOS/queue.c **** BaseType_t xReturn;
1210:../FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1211:../FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1053              		.loc 1 1211 0
 1054 000a 7B68     		ldr	r3, [r7, #4]
 1055 000c BB62     		str	r3, [r7, #40]
1212:../FreeRTOS/queue.c **** 
1213:../FreeRTOS/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1214:../FreeRTOS/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1215:../FreeRTOS/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1216:../FreeRTOS/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1217:../FreeRTOS/queue.c **** 	post). */
1218:../FreeRTOS/queue.c **** 
1219:../FreeRTOS/queue.c **** 	configASSERT( pxQueue );
 1056              		.loc 1 1219 0
 1057 000e BB6A     		ldr	r3, [r7, #40]
 1058 0010 002B     		cmp	r3, #0
 1059 0012 09D1     		bne	.L82
 1060              	.LBB100:
 1061              	.LBB101:
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1062              		.loc 2 215 0 discriminator 1
 1063              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 1064 0014 4FF00703 			mov r3, #7												
 1065 0018 83F31188 		msr basepri, r3											
 1066 001c BFF36F8F 		isb														
 1067 0020 BFF34F8F 		dsb														
 1068              	
 1069              	@ 0 "" 2
 1070              		.thumb
 1071 0024 3B62     		str	r3, [r7, #32]
 1072              	.L83:
 1073              	.LBE101:
 1074              	.LBE100:
 1075              		.loc 1 1219 0 discriminator 1
 1076 0026 FEE7     		b	.L83
 1077              	.L82:
1220:../FreeRTOS/queue.c **** 
1221:../FreeRTOS/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1222:../FreeRTOS/queue.c **** 	if the item size is not 0. */
1223:../FreeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
 1078              		.loc 1 1223 0
 1079 0028 BB6A     		ldr	r3, [r7, #40]
 1080 002a 1B6C     		ldr	r3, [r3, #64]
 1081 002c 002B     		cmp	r3, #0
 1082 002e 09D0     		beq	.L84
 1083              	.LBB102:
 1084              	.LBB103:
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1085              		.loc 2 215 0 discriminator 1
 1086              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 1087 0030 4FF00703 			mov r3, #7												
 1088 0034 83F31188 		msr basepri, r3											
 1089 0038 BFF36F8F 		isb														
 1090 003c BFF34F8F 		dsb														
 1091              	
 1092              	@ 0 "" 2
 1093              		.thumb
 1094 0040 FB61     		str	r3, [r7, #28]
 1095              	.L85:
 1096              	.LBE103:
 1097              	.LBE102:
 1098              		.loc 1 1223 0 discriminator 2
 1099 0042 FEE7     		b	.L85
 1100              	.L84:
1224:../FreeRTOS/queue.c **** 
1225:../FreeRTOS/queue.c **** 	/* Normally a mutex would not be given from an interrupt, and doing so is
1226:../FreeRTOS/queue.c **** 	definitely wrong if there is a mutex holder as priority inheritance makes no
1227:../FreeRTOS/queue.c **** 	sense for an interrupts, only tasks. */
1228:../FreeRTOS/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
 1101              		.loc 1 1228 0
 1102 0044 BB6A     		ldr	r3, [r7, #40]
 1103 0046 1B68     		ldr	r3, [r3]
 1104 0048 002B     		cmp	r3, #0
 1105 004a 03D1     		bne	.L86
 1106              		.loc 1 1228 0 is_stmt 0 discriminator 2
 1107 004c BB6A     		ldr	r3, [r7, #40]
 1108 004e 5B68     		ldr	r3, [r3, #4]
 1109 0050 002B     		cmp	r3, #0
 1110 0052 01D1     		bne	.L87
 1111              	.L86:
 1112              		.loc 1 1228 0 discriminator 3
 1113 0054 0123     		movs	r3, #1
 1114 0056 00E0     		b	.L88
 1115              	.L87:
 1116              		.loc 1 1228 0 discriminator 4
 1117 0058 0023     		movs	r3, #0
 1118              	.L88:
 1119              		.loc 1 1228 0 discriminator 6
 1120 005a 002B     		cmp	r3, #0
 1121 005c 09D1     		bne	.L89
 1122              	.LBB104:
 1123              	.LBB105:
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1124              		.loc 2 215 0 is_stmt 1 discriminator 7
 1125              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 1126 005e 4FF00703 			mov r3, #7												
 1127 0062 83F31188 		msr basepri, r3											
 1128 0066 BFF36F8F 		isb														
 1129 006a BFF34F8F 		dsb														
 1130              	
 1131              	@ 0 "" 2
 1132              		.thumb
 1133 006e BB61     		str	r3, [r7, #24]
 1134              	.L90:
 1135              	.LBE105:
 1136              	.LBE104:
 1137              		.loc 1 1228 0 discriminator 3
 1138 0070 FEE7     		b	.L90
 1139              	.L89:
1229:../FreeRTOS/queue.c **** 
1230:../FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1231:../FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1232:../FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1233:../FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1234:../FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1235:../FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1236:../FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1237:../FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1238:../FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1239:../FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1240:../FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1241:../FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1242:../FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1243:../FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1244:../FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1140              		.loc 1 1244 0
 1141 0072 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1142              	.LBB106:
 1143              	.LBB107:
 231:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1144              		.loc 2 231 0
 1145              	@ 231 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 1146 0076 EFF31182 			mrs r2, basepri											
 1147 007a 4FF00703 		mov r3, #7												
 1148 007e 83F31188 		msr basepri, r3											
 1149 0082 BFF36F8F 		isb														
 1150 0086 BFF34F8F 		dsb														
 1151              	
 1152              	@ 0 "" 2
 1153              		.thumb
 1154 008a 7A61     		str	r2, [r7, #20]
 1155 008c 3B61     		str	r3, [r7, #16]
 243:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 1156              		.loc 2 243 0
 1157 008e 7B69     		ldr	r3, [r7, #20]
 1158              	.LBE107:
 1159              	.LBE106:
1245:../FreeRTOS/queue.c **** 
1246:../FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1160              		.loc 1 1246 0
 1161 0090 7B62     		str	r3, [r7, #36]
1247:../FreeRTOS/queue.c **** 	{
1248:../FreeRTOS/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1249:../FreeRTOS/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1250:../FreeRTOS/queue.c **** 		space'. */
1251:../FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 1162              		.loc 1 1251 0
 1163 0092 BB6A     		ldr	r3, [r7, #40]
 1164 0094 9A6B     		ldr	r2, [r3, #56]
 1165 0096 BB6A     		ldr	r3, [r7, #40]
 1166 0098 DB6B     		ldr	r3, [r3, #60]
 1167 009a 9A42     		cmp	r2, r3
 1168 009c 24D2     		bcs	.L92
1252:../FreeRTOS/queue.c **** 		{
1253:../FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1254:../FreeRTOS/queue.c **** 
1255:../FreeRTOS/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1256:../FreeRTOS/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1257:../FreeRTOS/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1258:../FreeRTOS/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1259:../FreeRTOS/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1260:../FreeRTOS/queue.c **** 			messages (semaphores) available. */
1261:../FreeRTOS/queue.c **** 			++( pxQueue->uxMessagesWaiting );
 1169              		.loc 1 1261 0
 1170 009e BB6A     		ldr	r3, [r7, #40]
 1171 00a0 9B6B     		ldr	r3, [r3, #56]
 1172 00a2 5A1C     		adds	r2, r3, #1
 1173 00a4 BB6A     		ldr	r3, [r7, #40]
 1174 00a6 9A63     		str	r2, [r3, #56]
1262:../FreeRTOS/queue.c **** 
1263:../FreeRTOS/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1264:../FreeRTOS/queue.c **** 			be done when the queue is unlocked later. */
1265:../FreeRTOS/queue.c **** 			if( pxQueue->xTxLock == queueUNLOCKED )
 1175              		.loc 1 1265 0
 1176 00a8 BB6A     		ldr	r3, [r7, #40]
 1177 00aa 9B6C     		ldr	r3, [r3, #72]
 1178 00ac B3F1FF3F 		cmp	r3, #-1
 1179 00b0 12D1     		bne	.L93
1266:../FreeRTOS/queue.c **** 			{
1267:../FreeRTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1268:../FreeRTOS/queue.c **** 				{
1269:../FreeRTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1270:../FreeRTOS/queue.c **** 					{
1271:../FreeRTOS/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
1272:../FreeRTOS/queue.c **** 						{
1273:../FreeRTOS/queue.c **** 							/* The semaphore is a member of a queue set, and
1274:../FreeRTOS/queue.c **** 							posting	to the queue set caused a higher priority
1275:../FreeRTOS/queue.c **** 							task to	unblock.  A context switch is required. */
1276:../FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1277:../FreeRTOS/queue.c **** 							{
1278:../FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1279:../FreeRTOS/queue.c **** 							}
1280:../FreeRTOS/queue.c **** 							else
1281:../FreeRTOS/queue.c **** 							{
1282:../FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1283:../FreeRTOS/queue.c **** 							}
1284:../FreeRTOS/queue.c **** 						}
1285:../FreeRTOS/queue.c **** 						else
1286:../FreeRTOS/queue.c **** 						{
1287:../FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1288:../FreeRTOS/queue.c **** 						}
1289:../FreeRTOS/queue.c **** 					}
1290:../FreeRTOS/queue.c **** 					else
1291:../FreeRTOS/queue.c **** 					{
1292:../FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1293:../FreeRTOS/queue.c **** 						{
1294:../FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1295:../FreeRTOS/queue.c **** 							{
1296:../FreeRTOS/queue.c **** 								/* The task waiting has a higher priority so
1297:../FreeRTOS/queue.c **** 								record that a context switch is required. */
1298:../FreeRTOS/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1299:../FreeRTOS/queue.c **** 								{
1300:../FreeRTOS/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1301:../FreeRTOS/queue.c **** 								}
1302:../FreeRTOS/queue.c **** 								else
1303:../FreeRTOS/queue.c **** 								{
1304:../FreeRTOS/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1305:../FreeRTOS/queue.c **** 								}
1306:../FreeRTOS/queue.c **** 							}
1307:../FreeRTOS/queue.c **** 							else
1308:../FreeRTOS/queue.c **** 							{
1309:../FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1310:../FreeRTOS/queue.c **** 							}
1311:../FreeRTOS/queue.c **** 						}
1312:../FreeRTOS/queue.c **** 						else
1313:../FreeRTOS/queue.c **** 						{
1314:../FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1315:../FreeRTOS/queue.c **** 						}
1316:../FreeRTOS/queue.c **** 					}
1317:../FreeRTOS/queue.c **** 				}
1318:../FreeRTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1319:../FreeRTOS/queue.c **** 				{
1320:../FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1180              		.loc 1 1320 0
 1181 00b2 BB6A     		ldr	r3, [r7, #40]
 1182 00b4 5B6A     		ldr	r3, [r3, #36]
 1183 00b6 002B     		cmp	r3, #0
 1184 00b8 13D0     		beq	.L94
1321:../FreeRTOS/queue.c **** 					{
1322:../FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1185              		.loc 1 1322 0
 1186 00ba BB6A     		ldr	r3, [r7, #40]
 1187 00bc 2433     		adds	r3, r3, #36
 1188 00be 1846     		mov	r0, r3
 1189 00c0 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1190 00c4 0346     		mov	r3, r0
 1191 00c6 002B     		cmp	r3, #0
 1192 00c8 0BD0     		beq	.L94
1323:../FreeRTOS/queue.c **** 						{
1324:../FreeRTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
1325:../FreeRTOS/queue.c **** 							context	switch is required. */
1326:../FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 1193              		.loc 1 1326 0
 1194 00ca 3B68     		ldr	r3, [r7]
 1195 00cc 002B     		cmp	r3, #0
 1196 00ce 08D0     		beq	.L94
1327:../FreeRTOS/queue.c **** 							{
1328:../FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 1197              		.loc 1 1328 0
 1198 00d0 3B68     		ldr	r3, [r7]
 1199 00d2 0122     		movs	r2, #1
 1200 00d4 1A60     		str	r2, [r3]
 1201 00d6 04E0     		b	.L94
 1202              	.L93:
1329:../FreeRTOS/queue.c **** 							}
1330:../FreeRTOS/queue.c **** 							else
1331:../FreeRTOS/queue.c **** 							{
1332:../FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1333:../FreeRTOS/queue.c **** 							}
1334:../FreeRTOS/queue.c **** 						}
1335:../FreeRTOS/queue.c **** 						else
1336:../FreeRTOS/queue.c **** 						{
1337:../FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1338:../FreeRTOS/queue.c **** 						}
1339:../FreeRTOS/queue.c **** 					}
1340:../FreeRTOS/queue.c **** 					else
1341:../FreeRTOS/queue.c **** 					{
1342:../FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1343:../FreeRTOS/queue.c **** 					}
1344:../FreeRTOS/queue.c **** 				}
1345:../FreeRTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1346:../FreeRTOS/queue.c **** 			}
1347:../FreeRTOS/queue.c **** 			else
1348:../FreeRTOS/queue.c **** 			{
1349:../FreeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1350:../FreeRTOS/queue.c **** 				knows that data was posted while it was locked. */
1351:../FreeRTOS/queue.c **** 				++( pxQueue->xTxLock );
 1203              		.loc 1 1351 0
 1204 00d8 BB6A     		ldr	r3, [r7, #40]
 1205 00da 9B6C     		ldr	r3, [r3, #72]
 1206 00dc 5A1C     		adds	r2, r3, #1
 1207 00de BB6A     		ldr	r3, [r7, #40]
 1208 00e0 9A64     		str	r2, [r3, #72]
 1209              	.L94:
1352:../FreeRTOS/queue.c **** 			}
1353:../FreeRTOS/queue.c **** 
1354:../FreeRTOS/queue.c **** 			xReturn = pdPASS;
 1210              		.loc 1 1354 0
 1211 00e2 0123     		movs	r3, #1
 1212 00e4 FB62     		str	r3, [r7, #44]
 1213 00e6 01E0     		b	.L95
 1214              	.L92:
1355:../FreeRTOS/queue.c **** 		}
1356:../FreeRTOS/queue.c **** 		else
1357:../FreeRTOS/queue.c **** 		{
1358:../FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1359:../FreeRTOS/queue.c **** 			xReturn = errQUEUE_FULL;
 1215              		.loc 1 1359 0
 1216 00e8 0023     		movs	r3, #0
 1217 00ea FB62     		str	r3, [r7, #44]
 1218              	.L95:
 1219 00ec 7B6A     		ldr	r3, [r7, #36]
 1220 00ee FB60     		str	r3, [r7, #12]
 1221              	.LBB108:
 1222              	.LBB109:
 1223              		.loc 2 249 0
 1224 00f0 FB68     		ldr	r3, [r7, #12]
 1225              	@ 249 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 1226 00f2 83F31188 			msr basepri, r3	
 1227              	@ 0 "" 2
 1228              		.thumb
 1229              	.LBE109:
 1230              	.LBE108:
1360:../FreeRTOS/queue.c **** 		}
1361:../FreeRTOS/queue.c **** 	}
1362:../FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1363:../FreeRTOS/queue.c **** 
1364:../FreeRTOS/queue.c **** 	return xReturn;
 1231              		.loc 1 1364 0
 1232 00f6 FB6A     		ldr	r3, [r7, #44]
1365:../FreeRTOS/queue.c **** }
 1233              		.loc 1 1365 0
 1234 00f8 1846     		mov	r0, r3
 1235 00fa 3037     		adds	r7, r7, #48
 1236              		.cfi_def_cfa_offset 8
 1237 00fc BD46     		mov	sp, r7
 1238              		.cfi_def_cfa_register 13
 1239              		@ sp needed
 1240 00fe 80BD     		pop	{r7, pc}
 1241              		.cfi_endproc
 1242              	.LFE10:
 1244              		.section	.text.xQueueGenericReceive,"ax",%progbits
 1245              		.align	2
 1246              		.global	xQueueGenericReceive
 1247              		.thumb
 1248              		.thumb_func
 1250              	xQueueGenericReceive:
 1251              	.LFB11:
1366:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1367:../FreeRTOS/queue.c **** 
1368:../FreeRTOS/queue.c **** BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWa
1369:../FreeRTOS/queue.c **** {
 1252              		.loc 1 1369 0
 1253              		.cfi_startproc
 1254              		@ args = 0, pretend = 0, frame = 48
 1255              		@ frame_needed = 1, uses_anonymous_args = 0
 1256 0000 80B5     		push	{r7, lr}
 1257              		.cfi_def_cfa_offset 8
 1258              		.cfi_offset 7, -8
 1259              		.cfi_offset 14, -4
 1260 0002 8CB0     		sub	sp, sp, #48
 1261              		.cfi_def_cfa_offset 56
 1262 0004 00AF     		add	r7, sp, #0
 1263              		.cfi_def_cfa_register 7
 1264 0006 F860     		str	r0, [r7, #12]
 1265 0008 B960     		str	r1, [r7, #8]
 1266 000a 7A60     		str	r2, [r7, #4]
 1267 000c 3B60     		str	r3, [r7]
1370:../FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1268              		.loc 1 1370 0
 1269 000e 0023     		movs	r3, #0
 1270 0010 FB62     		str	r3, [r7, #44]
1371:../FreeRTOS/queue.c **** TimeOut_t xTimeOut;
1372:../FreeRTOS/queue.c **** int8_t *pcOriginalReadPosition;
1373:../FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1271              		.loc 1 1373 0
 1272 0012 FB68     		ldr	r3, [r7, #12]
 1273 0014 BB62     		str	r3, [r7, #40]
1374:../FreeRTOS/queue.c **** 
1375:../FreeRTOS/queue.c **** 	configASSERT( pxQueue );
 1274              		.loc 1 1375 0
 1275 0016 BB6A     		ldr	r3, [r7, #40]
 1276 0018 002B     		cmp	r3, #0
 1277 001a 09D1     		bne	.L98
 1278              	.LBB110:
 1279              	.LBB111:
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1280              		.loc 2 215 0 discriminator 1
 1281              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 1282 001c 4FF00703 			mov r3, #7												
 1283 0020 83F31188 		msr basepri, r3											
 1284 0024 BFF36F8F 		isb														
 1285 0028 BFF34F8F 		dsb														
 1286              	
 1287              	@ 0 "" 2
 1288              		.thumb
 1289 002c 3B62     		str	r3, [r7, #32]
 1290              	.L99:
 1291              	.LBE111:
 1292              	.LBE110:
 1293              		.loc 1 1375 0 discriminator 1
 1294 002e FEE7     		b	.L99
 1295              	.L98:
1376:../FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1296              		.loc 1 1376 0
 1297 0030 BB68     		ldr	r3, [r7, #8]
 1298 0032 002B     		cmp	r3, #0
 1299 0034 03D1     		bne	.L100
 1300              		.loc 1 1376 0 is_stmt 0 discriminator 2
 1301 0036 BB6A     		ldr	r3, [r7, #40]
 1302 0038 1B6C     		ldr	r3, [r3, #64]
 1303 003a 002B     		cmp	r3, #0
 1304 003c 01D1     		bne	.L101
 1305              	.L100:
 1306              		.loc 1 1376 0 discriminator 3
 1307 003e 0123     		movs	r3, #1
 1308 0040 00E0     		b	.L102
 1309              	.L101:
 1310              		.loc 1 1376 0 discriminator 4
 1311 0042 0023     		movs	r3, #0
 1312              	.L102:
 1313              		.loc 1 1376 0 discriminator 6
 1314 0044 002B     		cmp	r3, #0
 1315 0046 09D1     		bne	.L103
 1316              	.LBB112:
 1317              	.LBB113:
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1318              		.loc 2 215 0 is_stmt 1 discriminator 7
 1319              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 1320 0048 4FF00703 			mov r3, #7												
 1321 004c 83F31188 		msr basepri, r3											
 1322 0050 BFF36F8F 		isb														
 1323 0054 BFF34F8F 		dsb														
 1324              	
 1325              	@ 0 "" 2
 1326              		.thumb
 1327 0058 FB61     		str	r3, [r7, #28]
 1328              	.L104:
 1329              	.LBE113:
 1330              	.LBE112:
 1331              		.loc 1 1376 0 discriminator 2
 1332 005a FEE7     		b	.L104
 1333              	.L103:
1377:../FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1378:../FreeRTOS/queue.c **** 	{
1379:../FreeRTOS/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 1334              		.loc 1 1379 0
 1335 005c FFF7FEFF 		bl	xTaskGetSchedulerState
 1336 0060 0346     		mov	r3, r0
 1337 0062 002B     		cmp	r3, #0
 1338 0064 02D1     		bne	.L105
 1339              		.loc 1 1379 0 is_stmt 0 discriminator 2
 1340 0066 7B68     		ldr	r3, [r7, #4]
 1341 0068 002B     		cmp	r3, #0
 1342 006a 01D1     		bne	.L106
 1343              	.L105:
 1344              		.loc 1 1379 0 discriminator 3
 1345 006c 0123     		movs	r3, #1
 1346 006e 00E0     		b	.L107
 1347              	.L106:
 1348              		.loc 1 1379 0 discriminator 4
 1349 0070 0023     		movs	r3, #0
 1350              	.L107:
 1351              		.loc 1 1379 0 discriminator 6
 1352 0072 002B     		cmp	r3, #0
 1353 0074 09D1     		bne	.L108
 1354              	.LBB114:
 1355              	.LBB115:
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1356              		.loc 2 215 0 is_stmt 1 discriminator 7
 1357              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 1358 0076 4FF00703 			mov r3, #7												
 1359 007a 83F31188 		msr basepri, r3											
 1360 007e BFF36F8F 		isb														
 1361 0082 BFF34F8F 		dsb														
 1362              	
 1363              	@ 0 "" 2
 1364              		.thumb
 1365 0086 BB61     		str	r3, [r7, #24]
 1366              	.L109:
 1367              	.LBE115:
 1368              	.LBE114:
 1369              		.loc 1 1379 0 discriminator 3
 1370 0088 FEE7     		b	.L109
 1371              	.L108:
1380:../FreeRTOS/queue.c **** 	}
1381:../FreeRTOS/queue.c **** 	#endif
1382:../FreeRTOS/queue.c **** 
1383:../FreeRTOS/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1384:../FreeRTOS/queue.c **** 	statements within the function itself.  This is done in the interest
1385:../FreeRTOS/queue.c **** 	of execution time efficiency. */
1386:../FreeRTOS/queue.c **** 
1387:../FreeRTOS/queue.c **** 	for( ;; )
1388:../FreeRTOS/queue.c **** 	{
1389:../FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
 1372              		.loc 1 1389 0
 1373 008a FFF7FEFF 		bl	vPortEnterCritical
1390:../FreeRTOS/queue.c **** 		{
1391:../FreeRTOS/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1392:../FreeRTOS/queue.c **** 			must be	the highest priority task wanting to access the queue. */
1393:../FreeRTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 1374              		.loc 1 1393 0
 1375 008e BB6A     		ldr	r3, [r7, #40]
 1376 0090 9B6B     		ldr	r3, [r3, #56]
 1377 0092 002B     		cmp	r3, #0
 1378 0094 31D0     		beq	.L110
1394:../FreeRTOS/queue.c **** 			{
1395:../FreeRTOS/queue.c **** 				/* Remember the read position in case the queue is only being
1396:../FreeRTOS/queue.c **** 				peeked. */
1397:../FreeRTOS/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 1379              		.loc 1 1397 0
 1380 0096 BB6A     		ldr	r3, [r7, #40]
 1381 0098 DB68     		ldr	r3, [r3, #12]
 1382 009a 7B62     		str	r3, [r7, #36]
1398:../FreeRTOS/queue.c **** 
1399:../FreeRTOS/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 1383              		.loc 1 1399 0
 1384 009c B86A     		ldr	r0, [r7, #40]
 1385 009e B968     		ldr	r1, [r7, #8]
 1386 00a0 FFF7FEFF 		bl	prvCopyDataFromQueue
1400:../FreeRTOS/queue.c **** 
1401:../FreeRTOS/queue.c **** 				if( xJustPeeking == pdFALSE )
 1387              		.loc 1 1401 0
 1388 00a4 3B68     		ldr	r3, [r7]
 1389 00a6 002B     		cmp	r3, #0
 1390 00a8 17D1     		bne	.L111
1402:../FreeRTOS/queue.c **** 				{
1403:../FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
1404:../FreeRTOS/queue.c **** 
1405:../FreeRTOS/queue.c **** 					/* Actually removing data, not just peeking. */
1406:../FreeRTOS/queue.c **** 					--( pxQueue->uxMessagesWaiting );
 1391              		.loc 1 1406 0
 1392 00aa BB6A     		ldr	r3, [r7, #40]
 1393 00ac 9B6B     		ldr	r3, [r3, #56]
 1394 00ae 5A1E     		subs	r2, r3, #1
 1395 00b0 BB6A     		ldr	r3, [r7, #40]
 1396 00b2 9A63     		str	r2, [r3, #56]
1407:../FreeRTOS/queue.c **** 
1408:../FreeRTOS/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1409:../FreeRTOS/queue.c **** 					{
1410:../FreeRTOS/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1397              		.loc 1 1410 0
 1398 00b4 BB6A     		ldr	r3, [r7, #40]
 1399 00b6 1B68     		ldr	r3, [r3]
 1400 00b8 002B     		cmp	r3, #0
 1401 00ba 04D1     		bne	.L112
1411:../FreeRTOS/queue.c **** 						{
1412:../FreeRTOS/queue.c **** 							/* Record the information required to implement
1413:../FreeRTOS/queue.c **** 							priority inheritance should it become necessary. */
1414:../FreeRTOS/queue.c **** 							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is 
 1402              		.loc 1 1414 0
 1403 00bc FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1404 00c0 0246     		mov	r2, r0
 1405 00c2 BB6A     		ldr	r3, [r7, #40]
 1406 00c4 5A60     		str	r2, [r3, #4]
 1407              	.L112:
1415:../FreeRTOS/queue.c **** 						}
1416:../FreeRTOS/queue.c **** 						else
1417:../FreeRTOS/queue.c **** 						{
1418:../FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1419:../FreeRTOS/queue.c **** 						}
1420:../FreeRTOS/queue.c **** 					}
1421:../FreeRTOS/queue.c **** 					#endif /* configUSE_MUTEXES */
1422:../FreeRTOS/queue.c **** 
1423:../FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1408              		.loc 1 1423 0
 1409 00c6 BB6A     		ldr	r3, [r7, #40]
 1410 00c8 1B69     		ldr	r3, [r3, #16]
 1411 00ca 002B     		cmp	r3, #0
 1412 00cc 11D0     		beq	.L113
1424:../FreeRTOS/queue.c **** 					{
1425:../FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 1413              		.loc 1 1425 0
 1414 00ce BB6A     		ldr	r3, [r7, #40]
 1415 00d0 1033     		adds	r3, r3, #16
 1416 00d2 1846     		mov	r0, r3
 1417 00d4 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1418 00d8 0BE0     		b	.L113
 1419              	.L111:
1426:../FreeRTOS/queue.c **** 						{
1427:../FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1428:../FreeRTOS/queue.c **** 						}
1429:../FreeRTOS/queue.c **** 						else
1430:../FreeRTOS/queue.c **** 						{
1431:../FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1432:../FreeRTOS/queue.c **** 						}
1433:../FreeRTOS/queue.c **** 					}
1434:../FreeRTOS/queue.c **** 					else
1435:../FreeRTOS/queue.c **** 					{
1436:../FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1437:../FreeRTOS/queue.c **** 					}
1438:../FreeRTOS/queue.c **** 				}
1439:../FreeRTOS/queue.c **** 				else
1440:../FreeRTOS/queue.c **** 				{
1441:../FreeRTOS/queue.c **** 					traceQUEUE_PEEK( pxQueue );
1442:../FreeRTOS/queue.c **** 
1443:../FreeRTOS/queue.c **** 					/* The data is not being removed, so reset the read
1444:../FreeRTOS/queue.c **** 					pointer. */
1445:../FreeRTOS/queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 1420              		.loc 1 1445 0
 1421 00da BB6A     		ldr	r3, [r7, #40]
 1422 00dc 7A6A     		ldr	r2, [r7, #36]
 1423 00de DA60     		str	r2, [r3, #12]
1446:../FreeRTOS/queue.c **** 
1447:../FreeRTOS/queue.c **** 					/* The data is being left in the queue, so see if there are
1448:../FreeRTOS/queue.c **** 					any other tasks waiting for the data. */
1449:../FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1424              		.loc 1 1449 0
 1425 00e0 BB6A     		ldr	r3, [r7, #40]
 1426 00e2 5B6A     		ldr	r3, [r3, #36]
 1427 00e4 002B     		cmp	r3, #0
 1428 00e6 04D0     		beq	.L113
1450:../FreeRTOS/queue.c **** 					{
1451:../FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1429              		.loc 1 1451 0
 1430 00e8 BB6A     		ldr	r3, [r7, #40]
 1431 00ea 2433     		adds	r3, r3, #36
 1432 00ec 1846     		mov	r0, r3
 1433 00ee FFF7FEFF 		bl	xTaskRemoveFromEventList
 1434              	.L113:
1452:../FreeRTOS/queue.c **** 						{
1453:../FreeRTOS/queue.c **** 							/* The task waiting has a higher priority than this task. */
1454:../FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1455:../FreeRTOS/queue.c **** 						}
1456:../FreeRTOS/queue.c **** 						else
1457:../FreeRTOS/queue.c **** 						{
1458:../FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1459:../FreeRTOS/queue.c **** 						}
1460:../FreeRTOS/queue.c **** 					}
1461:../FreeRTOS/queue.c **** 					else
1462:../FreeRTOS/queue.c **** 					{
1463:../FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1464:../FreeRTOS/queue.c **** 					}
1465:../FreeRTOS/queue.c **** 				}
1466:../FreeRTOS/queue.c **** 
1467:../FreeRTOS/queue.c **** 				taskEXIT_CRITICAL();
 1435              		.loc 1 1467 0
 1436 00f2 FFF7FEFF 		bl	vPortExitCritical
1468:../FreeRTOS/queue.c **** 				return pdPASS;
 1437              		.loc 1 1468 0
 1438 00f6 0123     		movs	r3, #1
 1439 00f8 6CE0     		b	.L124
 1440              	.L110:
1469:../FreeRTOS/queue.c **** 			}
1470:../FreeRTOS/queue.c **** 			else
1471:../FreeRTOS/queue.c **** 			{
1472:../FreeRTOS/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 1441              		.loc 1 1472 0
 1442 00fa 7B68     		ldr	r3, [r7, #4]
 1443 00fc 002B     		cmp	r3, #0
 1444 00fe 03D1     		bne	.L115
1473:../FreeRTOS/queue.c **** 				{
1474:../FreeRTOS/queue.c **** 					/* The queue was empty and no block time is specified (or
1475:../FreeRTOS/queue.c **** 					the block time has expired) so leave now. */
1476:../FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
 1445              		.loc 1 1476 0
 1446 0100 FFF7FEFF 		bl	vPortExitCritical
1477:../FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1478:../FreeRTOS/queue.c **** 					return errQUEUE_EMPTY;
 1447              		.loc 1 1478 0
 1448 0104 0023     		movs	r3, #0
 1449 0106 65E0     		b	.L124
 1450              	.L115:
1479:../FreeRTOS/queue.c **** 				}
1480:../FreeRTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 1451              		.loc 1 1480 0
 1452 0108 FB6A     		ldr	r3, [r7, #44]
 1453 010a 002B     		cmp	r3, #0
 1454 010c 06D1     		bne	.L116
1481:../FreeRTOS/queue.c **** 				{
1482:../FreeRTOS/queue.c **** 					/* The queue was empty and a block time was specified so
1483:../FreeRTOS/queue.c **** 					configure the timeout structure. */
1484:../FreeRTOS/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 1455              		.loc 1 1484 0
 1456 010e 07F11003 		add	r3, r7, #16
 1457 0112 1846     		mov	r0, r3
 1458 0114 FFF7FEFF 		bl	vTaskSetTimeOutState
1485:../FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 1459              		.loc 1 1485 0
 1460 0118 0123     		movs	r3, #1
 1461 011a FB62     		str	r3, [r7, #44]
 1462              	.L116:
1486:../FreeRTOS/queue.c **** 				}
1487:../FreeRTOS/queue.c **** 				else
1488:../FreeRTOS/queue.c **** 				{
1489:../FreeRTOS/queue.c **** 					/* Entry time was already set. */
1490:../FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1491:../FreeRTOS/queue.c **** 				}
1492:../FreeRTOS/queue.c **** 			}
1493:../FreeRTOS/queue.c **** 		}
1494:../FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
 1463              		.loc 1 1494 0
 1464 011c FFF7FEFF 		bl	vPortExitCritical
1495:../FreeRTOS/queue.c **** 
1496:../FreeRTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1497:../FreeRTOS/queue.c **** 		now the critical section has been exited. */
1498:../FreeRTOS/queue.c **** 
1499:../FreeRTOS/queue.c **** 		vTaskSuspendAll();
 1465              		.loc 1 1499 0
 1466 0120 FFF7FEFF 		bl	vTaskSuspendAll
1500:../FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 1467              		.loc 1 1500 0
 1468 0124 FFF7FEFF 		bl	vPortEnterCritical
 1469 0128 BB6A     		ldr	r3, [r7, #40]
 1470 012a 5B6C     		ldr	r3, [r3, #68]
 1471 012c B3F1FF3F 		cmp	r3, #-1
 1472 0130 02D1     		bne	.L117
 1473              		.loc 1 1500 0 is_stmt 0 discriminator 1
 1474 0132 BB6A     		ldr	r3, [r7, #40]
 1475 0134 0022     		movs	r2, #0
 1476 0136 5A64     		str	r2, [r3, #68]
 1477              	.L117:
 1478              		.loc 1 1500 0 discriminator 3
 1479 0138 BB6A     		ldr	r3, [r7, #40]
 1480 013a 9B6C     		ldr	r3, [r3, #72]
 1481 013c B3F1FF3F 		cmp	r3, #-1
 1482 0140 02D1     		bne	.L118
 1483              		.loc 1 1500 0 discriminator 4
 1484 0142 BB6A     		ldr	r3, [r7, #40]
 1485 0144 0022     		movs	r2, #0
 1486 0146 9A64     		str	r2, [r3, #72]
 1487              	.L118:
 1488              		.loc 1 1500 0 discriminator 6
 1489 0148 FFF7FEFF 		bl	vPortExitCritical
1501:../FreeRTOS/queue.c **** 
1502:../FreeRTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1503:../FreeRTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1490              		.loc 1 1503 0 is_stmt 1 discriminator 6
 1491 014c 07F11002 		add	r2, r7, #16
 1492 0150 3B1D     		adds	r3, r7, #4
 1493 0152 1046     		mov	r0, r2
 1494 0154 1946     		mov	r1, r3
 1495 0156 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1496 015a 0346     		mov	r3, r0
 1497 015c 002B     		cmp	r3, #0
 1498 015e 31D1     		bne	.L119
1504:../FreeRTOS/queue.c **** 		{
1505:../FreeRTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1499              		.loc 1 1505 0
 1500 0160 B86A     		ldr	r0, [r7, #40]
 1501 0162 FFF7FEFF 		bl	prvIsQueueEmpty
 1502 0166 0346     		mov	r3, r0
 1503 0168 002B     		cmp	r3, #0
 1504 016a 25D0     		beq	.L120
1506:../FreeRTOS/queue.c **** 			{
1507:../FreeRTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1508:../FreeRTOS/queue.c **** 
1509:../FreeRTOS/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1510:../FreeRTOS/queue.c **** 				{
1511:../FreeRTOS/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1505              		.loc 1 1511 0
 1506 016c BB6A     		ldr	r3, [r7, #40]
 1507 016e 1B68     		ldr	r3, [r3]
 1508 0170 002B     		cmp	r3, #0
 1509 0172 08D1     		bne	.L121
1512:../FreeRTOS/queue.c **** 					{
1513:../FreeRTOS/queue.c **** 						taskENTER_CRITICAL();
 1510              		.loc 1 1513 0
 1511 0174 FFF7FEFF 		bl	vPortEnterCritical
1514:../FreeRTOS/queue.c **** 						{
1515:../FreeRTOS/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 1512              		.loc 1 1515 0
 1513 0178 BB6A     		ldr	r3, [r7, #40]
 1514 017a 5B68     		ldr	r3, [r3, #4]
 1515 017c 1846     		mov	r0, r3
 1516 017e FFF7FEFF 		bl	vTaskPriorityInherit
1516:../FreeRTOS/queue.c **** 						}
1517:../FreeRTOS/queue.c **** 						taskEXIT_CRITICAL();
 1517              		.loc 1 1517 0
 1518 0182 FFF7FEFF 		bl	vPortExitCritical
 1519              	.L121:
1518:../FreeRTOS/queue.c **** 					}
1519:../FreeRTOS/queue.c **** 					else
1520:../FreeRTOS/queue.c **** 					{
1521:../FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1522:../FreeRTOS/queue.c **** 					}
1523:../FreeRTOS/queue.c **** 				}
1524:../FreeRTOS/queue.c **** 				#endif
1525:../FreeRTOS/queue.c **** 
1526:../FreeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1520              		.loc 1 1526 0
 1521 0186 BB6A     		ldr	r3, [r7, #40]
 1522 0188 03F12402 		add	r2, r3, #36
 1523 018c 7B68     		ldr	r3, [r7, #4]
 1524 018e 1046     		mov	r0, r2
 1525 0190 1946     		mov	r1, r3
 1526 0192 FFF7FEFF 		bl	vTaskPlaceOnEventList
1527:../FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 1527              		.loc 1 1527 0
 1528 0196 B86A     		ldr	r0, [r7, #40]
 1529 0198 FFF7FEFF 		bl	prvUnlockQueue
1528:../FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1530              		.loc 1 1528 0
 1531 019c FFF7FEFF 		bl	xTaskResumeAll
 1532 01a0 0346     		mov	r3, r0
 1533 01a2 002B     		cmp	r3, #0
 1534 01a4 15D1     		bne	.L123
1529:../FreeRTOS/queue.c **** 				{
1530:../FreeRTOS/queue.c **** 					portYIELD_WITHIN_API();
 1535              		.loc 1 1530 0
 1536 01a6 0D4B     		ldr	r3, .L125
 1537 01a8 4FF08052 		mov	r2, #268435456
 1538 01ac 1A60     		str	r2, [r3]
 1539              	@ 1530 "../FreeRTOS/queue.c" 1
 1540 01ae BFF34F8F 		dsb
 1541              	@ 0 "" 2
 1542              	@ 1530 "../FreeRTOS/queue.c" 1
 1543 01b2 BFF36F8F 		isb
 1544              	@ 0 "" 2
 1545              		.thumb
 1546 01b6 0CE0     		b	.L123
 1547              	.L120:
1531:../FreeRTOS/queue.c **** 				}
1532:../FreeRTOS/queue.c **** 				else
1533:../FreeRTOS/queue.c **** 				{
1534:../FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1535:../FreeRTOS/queue.c **** 				}
1536:../FreeRTOS/queue.c **** 			}
1537:../FreeRTOS/queue.c **** 			else
1538:../FreeRTOS/queue.c **** 			{
1539:../FreeRTOS/queue.c **** 				/* Try again. */
1540:../FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 1548              		.loc 1 1540 0
 1549 01b8 B86A     		ldr	r0, [r7, #40]
 1550 01ba FFF7FEFF 		bl	prvUnlockQueue
1541:../FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 1551              		.loc 1 1541 0
 1552 01be FFF7FEFF 		bl	xTaskResumeAll
 1553 01c2 62E7     		b	.L108
 1554              	.L119:
1542:../FreeRTOS/queue.c **** 			}
1543:../FreeRTOS/queue.c **** 		}
1544:../FreeRTOS/queue.c **** 		else
1545:../FreeRTOS/queue.c **** 		{
1546:../FreeRTOS/queue.c **** 			prvUnlockQueue( pxQueue );
 1555              		.loc 1 1546 0
 1556 01c4 B86A     		ldr	r0, [r7, #40]
 1557 01c6 FFF7FEFF 		bl	prvUnlockQueue
1547:../FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 1558              		.loc 1 1547 0
 1559 01ca FFF7FEFF 		bl	xTaskResumeAll
1548:../FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FAILED( pxQueue );
1549:../FreeRTOS/queue.c **** 			return errQUEUE_EMPTY;
 1560              		.loc 1 1549 0
 1561 01ce 0023     		movs	r3, #0
 1562 01d0 00E0     		b	.L124
 1563              	.L123:
1550:../FreeRTOS/queue.c **** 		}
1551:../FreeRTOS/queue.c **** 	}
 1564              		.loc 1 1551 0 discriminator 8
 1565 01d2 5AE7     		b	.L108
 1566              	.L124:
1552:../FreeRTOS/queue.c **** }
 1567              		.loc 1 1552 0 discriminator 9
 1568 01d4 1846     		mov	r0, r3
 1569 01d6 3037     		adds	r7, r7, #48
 1570              		.cfi_def_cfa_offset 8
 1571 01d8 BD46     		mov	sp, r7
 1572              		.cfi_def_cfa_register 13
 1573              		@ sp needed
 1574 01da 80BD     		pop	{r7, pc}
 1575              	.L126:
 1576              		.align	2
 1577              	.L125:
 1578 01dc 04ED00E0 		.word	-536810236
 1579              		.cfi_endproc
 1580              	.LFE11:
 1582              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 1583              		.align	2
 1584              		.global	xQueueReceiveFromISR
 1585              		.thumb
 1586              		.thumb_func
 1588              	xQueueReceiveFromISR:
 1589              	.LFB12:
1553:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1554:../FreeRTOS/queue.c **** 
1555:../FreeRTOS/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1556:../FreeRTOS/queue.c **** {
 1590              		.loc 1 1556 0
 1591              		.cfi_startproc
 1592              		@ args = 0, pretend = 0, frame = 48
 1593              		@ frame_needed = 1, uses_anonymous_args = 0
 1594 0000 80B5     		push	{r7, lr}
 1595              		.cfi_def_cfa_offset 8
 1596              		.cfi_offset 7, -8
 1597              		.cfi_offset 14, -4
 1598 0002 8CB0     		sub	sp, sp, #48
 1599              		.cfi_def_cfa_offset 56
 1600 0004 00AF     		add	r7, sp, #0
 1601              		.cfi_def_cfa_register 7
 1602 0006 F860     		str	r0, [r7, #12]
 1603 0008 B960     		str	r1, [r7, #8]
 1604 000a 7A60     		str	r2, [r7, #4]
1557:../FreeRTOS/queue.c **** BaseType_t xReturn;
1558:../FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1559:../FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1605              		.loc 1 1559 0
 1606 000c FB68     		ldr	r3, [r7, #12]
 1607 000e BB62     		str	r3, [r7, #40]
1560:../FreeRTOS/queue.c **** 
1561:../FreeRTOS/queue.c **** 	configASSERT( pxQueue );
 1608              		.loc 1 1561 0
 1609 0010 BB6A     		ldr	r3, [r7, #40]
 1610 0012 002B     		cmp	r3, #0
 1611 0014 09D1     		bne	.L128
 1612              	.LBB116:
 1613              	.LBB117:
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1614              		.loc 2 215 0 discriminator 1
 1615              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 1616 0016 4FF00703 			mov r3, #7												
 1617 001a 83F31188 		msr basepri, r3											
 1618 001e BFF36F8F 		isb														
 1619 0022 BFF34F8F 		dsb														
 1620              	
 1621              	@ 0 "" 2
 1622              		.thumb
 1623 0026 3B62     		str	r3, [r7, #32]
 1624              	.L129:
 1625              	.LBE117:
 1626              	.LBE116:
 1627              		.loc 1 1561 0 discriminator 1
 1628 0028 FEE7     		b	.L129
 1629              	.L128:
1562:../FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1630              		.loc 1 1562 0
 1631 002a BB68     		ldr	r3, [r7, #8]
 1632 002c 002B     		cmp	r3, #0
 1633 002e 03D1     		bne	.L130
 1634              		.loc 1 1562 0 is_stmt 0 discriminator 2
 1635 0030 BB6A     		ldr	r3, [r7, #40]
 1636 0032 1B6C     		ldr	r3, [r3, #64]
 1637 0034 002B     		cmp	r3, #0
 1638 0036 01D1     		bne	.L131
 1639              	.L130:
 1640              		.loc 1 1562 0 discriminator 3
 1641 0038 0123     		movs	r3, #1
 1642 003a 00E0     		b	.L132
 1643              	.L131:
 1644              		.loc 1 1562 0 discriminator 4
 1645 003c 0023     		movs	r3, #0
 1646              	.L132:
 1647              		.loc 1 1562 0 discriminator 6
 1648 003e 002B     		cmp	r3, #0
 1649 0040 09D1     		bne	.L133
 1650              	.LBB118:
 1651              	.LBB119:
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1652              		.loc 2 215 0 is_stmt 1 discriminator 7
 1653              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 1654 0042 4FF00703 			mov r3, #7												
 1655 0046 83F31188 		msr basepri, r3											
 1656 004a BFF36F8F 		isb														
 1657 004e BFF34F8F 		dsb														
 1658              	
 1659              	@ 0 "" 2
 1660              		.thumb
 1661 0052 FB61     		str	r3, [r7, #28]
 1662              	.L134:
 1663              	.LBE119:
 1664              	.LBE118:
 1665              		.loc 1 1562 0 discriminator 2
 1666 0054 FEE7     		b	.L134
 1667              	.L133:
1563:../FreeRTOS/queue.c **** 
1564:../FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1565:../FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1566:../FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1567:../FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1568:../FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1569:../FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1570:../FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1571:../FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1572:../FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1573:../FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1574:../FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1575:../FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1576:../FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1577:../FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1578:../FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1668              		.loc 1 1578 0
 1669 0056 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1670              	.LBB120:
 1671              	.LBB121:
 231:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1672              		.loc 2 231 0
 1673              	@ 231 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 1674 005a EFF31182 			mrs r2, basepri											
 1675 005e 4FF00703 		mov r3, #7												
 1676 0062 83F31188 		msr basepri, r3											
 1677 0066 BFF36F8F 		isb														
 1678 006a BFF34F8F 		dsb														
 1679              	
 1680              	@ 0 "" 2
 1681              		.thumb
 1682 006e BA61     		str	r2, [r7, #24]
 1683 0070 7B61     		str	r3, [r7, #20]
 243:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 1684              		.loc 2 243 0
 1685 0072 BB69     		ldr	r3, [r7, #24]
 1686              	.LBE121:
 1687              	.LBE120:
1579:../FreeRTOS/queue.c **** 
1580:../FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1688              		.loc 1 1580 0
 1689 0074 7B62     		str	r3, [r7, #36]
1581:../FreeRTOS/queue.c **** 	{
1582:../FreeRTOS/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1583:../FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 1690              		.loc 1 1583 0
 1691 0076 BB6A     		ldr	r3, [r7, #40]
 1692 0078 9B6B     		ldr	r3, [r3, #56]
 1693 007a 002B     		cmp	r3, #0
 1694 007c 28D0     		beq	.L136
1584:../FreeRTOS/queue.c **** 		{
1585:../FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1586:../FreeRTOS/queue.c **** 
1587:../FreeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1695              		.loc 1 1587 0
 1696 007e B86A     		ldr	r0, [r7, #40]
 1697 0080 B968     		ldr	r1, [r7, #8]
 1698 0082 FFF7FEFF 		bl	prvCopyDataFromQueue
1588:../FreeRTOS/queue.c **** 			--( pxQueue->uxMessagesWaiting );
 1699              		.loc 1 1588 0
 1700 0086 BB6A     		ldr	r3, [r7, #40]
 1701 0088 9B6B     		ldr	r3, [r3, #56]
 1702 008a 5A1E     		subs	r2, r3, #1
 1703 008c BB6A     		ldr	r3, [r7, #40]
 1704 008e 9A63     		str	r2, [r3, #56]
1589:../FreeRTOS/queue.c **** 
1590:../FreeRTOS/queue.c **** 			/* If the queue is locked the event list will not be modified.
1591:../FreeRTOS/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1592:../FreeRTOS/queue.c **** 			will know that an ISR has removed data while the queue was
1593:../FreeRTOS/queue.c **** 			locked. */
1594:../FreeRTOS/queue.c **** 			if( pxQueue->xRxLock == queueUNLOCKED )
 1705              		.loc 1 1594 0
 1706 0090 BB6A     		ldr	r3, [r7, #40]
 1707 0092 5B6C     		ldr	r3, [r3, #68]
 1708 0094 B3F1FF3F 		cmp	r3, #-1
 1709 0098 12D1     		bne	.L137
1595:../FreeRTOS/queue.c **** 			{
1596:../FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1710              		.loc 1 1596 0
 1711 009a BB6A     		ldr	r3, [r7, #40]
 1712 009c 1B69     		ldr	r3, [r3, #16]
 1713 009e 002B     		cmp	r3, #0
 1714 00a0 13D0     		beq	.L138
1597:../FreeRTOS/queue.c **** 				{
1598:../FreeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1715              		.loc 1 1598 0
 1716 00a2 BB6A     		ldr	r3, [r7, #40]
 1717 00a4 1033     		adds	r3, r3, #16
 1718 00a6 1846     		mov	r0, r3
 1719 00a8 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1720 00ac 0346     		mov	r3, r0
 1721 00ae 002B     		cmp	r3, #0
 1722 00b0 0BD0     		beq	.L138
1599:../FreeRTOS/queue.c **** 					{
1600:../FreeRTOS/queue.c **** 						/* The task waiting has a higher priority than us so
1601:../FreeRTOS/queue.c **** 						force a context switch. */
1602:../FreeRTOS/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
 1723              		.loc 1 1602 0
 1724 00b2 7B68     		ldr	r3, [r7, #4]
 1725 00b4 002B     		cmp	r3, #0
 1726 00b6 08D0     		beq	.L138
1603:../FreeRTOS/queue.c **** 						{
1604:../FreeRTOS/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
 1727              		.loc 1 1604 0
 1728 00b8 7B68     		ldr	r3, [r7, #4]
 1729 00ba 0122     		movs	r2, #1
 1730 00bc 1A60     		str	r2, [r3]
 1731 00be 04E0     		b	.L138
 1732              	.L137:
1605:../FreeRTOS/queue.c **** 						}
1606:../FreeRTOS/queue.c **** 						else
1607:../FreeRTOS/queue.c **** 						{
1608:../FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1609:../FreeRTOS/queue.c **** 						}
1610:../FreeRTOS/queue.c **** 					}
1611:../FreeRTOS/queue.c **** 					else
1612:../FreeRTOS/queue.c **** 					{
1613:../FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1614:../FreeRTOS/queue.c **** 					}
1615:../FreeRTOS/queue.c **** 				}
1616:../FreeRTOS/queue.c **** 				else
1617:../FreeRTOS/queue.c **** 				{
1618:../FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1619:../FreeRTOS/queue.c **** 				}
1620:../FreeRTOS/queue.c **** 			}
1621:../FreeRTOS/queue.c **** 			else
1622:../FreeRTOS/queue.c **** 			{
1623:../FreeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1624:../FreeRTOS/queue.c **** 				knows that data was removed while it was locked. */
1625:../FreeRTOS/queue.c **** 				++( pxQueue->xRxLock );
 1733              		.loc 1 1625 0
 1734 00c0 BB6A     		ldr	r3, [r7, #40]
 1735 00c2 5B6C     		ldr	r3, [r3, #68]
 1736 00c4 5A1C     		adds	r2, r3, #1
 1737 00c6 BB6A     		ldr	r3, [r7, #40]
 1738 00c8 5A64     		str	r2, [r3, #68]
 1739              	.L138:
1626:../FreeRTOS/queue.c **** 			}
1627:../FreeRTOS/queue.c **** 
1628:../FreeRTOS/queue.c **** 			xReturn = pdPASS;
 1740              		.loc 1 1628 0
 1741 00ca 0123     		movs	r3, #1
 1742 00cc FB62     		str	r3, [r7, #44]
 1743 00ce 01E0     		b	.L139
 1744              	.L136:
1629:../FreeRTOS/queue.c **** 		}
1630:../FreeRTOS/queue.c **** 		else
1631:../FreeRTOS/queue.c **** 		{
1632:../FreeRTOS/queue.c **** 			xReturn = pdFAIL;
 1745              		.loc 1 1632 0
 1746 00d0 0023     		movs	r3, #0
 1747 00d2 FB62     		str	r3, [r7, #44]
 1748              	.L139:
 1749 00d4 7B6A     		ldr	r3, [r7, #36]
 1750 00d6 3B61     		str	r3, [r7, #16]
 1751              	.LBB122:
 1752              	.LBB123:
 1753              		.loc 2 249 0
 1754 00d8 3B69     		ldr	r3, [r7, #16]
 1755              	@ 249 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 1756 00da 83F31188 			msr basepri, r3	
 1757              	@ 0 "" 2
 1758              		.thumb
 1759              	.LBE123:
 1760              	.LBE122:
1633:../FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1634:../FreeRTOS/queue.c **** 		}
1635:../FreeRTOS/queue.c **** 	}
1636:../FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1637:../FreeRTOS/queue.c **** 
1638:../FreeRTOS/queue.c **** 	return xReturn;
 1761              		.loc 1 1638 0
 1762 00de FB6A     		ldr	r3, [r7, #44]
1639:../FreeRTOS/queue.c **** }
 1763              		.loc 1 1639 0
 1764 00e0 1846     		mov	r0, r3
 1765 00e2 3037     		adds	r7, r7, #48
 1766              		.cfi_def_cfa_offset 8
 1767 00e4 BD46     		mov	sp, r7
 1768              		.cfi_def_cfa_register 13
 1769              		@ sp needed
 1770 00e6 80BD     		pop	{r7, pc}
 1771              		.cfi_endproc
 1772              	.LFE12:
 1774              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 1775              		.align	2
 1776              		.global	xQueuePeekFromISR
 1777              		.thumb
 1778              		.thumb_func
 1780              	xQueuePeekFromISR:
 1781              	.LFB13:
1640:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1641:../FreeRTOS/queue.c **** 
1642:../FreeRTOS/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1643:../FreeRTOS/queue.c **** {
 1782              		.loc 1 1643 0
 1783              		.cfi_startproc
 1784              		@ args = 0, pretend = 0, frame = 48
 1785              		@ frame_needed = 1, uses_anonymous_args = 0
 1786 0000 80B5     		push	{r7, lr}
 1787              		.cfi_def_cfa_offset 8
 1788              		.cfi_offset 7, -8
 1789              		.cfi_offset 14, -4
 1790 0002 8CB0     		sub	sp, sp, #48
 1791              		.cfi_def_cfa_offset 56
 1792 0004 00AF     		add	r7, sp, #0
 1793              		.cfi_def_cfa_register 7
 1794 0006 7860     		str	r0, [r7, #4]
 1795 0008 3960     		str	r1, [r7]
1644:../FreeRTOS/queue.c **** BaseType_t xReturn;
1645:../FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1646:../FreeRTOS/queue.c **** int8_t *pcOriginalReadPosition;
1647:../FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1796              		.loc 1 1647 0
 1797 000a 7B68     		ldr	r3, [r7, #4]
 1798 000c BB62     		str	r3, [r7, #40]
1648:../FreeRTOS/queue.c **** 
1649:../FreeRTOS/queue.c **** 	configASSERT( pxQueue );
 1799              		.loc 1 1649 0
 1800 000e BB6A     		ldr	r3, [r7, #40]
 1801 0010 002B     		cmp	r3, #0
 1802 0012 09D1     		bne	.L142
 1803              	.LBB124:
 1804              	.LBB125:
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1805              		.loc 2 215 0 discriminator 1
 1806              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 1807 0014 4FF00703 			mov r3, #7												
 1808 0018 83F31188 		msr basepri, r3											
 1809 001c BFF36F8F 		isb														
 1810 0020 BFF34F8F 		dsb														
 1811              	
 1812              	@ 0 "" 2
 1813              		.thumb
 1814 0024 FB61     		str	r3, [r7, #28]
 1815              	.L143:
 1816              	.LBE125:
 1817              	.LBE124:
 1818              		.loc 1 1649 0 discriminator 1
 1819 0026 FEE7     		b	.L143
 1820              	.L142:
1650:../FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1821              		.loc 1 1650 0
 1822 0028 3B68     		ldr	r3, [r7]
 1823 002a 002B     		cmp	r3, #0
 1824 002c 03D1     		bne	.L144
 1825              		.loc 1 1650 0 is_stmt 0 discriminator 2
 1826 002e BB6A     		ldr	r3, [r7, #40]
 1827 0030 1B6C     		ldr	r3, [r3, #64]
 1828 0032 002B     		cmp	r3, #0
 1829 0034 01D1     		bne	.L145
 1830              	.L144:
 1831              		.loc 1 1650 0 discriminator 3
 1832 0036 0123     		movs	r3, #1
 1833 0038 00E0     		b	.L146
 1834              	.L145:
 1835              		.loc 1 1650 0 discriminator 4
 1836 003a 0023     		movs	r3, #0
 1837              	.L146:
 1838              		.loc 1 1650 0 discriminator 6
 1839 003c 002B     		cmp	r3, #0
 1840 003e 09D1     		bne	.L147
 1841              	.LBB126:
 1842              	.LBB127:
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1843              		.loc 2 215 0 is_stmt 1 discriminator 7
 1844              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 1845 0040 4FF00703 			mov r3, #7												
 1846 0044 83F31188 		msr basepri, r3											
 1847 0048 BFF36F8F 		isb														
 1848 004c BFF34F8F 		dsb														
 1849              	
 1850              	@ 0 "" 2
 1851              		.thumb
 1852 0050 BB61     		str	r3, [r7, #24]
 1853              	.L148:
 1854              	.LBE127:
 1855              	.LBE126:
 1856              		.loc 1 1650 0 discriminator 2
 1857 0052 FEE7     		b	.L148
 1858              	.L147:
1651:../FreeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 1859              		.loc 1 1651 0
 1860 0054 BB6A     		ldr	r3, [r7, #40]
 1861 0056 1B6C     		ldr	r3, [r3, #64]
 1862 0058 002B     		cmp	r3, #0
 1863 005a 09D1     		bne	.L149
 1864              	.LBB128:
 1865              	.LBB129:
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1866              		.loc 2 215 0 discriminator 1
 1867              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 1868 005c 4FF00703 			mov r3, #7												
 1869 0060 83F31188 		msr basepri, r3											
 1870 0064 BFF36F8F 		isb														
 1871 0068 BFF34F8F 		dsb														
 1872              	
 1873              	@ 0 "" 2
 1874              		.thumb
 1875 006c 7B61     		str	r3, [r7, #20]
 1876              	.L150:
 1877              	.LBE129:
 1878              	.LBE128:
 1879              		.loc 1 1651 0 discriminator 3
 1880 006e FEE7     		b	.L150
 1881              	.L149:
1652:../FreeRTOS/queue.c **** 
1653:../FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1654:../FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1655:../FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1656:../FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1657:../FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1658:../FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1659:../FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1660:../FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1661:../FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1662:../FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1663:../FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1664:../FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1665:../FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1666:../FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1667:../FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1882              		.loc 1 1667 0
 1883 0070 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1884              	.LBB130:
 1885              	.LBB131:
 231:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1886              		.loc 2 231 0
 1887              	@ 231 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 1888 0074 EFF31182 			mrs r2, basepri											
 1889 0078 4FF00703 		mov r3, #7												
 1890 007c 83F31188 		msr basepri, r3											
 1891 0080 BFF36F8F 		isb														
 1892 0084 BFF34F8F 		dsb														
 1893              	
 1894              	@ 0 "" 2
 1895              		.thumb
 1896 0088 3A61     		str	r2, [r7, #16]
 1897 008a FB60     		str	r3, [r7, #12]
 243:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 1898              		.loc 2 243 0
 1899 008c 3B69     		ldr	r3, [r7, #16]
 1900              	.LBE131:
 1901              	.LBE130:
1668:../FreeRTOS/queue.c **** 
1669:../FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1902              		.loc 1 1669 0
 1903 008e 7B62     		str	r3, [r7, #36]
1670:../FreeRTOS/queue.c **** 	{
1671:../FreeRTOS/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1672:../FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 1904              		.loc 1 1672 0
 1905 0090 BB6A     		ldr	r3, [r7, #40]
 1906 0092 9B6B     		ldr	r3, [r3, #56]
 1907 0094 002B     		cmp	r3, #0
 1908 0096 0CD0     		beq	.L152
1673:../FreeRTOS/queue.c **** 		{
1674:../FreeRTOS/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1675:../FreeRTOS/queue.c **** 
1676:../FreeRTOS/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1677:../FreeRTOS/queue.c **** 			actually being removed from the queue. */
1678:../FreeRTOS/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 1909              		.loc 1 1678 0
 1910 0098 BB6A     		ldr	r3, [r7, #40]
 1911 009a DB68     		ldr	r3, [r3, #12]
 1912 009c 3B62     		str	r3, [r7, #32]
1679:../FreeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1913              		.loc 1 1679 0
 1914 009e B86A     		ldr	r0, [r7, #40]
 1915 00a0 3968     		ldr	r1, [r7]
 1916 00a2 FFF7FEFF 		bl	prvCopyDataFromQueue
1680:../FreeRTOS/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 1917              		.loc 1 1680 0
 1918 00a6 BB6A     		ldr	r3, [r7, #40]
 1919 00a8 3A6A     		ldr	r2, [r7, #32]
 1920 00aa DA60     		str	r2, [r3, #12]
1681:../FreeRTOS/queue.c **** 
1682:../FreeRTOS/queue.c **** 			xReturn = pdPASS;
 1921              		.loc 1 1682 0
 1922 00ac 0123     		movs	r3, #1
 1923 00ae FB62     		str	r3, [r7, #44]
 1924 00b0 01E0     		b	.L153
 1925              	.L152:
1683:../FreeRTOS/queue.c **** 		}
1684:../FreeRTOS/queue.c **** 		else
1685:../FreeRTOS/queue.c **** 		{
1686:../FreeRTOS/queue.c **** 			xReturn = pdFAIL;
 1926              		.loc 1 1686 0
 1927 00b2 0023     		movs	r3, #0
 1928 00b4 FB62     		str	r3, [r7, #44]
 1929              	.L153:
 1930 00b6 7B6A     		ldr	r3, [r7, #36]
 1931 00b8 BB60     		str	r3, [r7, #8]
 1932              	.LBB132:
 1933              	.LBB133:
 1934              		.loc 2 249 0
 1935 00ba BB68     		ldr	r3, [r7, #8]
 1936              	@ 249 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 1937 00bc 83F31188 			msr basepri, r3	
 1938              	@ 0 "" 2
 1939              		.thumb
 1940              	.LBE133:
 1941              	.LBE132:
1687:../FreeRTOS/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1688:../FreeRTOS/queue.c **** 		}
1689:../FreeRTOS/queue.c **** 	}
1690:../FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1691:../FreeRTOS/queue.c **** 
1692:../FreeRTOS/queue.c **** 	return xReturn;
 1942              		.loc 1 1692 0
 1943 00c0 FB6A     		ldr	r3, [r7, #44]
1693:../FreeRTOS/queue.c **** }
 1944              		.loc 1 1693 0
 1945 00c2 1846     		mov	r0, r3
 1946 00c4 3037     		adds	r7, r7, #48
 1947              		.cfi_def_cfa_offset 8
 1948 00c6 BD46     		mov	sp, r7
 1949              		.cfi_def_cfa_register 13
 1950              		@ sp needed
 1951 00c8 80BD     		pop	{r7, pc}
 1952              		.cfi_endproc
 1953              	.LFE13:
 1955 00ca 00BF     		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 1956              		.align	2
 1957              		.global	uxQueueMessagesWaiting
 1958              		.thumb
 1959              		.thumb_func
 1961              	uxQueueMessagesWaiting:
 1962              	.LFB14:
1694:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1695:../FreeRTOS/queue.c **** 
1696:../FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1697:../FreeRTOS/queue.c **** {
 1963              		.loc 1 1697 0
 1964              		.cfi_startproc
 1965              		@ args = 0, pretend = 0, frame = 16
 1966              		@ frame_needed = 1, uses_anonymous_args = 0
 1967 0000 80B5     		push	{r7, lr}
 1968              		.cfi_def_cfa_offset 8
 1969              		.cfi_offset 7, -8
 1970              		.cfi_offset 14, -4
 1971 0002 84B0     		sub	sp, sp, #16
 1972              		.cfi_def_cfa_offset 24
 1973 0004 00AF     		add	r7, sp, #0
 1974              		.cfi_def_cfa_register 7
 1975 0006 7860     		str	r0, [r7, #4]
1698:../FreeRTOS/queue.c **** UBaseType_t uxReturn;
1699:../FreeRTOS/queue.c **** 
1700:../FreeRTOS/queue.c **** 	configASSERT( xQueue );
 1976              		.loc 1 1700 0
 1977 0008 7B68     		ldr	r3, [r7, #4]
 1978 000a 002B     		cmp	r3, #0
 1979 000c 09D1     		bne	.L156
 1980              	.LBB134:
 1981              	.LBB135:
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1982              		.loc 2 215 0 discriminator 1
 1983              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 1984 000e 4FF00703 			mov r3, #7												
 1985 0012 83F31188 		msr basepri, r3											
 1986 0016 BFF36F8F 		isb														
 1987 001a BFF34F8F 		dsb														
 1988              	
 1989              	@ 0 "" 2
 1990              		.thumb
 1991 001e BB60     		str	r3, [r7, #8]
 1992              	.L157:
 1993              	.LBE135:
 1994              	.LBE134:
 1995              		.loc 1 1700 0 discriminator 1
 1996 0020 FEE7     		b	.L157
 1997              	.L156:
1701:../FreeRTOS/queue.c **** 
1702:../FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
 1998              		.loc 1 1702 0
 1999 0022 FFF7FEFF 		bl	vPortEnterCritical
1703:../FreeRTOS/queue.c **** 	{
1704:../FreeRTOS/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 2000              		.loc 1 1704 0
 2001 0026 7B68     		ldr	r3, [r7, #4]
 2002 0028 9B6B     		ldr	r3, [r3, #56]
 2003 002a FB60     		str	r3, [r7, #12]
1705:../FreeRTOS/queue.c **** 	}
1706:../FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
 2004              		.loc 1 1706 0
 2005 002c FFF7FEFF 		bl	vPortExitCritical
1707:../FreeRTOS/queue.c **** 
1708:../FreeRTOS/queue.c **** 	return uxReturn;
 2006              		.loc 1 1708 0
 2007 0030 FB68     		ldr	r3, [r7, #12]
1709:../FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2008              		.loc 1 1709 0
 2009 0032 1846     		mov	r0, r3
 2010 0034 1037     		adds	r7, r7, #16
 2011              		.cfi_def_cfa_offset 8
 2012 0036 BD46     		mov	sp, r7
 2013              		.cfi_def_cfa_register 13
 2014              		@ sp needed
 2015 0038 80BD     		pop	{r7, pc}
 2016              		.cfi_endproc
 2017              	.LFE14:
 2019 003a 00BF     		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2020              		.align	2
 2021              		.global	uxQueueSpacesAvailable
 2022              		.thumb
 2023              		.thumb_func
 2025              	uxQueueSpacesAvailable:
 2026              	.LFB15:
1710:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1711:../FreeRTOS/queue.c **** 
1712:../FreeRTOS/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1713:../FreeRTOS/queue.c **** {
 2027              		.loc 1 1713 0
 2028              		.cfi_startproc
 2029              		@ args = 0, pretend = 0, frame = 24
 2030              		@ frame_needed = 1, uses_anonymous_args = 0
 2031 0000 80B5     		push	{r7, lr}
 2032              		.cfi_def_cfa_offset 8
 2033              		.cfi_offset 7, -8
 2034              		.cfi_offset 14, -4
 2035 0002 86B0     		sub	sp, sp, #24
 2036              		.cfi_def_cfa_offset 32
 2037 0004 00AF     		add	r7, sp, #0
 2038              		.cfi_def_cfa_register 7
 2039 0006 7860     		str	r0, [r7, #4]
1714:../FreeRTOS/queue.c **** UBaseType_t uxReturn;
1715:../FreeRTOS/queue.c **** Queue_t *pxQueue;
1716:../FreeRTOS/queue.c **** 
1717:../FreeRTOS/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
 2040              		.loc 1 1717 0
 2041 0008 7B68     		ldr	r3, [r7, #4]
 2042 000a 7B61     		str	r3, [r7, #20]
1718:../FreeRTOS/queue.c **** 	configASSERT( pxQueue );
 2043              		.loc 1 1718 0
 2044 000c 7B69     		ldr	r3, [r7, #20]
 2045 000e 002B     		cmp	r3, #0
 2046 0010 09D1     		bne	.L160
 2047              	.LBB136:
 2048              	.LBB137:
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2049              		.loc 2 215 0 discriminator 1
 2050              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 2051 0012 4FF00703 			mov r3, #7												
 2052 0016 83F31188 		msr basepri, r3											
 2053 001a BFF36F8F 		isb														
 2054 001e BFF34F8F 		dsb														
 2055              	
 2056              	@ 0 "" 2
 2057              		.thumb
 2058 0022 FB60     		str	r3, [r7, #12]
 2059              	.L161:
 2060              	.LBE137:
 2061              	.LBE136:
 2062              		.loc 1 1718 0 discriminator 1
 2063 0024 FEE7     		b	.L161
 2064              	.L160:
1719:../FreeRTOS/queue.c **** 
1720:../FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
 2065              		.loc 1 1720 0
 2066 0026 FFF7FEFF 		bl	vPortEnterCritical
1721:../FreeRTOS/queue.c **** 	{
1722:../FreeRTOS/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 2067              		.loc 1 1722 0
 2068 002a 7B69     		ldr	r3, [r7, #20]
 2069 002c DA6B     		ldr	r2, [r3, #60]
 2070 002e 7B69     		ldr	r3, [r7, #20]
 2071 0030 9B6B     		ldr	r3, [r3, #56]
 2072 0032 D31A     		subs	r3, r2, r3
 2073 0034 3B61     		str	r3, [r7, #16]
1723:../FreeRTOS/queue.c **** 	}
1724:../FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
 2074              		.loc 1 1724 0
 2075 0036 FFF7FEFF 		bl	vPortExitCritical
1725:../FreeRTOS/queue.c **** 
1726:../FreeRTOS/queue.c **** 	return uxReturn;
 2076              		.loc 1 1726 0
 2077 003a 3B69     		ldr	r3, [r7, #16]
1727:../FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2078              		.loc 1 1727 0
 2079 003c 1846     		mov	r0, r3
 2080 003e 1837     		adds	r7, r7, #24
 2081              		.cfi_def_cfa_offset 8
 2082 0040 BD46     		mov	sp, r7
 2083              		.cfi_def_cfa_register 13
 2084              		@ sp needed
 2085 0042 80BD     		pop	{r7, pc}
 2086              		.cfi_endproc
 2087              	.LFE15:
 2089              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2090              		.align	2
 2091              		.global	uxQueueMessagesWaitingFromISR
 2092              		.thumb
 2093              		.thumb_func
 2095              	uxQueueMessagesWaitingFromISR:
 2096              	.LFB16:
1728:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1729:../FreeRTOS/queue.c **** 
1730:../FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1731:../FreeRTOS/queue.c **** {
 2097              		.loc 1 1731 0
 2098              		.cfi_startproc
 2099              		@ args = 0, pretend = 0, frame = 16
 2100              		@ frame_needed = 1, uses_anonymous_args = 0
 2101              		@ link register save eliminated.
 2102 0000 80B4     		push	{r7}
 2103              		.cfi_def_cfa_offset 4
 2104              		.cfi_offset 7, -4
 2105 0002 85B0     		sub	sp, sp, #20
 2106              		.cfi_def_cfa_offset 24
 2107 0004 00AF     		add	r7, sp, #0
 2108              		.cfi_def_cfa_register 7
 2109 0006 7860     		str	r0, [r7, #4]
1732:../FreeRTOS/queue.c **** UBaseType_t uxReturn;
1733:../FreeRTOS/queue.c **** 
1734:../FreeRTOS/queue.c **** 	configASSERT( xQueue );
 2110              		.loc 1 1734 0
 2111 0008 7B68     		ldr	r3, [r7, #4]
 2112 000a 002B     		cmp	r3, #0
 2113 000c 09D1     		bne	.L164
 2114              	.LBB138:
 2115              	.LBB139:
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2116              		.loc 2 215 0 discriminator 1
 2117              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 2118 000e 4FF00703 			mov r3, #7												
 2119 0012 83F31188 		msr basepri, r3											
 2120 0016 BFF36F8F 		isb														
 2121 001a BFF34F8F 		dsb														
 2122              	
 2123              	@ 0 "" 2
 2124              		.thumb
 2125 001e BB60     		str	r3, [r7, #8]
 2126              	.L165:
 2127              	.LBE139:
 2128              	.LBE138:
 2129              		.loc 1 1734 0 discriminator 1
 2130 0020 FEE7     		b	.L165
 2131              	.L164:
1735:../FreeRTOS/queue.c **** 
1736:../FreeRTOS/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 2132              		.loc 1 1736 0
 2133 0022 7B68     		ldr	r3, [r7, #4]
 2134 0024 9B6B     		ldr	r3, [r3, #56]
 2135 0026 FB60     		str	r3, [r7, #12]
1737:../FreeRTOS/queue.c **** 
1738:../FreeRTOS/queue.c **** 	return uxReturn;
 2136              		.loc 1 1738 0
 2137 0028 FB68     		ldr	r3, [r7, #12]
1739:../FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2138              		.loc 1 1739 0
 2139 002a 1846     		mov	r0, r3
 2140 002c 1437     		adds	r7, r7, #20
 2141              		.cfi_def_cfa_offset 4
 2142 002e BD46     		mov	sp, r7
 2143              		.cfi_def_cfa_register 13
 2144              		@ sp needed
 2145 0030 5DF8047B 		ldr	r7, [sp], #4
 2146              		.cfi_restore 7
 2147              		.cfi_def_cfa_offset 0
 2148 0034 7047     		bx	lr
 2149              		.cfi_endproc
 2150              	.LFE16:
 2152 0036 00BF     		.section	.text.vQueueDelete,"ax",%progbits
 2153              		.align	2
 2154              		.global	vQueueDelete
 2155              		.thumb
 2156              		.thumb_func
 2158              	vQueueDelete:
 2159              	.LFB17:
1740:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1741:../FreeRTOS/queue.c **** 
1742:../FreeRTOS/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1743:../FreeRTOS/queue.c **** {
 2160              		.loc 1 1743 0
 2161              		.cfi_startproc
 2162              		@ args = 0, pretend = 0, frame = 16
 2163              		@ frame_needed = 1, uses_anonymous_args = 0
 2164 0000 80B5     		push	{r7, lr}
 2165              		.cfi_def_cfa_offset 8
 2166              		.cfi_offset 7, -8
 2167              		.cfi_offset 14, -4
 2168 0002 84B0     		sub	sp, sp, #16
 2169              		.cfi_def_cfa_offset 24
 2170 0004 00AF     		add	r7, sp, #0
 2171              		.cfi_def_cfa_register 7
 2172 0006 7860     		str	r0, [r7, #4]
1744:../FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2173              		.loc 1 1744 0
 2174 0008 7B68     		ldr	r3, [r7, #4]
 2175 000a FB60     		str	r3, [r7, #12]
1745:../FreeRTOS/queue.c **** 
1746:../FreeRTOS/queue.c **** 	configASSERT( pxQueue );
 2176              		.loc 1 1746 0
 2177 000c FB68     		ldr	r3, [r7, #12]
 2178 000e 002B     		cmp	r3, #0
 2179 0010 09D1     		bne	.L168
 2180              	.LBB140:
 2181              	.LBB141:
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2182              		.loc 2 215 0 discriminator 1
 2183              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 2184 0012 4FF00703 			mov r3, #7												
 2185 0016 83F31188 		msr basepri, r3											
 2186 001a BFF36F8F 		isb														
 2187 001e BFF34F8F 		dsb														
 2188              	
 2189              	@ 0 "" 2
 2190              		.thumb
 2191 0022 BB60     		str	r3, [r7, #8]
 2192              	.L169:
 2193              	.LBE141:
 2194              	.LBE140:
 2195              		.loc 1 1746 0 discriminator 1
 2196 0024 FEE7     		b	.L169
 2197              	.L168:
1747:../FreeRTOS/queue.c **** 
1748:../FreeRTOS/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1749:../FreeRTOS/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1750:../FreeRTOS/queue.c **** 	{
1751:../FreeRTOS/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1752:../FreeRTOS/queue.c **** 	}
1753:../FreeRTOS/queue.c **** 	#endif
1754:../FreeRTOS/queue.c **** 	vPortFree( pxQueue );
 2198              		.loc 1 1754 0
 2199 0026 F868     		ldr	r0, [r7, #12]
 2200 0028 FFF7FEFF 		bl	vPortFree
1755:../FreeRTOS/queue.c **** }
 2201              		.loc 1 1755 0
 2202 002c 1037     		adds	r7, r7, #16
 2203              		.cfi_def_cfa_offset 8
 2204 002e BD46     		mov	sp, r7
 2205              		.cfi_def_cfa_register 13
 2206              		@ sp needed
 2207 0030 80BD     		pop	{r7, pc}
 2208              		.cfi_endproc
 2209              	.LFE17:
 2211 0032 00BF     		.section	.text.prvCopyDataToQueue,"ax",%progbits
 2212              		.align	2
 2213              		.thumb
 2214              		.thumb_func
 2216              	prvCopyDataToQueue:
 2217              	.LFB18:
1756:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1757:../FreeRTOS/queue.c **** 
1758:../FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1759:../FreeRTOS/queue.c **** 
1760:../FreeRTOS/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1761:../FreeRTOS/queue.c **** 	{
1762:../FreeRTOS/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1763:../FreeRTOS/queue.c **** 	}
1764:../FreeRTOS/queue.c **** 
1765:../FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1766:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1767:../FreeRTOS/queue.c **** 
1768:../FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1769:../FreeRTOS/queue.c **** 
1770:../FreeRTOS/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1771:../FreeRTOS/queue.c **** 	{
1772:../FreeRTOS/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1773:../FreeRTOS/queue.c **** 	}
1774:../FreeRTOS/queue.c **** 
1775:../FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1776:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1777:../FreeRTOS/queue.c **** 
1778:../FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1779:../FreeRTOS/queue.c **** 
1780:../FreeRTOS/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
1781:../FreeRTOS/queue.c **** 	{
1782:../FreeRTOS/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
1783:../FreeRTOS/queue.c **** 	}
1784:../FreeRTOS/queue.c **** 
1785:../FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1786:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1787:../FreeRTOS/queue.c **** 
1788:../FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
1789:../FreeRTOS/queue.c **** {
 2218              		.loc 1 1789 0
 2219              		.cfi_startproc
 2220              		@ args = 0, pretend = 0, frame = 24
 2221              		@ frame_needed = 1, uses_anonymous_args = 0
 2222 0000 80B5     		push	{r7, lr}
 2223              		.cfi_def_cfa_offset 8
 2224              		.cfi_offset 7, -8
 2225              		.cfi_offset 14, -4
 2226 0002 86B0     		sub	sp, sp, #24
 2227              		.cfi_def_cfa_offset 32
 2228 0004 00AF     		add	r7, sp, #0
 2229              		.cfi_def_cfa_register 7
 2230 0006 F860     		str	r0, [r7, #12]
 2231 0008 B960     		str	r1, [r7, #8]
 2232 000a 7A60     		str	r2, [r7, #4]
1790:../FreeRTOS/queue.c **** BaseType_t xReturn = pdFALSE;
 2233              		.loc 1 1790 0
 2234 000c 0023     		movs	r3, #0
 2235 000e 7B61     		str	r3, [r7, #20]
1791:../FreeRTOS/queue.c **** 
1792:../FreeRTOS/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 2236              		.loc 1 1792 0
 2237 0010 FB68     		ldr	r3, [r7, #12]
 2238 0012 1B6C     		ldr	r3, [r3, #64]
 2239 0014 002B     		cmp	r3, #0
 2240 0016 0DD1     		bne	.L171
1793:../FreeRTOS/queue.c **** 	{
1794:../FreeRTOS/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1795:../FreeRTOS/queue.c **** 		{
1796:../FreeRTOS/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2241              		.loc 1 1796 0
 2242 0018 FB68     		ldr	r3, [r7, #12]
 2243 001a 1B68     		ldr	r3, [r3]
 2244 001c 002B     		cmp	r3, #0
 2245 001e 52D1     		bne	.L172
1797:../FreeRTOS/queue.c **** 			{
1798:../FreeRTOS/queue.c **** 				/* The mutex is no longer being held. */
1799:../FreeRTOS/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 2246              		.loc 1 1799 0
 2247 0020 FB68     		ldr	r3, [r7, #12]
 2248 0022 5B68     		ldr	r3, [r3, #4]
 2249 0024 1846     		mov	r0, r3
 2250 0026 FFF7FEFF 		bl	xTaskPriorityDisinherit
 2251 002a 7861     		str	r0, [r7, #20]
1800:../FreeRTOS/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 2252              		.loc 1 1800 0
 2253 002c FB68     		ldr	r3, [r7, #12]
 2254 002e 0022     		movs	r2, #0
 2255 0030 5A60     		str	r2, [r3, #4]
 2256 0032 48E0     		b	.L172
 2257              	.L171:
1801:../FreeRTOS/queue.c **** 			}
1802:../FreeRTOS/queue.c **** 			else
1803:../FreeRTOS/queue.c **** 			{
1804:../FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1805:../FreeRTOS/queue.c **** 			}
1806:../FreeRTOS/queue.c **** 		}
1807:../FreeRTOS/queue.c **** 		#endif /* configUSE_MUTEXES */
1808:../FreeRTOS/queue.c **** 	}
1809:../FreeRTOS/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
 2258              		.loc 1 1809 0
 2259 0034 7B68     		ldr	r3, [r7, #4]
 2260 0036 002B     		cmp	r3, #0
 2261 0038 1AD1     		bne	.L173
1810:../FreeRTOS/queue.c **** 	{
1811:../FreeRTOS/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
 2262              		.loc 1 1811 0
 2263 003a FB68     		ldr	r3, [r7, #12]
 2264 003c 9A68     		ldr	r2, [r3, #8]
 2265 003e FB68     		ldr	r3, [r7, #12]
 2266 0040 1B6C     		ldr	r3, [r3, #64]
 2267 0042 1046     		mov	r0, r2
 2268 0044 B968     		ldr	r1, [r7, #8]
 2269 0046 1A46     		mov	r2, r3
 2270 0048 FFF7FEFF 		bl	memcpy
1812:../FreeRTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 2271              		.loc 1 1812 0
 2272 004c FB68     		ldr	r3, [r7, #12]
 2273 004e 9A68     		ldr	r2, [r3, #8]
 2274 0050 FB68     		ldr	r3, [r7, #12]
 2275 0052 1B6C     		ldr	r3, [r3, #64]
 2276 0054 1A44     		add	r2, r2, r3
 2277 0056 FB68     		ldr	r3, [r7, #12]
 2278 0058 9A60     		str	r2, [r3, #8]
1813:../FreeRTOS/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 2279              		.loc 1 1813 0
 2280 005a FB68     		ldr	r3, [r7, #12]
 2281 005c 9A68     		ldr	r2, [r3, #8]
 2282 005e FB68     		ldr	r3, [r7, #12]
 2283 0060 5B68     		ldr	r3, [r3, #4]
 2284 0062 9A42     		cmp	r2, r3
 2285 0064 2FD3     		bcc	.L172
1814:../FreeRTOS/queue.c **** 		{
1815:../FreeRTOS/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
 2286              		.loc 1 1815 0
 2287 0066 FB68     		ldr	r3, [r7, #12]
 2288 0068 1A68     		ldr	r2, [r3]
 2289 006a FB68     		ldr	r3, [r7, #12]
 2290 006c 9A60     		str	r2, [r3, #8]
 2291 006e 2AE0     		b	.L172
 2292              	.L173:
1816:../FreeRTOS/queue.c **** 		}
1817:../FreeRTOS/queue.c **** 		else
1818:../FreeRTOS/queue.c **** 		{
1819:../FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1820:../FreeRTOS/queue.c **** 		}
1821:../FreeRTOS/queue.c **** 	}
1822:../FreeRTOS/queue.c **** 	else
1823:../FreeRTOS/queue.c **** 	{
1824:../FreeRTOS/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
 2293              		.loc 1 1824 0
 2294 0070 FB68     		ldr	r3, [r7, #12]
 2295 0072 DA68     		ldr	r2, [r3, #12]
 2296 0074 FB68     		ldr	r3, [r7, #12]
 2297 0076 1B6C     		ldr	r3, [r3, #64]
 2298 0078 1046     		mov	r0, r2
 2299 007a B968     		ldr	r1, [r7, #8]
 2300 007c 1A46     		mov	r2, r3
 2301 007e FFF7FEFF 		bl	memcpy
1825:../FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 2302              		.loc 1 1825 0
 2303 0082 FB68     		ldr	r3, [r7, #12]
 2304 0084 DA68     		ldr	r2, [r3, #12]
 2305 0086 FB68     		ldr	r3, [r7, #12]
 2306 0088 1B6C     		ldr	r3, [r3, #64]
 2307 008a 5B42     		negs	r3, r3
 2308 008c 1A44     		add	r2, r2, r3
 2309 008e FB68     		ldr	r3, [r7, #12]
 2310 0090 DA60     		str	r2, [r3, #12]
1826:../FreeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 2311              		.loc 1 1826 0
 2312 0092 FB68     		ldr	r3, [r7, #12]
 2313 0094 DA68     		ldr	r2, [r3, #12]
 2314 0096 FB68     		ldr	r3, [r7, #12]
 2315 0098 1B68     		ldr	r3, [r3]
 2316 009a 9A42     		cmp	r2, r3
 2317 009c 07D2     		bcs	.L174
1827:../FreeRTOS/queue.c **** 		{
1828:../FreeRTOS/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 2318              		.loc 1 1828 0
 2319 009e FB68     		ldr	r3, [r7, #12]
 2320 00a0 5A68     		ldr	r2, [r3, #4]
 2321 00a2 FB68     		ldr	r3, [r7, #12]
 2322 00a4 1B6C     		ldr	r3, [r3, #64]
 2323 00a6 5B42     		negs	r3, r3
 2324 00a8 1A44     		add	r2, r2, r3
 2325 00aa FB68     		ldr	r3, [r7, #12]
 2326 00ac DA60     		str	r2, [r3, #12]
 2327              	.L174:
1829:../FreeRTOS/queue.c **** 		}
1830:../FreeRTOS/queue.c **** 		else
1831:../FreeRTOS/queue.c **** 		{
1832:../FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1833:../FreeRTOS/queue.c **** 		}
1834:../FreeRTOS/queue.c **** 
1835:../FreeRTOS/queue.c **** 		if( xPosition == queueOVERWRITE )
 2328              		.loc 1 1835 0
 2329 00ae 7B68     		ldr	r3, [r7, #4]
 2330 00b0 022B     		cmp	r3, #2
 2331 00b2 08D1     		bne	.L172
1836:../FreeRTOS/queue.c **** 		{
1837:../FreeRTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 2332              		.loc 1 1837 0
 2333 00b4 FB68     		ldr	r3, [r7, #12]
 2334 00b6 9B6B     		ldr	r3, [r3, #56]
 2335 00b8 002B     		cmp	r3, #0
 2336 00ba 04D0     		beq	.L172
1838:../FreeRTOS/queue.c **** 			{
1839:../FreeRTOS/queue.c **** 				/* An item is not being added but overwritten, so subtract
1840:../FreeRTOS/queue.c **** 				one from the recorded number of items in the queue so when
1841:../FreeRTOS/queue.c **** 				one is added again below the number of recorded items remains
1842:../FreeRTOS/queue.c **** 				correct. */
1843:../FreeRTOS/queue.c **** 				--( pxQueue->uxMessagesWaiting );
 2337              		.loc 1 1843 0
 2338 00bc FB68     		ldr	r3, [r7, #12]
 2339 00be 9B6B     		ldr	r3, [r3, #56]
 2340 00c0 5A1E     		subs	r2, r3, #1
 2341 00c2 FB68     		ldr	r3, [r7, #12]
 2342 00c4 9A63     		str	r2, [r3, #56]
 2343              	.L172:
1844:../FreeRTOS/queue.c **** 			}
1845:../FreeRTOS/queue.c **** 			else
1846:../FreeRTOS/queue.c **** 			{
1847:../FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1848:../FreeRTOS/queue.c **** 			}
1849:../FreeRTOS/queue.c **** 		}
1850:../FreeRTOS/queue.c **** 		else
1851:../FreeRTOS/queue.c **** 		{
1852:../FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1853:../FreeRTOS/queue.c **** 		}
1854:../FreeRTOS/queue.c **** 	}
1855:../FreeRTOS/queue.c **** 
1856:../FreeRTOS/queue.c **** 	++( pxQueue->uxMessagesWaiting );
 2344              		.loc 1 1856 0
 2345 00c6 FB68     		ldr	r3, [r7, #12]
 2346 00c8 9B6B     		ldr	r3, [r3, #56]
 2347 00ca 5A1C     		adds	r2, r3, #1
 2348 00cc FB68     		ldr	r3, [r7, #12]
 2349 00ce 9A63     		str	r2, [r3, #56]
1857:../FreeRTOS/queue.c **** 
1858:../FreeRTOS/queue.c **** 	return xReturn;
 2350              		.loc 1 1858 0
 2351 00d0 7B69     		ldr	r3, [r7, #20]
1859:../FreeRTOS/queue.c **** }
 2352              		.loc 1 1859 0
 2353 00d2 1846     		mov	r0, r3
 2354 00d4 1837     		adds	r7, r7, #24
 2355              		.cfi_def_cfa_offset 8
 2356 00d6 BD46     		mov	sp, r7
 2357              		.cfi_def_cfa_register 13
 2358              		@ sp needed
 2359 00d8 80BD     		pop	{r7, pc}
 2360              		.cfi_endproc
 2361              	.LFE18:
 2363 00da 00BF     		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 2364              		.align	2
 2365              		.thumb
 2366              		.thumb_func
 2368              	prvCopyDataFromQueue:
 2369              	.LFB19:
1860:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1861:../FreeRTOS/queue.c **** 
1862:../FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
1863:../FreeRTOS/queue.c **** {
 2370              		.loc 1 1863 0
 2371              		.cfi_startproc
 2372              		@ args = 0, pretend = 0, frame = 8
 2373              		@ frame_needed = 1, uses_anonymous_args = 0
 2374 0000 80B5     		push	{r7, lr}
 2375              		.cfi_def_cfa_offset 8
 2376              		.cfi_offset 7, -8
 2377              		.cfi_offset 14, -4
 2378 0002 82B0     		sub	sp, sp, #8
 2379              		.cfi_def_cfa_offset 16
 2380 0004 00AF     		add	r7, sp, #0
 2381              		.cfi_def_cfa_register 7
 2382 0006 7860     		str	r0, [r7, #4]
 2383 0008 3960     		str	r1, [r7]
1864:../FreeRTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 2384              		.loc 1 1864 0
 2385 000a 7B68     		ldr	r3, [r7, #4]
 2386 000c 1B6C     		ldr	r3, [r3, #64]
 2387 000e 002B     		cmp	r3, #0
 2388 0010 19D0     		beq	.L176
1865:../FreeRTOS/queue.c **** 	{
1866:../FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 2389              		.loc 1 1866 0
 2390 0012 7B68     		ldr	r3, [r7, #4]
 2391 0014 DA68     		ldr	r2, [r3, #12]
 2392 0016 7B68     		ldr	r3, [r7, #4]
 2393 0018 1B6C     		ldr	r3, [r3, #64]
 2394 001a 1A44     		add	r2, r2, r3
 2395 001c 7B68     		ldr	r3, [r7, #4]
 2396 001e DA60     		str	r2, [r3, #12]
1867:../FreeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 2397              		.loc 1 1867 0
 2398 0020 7B68     		ldr	r3, [r7, #4]
 2399 0022 DA68     		ldr	r2, [r3, #12]
 2400 0024 7B68     		ldr	r3, [r7, #4]
 2401 0026 5B68     		ldr	r3, [r3, #4]
 2402 0028 9A42     		cmp	r2, r3
 2403 002a 03D3     		bcc	.L178
1868:../FreeRTOS/queue.c **** 		{
1869:../FreeRTOS/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 2404              		.loc 1 1869 0
 2405 002c 7B68     		ldr	r3, [r7, #4]
 2406 002e 1A68     		ldr	r2, [r3]
 2407 0030 7B68     		ldr	r3, [r7, #4]
 2408 0032 DA60     		str	r2, [r3, #12]
 2409              	.L178:
1870:../FreeRTOS/queue.c **** 		}
1871:../FreeRTOS/queue.c **** 		else
1872:../FreeRTOS/queue.c **** 		{
1873:../FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1874:../FreeRTOS/queue.c **** 		}
1875:../FreeRTOS/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
 2410              		.loc 1 1875 0
 2411 0034 7B68     		ldr	r3, [r7, #4]
 2412 0036 DA68     		ldr	r2, [r3, #12]
 2413 0038 7B68     		ldr	r3, [r7, #4]
 2414 003a 1B6C     		ldr	r3, [r3, #64]
 2415 003c 3868     		ldr	r0, [r7]
 2416 003e 1146     		mov	r1, r2
 2417 0040 1A46     		mov	r2, r3
 2418 0042 FFF7FEFF 		bl	memcpy
 2419              	.L176:
1876:../FreeRTOS/queue.c **** 	}
1877:../FreeRTOS/queue.c **** }
 2420              		.loc 1 1877 0
 2421 0046 0837     		adds	r7, r7, #8
 2422              		.cfi_def_cfa_offset 8
 2423 0048 BD46     		mov	sp, r7
 2424              		.cfi_def_cfa_register 13
 2425              		@ sp needed
 2426 004a 80BD     		pop	{r7, pc}
 2427              		.cfi_endproc
 2428              	.LFE19:
 2430              		.section	.text.prvUnlockQueue,"ax",%progbits
 2431              		.align	2
 2432              		.thumb
 2433              		.thumb_func
 2435              	prvUnlockQueue:
 2436              	.LFB20:
1878:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1879:../FreeRTOS/queue.c **** 
1880:../FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
1881:../FreeRTOS/queue.c **** {
 2437              		.loc 1 1881 0
 2438              		.cfi_startproc
 2439              		@ args = 0, pretend = 0, frame = 8
 2440              		@ frame_needed = 1, uses_anonymous_args = 0
 2441 0000 80B5     		push	{r7, lr}
 2442              		.cfi_def_cfa_offset 8
 2443              		.cfi_offset 7, -8
 2444              		.cfi_offset 14, -4
 2445 0002 82B0     		sub	sp, sp, #8
 2446              		.cfi_def_cfa_offset 16
 2447 0004 00AF     		add	r7, sp, #0
 2448              		.cfi_def_cfa_register 7
 2449 0006 7860     		str	r0, [r7, #4]
1882:../FreeRTOS/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1883:../FreeRTOS/queue.c **** 
1884:../FreeRTOS/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1885:../FreeRTOS/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1886:../FreeRTOS/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1887:../FreeRTOS/queue.c **** 	updated. */
1888:../FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
 2450              		.loc 1 1888 0
 2451 0008 FFF7FEFF 		bl	vPortEnterCritical
1889:../FreeRTOS/queue.c **** 	{
1890:../FreeRTOS/queue.c **** 		/* See if data was added to the queue while it was locked. */
1891:../FreeRTOS/queue.c **** 		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 2452              		.loc 1 1891 0
 2453 000c 14E0     		b	.L180
 2454              	.L184:
1892:../FreeRTOS/queue.c **** 		{
1893:../FreeRTOS/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1894:../FreeRTOS/queue.c **** 			blocked waiting for data to become available? */
1895:../FreeRTOS/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1896:../FreeRTOS/queue.c **** 			{
1897:../FreeRTOS/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1898:../FreeRTOS/queue.c **** 				{
1899:../FreeRTOS/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
1900:../FreeRTOS/queue.c **** 					{
1901:../FreeRTOS/queue.c **** 						/* The queue is a member of a queue set, and posting to
1902:../FreeRTOS/queue.c **** 						the queue set caused a higher priority task to unblock.
1903:../FreeRTOS/queue.c **** 						A context switch is required. */
1904:../FreeRTOS/queue.c **** 						vTaskMissedYield();
1905:../FreeRTOS/queue.c **** 					}
1906:../FreeRTOS/queue.c **** 					else
1907:../FreeRTOS/queue.c **** 					{
1908:../FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1909:../FreeRTOS/queue.c **** 					}
1910:../FreeRTOS/queue.c **** 				}
1911:../FreeRTOS/queue.c **** 				else
1912:../FreeRTOS/queue.c **** 				{
1913:../FreeRTOS/queue.c **** 					/* Tasks that are removed from the event list will get added to
1914:../FreeRTOS/queue.c **** 					the pending ready list as the scheduler is still suspended. */
1915:../FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1916:../FreeRTOS/queue.c **** 					{
1917:../FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1918:../FreeRTOS/queue.c **** 						{
1919:../FreeRTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
1920:../FreeRTOS/queue.c **** 							context	switch is required. */
1921:../FreeRTOS/queue.c **** 							vTaskMissedYield();
1922:../FreeRTOS/queue.c **** 						}
1923:../FreeRTOS/queue.c **** 						else
1924:../FreeRTOS/queue.c **** 						{
1925:../FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1926:../FreeRTOS/queue.c **** 						}
1927:../FreeRTOS/queue.c **** 					}
1928:../FreeRTOS/queue.c **** 					else
1929:../FreeRTOS/queue.c **** 					{
1930:../FreeRTOS/queue.c **** 						break;
1931:../FreeRTOS/queue.c **** 					}
1932:../FreeRTOS/queue.c **** 				}
1933:../FreeRTOS/queue.c **** 			}
1934:../FreeRTOS/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1935:../FreeRTOS/queue.c **** 			{
1936:../FreeRTOS/queue.c **** 				/* Tasks that are removed from the event list will get added to
1937:../FreeRTOS/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1938:../FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 2455              		.loc 1 1938 0
 2456 000e 7B68     		ldr	r3, [r7, #4]
 2457 0010 5B6A     		ldr	r3, [r3, #36]
 2458 0012 002B     		cmp	r3, #0
 2459 0014 0AD0     		beq	.L181
1939:../FreeRTOS/queue.c **** 				{
1940:../FreeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 2460              		.loc 1 1940 0
 2461 0016 7B68     		ldr	r3, [r7, #4]
 2462 0018 2433     		adds	r3, r3, #36
 2463 001a 1846     		mov	r0, r3
 2464 001c FFF7FEFF 		bl	xTaskRemoveFromEventList
 2465 0020 0346     		mov	r3, r0
 2466 0022 002B     		cmp	r3, #0
 2467 0024 03D0     		beq	.L182
1941:../FreeRTOS/queue.c **** 					{
1942:../FreeRTOS/queue.c **** 						/* The task waiting has a higher priority so record that a
1943:../FreeRTOS/queue.c **** 						context	switch is required. */
1944:../FreeRTOS/queue.c **** 						vTaskMissedYield();
 2468              		.loc 1 1944 0
 2469 0026 FFF7FEFF 		bl	vTaskMissedYield
 2470 002a 00E0     		b	.L182
 2471              	.L181:
1945:../FreeRTOS/queue.c **** 					}
1946:../FreeRTOS/queue.c **** 					else
1947:../FreeRTOS/queue.c **** 					{
1948:../FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1949:../FreeRTOS/queue.c **** 					}
1950:../FreeRTOS/queue.c **** 				}
1951:../FreeRTOS/queue.c **** 				else
1952:../FreeRTOS/queue.c **** 				{
1953:../FreeRTOS/queue.c **** 					break;
 2472              		.loc 1 1953 0
 2473 002c 08E0     		b	.L183
 2474              	.L182:
1954:../FreeRTOS/queue.c **** 				}
1955:../FreeRTOS/queue.c **** 			}
1956:../FreeRTOS/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1957:../FreeRTOS/queue.c **** 
1958:../FreeRTOS/queue.c **** 			--( pxQueue->xTxLock );
 2475              		.loc 1 1958 0
 2476 002e 7B68     		ldr	r3, [r7, #4]
 2477 0030 9B6C     		ldr	r3, [r3, #72]
 2478 0032 5A1E     		subs	r2, r3, #1
 2479 0034 7B68     		ldr	r3, [r7, #4]
 2480 0036 9A64     		str	r2, [r3, #72]
 2481              	.L180:
1891:../FreeRTOS/queue.c **** 		{
 2482              		.loc 1 1891 0
 2483 0038 7B68     		ldr	r3, [r7, #4]
 2484 003a 9B6C     		ldr	r3, [r3, #72]
 2485 003c 002B     		cmp	r3, #0
 2486 003e E6DC     		bgt	.L184
 2487              	.L183:
1959:../FreeRTOS/queue.c **** 		}
1960:../FreeRTOS/queue.c **** 
1961:../FreeRTOS/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 2488              		.loc 1 1961 0
 2489 0040 7B68     		ldr	r3, [r7, #4]
 2490 0042 4FF0FF32 		mov	r2, #-1
 2491 0046 9A64     		str	r2, [r3, #72]
1962:../FreeRTOS/queue.c **** 	}
1963:../FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
 2492              		.loc 1 1963 0
 2493 0048 FFF7FEFF 		bl	vPortExitCritical
1964:../FreeRTOS/queue.c **** 
1965:../FreeRTOS/queue.c **** 	/* Do the same for the Rx lock. */
1966:../FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
 2494              		.loc 1 1966 0
 2495 004c FFF7FEFF 		bl	vPortEnterCritical
1967:../FreeRTOS/queue.c **** 	{
1968:../FreeRTOS/queue.c **** 		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 2496              		.loc 1 1968 0
 2497 0050 14E0     		b	.L185
 2498              	.L189:
1969:../FreeRTOS/queue.c **** 		{
1970:../FreeRTOS/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2499              		.loc 1 1970 0
 2500 0052 7B68     		ldr	r3, [r7, #4]
 2501 0054 1B69     		ldr	r3, [r3, #16]
 2502 0056 002B     		cmp	r3, #0
 2503 0058 0FD0     		beq	.L186
1971:../FreeRTOS/queue.c **** 			{
1972:../FreeRTOS/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2504              		.loc 1 1972 0
 2505 005a 7B68     		ldr	r3, [r7, #4]
 2506 005c 1033     		adds	r3, r3, #16
 2507 005e 1846     		mov	r0, r3
 2508 0060 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2509 0064 0346     		mov	r3, r0
 2510 0066 002B     		cmp	r3, #0
 2511 0068 01D0     		beq	.L187
1973:../FreeRTOS/queue.c **** 				{
1974:../FreeRTOS/queue.c **** 					vTaskMissedYield();
 2512              		.loc 1 1974 0
 2513 006a FFF7FEFF 		bl	vTaskMissedYield
 2514              	.L187:
1975:../FreeRTOS/queue.c **** 				}
1976:../FreeRTOS/queue.c **** 				else
1977:../FreeRTOS/queue.c **** 				{
1978:../FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1979:../FreeRTOS/queue.c **** 				}
1980:../FreeRTOS/queue.c **** 
1981:../FreeRTOS/queue.c **** 				--( pxQueue->xRxLock );
 2515              		.loc 1 1981 0
 2516 006e 7B68     		ldr	r3, [r7, #4]
 2517 0070 5B6C     		ldr	r3, [r3, #68]
 2518 0072 5A1E     		subs	r2, r3, #1
 2519 0074 7B68     		ldr	r3, [r7, #4]
 2520 0076 5A64     		str	r2, [r3, #68]
 2521 0078 00E0     		b	.L185
 2522              	.L186:
1982:../FreeRTOS/queue.c **** 			}
1983:../FreeRTOS/queue.c **** 			else
1984:../FreeRTOS/queue.c **** 			{
1985:../FreeRTOS/queue.c **** 				break;
 2523              		.loc 1 1985 0
 2524 007a 03E0     		b	.L188
 2525              	.L185:
1968:../FreeRTOS/queue.c **** 		{
 2526              		.loc 1 1968 0
 2527 007c 7B68     		ldr	r3, [r7, #4]
 2528 007e 5B6C     		ldr	r3, [r3, #68]
 2529 0080 002B     		cmp	r3, #0
 2530 0082 E6DC     		bgt	.L189
 2531              	.L188:
1986:../FreeRTOS/queue.c **** 			}
1987:../FreeRTOS/queue.c **** 		}
1988:../FreeRTOS/queue.c **** 
1989:../FreeRTOS/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 2532              		.loc 1 1989 0
 2533 0084 7B68     		ldr	r3, [r7, #4]
 2534 0086 4FF0FF32 		mov	r2, #-1
 2535 008a 5A64     		str	r2, [r3, #68]
1990:../FreeRTOS/queue.c **** 	}
1991:../FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
 2536              		.loc 1 1991 0
 2537 008c FFF7FEFF 		bl	vPortExitCritical
1992:../FreeRTOS/queue.c **** }
 2538              		.loc 1 1992 0
 2539 0090 0837     		adds	r7, r7, #8
 2540              		.cfi_def_cfa_offset 8
 2541 0092 BD46     		mov	sp, r7
 2542              		.cfi_def_cfa_register 13
 2543              		@ sp needed
 2544 0094 80BD     		pop	{r7, pc}
 2545              		.cfi_endproc
 2546              	.LFE20:
 2548 0096 00BF     		.section	.text.prvIsQueueEmpty,"ax",%progbits
 2549              		.align	2
 2550              		.thumb
 2551              		.thumb_func
 2553              	prvIsQueueEmpty:
 2554              	.LFB21:
1993:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1994:../FreeRTOS/queue.c **** 
1995:../FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
1996:../FreeRTOS/queue.c **** {
 2555              		.loc 1 1996 0
 2556              		.cfi_startproc
 2557              		@ args = 0, pretend = 0, frame = 16
 2558              		@ frame_needed = 1, uses_anonymous_args = 0
 2559 0000 80B5     		push	{r7, lr}
 2560              		.cfi_def_cfa_offset 8
 2561              		.cfi_offset 7, -8
 2562              		.cfi_offset 14, -4
 2563 0002 84B0     		sub	sp, sp, #16
 2564              		.cfi_def_cfa_offset 24
 2565 0004 00AF     		add	r7, sp, #0
 2566              		.cfi_def_cfa_register 7
 2567 0006 7860     		str	r0, [r7, #4]
1997:../FreeRTOS/queue.c **** BaseType_t xReturn;
1998:../FreeRTOS/queue.c **** 
1999:../FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
 2568              		.loc 1 1999 0
 2569 0008 FFF7FEFF 		bl	vPortEnterCritical
2000:../FreeRTOS/queue.c **** 	{
2001:../FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 2570              		.loc 1 2001 0
 2571 000c 7B68     		ldr	r3, [r7, #4]
 2572 000e 9B6B     		ldr	r3, [r3, #56]
 2573 0010 002B     		cmp	r3, #0
 2574 0012 02D1     		bne	.L191
2002:../FreeRTOS/queue.c **** 		{
2003:../FreeRTOS/queue.c **** 			xReturn = pdTRUE;
 2575              		.loc 1 2003 0
 2576 0014 0123     		movs	r3, #1
 2577 0016 FB60     		str	r3, [r7, #12]
 2578 0018 01E0     		b	.L192
 2579              	.L191:
2004:../FreeRTOS/queue.c **** 		}
2005:../FreeRTOS/queue.c **** 		else
2006:../FreeRTOS/queue.c **** 		{
2007:../FreeRTOS/queue.c **** 			xReturn = pdFALSE;
 2580              		.loc 1 2007 0
 2581 001a 0023     		movs	r3, #0
 2582 001c FB60     		str	r3, [r7, #12]
 2583              	.L192:
2008:../FreeRTOS/queue.c **** 		}
2009:../FreeRTOS/queue.c **** 	}
2010:../FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
 2584              		.loc 1 2010 0
 2585 001e FFF7FEFF 		bl	vPortExitCritical
2011:../FreeRTOS/queue.c **** 
2012:../FreeRTOS/queue.c **** 	return xReturn;
 2586              		.loc 1 2012 0
 2587 0022 FB68     		ldr	r3, [r7, #12]
2013:../FreeRTOS/queue.c **** }
 2588              		.loc 1 2013 0
 2589 0024 1846     		mov	r0, r3
 2590 0026 1037     		adds	r7, r7, #16
 2591              		.cfi_def_cfa_offset 8
 2592 0028 BD46     		mov	sp, r7
 2593              		.cfi_def_cfa_register 13
 2594              		@ sp needed
 2595 002a 80BD     		pop	{r7, pc}
 2596              		.cfi_endproc
 2597              	.LFE21:
 2599              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2600              		.align	2
 2601              		.global	xQueueIsQueueEmptyFromISR
 2602              		.thumb
 2603              		.thumb_func
 2605              	xQueueIsQueueEmptyFromISR:
 2606              	.LFB22:
2014:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2015:../FreeRTOS/queue.c **** 
2016:../FreeRTOS/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2017:../FreeRTOS/queue.c **** {
 2607              		.loc 1 2017 0
 2608              		.cfi_startproc
 2609              		@ args = 0, pretend = 0, frame = 16
 2610              		@ frame_needed = 1, uses_anonymous_args = 0
 2611              		@ link register save eliminated.
 2612 0000 80B4     		push	{r7}
 2613              		.cfi_def_cfa_offset 4
 2614              		.cfi_offset 7, -4
 2615 0002 85B0     		sub	sp, sp, #20
 2616              		.cfi_def_cfa_offset 24
 2617 0004 00AF     		add	r7, sp, #0
 2618              		.cfi_def_cfa_register 7
 2619 0006 7860     		str	r0, [r7, #4]
2018:../FreeRTOS/queue.c **** BaseType_t xReturn;
2019:../FreeRTOS/queue.c **** 
2020:../FreeRTOS/queue.c **** 	configASSERT( xQueue );
 2620              		.loc 1 2020 0
 2621 0008 7B68     		ldr	r3, [r7, #4]
 2622 000a 002B     		cmp	r3, #0
 2623 000c 09D1     		bne	.L195
 2624              	.LBB142:
 2625              	.LBB143:
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2626              		.loc 2 215 0 discriminator 1
 2627              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 2628 000e 4FF00703 			mov r3, #7												
 2629 0012 83F31188 		msr basepri, r3											
 2630 0016 BFF36F8F 		isb														
 2631 001a BFF34F8F 		dsb														
 2632              	
 2633              	@ 0 "" 2
 2634              		.thumb
 2635 001e BB60     		str	r3, [r7, #8]
 2636              	.L196:
 2637              	.LBE143:
 2638              	.LBE142:
 2639              		.loc 1 2020 0 discriminator 1
 2640 0020 FEE7     		b	.L196
 2641              	.L195:
2021:../FreeRTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2642              		.loc 1 2021 0
 2643 0022 7B68     		ldr	r3, [r7, #4]
 2644 0024 9B6B     		ldr	r3, [r3, #56]
 2645 0026 002B     		cmp	r3, #0
 2646 0028 02D1     		bne	.L197
2022:../FreeRTOS/queue.c **** 	{
2023:../FreeRTOS/queue.c **** 		xReturn = pdTRUE;
 2647              		.loc 1 2023 0
 2648 002a 0123     		movs	r3, #1
 2649 002c FB60     		str	r3, [r7, #12]
 2650 002e 01E0     		b	.L198
 2651              	.L197:
2024:../FreeRTOS/queue.c **** 	}
2025:../FreeRTOS/queue.c **** 	else
2026:../FreeRTOS/queue.c **** 	{
2027:../FreeRTOS/queue.c **** 		xReturn = pdFALSE;
 2652              		.loc 1 2027 0
 2653 0030 0023     		movs	r3, #0
 2654 0032 FB60     		str	r3, [r7, #12]
 2655              	.L198:
2028:../FreeRTOS/queue.c **** 	}
2029:../FreeRTOS/queue.c **** 
2030:../FreeRTOS/queue.c **** 	return xReturn;
 2656              		.loc 1 2030 0
 2657 0034 FB68     		ldr	r3, [r7, #12]
2031:../FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2658              		.loc 1 2031 0
 2659 0036 1846     		mov	r0, r3
 2660 0038 1437     		adds	r7, r7, #20
 2661              		.cfi_def_cfa_offset 4
 2662 003a BD46     		mov	sp, r7
 2663              		.cfi_def_cfa_register 13
 2664              		@ sp needed
 2665 003c 5DF8047B 		ldr	r7, [sp], #4
 2666              		.cfi_restore 7
 2667              		.cfi_def_cfa_offset 0
 2668 0040 7047     		bx	lr
 2669              		.cfi_endproc
 2670              	.LFE22:
 2672 0042 00BF     		.section	.text.prvIsQueueFull,"ax",%progbits
 2673              		.align	2
 2674              		.thumb
 2675              		.thumb_func
 2677              	prvIsQueueFull:
 2678              	.LFB23:
2032:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2033:../FreeRTOS/queue.c **** 
2034:../FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2035:../FreeRTOS/queue.c **** {
 2679              		.loc 1 2035 0
 2680              		.cfi_startproc
 2681              		@ args = 0, pretend = 0, frame = 16
 2682              		@ frame_needed = 1, uses_anonymous_args = 0
 2683 0000 80B5     		push	{r7, lr}
 2684              		.cfi_def_cfa_offset 8
 2685              		.cfi_offset 7, -8
 2686              		.cfi_offset 14, -4
 2687 0002 84B0     		sub	sp, sp, #16
 2688              		.cfi_def_cfa_offset 24
 2689 0004 00AF     		add	r7, sp, #0
 2690              		.cfi_def_cfa_register 7
 2691 0006 7860     		str	r0, [r7, #4]
2036:../FreeRTOS/queue.c **** BaseType_t xReturn;
2037:../FreeRTOS/queue.c **** 
2038:../FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
 2692              		.loc 1 2038 0
 2693 0008 FFF7FEFF 		bl	vPortEnterCritical
2039:../FreeRTOS/queue.c **** 	{
2040:../FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 2694              		.loc 1 2040 0
 2695 000c 7B68     		ldr	r3, [r7, #4]
 2696 000e 9A6B     		ldr	r2, [r3, #56]
 2697 0010 7B68     		ldr	r3, [r7, #4]
 2698 0012 DB6B     		ldr	r3, [r3, #60]
 2699 0014 9A42     		cmp	r2, r3
 2700 0016 02D1     		bne	.L201
2041:../FreeRTOS/queue.c **** 		{
2042:../FreeRTOS/queue.c **** 			xReturn = pdTRUE;
 2701              		.loc 1 2042 0
 2702 0018 0123     		movs	r3, #1
 2703 001a FB60     		str	r3, [r7, #12]
 2704 001c 01E0     		b	.L202
 2705              	.L201:
2043:../FreeRTOS/queue.c **** 		}
2044:../FreeRTOS/queue.c **** 		else
2045:../FreeRTOS/queue.c **** 		{
2046:../FreeRTOS/queue.c **** 			xReturn = pdFALSE;
 2706              		.loc 1 2046 0
 2707 001e 0023     		movs	r3, #0
 2708 0020 FB60     		str	r3, [r7, #12]
 2709              	.L202:
2047:../FreeRTOS/queue.c **** 		}
2048:../FreeRTOS/queue.c **** 	}
2049:../FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
 2710              		.loc 1 2049 0
 2711 0022 FFF7FEFF 		bl	vPortExitCritical
2050:../FreeRTOS/queue.c **** 
2051:../FreeRTOS/queue.c **** 	return xReturn;
 2712              		.loc 1 2051 0
 2713 0026 FB68     		ldr	r3, [r7, #12]
2052:../FreeRTOS/queue.c **** }
 2714              		.loc 1 2052 0
 2715 0028 1846     		mov	r0, r3
 2716 002a 1037     		adds	r7, r7, #16
 2717              		.cfi_def_cfa_offset 8
 2718 002c BD46     		mov	sp, r7
 2719              		.cfi_def_cfa_register 13
 2720              		@ sp needed
 2721 002e 80BD     		pop	{r7, pc}
 2722              		.cfi_endproc
 2723              	.LFE23:
 2725              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2726              		.align	2
 2727              		.global	xQueueIsQueueFullFromISR
 2728              		.thumb
 2729              		.thumb_func
 2731              	xQueueIsQueueFullFromISR:
 2732              	.LFB24:
2053:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2054:../FreeRTOS/queue.c **** 
2055:../FreeRTOS/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2056:../FreeRTOS/queue.c **** {
 2733              		.loc 1 2056 0
 2734              		.cfi_startproc
 2735              		@ args = 0, pretend = 0, frame = 16
 2736              		@ frame_needed = 1, uses_anonymous_args = 0
 2737              		@ link register save eliminated.
 2738 0000 80B4     		push	{r7}
 2739              		.cfi_def_cfa_offset 4
 2740              		.cfi_offset 7, -4
 2741 0002 85B0     		sub	sp, sp, #20
 2742              		.cfi_def_cfa_offset 24
 2743 0004 00AF     		add	r7, sp, #0
 2744              		.cfi_def_cfa_register 7
 2745 0006 7860     		str	r0, [r7, #4]
2057:../FreeRTOS/queue.c **** BaseType_t xReturn;
2058:../FreeRTOS/queue.c **** 
2059:../FreeRTOS/queue.c **** 	configASSERT( xQueue );
 2746              		.loc 1 2059 0
 2747 0008 7B68     		ldr	r3, [r7, #4]
 2748 000a 002B     		cmp	r3, #0
 2749 000c 09D1     		bne	.L205
 2750              	.LBB144:
 2751              	.LBB145:
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2752              		.loc 2 215 0 discriminator 1
 2753              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 2754 000e 4FF00703 			mov r3, #7												
 2755 0012 83F31188 		msr basepri, r3											
 2756 0016 BFF36F8F 		isb														
 2757 001a BFF34F8F 		dsb														
 2758              	
 2759              	@ 0 "" 2
 2760              		.thumb
 2761 001e BB60     		str	r3, [r7, #8]
 2762              	.L206:
 2763              	.LBE145:
 2764              	.LBE144:
 2765              		.loc 1 2059 0 discriminator 1
 2766 0020 FEE7     		b	.L206
 2767              	.L205:
2060:../FreeRTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 2768              		.loc 1 2060 0
 2769 0022 7B68     		ldr	r3, [r7, #4]
 2770 0024 9A6B     		ldr	r2, [r3, #56]
 2771 0026 7B68     		ldr	r3, [r7, #4]
 2772 0028 DB6B     		ldr	r3, [r3, #60]
 2773 002a 9A42     		cmp	r2, r3
 2774 002c 02D1     		bne	.L207
2061:../FreeRTOS/queue.c **** 	{
2062:../FreeRTOS/queue.c **** 		xReturn = pdTRUE;
 2775              		.loc 1 2062 0
 2776 002e 0123     		movs	r3, #1
 2777 0030 FB60     		str	r3, [r7, #12]
 2778 0032 01E0     		b	.L208
 2779              	.L207:
2063:../FreeRTOS/queue.c **** 	}
2064:../FreeRTOS/queue.c **** 	else
2065:../FreeRTOS/queue.c **** 	{
2066:../FreeRTOS/queue.c **** 		xReturn = pdFALSE;
 2780              		.loc 1 2066 0
 2781 0034 0023     		movs	r3, #0
 2782 0036 FB60     		str	r3, [r7, #12]
 2783              	.L208:
2067:../FreeRTOS/queue.c **** 	}
2068:../FreeRTOS/queue.c **** 
2069:../FreeRTOS/queue.c **** 	return xReturn;
 2784              		.loc 1 2069 0
 2785 0038 FB68     		ldr	r3, [r7, #12]
2070:../FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2786              		.loc 1 2070 0
 2787 003a 1846     		mov	r0, r3
 2788 003c 1437     		adds	r7, r7, #20
 2789              		.cfi_def_cfa_offset 4
 2790 003e BD46     		mov	sp, r7
 2791              		.cfi_def_cfa_register 13
 2792              		@ sp needed
 2793 0040 5DF8047B 		ldr	r7, [sp], #4
 2794              		.cfi_restore 7
 2795              		.cfi_def_cfa_offset 0
 2796 0044 7047     		bx	lr
 2797              		.cfi_endproc
 2798              	.LFE24:
 2800 0046 00BF     		.section	.text.vQueueWaitForMessageRestricted,"ax",%progbits
 2801              		.align	2
 2802              		.global	vQueueWaitForMessageRestricted
 2803              		.thumb
 2804              		.thumb_func
 2806              	vQueueWaitForMessageRestricted:
 2807              	.LFB25:
2071:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2072:../FreeRTOS/queue.c **** 
2073:../FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2074:../FreeRTOS/queue.c **** 
2075:../FreeRTOS/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2076:../FreeRTOS/queue.c **** 	{
2077:../FreeRTOS/queue.c **** 	BaseType_t xReturn;
2078:../FreeRTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2079:../FreeRTOS/queue.c **** 
2080:../FreeRTOS/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2081:../FreeRTOS/queue.c **** 		is required to prevent an interrupt removing something from the queue
2082:../FreeRTOS/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2083:../FreeRTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2084:../FreeRTOS/queue.c **** 		{
2085:../FreeRTOS/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2086:../FreeRTOS/queue.c **** 			{
2087:../FreeRTOS/queue.c **** 				/* The queue is full - do we want to block or just leave without
2088:../FreeRTOS/queue.c **** 				posting? */
2089:../FreeRTOS/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2090:../FreeRTOS/queue.c **** 				{
2091:../FreeRTOS/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2092:../FreeRTOS/queue.c **** 					return indicating that we need to block. */
2093:../FreeRTOS/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2094:../FreeRTOS/queue.c **** 					portENABLE_INTERRUPTS();
2095:../FreeRTOS/queue.c **** 					return errQUEUE_BLOCKED;
2096:../FreeRTOS/queue.c **** 				}
2097:../FreeRTOS/queue.c **** 				else
2098:../FreeRTOS/queue.c **** 				{
2099:../FreeRTOS/queue.c **** 					portENABLE_INTERRUPTS();
2100:../FreeRTOS/queue.c **** 					return errQUEUE_FULL;
2101:../FreeRTOS/queue.c **** 				}
2102:../FreeRTOS/queue.c **** 			}
2103:../FreeRTOS/queue.c **** 		}
2104:../FreeRTOS/queue.c **** 		portENABLE_INTERRUPTS();
2105:../FreeRTOS/queue.c **** 
2106:../FreeRTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2107:../FreeRTOS/queue.c **** 		{
2108:../FreeRTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2109:../FreeRTOS/queue.c **** 			{
2110:../FreeRTOS/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2111:../FreeRTOS/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2112:../FreeRTOS/queue.c **** 				xReturn = pdPASS;
2113:../FreeRTOS/queue.c **** 
2114:../FreeRTOS/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2115:../FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2116:../FreeRTOS/queue.c **** 				{
2117:../FreeRTOS/queue.c **** 					/* In this instance the co-routine could be placed directly
2118:../FreeRTOS/queue.c **** 					into the ready list as we are within a critical section.
2119:../FreeRTOS/queue.c **** 					Instead the same pending ready list mechanism is used as if
2120:../FreeRTOS/queue.c **** 					the event were caused from within an interrupt. */
2121:../FreeRTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2122:../FreeRTOS/queue.c **** 					{
2123:../FreeRTOS/queue.c **** 						/* The co-routine waiting has a higher priority so record
2124:../FreeRTOS/queue.c **** 						that a yield might be appropriate. */
2125:../FreeRTOS/queue.c **** 						xReturn = errQUEUE_YIELD;
2126:../FreeRTOS/queue.c **** 					}
2127:../FreeRTOS/queue.c **** 					else
2128:../FreeRTOS/queue.c **** 					{
2129:../FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2130:../FreeRTOS/queue.c **** 					}
2131:../FreeRTOS/queue.c **** 				}
2132:../FreeRTOS/queue.c **** 				else
2133:../FreeRTOS/queue.c **** 				{
2134:../FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2135:../FreeRTOS/queue.c **** 				}
2136:../FreeRTOS/queue.c **** 			}
2137:../FreeRTOS/queue.c **** 			else
2138:../FreeRTOS/queue.c **** 			{
2139:../FreeRTOS/queue.c **** 				xReturn = errQUEUE_FULL;
2140:../FreeRTOS/queue.c **** 			}
2141:../FreeRTOS/queue.c **** 		}
2142:../FreeRTOS/queue.c **** 		portENABLE_INTERRUPTS();
2143:../FreeRTOS/queue.c **** 
2144:../FreeRTOS/queue.c **** 		return xReturn;
2145:../FreeRTOS/queue.c **** 	}
2146:../FreeRTOS/queue.c **** 
2147:../FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2148:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2149:../FreeRTOS/queue.c **** 
2150:../FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2151:../FreeRTOS/queue.c **** 
2152:../FreeRTOS/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2153:../FreeRTOS/queue.c **** 	{
2154:../FreeRTOS/queue.c **** 	BaseType_t xReturn;
2155:../FreeRTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2156:../FreeRTOS/queue.c **** 
2157:../FreeRTOS/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2158:../FreeRTOS/queue.c **** 		is required to prevent an interrupt adding something to the queue
2159:../FreeRTOS/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2160:../FreeRTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2161:../FreeRTOS/queue.c **** 		{
2162:../FreeRTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2163:../FreeRTOS/queue.c **** 			{
2164:../FreeRTOS/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2165:../FreeRTOS/queue.c **** 				leave with nothing? */
2166:../FreeRTOS/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2167:../FreeRTOS/queue.c **** 				{
2168:../FreeRTOS/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2169:../FreeRTOS/queue.c **** 					indicating that we need to block. */
2170:../FreeRTOS/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2171:../FreeRTOS/queue.c **** 					portENABLE_INTERRUPTS();
2172:../FreeRTOS/queue.c **** 					return errQUEUE_BLOCKED;
2173:../FreeRTOS/queue.c **** 				}
2174:../FreeRTOS/queue.c **** 				else
2175:../FreeRTOS/queue.c **** 				{
2176:../FreeRTOS/queue.c **** 					portENABLE_INTERRUPTS();
2177:../FreeRTOS/queue.c **** 					return errQUEUE_FULL;
2178:../FreeRTOS/queue.c **** 				}
2179:../FreeRTOS/queue.c **** 			}
2180:../FreeRTOS/queue.c **** 			else
2181:../FreeRTOS/queue.c **** 			{
2182:../FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2183:../FreeRTOS/queue.c **** 			}
2184:../FreeRTOS/queue.c **** 		}
2185:../FreeRTOS/queue.c **** 		portENABLE_INTERRUPTS();
2186:../FreeRTOS/queue.c **** 
2187:../FreeRTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2188:../FreeRTOS/queue.c **** 		{
2189:../FreeRTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2190:../FreeRTOS/queue.c **** 			{
2191:../FreeRTOS/queue.c **** 				/* Data is available from the queue. */
2192:../FreeRTOS/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2193:../FreeRTOS/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2194:../FreeRTOS/queue.c **** 				{
2195:../FreeRTOS/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2196:../FreeRTOS/queue.c **** 				}
2197:../FreeRTOS/queue.c **** 				else
2198:../FreeRTOS/queue.c **** 				{
2199:../FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2200:../FreeRTOS/queue.c **** 				}
2201:../FreeRTOS/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2202:../FreeRTOS/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2203:../FreeRTOS/queue.c **** 
2204:../FreeRTOS/queue.c **** 				xReturn = pdPASS;
2205:../FreeRTOS/queue.c **** 
2206:../FreeRTOS/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2207:../FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2208:../FreeRTOS/queue.c **** 				{
2209:../FreeRTOS/queue.c **** 					/* In this instance the co-routine could be placed directly
2210:../FreeRTOS/queue.c **** 					into the ready list as we are within a critical section.
2211:../FreeRTOS/queue.c **** 					Instead the same pending ready list mechanism is used as if
2212:../FreeRTOS/queue.c **** 					the event were caused from within an interrupt. */
2213:../FreeRTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2214:../FreeRTOS/queue.c **** 					{
2215:../FreeRTOS/queue.c **** 						xReturn = errQUEUE_YIELD;
2216:../FreeRTOS/queue.c **** 					}
2217:../FreeRTOS/queue.c **** 					else
2218:../FreeRTOS/queue.c **** 					{
2219:../FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2220:../FreeRTOS/queue.c **** 					}
2221:../FreeRTOS/queue.c **** 				}
2222:../FreeRTOS/queue.c **** 				else
2223:../FreeRTOS/queue.c **** 				{
2224:../FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2225:../FreeRTOS/queue.c **** 				}
2226:../FreeRTOS/queue.c **** 			}
2227:../FreeRTOS/queue.c **** 			else
2228:../FreeRTOS/queue.c **** 			{
2229:../FreeRTOS/queue.c **** 				xReturn = pdFAIL;
2230:../FreeRTOS/queue.c **** 			}
2231:../FreeRTOS/queue.c **** 		}
2232:../FreeRTOS/queue.c **** 		portENABLE_INTERRUPTS();
2233:../FreeRTOS/queue.c **** 
2234:../FreeRTOS/queue.c **** 		return xReturn;
2235:../FreeRTOS/queue.c **** 	}
2236:../FreeRTOS/queue.c **** 
2237:../FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2238:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2239:../FreeRTOS/queue.c **** 
2240:../FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2241:../FreeRTOS/queue.c **** 
2242:../FreeRTOS/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2243:../FreeRTOS/queue.c **** 	{
2244:../FreeRTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2245:../FreeRTOS/queue.c **** 
2246:../FreeRTOS/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2247:../FreeRTOS/queue.c **** 		exit without doing anything. */
2248:../FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2249:../FreeRTOS/queue.c **** 		{
2250:../FreeRTOS/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2251:../FreeRTOS/queue.c **** 
2252:../FreeRTOS/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2253:../FreeRTOS/queue.c **** 			co-routine has not already been woken. */
2254:../FreeRTOS/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2255:../FreeRTOS/queue.c **** 			{
2256:../FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2257:../FreeRTOS/queue.c **** 				{
2258:../FreeRTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2259:../FreeRTOS/queue.c **** 					{
2260:../FreeRTOS/queue.c **** 						return pdTRUE;
2261:../FreeRTOS/queue.c **** 					}
2262:../FreeRTOS/queue.c **** 					else
2263:../FreeRTOS/queue.c **** 					{
2264:../FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2265:../FreeRTOS/queue.c **** 					}
2266:../FreeRTOS/queue.c **** 				}
2267:../FreeRTOS/queue.c **** 				else
2268:../FreeRTOS/queue.c **** 				{
2269:../FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2270:../FreeRTOS/queue.c **** 				}
2271:../FreeRTOS/queue.c **** 			}
2272:../FreeRTOS/queue.c **** 			else
2273:../FreeRTOS/queue.c **** 			{
2274:../FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2275:../FreeRTOS/queue.c **** 			}
2276:../FreeRTOS/queue.c **** 		}
2277:../FreeRTOS/queue.c **** 		else
2278:../FreeRTOS/queue.c **** 		{
2279:../FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2280:../FreeRTOS/queue.c **** 		}
2281:../FreeRTOS/queue.c **** 
2282:../FreeRTOS/queue.c **** 		return xCoRoutinePreviouslyWoken;
2283:../FreeRTOS/queue.c **** 	}
2284:../FreeRTOS/queue.c **** 
2285:../FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2286:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2287:../FreeRTOS/queue.c **** 
2288:../FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2289:../FreeRTOS/queue.c **** 
2290:../FreeRTOS/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2291:../FreeRTOS/queue.c **** 	{
2292:../FreeRTOS/queue.c **** 	BaseType_t xReturn;
2293:../FreeRTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2294:../FreeRTOS/queue.c **** 
2295:../FreeRTOS/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2296:../FreeRTOS/queue.c **** 		not then just leave without doing anything. */
2297:../FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2298:../FreeRTOS/queue.c **** 		{
2299:../FreeRTOS/queue.c **** 			/* Copy the data from the queue. */
2300:../FreeRTOS/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2301:../FreeRTOS/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2302:../FreeRTOS/queue.c **** 			{
2303:../FreeRTOS/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2304:../FreeRTOS/queue.c **** 			}
2305:../FreeRTOS/queue.c **** 			else
2306:../FreeRTOS/queue.c **** 			{
2307:../FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2308:../FreeRTOS/queue.c **** 			}
2309:../FreeRTOS/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2310:../FreeRTOS/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2311:../FreeRTOS/queue.c **** 
2312:../FreeRTOS/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2313:../FreeRTOS/queue.c **** 			{
2314:../FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2315:../FreeRTOS/queue.c **** 				{
2316:../FreeRTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2317:../FreeRTOS/queue.c **** 					{
2318:../FreeRTOS/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2319:../FreeRTOS/queue.c **** 					}
2320:../FreeRTOS/queue.c **** 					else
2321:../FreeRTOS/queue.c **** 					{
2322:../FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2323:../FreeRTOS/queue.c **** 					}
2324:../FreeRTOS/queue.c **** 				}
2325:../FreeRTOS/queue.c **** 				else
2326:../FreeRTOS/queue.c **** 				{
2327:../FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2328:../FreeRTOS/queue.c **** 				}
2329:../FreeRTOS/queue.c **** 			}
2330:../FreeRTOS/queue.c **** 			else
2331:../FreeRTOS/queue.c **** 			{
2332:../FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2333:../FreeRTOS/queue.c **** 			}
2334:../FreeRTOS/queue.c **** 
2335:../FreeRTOS/queue.c **** 			xReturn = pdPASS;
2336:../FreeRTOS/queue.c **** 		}
2337:../FreeRTOS/queue.c **** 		else
2338:../FreeRTOS/queue.c **** 		{
2339:../FreeRTOS/queue.c **** 			xReturn = pdFAIL;
2340:../FreeRTOS/queue.c **** 		}
2341:../FreeRTOS/queue.c **** 
2342:../FreeRTOS/queue.c **** 		return xReturn;
2343:../FreeRTOS/queue.c **** 	}
2344:../FreeRTOS/queue.c **** 
2345:../FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2346:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2347:../FreeRTOS/queue.c **** 
2348:../FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2349:../FreeRTOS/queue.c **** 
2350:../FreeRTOS/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2351:../FreeRTOS/queue.c **** 	{
2352:../FreeRTOS/queue.c **** 	UBaseType_t ux;
2353:../FreeRTOS/queue.c **** 
2354:../FreeRTOS/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2355:../FreeRTOS/queue.c **** 		a free slot. */
2356:../FreeRTOS/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2357:../FreeRTOS/queue.c **** 		{
2358:../FreeRTOS/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
2359:../FreeRTOS/queue.c **** 			{
2360:../FreeRTOS/queue.c **** 				/* Store the information on this queue. */
2361:../FreeRTOS/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
2362:../FreeRTOS/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
2363:../FreeRTOS/queue.c **** 
2364:../FreeRTOS/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2365:../FreeRTOS/queue.c **** 				break;
2366:../FreeRTOS/queue.c **** 			}
2367:../FreeRTOS/queue.c **** 			else
2368:../FreeRTOS/queue.c **** 			{
2369:../FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2370:../FreeRTOS/queue.c **** 			}
2371:../FreeRTOS/queue.c **** 		}
2372:../FreeRTOS/queue.c **** 	}
2373:../FreeRTOS/queue.c **** 
2374:../FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2375:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2376:../FreeRTOS/queue.c **** 
2377:../FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2378:../FreeRTOS/queue.c **** 
2379:../FreeRTOS/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2380:../FreeRTOS/queue.c **** 	{
2381:../FreeRTOS/queue.c **** 	UBaseType_t ux;
2382:../FreeRTOS/queue.c **** 
2383:../FreeRTOS/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2384:../FreeRTOS/queue.c **** 		registry. */
2385:../FreeRTOS/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2386:../FreeRTOS/queue.c **** 		{
2387:../FreeRTOS/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
2388:../FreeRTOS/queue.c **** 			{
2389:../FreeRTOS/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2390:../FreeRTOS/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
2391:../FreeRTOS/queue.c **** 				break;
2392:../FreeRTOS/queue.c **** 			}
2393:../FreeRTOS/queue.c **** 			else
2394:../FreeRTOS/queue.c **** 			{
2395:../FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2396:../FreeRTOS/queue.c **** 			}
2397:../FreeRTOS/queue.c **** 		}
2398:../FreeRTOS/queue.c **** 
2399:../FreeRTOS/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2400:../FreeRTOS/queue.c **** 
2401:../FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2402:../FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2403:../FreeRTOS/queue.c **** 
2404:../FreeRTOS/queue.c **** #if ( configUSE_TIMERS == 1 )
2405:../FreeRTOS/queue.c **** 
2406:../FreeRTOS/queue.c **** 	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType
2407:../FreeRTOS/queue.c **** 	{
 2808              		.loc 1 2407 0
 2809              		.cfi_startproc
 2810              		@ args = 0, pretend = 0, frame = 24
 2811              		@ frame_needed = 1, uses_anonymous_args = 0
 2812 0000 80B5     		push	{r7, lr}
 2813              		.cfi_def_cfa_offset 8
 2814              		.cfi_offset 7, -8
 2815              		.cfi_offset 14, -4
 2816 0002 86B0     		sub	sp, sp, #24
 2817              		.cfi_def_cfa_offset 32
 2818 0004 00AF     		add	r7, sp, #0
 2819              		.cfi_def_cfa_register 7
 2820 0006 F860     		str	r0, [r7, #12]
 2821 0008 B960     		str	r1, [r7, #8]
 2822 000a 7A60     		str	r2, [r7, #4]
2408:../FreeRTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2823              		.loc 1 2408 0
 2824 000c FB68     		ldr	r3, [r7, #12]
 2825 000e 7B61     		str	r3, [r7, #20]
2409:../FreeRTOS/queue.c **** 
2410:../FreeRTOS/queue.c **** 		/* This function should not be called by application code hence the
2411:../FreeRTOS/queue.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2412:../FreeRTOS/queue.c **** 		designed for use by kernel code, and has special calling requirements.
2413:../FreeRTOS/queue.c **** 		It can result in vListInsert() being called on a list that can only
2414:../FreeRTOS/queue.c **** 		possibly ever have one item in it, so the list will be fast, but even
2415:../FreeRTOS/queue.c **** 		so it should be called with the scheduler locked and not from a critical
2416:../FreeRTOS/queue.c **** 		section. */
2417:../FreeRTOS/queue.c **** 
2418:../FreeRTOS/queue.c **** 		/* Only do anything if there are no messages in the queue.  This function
2419:../FreeRTOS/queue.c **** 		will not actually cause the task to block, just place it on a blocked
2420:../FreeRTOS/queue.c **** 		list.  It will not block until the scheduler is unlocked - at which
2421:../FreeRTOS/queue.c **** 		time a yield will be performed.  If an item is added to the queue while
2422:../FreeRTOS/queue.c **** 		the queue is locked, and the calling task blocks on the queue, then the
2423:../FreeRTOS/queue.c **** 		calling task will be immediately unblocked when the queue is unlocked. */
2424:../FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 2826              		.loc 1 2424 0
 2827 0010 FFF7FEFF 		bl	vPortEnterCritical
 2828 0014 7B69     		ldr	r3, [r7, #20]
 2829 0016 5B6C     		ldr	r3, [r3, #68]
 2830 0018 B3F1FF3F 		cmp	r3, #-1
 2831 001c 02D1     		bne	.L211
 2832              		.loc 1 2424 0 is_stmt 0 discriminator 1
 2833 001e 7B69     		ldr	r3, [r7, #20]
 2834 0020 0022     		movs	r2, #0
 2835 0022 5A64     		str	r2, [r3, #68]
 2836              	.L211:
 2837              		.loc 1 2424 0 discriminator 3
 2838 0024 7B69     		ldr	r3, [r7, #20]
 2839 0026 9B6C     		ldr	r3, [r3, #72]
 2840 0028 B3F1FF3F 		cmp	r3, #-1
 2841 002c 02D1     		bne	.L212
 2842              		.loc 1 2424 0 discriminator 4
 2843 002e 7B69     		ldr	r3, [r7, #20]
 2844 0030 0022     		movs	r2, #0
 2845 0032 9A64     		str	r2, [r3, #72]
 2846              	.L212:
 2847              		.loc 1 2424 0 discriminator 6
 2848 0034 FFF7FEFF 		bl	vPortExitCritical
2425:../FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 2849              		.loc 1 2425 0 is_stmt 1 discriminator 6
 2850 0038 7B69     		ldr	r3, [r7, #20]
 2851 003a 9B6B     		ldr	r3, [r3, #56]
 2852 003c 002B     		cmp	r3, #0
 2853 003e 06D1     		bne	.L213
2426:../FreeRTOS/queue.c **** 		{
2427:../FreeRTOS/queue.c **** 			/* There is nothing in the queue, block for the specified period. */
2428:../FreeRTOS/queue.c **** 			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefi
 2854              		.loc 1 2428 0
 2855 0040 7B69     		ldr	r3, [r7, #20]
 2856 0042 2433     		adds	r3, r3, #36
 2857 0044 1846     		mov	r0, r3
 2858 0046 B968     		ldr	r1, [r7, #8]
 2859 0048 7A68     		ldr	r2, [r7, #4]
 2860 004a FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
 2861              	.L213:
2429:../FreeRTOS/queue.c **** 		}
2430:../FreeRTOS/queue.c **** 		else
2431:../FreeRTOS/queue.c **** 		{
2432:../FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2433:../FreeRTOS/queue.c **** 		}
2434:../FreeRTOS/queue.c **** 		prvUnlockQueue( pxQueue );
 2862              		.loc 1 2434 0
 2863 004e 7869     		ldr	r0, [r7, #20]
 2864 0050 FFF7FEFF 		bl	prvUnlockQueue
2435:../FreeRTOS/queue.c **** 	}
 2865              		.loc 1 2435 0
 2866 0054 1837     		adds	r7, r7, #24
 2867              		.cfi_def_cfa_offset 8
 2868 0056 BD46     		mov	sp, r7
 2869              		.cfi_def_cfa_register 13
 2870              		@ sp needed
 2871 0058 80BD     		pop	{r7, pc}
 2872              		.cfi_endproc
 2873              	.LFE25:
 2875 005a 00BF     		.text
 2876              	.Letext0:
 2877              		.file 3 "/home/houxd/prog/NXP/S32DS_ARM_v2.0/S32DS/arm_ewl2/EWL_C/include/size_t.h"
 2878              		.file 4 "/home/houxd/prog/NXP/S32DS_ARM_v2.0/S32DS/arm_ewl2/EWL_C/include/cstdint"
 2879              		.file 5 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/list.h"
 2880              		.file 6 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/task.h"
 2881              		.file 7 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/queue.h"
DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
     /tmp/ccvuXVmw.s:21     .text.xQueueGenericReset:00000000 $t
     /tmp/ccvuXVmw.s:26     .text.xQueueGenericReset:00000000 xQueueGenericReset
     /tmp/ccvuXVmw.s:154    .text.xQueueGenericCreate:00000000 $t
     /tmp/ccvuXVmw.s:159    .text.xQueueGenericCreate:00000000 xQueueGenericCreate
     /tmp/ccvuXVmw.s:299    .text.xQueueCreateMutex:00000000 $t
     /tmp/ccvuXVmw.s:304    .text.xQueueCreateMutex:00000000 xQueueCreateMutex
     /tmp/ccvuXVmw.s:475    .text.xQueueGenericSend:00000000 xQueueGenericSend
     /tmp/ccvuXVmw.s:417    .text.xQueueGetMutexHolder:00000000 $t
     /tmp/ccvuXVmw.s:422    .text.xQueueGetMutexHolder:00000000 xQueueGetMutexHolder
     /tmp/ccvuXVmw.s:470    .text.xQueueGenericSend:00000000 $t
     /tmp/ccvuXVmw.s:2216   .text.prvCopyDataToQueue:00000000 prvCopyDataToQueue
     /tmp/ccvuXVmw.s:2677   .text.prvIsQueueFull:00000000 prvIsQueueFull
     /tmp/ccvuXVmw.s:2435   .text.prvUnlockQueue:00000000 prvUnlockQueue
     /tmp/ccvuXVmw.s:794    .text.xQueueGenericSend:000001bc $d
     /tmp/ccvuXVmw.s:799    .text.xQueueGenericSendFromISR:00000000 $t
     /tmp/ccvuXVmw.s:804    .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
     /tmp/ccvuXVmw.s:1032   .text.xQueueGiveFromISR:00000000 $t
     /tmp/ccvuXVmw.s:1037   .text.xQueueGiveFromISR:00000000 xQueueGiveFromISR
     /tmp/ccvuXVmw.s:1245   .text.xQueueGenericReceive:00000000 $t
     /tmp/ccvuXVmw.s:1250   .text.xQueueGenericReceive:00000000 xQueueGenericReceive
     /tmp/ccvuXVmw.s:2368   .text.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
     /tmp/ccvuXVmw.s:2553   .text.prvIsQueueEmpty:00000000 prvIsQueueEmpty
     /tmp/ccvuXVmw.s:1578   .text.xQueueGenericReceive:000001dc $d
     /tmp/ccvuXVmw.s:1583   .text.xQueueReceiveFromISR:00000000 $t
     /tmp/ccvuXVmw.s:1588   .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
     /tmp/ccvuXVmw.s:1775   .text.xQueuePeekFromISR:00000000 $t
     /tmp/ccvuXVmw.s:1780   .text.xQueuePeekFromISR:00000000 xQueuePeekFromISR
     /tmp/ccvuXVmw.s:1956   .text.uxQueueMessagesWaiting:00000000 $t
     /tmp/ccvuXVmw.s:1961   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
     /tmp/ccvuXVmw.s:2020   .text.uxQueueSpacesAvailable:00000000 $t
     /tmp/ccvuXVmw.s:2025   .text.uxQueueSpacesAvailable:00000000 uxQueueSpacesAvailable
     /tmp/ccvuXVmw.s:2090   .text.uxQueueMessagesWaitingFromISR:00000000 $t
     /tmp/ccvuXVmw.s:2095   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
     /tmp/ccvuXVmw.s:2153   .text.vQueueDelete:00000000 $t
     /tmp/ccvuXVmw.s:2158   .text.vQueueDelete:00000000 vQueueDelete
     /tmp/ccvuXVmw.s:2212   .text.prvCopyDataToQueue:00000000 $t
     /tmp/ccvuXVmw.s:2364   .text.prvCopyDataFromQueue:00000000 $t
     /tmp/ccvuXVmw.s:2431   .text.prvUnlockQueue:00000000 $t
     /tmp/ccvuXVmw.s:2549   .text.prvIsQueueEmpty:00000000 $t
     /tmp/ccvuXVmw.s:2600   .text.xQueueIsQueueEmptyFromISR:00000000 $t
     /tmp/ccvuXVmw.s:2605   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
     /tmp/ccvuXVmw.s:2673   .text.prvIsQueueFull:00000000 $t
     /tmp/ccvuXVmw.s:2726   .text.xQueueIsQueueFullFromISR:00000000 $t
     /tmp/ccvuXVmw.s:2731   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR
     /tmp/ccvuXVmw.s:2801   .text.vQueueWaitForMessageRestricted:00000000 $t
     /tmp/ccvuXVmw.s:2806   .text.vQueueWaitForMessageRestricted:00000000 vQueueWaitForMessageRestricted
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.728a2e6911dc01ff85c2d70c52e8fae1
                           .group:00000000 wm4.lib_c99.prefix.8.3580c292f50811c682d980dc4180498e
                           .group:00000000 wm4.common.prefix.16.d7bf937cdf46fd76dde96b376e3b328a
                           .group:00000000 wm4.ewl_c_version.h.9.0bcb57d6a3f89baae1f9b121de2772f5
                           .group:00000000 wm4.os_enum.h.9.f9446d6af68b3fa72a37d4d924d3b347
                           .group:00000000 wm4.ansi_prefix.ARM.h.13.4b23f4c654df3c3277534542f67d200c
                           .group:00000000 wm4.ansi_parms.h.64.90aed58330fdde08746db908036e1f37
                           .group:00000000 wm4.size_t.h.9.f983491a73b5c81f421ee8223b1ac5c0
                           .group:00000000 wm4.ewl_lib_ext1.h.14.f9b057cc049671136093886db2a3473f
                           .group:00000000 wm4.ewl_rsize_t.h.11.b283831bb803e76ceb1756da2df9a1b5
                           .group:00000000 wm4.wchar_t.h.9.94198016f5b5f455e54ea1f3f054b416
                           .group:00000000 wm4.limits_api.h.9.bc6daa20b3abae2bba6c512044e73b43
                           .group:00000000 wm4.cstdint.134.883feaa2838fb8c945f155045ce06256
                           .group:00000000 wm4.cstdlib.44.e27e649b4051799f046eccdb898dfe03
                           .group:00000000 wm4.string_api.h.9.a9265430fd330d238bc93998aef29e99
                           .group:00000000 wm4.cstddef.32.067e2ea187472b6198f9ace951e27a51
                           .group:00000000 wm4.FreeRTOSConfig.h.72.75cb346dabad37f1d1a80e0a337065ed
                           .group:00000000 wm4.projdefs.h.71.b3c50e668908413922aad758934ec914
                           .group:00000000 wm4.portmacro.h.72.f619b572c99e5bd3ac77abd33efb542d
                           .group:00000000 wm4.portable.h.106.61ffdda1afafb5a5e1f7197ade95b43a
                           .group:00000000 wm4.mpu_wrappers.h.71.dd245fe44d82bd40288b5a47f895c82c
                           .group:00000000 wm4.FreeRTOS.h.179.860507a4e765cb3b74f37181fc3c9df6
                           .group:00000000 wm4.list.h.103.6a12b7b9a7a136c3cca0ee53675c5498
                           .group:00000000 wm4.task.h.88.249f28f82749d6a86cb49478ec501d6f
                           .group:00000000 wm4.queue.h.72.b79111e1f2901fd0fc4ec217c5b93342

UNDEFINED SYMBOLS
vPortEnterCritical
xTaskRemoveFromEventList
vListInitialise
vPortExitCritical
pvPortMalloc
xTaskGetSchedulerState
vTaskSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
vTaskPriorityInherit
vPortFree
xTaskPriorityDisinherit
memcpy
vTaskMissedYield
vTaskPlaceOnEventListRestricted
