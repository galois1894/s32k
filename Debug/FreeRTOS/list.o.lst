   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"list.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.vListInitialise,"ax",%progbits
  21              		.align	2
  22              		.global	vListInitialise
  23              		.thumb
  24              		.thumb_func
  26              	vListInitialise:
  27              	.LFB4:
  28              		.file 1 "../FreeRTOS/list.c"
   1:../FreeRTOS/list.c **** /*
   2:../FreeRTOS/list.c ****     FreeRTOS V8.2.1 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:../FreeRTOS/list.c ****     All rights reserved
   4:../FreeRTOS/list.c **** 
   5:../FreeRTOS/list.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../FreeRTOS/list.c **** 
   7:../FreeRTOS/list.c ****     This file is part of the FreeRTOS distribution.
   8:../FreeRTOS/list.c **** 
   9:../FreeRTOS/list.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../FreeRTOS/list.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../FreeRTOS/list.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  12:../FreeRTOS/list.c **** 
  13:../FreeRTOS/list.c ****     ***************************************************************************
  14:../FreeRTOS/list.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../FreeRTOS/list.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../FreeRTOS/list.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../FreeRTOS/list.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../FreeRTOS/list.c ****     ***************************************************************************
  19:../FreeRTOS/list.c **** 
  20:../FreeRTOS/list.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../FreeRTOS/list.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../FreeRTOS/list.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../FreeRTOS/list.c ****     link: http://www.freertos.org/a00114.html
  24:../FreeRTOS/list.c **** 
  25:../FreeRTOS/list.c ****     ***************************************************************************
  26:../FreeRTOS/list.c ****      *                                                                       *
  27:../FreeRTOS/list.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../FreeRTOS/list.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../FreeRTOS/list.c ****      *    platform software that is more than just the market leader, it     *
  30:../FreeRTOS/list.c ****      *    is the industry's de facto standard.                               *
  31:../FreeRTOS/list.c ****      *                                                                       *
  32:../FreeRTOS/list.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../FreeRTOS/list.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../FreeRTOS/list.c ****      *    tutorial book, reference manual, or both:                          *
  35:../FreeRTOS/list.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../FreeRTOS/list.c ****      *                                                                       *
  37:../FreeRTOS/list.c ****     ***************************************************************************
  38:../FreeRTOS/list.c **** 
  39:../FreeRTOS/list.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../FreeRTOS/list.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../FreeRTOS/list.c ****     defined configASSERT()?
  42:../FreeRTOS/list.c **** 
  43:../FreeRTOS/list.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../FreeRTOS/list.c ****     embedded software for free we request you assist our global community by
  45:../FreeRTOS/list.c ****     participating in the support forum.
  46:../FreeRTOS/list.c **** 
  47:../FreeRTOS/list.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../FreeRTOS/list.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../FreeRTOS/list.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../FreeRTOS/list.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../FreeRTOS/list.c **** 
  52:../FreeRTOS/list.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../FreeRTOS/list.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../FreeRTOS/list.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../FreeRTOS/list.c **** 
  56:../FreeRTOS/list.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../FreeRTOS/list.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../FreeRTOS/list.c **** 
  59:../FreeRTOS/list.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../FreeRTOS/list.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../FreeRTOS/list.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../FreeRTOS/list.c **** 
  63:../FreeRTOS/list.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../FreeRTOS/list.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../FreeRTOS/list.c ****     mission critical applications that require provable dependability.
  66:../FreeRTOS/list.c **** 
  67:../FreeRTOS/list.c ****     1 tab == 4 spaces!
  68:../FreeRTOS/list.c **** */
  69:../FreeRTOS/list.c **** 
  70:../FreeRTOS/list.c **** 
  71:../FreeRTOS/list.c **** #include <stdlib.h>
  72:../FreeRTOS/list.c **** #include "FreeRTOS.h"
  73:../FreeRTOS/list.c **** #include "list.h"
  74:../FreeRTOS/list.c **** 
  75:../FreeRTOS/list.c **** /*-----------------------------------------------------------
  76:../FreeRTOS/list.c ****  * PUBLIC LIST API documented in list.h
  77:../FreeRTOS/list.c ****  *----------------------------------------------------------*/
  78:../FreeRTOS/list.c **** 
  79:../FreeRTOS/list.c **** void vListInitialise( List_t * const pxList )
  80:../FreeRTOS/list.c **** {
  29              		.loc 1 80 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
  81:../FreeRTOS/list.c **** 	/* The list structure contains a list item which is used to mark the
  82:../FreeRTOS/list.c **** 	end of the list.  To initialise the list the list end is inserted
  83:../FreeRTOS/list.c **** 	as the only list entry. */
  84:../FreeRTOS/list.c **** 	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list struc
  42              		.loc 1 84 0
  43 0008 7B68     		ldr	r3, [r7, #4]
  44 000a 03F10802 		add	r2, r3, #8
  45 000e 7B68     		ldr	r3, [r7, #4]
  46 0010 5A60     		str	r2, [r3, #4]
  85:../FreeRTOS/list.c **** 
  86:../FreeRTOS/list.c **** 	/* The list end value is the highest possible value in the list to
  87:../FreeRTOS/list.c **** 	ensure it remains at the end of the list. */
  88:../FreeRTOS/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  47              		.loc 1 88 0
  48 0012 7B68     		ldr	r3, [r7, #4]
  49 0014 4FF0FF32 		mov	r2, #-1
  50 0018 9A60     		str	r2, [r3, #8]
  89:../FreeRTOS/list.c **** 
  90:../FreeRTOS/list.c **** 	/* The list end next and previous pointers point to itself so we know
  91:../FreeRTOS/list.c **** 	when the list is empty. */
  92:../FreeRTOS/list.c **** 	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list
  51              		.loc 1 92 0
  52 001a 7B68     		ldr	r3, [r7, #4]
  53 001c 03F10802 		add	r2, r3, #8
  54 0020 7B68     		ldr	r3, [r7, #4]
  55 0022 DA60     		str	r2, [r3, #12]
  93:../FreeRTOS/list.c **** 	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini l
  56              		.loc 1 93 0
  57 0024 7B68     		ldr	r3, [r7, #4]
  58 0026 03F10802 		add	r2, r3, #8
  59 002a 7B68     		ldr	r3, [r7, #4]
  60 002c 1A61     		str	r2, [r3, #16]
  94:../FreeRTOS/list.c **** 
  95:../FreeRTOS/list.c **** 	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  61              		.loc 1 95 0
  62 002e 7B68     		ldr	r3, [r7, #4]
  63 0030 0022     		movs	r2, #0
  64 0032 1A60     		str	r2, [r3]
  96:../FreeRTOS/list.c **** 
  97:../FreeRTOS/list.c **** 	/* Write known values into the list if
  98:../FreeRTOS/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  99:../FreeRTOS/list.c **** 	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
 100:../FreeRTOS/list.c **** 	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
 101:../FreeRTOS/list.c **** }
  65              		.loc 1 101 0
  66 0034 0C37     		adds	r7, r7, #12
  67              		.cfi_def_cfa_offset 4
  68 0036 BD46     		mov	sp, r7
  69              		.cfi_def_cfa_register 13
  70              		@ sp needed
  71 0038 5DF8047B 		ldr	r7, [sp], #4
  72              		.cfi_restore 7
  73              		.cfi_def_cfa_offset 0
  74 003c 7047     		bx	lr
  75              		.cfi_endproc
  76              	.LFE4:
  78 003e 00BF     		.section	.text.vListInitialiseItem,"ax",%progbits
  79              		.align	2
  80              		.global	vListInitialiseItem
  81              		.thumb
  82              		.thumb_func
  84              	vListInitialiseItem:
  85              	.LFB5:
 102:../FreeRTOS/list.c **** /*-----------------------------------------------------------*/
 103:../FreeRTOS/list.c **** 
 104:../FreeRTOS/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
 105:../FreeRTOS/list.c **** {
  86              		.loc 1 105 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 8
  89              		@ frame_needed = 1, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  91 0000 80B4     		push	{r7}
  92              		.cfi_def_cfa_offset 4
  93              		.cfi_offset 7, -4
  94 0002 83B0     		sub	sp, sp, #12
  95              		.cfi_def_cfa_offset 16
  96 0004 00AF     		add	r7, sp, #0
  97              		.cfi_def_cfa_register 7
  98 0006 7860     		str	r0, [r7, #4]
 106:../FreeRTOS/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
 107:../FreeRTOS/list.c **** 	pxItem->pvContainer = NULL;
  99              		.loc 1 107 0
 100 0008 7B68     		ldr	r3, [r7, #4]
 101 000a 0022     		movs	r2, #0
 102 000c 1A61     		str	r2, [r3, #16]
 108:../FreeRTOS/list.c **** 
 109:../FreeRTOS/list.c **** 	/* Write known values into the list item if
 110:../FreeRTOS/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
 111:../FreeRTOS/list.c **** 	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
 112:../FreeRTOS/list.c **** 	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
 113:../FreeRTOS/list.c **** }
 103              		.loc 1 113 0
 104 000e 0C37     		adds	r7, r7, #12
 105              		.cfi_def_cfa_offset 4
 106 0010 BD46     		mov	sp, r7
 107              		.cfi_def_cfa_register 13
 108              		@ sp needed
 109 0012 5DF8047B 		ldr	r7, [sp], #4
 110              		.cfi_restore 7
 111              		.cfi_def_cfa_offset 0
 112 0016 7047     		bx	lr
 113              		.cfi_endproc
 114              	.LFE5:
 116              		.section	.text.vListInsertEnd,"ax",%progbits
 117              		.align	2
 118              		.global	vListInsertEnd
 119              		.thumb
 120              		.thumb_func
 122              	vListInsertEnd:
 123              	.LFB6:
 114:../FreeRTOS/list.c **** /*-----------------------------------------------------------*/
 115:../FreeRTOS/list.c **** 
 116:../FreeRTOS/list.c **** void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
 117:../FreeRTOS/list.c **** {
 124              		.loc 1 117 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 16
 127              		@ frame_needed = 1, uses_anonymous_args = 0
 128              		@ link register save eliminated.
 129 0000 80B4     		push	{r7}
 130              		.cfi_def_cfa_offset 4
 131              		.cfi_offset 7, -4
 132 0002 85B0     		sub	sp, sp, #20
 133              		.cfi_def_cfa_offset 24
 134 0004 00AF     		add	r7, sp, #0
 135              		.cfi_def_cfa_register 7
 136 0006 7860     		str	r0, [r7, #4]
 137 0008 3960     		str	r1, [r7]
 118:../FreeRTOS/list.c **** ListItem_t * const pxIndex = pxList->pxIndex;
 138              		.loc 1 118 0
 139 000a 7B68     		ldr	r3, [r7, #4]
 140 000c 5B68     		ldr	r3, [r3, #4]
 141 000e FB60     		str	r3, [r7, #12]
 119:../FreeRTOS/list.c **** 
 120:../FreeRTOS/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 121:../FreeRTOS/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 122:../FreeRTOS/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 123:../FreeRTOS/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 124:../FreeRTOS/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 125:../FreeRTOS/list.c **** 
 126:../FreeRTOS/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
 127:../FreeRTOS/list.c **** 	makes the new list item the last item to be removed by a call to
 128:../FreeRTOS/list.c **** 	listGET_OWNER_OF_NEXT_ENTRY(). */
 129:../FreeRTOS/list.c **** 	pxNewListItem->pxNext = pxIndex;
 142              		.loc 1 129 0
 143 0010 3B68     		ldr	r3, [r7]
 144 0012 FA68     		ldr	r2, [r7, #12]
 145 0014 5A60     		str	r2, [r3, #4]
 130:../FreeRTOS/list.c **** 	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 146              		.loc 1 130 0
 147 0016 FB68     		ldr	r3, [r7, #12]
 148 0018 9A68     		ldr	r2, [r3, #8]
 149 001a 3B68     		ldr	r3, [r7]
 150 001c 9A60     		str	r2, [r3, #8]
 131:../FreeRTOS/list.c **** 
 132:../FreeRTOS/list.c **** 	/* Only used during decision coverage testing. */
 133:../FreeRTOS/list.c **** 	mtCOVERAGE_TEST_DELAY();
 134:../FreeRTOS/list.c **** 
 135:../FreeRTOS/list.c **** 	pxIndex->pxPrevious->pxNext = pxNewListItem;
 151              		.loc 1 135 0
 152 001e FB68     		ldr	r3, [r7, #12]
 153 0020 9B68     		ldr	r3, [r3, #8]
 154 0022 3A68     		ldr	r2, [r7]
 155 0024 5A60     		str	r2, [r3, #4]
 136:../FreeRTOS/list.c **** 	pxIndex->pxPrevious = pxNewListItem;
 156              		.loc 1 136 0
 157 0026 FB68     		ldr	r3, [r7, #12]
 158 0028 3A68     		ldr	r2, [r7]
 159 002a 9A60     		str	r2, [r3, #8]
 137:../FreeRTOS/list.c **** 
 138:../FreeRTOS/list.c **** 	/* Remember which list the item is in. */
 139:../FreeRTOS/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 160              		.loc 1 139 0
 161 002c 3B68     		ldr	r3, [r7]
 162 002e 7A68     		ldr	r2, [r7, #4]
 163 0030 1A61     		str	r2, [r3, #16]
 140:../FreeRTOS/list.c **** 
 141:../FreeRTOS/list.c **** 	( pxList->uxNumberOfItems )++;
 164              		.loc 1 141 0
 165 0032 7B68     		ldr	r3, [r7, #4]
 166 0034 1B68     		ldr	r3, [r3]
 167 0036 5A1C     		adds	r2, r3, #1
 168 0038 7B68     		ldr	r3, [r7, #4]
 169 003a 1A60     		str	r2, [r3]
 142:../FreeRTOS/list.c **** }
 170              		.loc 1 142 0
 171 003c 1437     		adds	r7, r7, #20
 172              		.cfi_def_cfa_offset 4
 173 003e BD46     		mov	sp, r7
 174              		.cfi_def_cfa_register 13
 175              		@ sp needed
 176 0040 5DF8047B 		ldr	r7, [sp], #4
 177              		.cfi_restore 7
 178              		.cfi_def_cfa_offset 0
 179 0044 7047     		bx	lr
 180              		.cfi_endproc
 181              	.LFE6:
 183 0046 00BF     		.section	.text.vListInsert,"ax",%progbits
 184              		.align	2
 185              		.global	vListInsert
 186              		.thumb
 187              		.thumb_func
 189              	vListInsert:
 190              	.LFB7:
 143:../FreeRTOS/list.c **** /*-----------------------------------------------------------*/
 144:../FreeRTOS/list.c **** 
 145:../FreeRTOS/list.c **** void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
 146:../FreeRTOS/list.c **** {
 191              		.loc 1 146 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 16
 194              		@ frame_needed = 1, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 196 0000 80B4     		push	{r7}
 197              		.cfi_def_cfa_offset 4
 198              		.cfi_offset 7, -4
 199 0002 85B0     		sub	sp, sp, #20
 200              		.cfi_def_cfa_offset 24
 201 0004 00AF     		add	r7, sp, #0
 202              		.cfi_def_cfa_register 7
 203 0006 7860     		str	r0, [r7, #4]
 204 0008 3960     		str	r1, [r7]
 147:../FreeRTOS/list.c **** ListItem_t *pxIterator;
 148:../FreeRTOS/list.c **** const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 205              		.loc 1 148 0
 206 000a 3B68     		ldr	r3, [r7]
 207 000c 1B68     		ldr	r3, [r3]
 208 000e BB60     		str	r3, [r7, #8]
 149:../FreeRTOS/list.c **** 
 150:../FreeRTOS/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 151:../FreeRTOS/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 152:../FreeRTOS/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 153:../FreeRTOS/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 154:../FreeRTOS/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 155:../FreeRTOS/list.c **** 
 156:../FreeRTOS/list.c **** 	/* Insert the new list item into the list, sorted in xItemValue order.
 157:../FreeRTOS/list.c **** 
 158:../FreeRTOS/list.c **** 	If the list already contains a list item with the same item value then the
 159:../FreeRTOS/list.c **** 	new list item should be placed after it.  This ensures that TCB's which are
 160:../FreeRTOS/list.c **** 	stored in ready lists (all of which have the same xItemValue value) get a
 161:../FreeRTOS/list.c **** 	share of the CPU.  However, if the xItemValue is the same as the back marker
 162:../FreeRTOS/list.c **** 	the iteration loop below will not end.  Therefore the value is checked
 163:../FreeRTOS/list.c **** 	first, and the algorithm slightly modified if necessary. */
 164:../FreeRTOS/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 209              		.loc 1 164 0
 210 0010 BB68     		ldr	r3, [r7, #8]
 211 0012 B3F1FF3F 		cmp	r3, #-1
 212 0016 03D1     		bne	.L5
 165:../FreeRTOS/list.c **** 	{
 166:../FreeRTOS/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 213              		.loc 1 166 0
 214 0018 7B68     		ldr	r3, [r7, #4]
 215 001a 1B69     		ldr	r3, [r3, #16]
 216 001c FB60     		str	r3, [r7, #12]
 217 001e 0CE0     		b	.L6
 218              	.L5:
 167:../FreeRTOS/list.c **** 	}
 168:../FreeRTOS/list.c **** 	else
 169:../FreeRTOS/list.c **** 	{
 170:../FreeRTOS/list.c **** 		/* *** NOTE ***********************************************************
 171:../FreeRTOS/list.c **** 		If you find your application is crashing here then likely causes are
 172:../FreeRTOS/list.c **** 		listed below.  In addition see http://www.freertos.org/FAQHelp.html for
 173:../FreeRTOS/list.c **** 		more tips, and ensure configASSERT() is defined!
 174:../FreeRTOS/list.c **** 		http://www.freertos.org/a00110.html#configASSERT
 175:../FreeRTOS/list.c **** 
 176:../FreeRTOS/list.c **** 			1) Stack overflow -
 177:../FreeRTOS/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
 178:../FreeRTOS/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M
 179:../FreeRTOS/list.c **** 			   parts where numerically high priority values denote low actual
 180:../FreeRTOS/list.c **** 			   interrupt priorities, which can seem counter intuitive.  See
 181:../FreeRTOS/list.c **** 			   http://www.freertos.org/RTOS-Cortex-M3-M4.html and the definition
 182:../FreeRTOS/list.c **** 			   of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 183:../FreeRTOS/list.c **** 			   http://www.freertos.org/a00110.html
 184:../FreeRTOS/list.c **** 			3) Calling an API function from within a critical section or when
 185:../FreeRTOS/list.c **** 			   the scheduler is suspended, or calling an API function that does
 186:../FreeRTOS/list.c **** 			   not end in "FromISR" from an interrupt.
 187:../FreeRTOS/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 188:../FreeRTOS/list.c **** 			   before the scheduler has been started (are interrupts firing
 189:../FreeRTOS/list.c **** 			   before vTaskStartScheduler() has been called?).
 190:../FreeRTOS/list.c **** 		**********************************************************************/
 191:../FreeRTOS/list.c **** 
 192:../FreeRTOS/list.c **** 		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValu
 219              		.loc 1 192 0
 220 0020 7B68     		ldr	r3, [r7, #4]
 221 0022 0833     		adds	r3, r3, #8
 222 0024 FB60     		str	r3, [r7, #12]
 223 0026 02E0     		b	.L7
 224              	.L8:
 225              		.loc 1 192 0 is_stmt 0 discriminator 3
 226 0028 FB68     		ldr	r3, [r7, #12]
 227 002a 5B68     		ldr	r3, [r3, #4]
 228 002c FB60     		str	r3, [r7, #12]
 229              	.L7:
 230              		.loc 1 192 0 discriminator 1
 231 002e FB68     		ldr	r3, [r7, #12]
 232 0030 5B68     		ldr	r3, [r3, #4]
 233 0032 1A68     		ldr	r2, [r3]
 234 0034 BB68     		ldr	r3, [r7, #8]
 235 0036 9A42     		cmp	r2, r3
 236 0038 F6D9     		bls	.L8
 237              	.L6:
 193:../FreeRTOS/list.c **** 		{
 194:../FreeRTOS/list.c **** 			/* There is nothing to do here, just iterating to the wanted
 195:../FreeRTOS/list.c **** 			insertion position. */
 196:../FreeRTOS/list.c **** 		}
 197:../FreeRTOS/list.c **** 	}
 198:../FreeRTOS/list.c **** 
 199:../FreeRTOS/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 238              		.loc 1 199 0 is_stmt 1
 239 003a FB68     		ldr	r3, [r7, #12]
 240 003c 5A68     		ldr	r2, [r3, #4]
 241 003e 3B68     		ldr	r3, [r7]
 242 0040 5A60     		str	r2, [r3, #4]
 200:../FreeRTOS/list.c **** 	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 243              		.loc 1 200 0
 244 0042 3B68     		ldr	r3, [r7]
 245 0044 5B68     		ldr	r3, [r3, #4]
 246 0046 3A68     		ldr	r2, [r7]
 247 0048 9A60     		str	r2, [r3, #8]
 201:../FreeRTOS/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 248              		.loc 1 201 0
 249 004a 3B68     		ldr	r3, [r7]
 250 004c FA68     		ldr	r2, [r7, #12]
 251 004e 9A60     		str	r2, [r3, #8]
 202:../FreeRTOS/list.c **** 	pxIterator->pxNext = pxNewListItem;
 252              		.loc 1 202 0
 253 0050 FB68     		ldr	r3, [r7, #12]
 254 0052 3A68     		ldr	r2, [r7]
 255 0054 5A60     		str	r2, [r3, #4]
 203:../FreeRTOS/list.c **** 
 204:../FreeRTOS/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 205:../FreeRTOS/list.c **** 	item later. */
 206:../FreeRTOS/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 256              		.loc 1 206 0
 257 0056 3B68     		ldr	r3, [r7]
 258 0058 7A68     		ldr	r2, [r7, #4]
 259 005a 1A61     		str	r2, [r3, #16]
 207:../FreeRTOS/list.c **** 
 208:../FreeRTOS/list.c **** 	( pxList->uxNumberOfItems )++;
 260              		.loc 1 208 0
 261 005c 7B68     		ldr	r3, [r7, #4]
 262 005e 1B68     		ldr	r3, [r3]
 263 0060 5A1C     		adds	r2, r3, #1
 264 0062 7B68     		ldr	r3, [r7, #4]
 265 0064 1A60     		str	r2, [r3]
 209:../FreeRTOS/list.c **** }
 266              		.loc 1 209 0
 267 0066 1437     		adds	r7, r7, #20
 268              		.cfi_def_cfa_offset 4
 269 0068 BD46     		mov	sp, r7
 270              		.cfi_def_cfa_register 13
 271              		@ sp needed
 272 006a 5DF8047B 		ldr	r7, [sp], #4
 273              		.cfi_restore 7
 274              		.cfi_def_cfa_offset 0
 275 006e 7047     		bx	lr
 276              		.cfi_endproc
 277              	.LFE7:
 279              		.section	.text.uxListRemove,"ax",%progbits
 280              		.align	2
 281              		.global	uxListRemove
 282              		.thumb
 283              		.thumb_func
 285              	uxListRemove:
 286              	.LFB8:
 210:../FreeRTOS/list.c **** /*-----------------------------------------------------------*/
 211:../FreeRTOS/list.c **** 
 212:../FreeRTOS/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 213:../FreeRTOS/list.c **** {
 287              		.loc 1 213 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 16
 290              		@ frame_needed = 1, uses_anonymous_args = 0
 291              		@ link register save eliminated.
 292 0000 80B4     		push	{r7}
 293              		.cfi_def_cfa_offset 4
 294              		.cfi_offset 7, -4
 295 0002 85B0     		sub	sp, sp, #20
 296              		.cfi_def_cfa_offset 24
 297 0004 00AF     		add	r7, sp, #0
 298              		.cfi_def_cfa_register 7
 299 0006 7860     		str	r0, [r7, #4]
 214:../FreeRTOS/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 215:../FreeRTOS/list.c **** item. */
 216:../FreeRTOS/list.c **** List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 300              		.loc 1 216 0
 301 0008 7B68     		ldr	r3, [r7, #4]
 302 000a 1B69     		ldr	r3, [r3, #16]
 303 000c FB60     		str	r3, [r7, #12]
 217:../FreeRTOS/list.c **** 
 218:../FreeRTOS/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 304              		.loc 1 218 0
 305 000e 7B68     		ldr	r3, [r7, #4]
 306 0010 5B68     		ldr	r3, [r3, #4]
 307 0012 7A68     		ldr	r2, [r7, #4]
 308 0014 9268     		ldr	r2, [r2, #8]
 309 0016 9A60     		str	r2, [r3, #8]
 219:../FreeRTOS/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 310              		.loc 1 219 0
 311 0018 7B68     		ldr	r3, [r7, #4]
 312 001a 9B68     		ldr	r3, [r3, #8]
 313 001c 7A68     		ldr	r2, [r7, #4]
 314 001e 5268     		ldr	r2, [r2, #4]
 315 0020 5A60     		str	r2, [r3, #4]
 220:../FreeRTOS/list.c **** 
 221:../FreeRTOS/list.c **** 	/* Only used during decision coverage testing. */
 222:../FreeRTOS/list.c **** 	mtCOVERAGE_TEST_DELAY();
 223:../FreeRTOS/list.c **** 
 224:../FreeRTOS/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 225:../FreeRTOS/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 316              		.loc 1 225 0
 317 0022 FB68     		ldr	r3, [r7, #12]
 318 0024 5A68     		ldr	r2, [r3, #4]
 319 0026 7B68     		ldr	r3, [r7, #4]
 320 0028 9A42     		cmp	r2, r3
 321 002a 03D1     		bne	.L10
 226:../FreeRTOS/list.c **** 	{
 227:../FreeRTOS/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 322              		.loc 1 227 0
 323 002c 7B68     		ldr	r3, [r7, #4]
 324 002e 9A68     		ldr	r2, [r3, #8]
 325 0030 FB68     		ldr	r3, [r7, #12]
 326 0032 5A60     		str	r2, [r3, #4]
 327              	.L10:
 228:../FreeRTOS/list.c **** 	}
 229:../FreeRTOS/list.c **** 	else
 230:../FreeRTOS/list.c **** 	{
 231:../FreeRTOS/list.c **** 		mtCOVERAGE_TEST_MARKER();
 232:../FreeRTOS/list.c **** 	}
 233:../FreeRTOS/list.c **** 
 234:../FreeRTOS/list.c **** 	pxItemToRemove->pvContainer = NULL;
 328              		.loc 1 234 0
 329 0034 7B68     		ldr	r3, [r7, #4]
 330 0036 0022     		movs	r2, #0
 331 0038 1A61     		str	r2, [r3, #16]
 235:../FreeRTOS/list.c **** 	( pxList->uxNumberOfItems )--;
 332              		.loc 1 235 0
 333 003a FB68     		ldr	r3, [r7, #12]
 334 003c 1B68     		ldr	r3, [r3]
 335 003e 5A1E     		subs	r2, r3, #1
 336 0040 FB68     		ldr	r3, [r7, #12]
 337 0042 1A60     		str	r2, [r3]
 236:../FreeRTOS/list.c **** 
 237:../FreeRTOS/list.c **** 	return pxList->uxNumberOfItems;
 338              		.loc 1 237 0
 339 0044 FB68     		ldr	r3, [r7, #12]
 340 0046 1B68     		ldr	r3, [r3]
 238:../FreeRTOS/list.c **** }
 341              		.loc 1 238 0
 342 0048 1846     		mov	r0, r3
 343 004a 1437     		adds	r7, r7, #20
 344              		.cfi_def_cfa_offset 4
 345 004c BD46     		mov	sp, r7
 346              		.cfi_def_cfa_register 13
 347              		@ sp needed
 348 004e 5DF8047B 		ldr	r7, [sp], #4
 349              		.cfi_restore 7
 350              		.cfi_def_cfa_offset 0
 351 0052 7047     		bx	lr
 352              		.cfi_endproc
 353              	.LFE8:
 355              		.text
 356              	.Letext0:
 357              		.file 2 "/home/houxd/prog/NXP/S32DS_ARM_v2.0/S32DS/arm_ewl2/EWL_C/include/cstdint"
 358              		.file 3 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../F
 359              		.file 4 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/list.h"
DEFINED SYMBOLS
                            *ABS*:00000000 list.c
     /tmp/cc2pgiXw.s:21     .text.vListInitialise:00000000 $t
     /tmp/cc2pgiXw.s:26     .text.vListInitialise:00000000 vListInitialise
     /tmp/cc2pgiXw.s:79     .text.vListInitialiseItem:00000000 $t
     /tmp/cc2pgiXw.s:84     .text.vListInitialiseItem:00000000 vListInitialiseItem
     /tmp/cc2pgiXw.s:117    .text.vListInsertEnd:00000000 $t
     /tmp/cc2pgiXw.s:122    .text.vListInsertEnd:00000000 vListInsertEnd
     /tmp/cc2pgiXw.s:184    .text.vListInsert:00000000 $t
     /tmp/cc2pgiXw.s:189    .text.vListInsert:00000000 vListInsert
     /tmp/cc2pgiXw.s:280    .text.uxListRemove:00000000 $t
     /tmp/cc2pgiXw.s:285    .text.uxListRemove:00000000 uxListRemove
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.728a2e6911dc01ff85c2d70c52e8fae1
                           .group:00000000 wm4.lib_c99.prefix.8.3580c292f50811c682d980dc4180498e
                           .group:00000000 wm4.common.prefix.16.d7bf937cdf46fd76dde96b376e3b328a
                           .group:00000000 wm4.ewl_c_version.h.9.0bcb57d6a3f89baae1f9b121de2772f5
                           .group:00000000 wm4.os_enum.h.9.f9446d6af68b3fa72a37d4d924d3b347
                           .group:00000000 wm4.ansi_prefix.ARM.h.13.4b23f4c654df3c3277534542f67d200c
                           .group:00000000 wm4.ansi_parms.h.64.90aed58330fdde08746db908036e1f37
                           .group:00000000 wm4.size_t.h.9.f983491a73b5c81f421ee8223b1ac5c0
                           .group:00000000 wm4.ewl_lib_ext1.h.14.f9b057cc049671136093886db2a3473f
                           .group:00000000 wm4.ewl_rsize_t.h.11.b283831bb803e76ceb1756da2df9a1b5
                           .group:00000000 wm4.wchar_t.h.9.94198016f5b5f455e54ea1f3f054b416
                           .group:00000000 wm4.limits_api.h.9.bc6daa20b3abae2bba6c512044e73b43
                           .group:00000000 wm4.cstdint.134.883feaa2838fb8c945f155045ce06256
                           .group:00000000 wm4.cstdlib.44.e27e649b4051799f046eccdb898dfe03
                           .group:00000000 wm4.cstddef.32.067e2ea187472b6198f9ace951e27a51
                           .group:00000000 wm4.FreeRTOSConfig.h.72.75cb346dabad37f1d1a80e0a337065ed
                           .group:00000000 wm4.projdefs.h.71.b3c50e668908413922aad758934ec914
                           .group:00000000 wm4.portmacro.h.72.f619b572c99e5bd3ac77abd33efb542d
                           .group:00000000 wm4.portable.h.106.61ffdda1afafb5a5e1f7197ade95b43a
                           .group:00000000 wm4.mpu_wrappers.h.71.dd245fe44d82bd40288b5a47f895c82c
                           .group:00000000 wm4.FreeRTOS.h.179.860507a4e765cb3b74f37181fc3c9df6
                           .group:00000000 wm4.list.h.103.6a12b7b9a7a136c3cca0ee53675c5498

NO UNDEFINED SYMBOLS
