   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"port.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.data.uxCriticalNesting,"aw",%progbits
  21              		.align	2
  24              	uxCriticalNesting:
  25 0000 AAAAAAAA 		.word	-1431655766
  26              		.section	.bss.ucMaxSysCallPriority,"aw",%nobits
  29              	ucMaxSysCallPriority:
  30 0000 00       		.space	1
  31              		.section	.bss.ulMaxPRIGROUPValue,"aw",%nobits
  32              		.align	2
  35              	ulMaxPRIGROUPValue:
  36 0000 00000000 		.space	4
  37              		.section	.rodata.pcInterruptPriorityRegisters,"a",%progbits
  38              		.align	2
  41              	pcInterruptPriorityRegisters:
  42 0000 F0E300E0 		.word	-536812560
  43              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  44              		.align	2
  45              		.global	pxPortInitialiseStack
  46              		.thumb
  47              		.thumb_func
  49              	pxPortInitialiseStack:
  50              	.LFB4:
  51              		.file 1 "../FreeRTOS/portable/GCC/ARM_CM4F/port.c"
   1:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
   2:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS V8.2.1 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     All rights reserved
   4:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
   5:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
   7:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     This file is part of the FreeRTOS distribution.
   8:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
   9:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  12:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  13:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  14:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  19:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  20:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     link: http://www.freertos.org/a00114.html
  24:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  25:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  26:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  27:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    platform software that is more than just the market leader, it     *
  30:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    is the industry's de facto standard.                               *
  31:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  32:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    tutorial book, reference manual, or both:                          *
  35:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  37:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  38:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  39:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     defined configASSERT()?
  42:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  43:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     embedded software for free we request you assist our global community by
  45:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     participating in the support forum.
  46:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  47:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  52:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  56:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  59:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  63:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     mission critical applications that require provable dependability.
  66:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  67:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     1 tab == 4 spaces!
  68:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** */
  69:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  70:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  71:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  72:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  *----------------------------------------------------------*/
  73:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  74:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Scheduler includes. */
  75:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  76:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #include "task.h"
  77:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  78:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #ifndef __VFP_FP__
  79:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	#error This port can only be used when the project options are configured to enable hardware float
  80:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif
  81:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  82:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  83:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  84:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  85:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  86:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #else
  87:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  88:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	as the core. */
  89:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  90:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif
  91:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  92:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the core.  Registers first... */
  93:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  94:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  95:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  96:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
  97:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* ...then bits in the registers. */
  98:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  99:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
 100:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
 101:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
 102:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
 103:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 104:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Constants used to detect a Cortex-M7 r0p1 core, which should use the ARM_CM7
 105:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** r0p1 port. */
 106:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portCPUID							( * ( ( volatile uint32_t * ) 0xE000ed00 ) )
 107:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p1_ID				( 0x410FC271UL )
 108:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p0_ID				( 0x410FC270UL )
 109:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 110:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
 111:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
 112:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 113:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Constants required to check the validity of an interrupt priority. */
 114:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
 115:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
 116:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
 117:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
 118:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
 119:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
 120:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
 121:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
 122:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 123:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
 124:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
 125:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 126:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the VFP. */
 127:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portFPCCR							( ( volatile uint32_t * ) 0xe000ef34 ) /* Floating point context control re
 128:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portASPEN_AND_LSPEN_BITS			( 0x3UL << 30UL )
 129:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 130:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
 131:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_XPSR					( 0x01000000 )
 132:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_EXEC_RETURN				( 0xfffffffd )
 133:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 134:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* The systick is a 24-bit counter. */
 135:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
 136:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 137:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 138:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** occurred while the SysTick counter is stopped during tickless idle
 139:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** calculations. */
 140:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
 141:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 142:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 143:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** prvTaskExitError() in case is messes up unwinding of the stack in the
 144:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** debugger. */
 145:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #ifdef configTASK_RETURN_ADDRESS
 146:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 147:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #else
 148:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 149:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif
 150:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 151:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 152:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** variable. */
 153:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 154:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 155:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 156:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 157:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * file is weak to allow application writers to change the timer used to
 158:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * generate the tick interrupt.
 159:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 160:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortSetupTimerInterrupt( void );
 161:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 162:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 163:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Exception handlers.
 164:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 165:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 166:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
 167:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 168:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 169:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 170:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 171:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 172:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 173:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 174:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 175:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Function to enable the VFP.
 176:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 177:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  static void vPortEnableVFP( void ) __attribute__ (( naked ));
 178:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 179:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 180:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 181:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 182:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void );
 183:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 184:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 185:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 186:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 187:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * The number of SysTick increments that make up one tick period.
 188:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 189:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 190:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 191:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 192:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 193:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 194:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 195:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * 24 bit resolution of the SysTick timer.
 196:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 197:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 198:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 199:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 200:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 201:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 202:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 203:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * power functionality only.
 204:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 205:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 206:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 207:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 208:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 209:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 210:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 211:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 212:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 213:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 214:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #if ( configASSERT_DEFINED == 1 )
 215:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 216:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 217:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 218:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif /* configASSERT_DEFINED */
 219:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 220:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 221:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 222:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 223:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 224:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 225:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 226:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
  52              		.loc 1 226 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 16
  55              		@ frame_needed = 1, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57 0000 80B4     		push	{r7}
  58              		.cfi_def_cfa_offset 4
  59              		.cfi_offset 7, -4
  60 0002 85B0     		sub	sp, sp, #20
  61              		.cfi_def_cfa_offset 24
  62 0004 00AF     		add	r7, sp, #0
  63              		.cfi_def_cfa_register 7
  64 0006 F860     		str	r0, [r7, #12]
  65 0008 B960     		str	r1, [r7, #8]
  66 000a 7A60     		str	r2, [r7, #4]
 227:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 228:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	interrupt. */
 229:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 230:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Offset added to account for the way the MCU uses the stack on entry/exit
 231:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	of interrupts, and to ensure alignment. */
 232:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  67              		.loc 1 232 0
  68 000c FB68     		ldr	r3, [r7, #12]
  69 000e 043B     		subs	r3, r3, #4
  70 0010 FB60     		str	r3, [r7, #12]
 233:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 234:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  71              		.loc 1 234 0
  72 0012 FB68     		ldr	r3, [r7, #12]
  73 0014 4FF08072 		mov	r2, #16777216
  74 0018 1A60     		str	r2, [r3]
 235:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  75              		.loc 1 235 0
  76 001a FB68     		ldr	r3, [r7, #12]
  77 001c 043B     		subs	r3, r3, #4
  78 001e FB60     		str	r3, [r7, #12]
 236:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  79              		.loc 1 236 0
  80 0020 BA68     		ldr	r2, [r7, #8]
  81 0022 FB68     		ldr	r3, [r7, #12]
  82 0024 1A60     		str	r2, [r3]
 237:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  83              		.loc 1 237 0
  84 0026 FB68     		ldr	r3, [r7, #12]
  85 0028 043B     		subs	r3, r3, #4
  86 002a FB60     		str	r3, [r7, #12]
 238:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  87              		.loc 1 238 0
  88 002c 0C4A     		ldr	r2, .L3
  89 002e FB68     		ldr	r3, [r7, #12]
  90 0030 1A60     		str	r2, [r3]
 239:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 240:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Save code space by skipping register initialisation. */
 241:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  91              		.loc 1 241 0
  92 0032 FB68     		ldr	r3, [r7, #12]
  93 0034 143B     		subs	r3, r3, #20
  94 0036 FB60     		str	r3, [r7, #12]
 242:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  95              		.loc 1 242 0
  96 0038 7A68     		ldr	r2, [r7, #4]
  97 003a FB68     		ldr	r3, [r7, #12]
  98 003c 1A60     		str	r2, [r3]
 243:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 244:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* A save method is being used that requires each task to maintain its
 245:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	own exec return value. */
 246:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  99              		.loc 1 246 0
 100 003e FB68     		ldr	r3, [r7, #12]
 101 0040 043B     		subs	r3, r3, #4
 102 0042 FB60     		str	r3, [r7, #12]
 247:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 103              		.loc 1 247 0
 104 0044 FB68     		ldr	r3, [r7, #12]
 105 0046 6FF00202 		mvn	r2, #2
 106 004a 1A60     		str	r2, [r3]
 248:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 249:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 107              		.loc 1 249 0
 108 004c FB68     		ldr	r3, [r7, #12]
 109 004e 203B     		subs	r3, r3, #32
 110 0050 FB60     		str	r3, [r7, #12]
 250:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 251:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	return pxTopOfStack;
 111              		.loc 1 251 0
 112 0052 FB68     		ldr	r3, [r7, #12]
 252:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 113              		.loc 1 252 0
 114 0054 1846     		mov	r0, r3
 115 0056 1437     		adds	r7, r7, #20
 116              		.cfi_def_cfa_offset 4
 117 0058 BD46     		mov	sp, r7
 118              		.cfi_def_cfa_register 13
 119              		@ sp needed
 120 005a 5DF8047B 		ldr	r7, [sp], #4
 121              		.cfi_restore 7
 122              		.cfi_def_cfa_offset 0
 123 005e 7047     		bx	lr
 124              	.L4:
 125              		.align	2
 126              	.L3:
 127 0060 00000000 		.word	prvTaskExitError
 128              		.cfi_endproc
 129              	.LFE4:
 131              		.section	.text.prvTaskExitError,"ax",%progbits
 132              		.align	2
 133              		.thumb
 134              		.thumb_func
 136              	prvTaskExitError:
 137              	.LFB5:
 253:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 254:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 255:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void )
 256:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 138              		.loc 1 256 0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 8
 141              		@ frame_needed = 1, uses_anonymous_args = 0
 142              		@ link register save eliminated.
 143 0000 80B4     		push	{r7}
 144              		.cfi_def_cfa_offset 4
 145              		.cfi_offset 7, -4
 146 0002 83B0     		sub	sp, sp, #12
 147              		.cfi_def_cfa_offset 16
 148 0004 00AF     		add	r7, sp, #0
 149              		.cfi_def_cfa_register 7
 257:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 258:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 259:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	should instead call vTaskDelete( NULL ).
 260:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 261:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 262:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	defined, then stop here so application writers can catch the error. */
 263:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 150              		.loc 1 263 0
 151 0006 0C4B     		ldr	r3, .L9
 152 0008 1B68     		ldr	r3, [r3]
 153 000a B3F1FF3F 		cmp	r3, #-1
 154 000e 09D0     		beq	.L6
 155              	.LBB29:
 156              	.LBB30:
 157              		.file 2 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../F
   1:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V8.2.1 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  12:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31 - ucPort
 192:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 206:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 207:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 208:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 209:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 210:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 212:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 214:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 158              		.loc 2 215 0 discriminator 1
 159              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 160 0010 4FF00703 			mov r3, #7												
 161 0014 83F31188 		msr basepri, r3											
 162 0018 BFF36F8F 		isb														
 163 001c BFF34F8F 		dsb														
 164              	
 165              	@ 0 "" 2
 166              		.thumb
 167 0020 7B60     		str	r3, [r7, #4]
 168              	.L7:
 169              	.LBE30:
 170              	.LBE29:
 171              		.loc 1 263 0 discriminator 1
 172 0022 FEE7     		b	.L7
 173              	.L6:
 174              	.LBB31:
 175              	.LBB32:
 176              		.loc 2 215 0
 177              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 178 0024 4FF00703 			mov r3, #7												
 179 0028 83F31188 		msr basepri, r3											
 180 002c BFF36F8F 		isb														
 181 0030 BFF34F8F 		dsb														
 182              	
 183              	@ 0 "" 2
 184              		.thumb
 185 0034 3B60     		str	r3, [r7]
 186              	.L8:
 187              	.LBE32:
 188              	.LBE31:
 264:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 265:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	for( ;; );
 189              		.loc 1 265 0 discriminator 2
 190 0036 FEE7     		b	.L8
 191              	.L10:
 192              		.align	2
 193              	.L9:
 194 0038 00000000 		.word	uxCriticalNesting
 195              		.cfi_endproc
 196              	.LFE5:
 198              		.section	.text.SVC_Handler,"ax",%progbits
 199              		.align	2
 200              		.global	SVC_Handler
 201              		.thumb
 202              		.thumb_func
 204              	SVC_Handler:
 205              	.LFB6:
 266:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 267:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 268:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 269:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 270:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 206              		.loc 1 270 0
 207              		.cfi_startproc
 208              		@ Naked Function: prologue and epilogue provided by programmer.
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 1, uses_anonymous_args = 0
 271:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile (
 211              		.loc 1 271 0
 212              	@ 271 "../FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 213 0000 064B     			ldr	r3, pxCurrentTCBConst2		
 214 0002 1968     		ldr r1, [r3]					
 215 0004 0868     		ldr r0, [r1]					
 216 0006 B0E8F04F 		ldmia r0!, {r4-r11, r14}		
 217 000a 80F30988 		msr psp, r0						
 218 000e BFF36F8F 		isb								
 219 0012 4FF00000 		mov r0, #0 						
 220 0016 80F31188 		msr	basepri, r0					
 221 001a 7047     		bx r14							
 222              										
 223              		.align 2						
 224 001c 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 225              	
 226              	@ 0 "" 2
 272:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 273:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 274:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 275:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r4-r11, r14}		\n" /* Pop the registers that are not automatically saved on excep
 276:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 277:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	isb								\n"
 278:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	mov r0, #0 						\n"
 279:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	msr	basepri, r0					\n"
 280:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	bx r14							\n"
 281:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"									\n"
 282:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	.align 2						\n"
 283:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 284:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				);
 285:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 227              		.loc 1 285 0
 228              		.thumb
 229              		.cfi_endproc
 230              	.LFE6:
 232              		.section	.text.prvPortStartFirstTask,"ax",%progbits
 233              		.align	2
 234              		.thumb
 235              		.thumb_func
 237              	prvPortStartFirstTask:
 238              	.LFB7:
 286:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 287:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 288:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void )
 289:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 239              		.loc 1 289 0
 240              		.cfi_startproc
 241              		@ Naked Function: prologue and epilogue provided by programmer.
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 1, uses_anonymous_args = 0
 290:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile(
 244              		.loc 1 290 0
 245              	@ 290 "../FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 246 0000 0648     		 ldr r0, =0xE000ED08 	
 247 0002 0068     	 ldr r0, [r0] 			
 248 0004 0068     	 ldr r0, [r0] 			
 249 0006 80F30888 	 msr msp, r0			
 250 000a 62B6     	 cpsie i				
 251 000c 61B6     	 cpsie f				
 252 000e BFF34F8F 	 dsb					
 253 0012 BFF36F8F 	 isb					
 254 0016 00DF     	 svc 0					
 255 0018 00BF     	 nop					
 256              	
 257              	@ 0 "" 2
 291:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 292:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 293:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 294:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 295:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 296:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					" cpsie f				\n"
 297:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					" dsb					\n"
 298:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					" isb					\n"
 299:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					" svc 0					\n" /* System call to start first task. */
 300:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					" nop					\n"
 301:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				);
 302:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 258              		.loc 1 302 0
 259              		.thumb
 260              		.cfi_endproc
 261              	.LFE7:
 263 001a 0000     		.section	.text.xPortStartScheduler,"ax",%progbits
 264              		.align	2
 265              		.global	xPortStartScheduler
 266              		.thumb
 267              		.thumb_func
 269              	xPortStartScheduler:
 270              	.LFB8:
 303:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 304:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 305:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 306:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 307:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 308:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** BaseType_t xPortStartScheduler( void )
 309:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 271              		.loc 1 309 0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 24
 274              		@ frame_needed = 1, uses_anonymous_args = 0
 275 0000 80B5     		push	{r7, lr}
 276              		.cfi_def_cfa_offset 8
 277              		.cfi_offset 7, -8
 278              		.cfi_offset 14, -4
 279 0002 86B0     		sub	sp, sp, #24
 280              		.cfi_def_cfa_offset 32
 281 0004 00AF     		add	r7, sp, #0
 282              		.cfi_def_cfa_register 7
 310:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 311:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 312:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 313:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 314:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* This port can be used on all revisions of the Cortex-M7 core other than
 315:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	the r0p1 parts.  r0p1 parts should use the port from the
 316:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/source/portable/GCC/ARM_CM7/r0p1 directory. */
 317:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 283              		.loc 1 317 0
 284 0006 3B4B     		ldr	r3, .L21
 285 0008 1B68     		ldr	r3, [r3]
 286 000a 3B4A     		ldr	r2, .L21+4
 287 000c 9342     		cmp	r3, r2
 288 000e 09D1     		bne	.L14
 289              	.LBB33:
 290              	.LBB34:
 291              		.loc 2 215 0 discriminator 1
 292              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 293 0010 4FF00703 			mov r3, #7												
 294 0014 83F31188 		msr basepri, r3											
 295 0018 BFF36F8F 		isb														
 296 001c BFF34F8F 		dsb														
 297              	
 298              	@ 0 "" 2
 299              		.thumb
 300 0020 3B61     		str	r3, [r7, #16]
 301              	.L15:
 302              	.LBE34:
 303              	.LBE33:
 304              		.loc 1 317 0 discriminator 2
 305 0022 FEE7     		b	.L15
 306              	.L14:
 318:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 307              		.loc 1 318 0
 308 0024 334B     		ldr	r3, .L21
 309 0026 1B68     		ldr	r3, [r3]
 310 0028 344A     		ldr	r2, .L21+8
 311 002a 9342     		cmp	r3, r2
 312 002c 09D1     		bne	.L16
 313              	.LBB35:
 314              	.LBB36:
 315              		.loc 2 215 0 discriminator 1
 316              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 317 002e 4FF00703 			mov r3, #7												
 318 0032 83F31188 		msr basepri, r3											
 319 0036 BFF36F8F 		isb														
 320 003a BFF34F8F 		dsb														
 321              	
 322              	@ 0 "" 2
 323              		.thumb
 324 003e FB60     		str	r3, [r7, #12]
 325              	.L17:
 326              	.LBE36:
 327              	.LBE35:
 328              		.loc 1 318 0 discriminator 3
 329 0040 FEE7     		b	.L17
 330              	.L16:
 331              	.LBB37:
 319:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 320:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	#if( configASSERT_DEFINED == 1 )
 321:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	{
 322:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		volatile uint32_t ulOriginalPriority;
 323:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 332              		.loc 1 323 0
 333 0042 2F4B     		ldr	r3, .L21+12
 334 0044 7B61     		str	r3, [r7, #20]
 324:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 325:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 326:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 327:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		functions can be called.  ISR safe functions are those that end in
 328:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 329:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 330:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 331:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 332:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 335              		.loc 1 332 0
 336 0046 7B69     		ldr	r3, [r7, #20]
 337 0048 1B78     		ldrb	r3, [r3]
 338 004a DBB2     		uxtb	r3, r3
 339 004c BB60     		str	r3, [r7, #8]
 333:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 334:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		/* Determine the number of priority bits available.  First write to all
 335:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		possible bits. */
 336:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 340              		.loc 1 336 0
 341 004e 7B69     		ldr	r3, [r7, #20]
 342 0050 FF22     		movs	r2, #255
 343 0052 1A70     		strb	r2, [r3]
 337:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 338:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		/* Read the value back to see how many bits stuck. */
 339:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 344              		.loc 1 339 0
 345 0054 7B69     		ldr	r3, [r7, #20]
 346 0056 1B78     		ldrb	r3, [r3]
 347 0058 DBB2     		uxtb	r3, r3
 348 005a FB71     		strb	r3, [r7, #7]
 340:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 341:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		/* Use the same mask on the maximum system call priority. */
 342:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 349              		.loc 1 342 0
 350 005c FB79     		ldrb	r3, [r7, #7]
 351 005e DBB2     		uxtb	r3, r3
 352 0060 03F00703 		and	r3, r3, #7
 353 0064 DAB2     		uxtb	r2, r3
 354 0066 274B     		ldr	r3, .L21+16
 355 0068 1A70     		strb	r2, [r3]
 343:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 344:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 345:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		of bits read back. */
 346:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 356              		.loc 1 346 0
 357 006a 274B     		ldr	r3, .L21+20
 358 006c 0722     		movs	r2, #7
 359 006e 1A60     		str	r2, [r3]
 347:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 360              		.loc 1 347 0
 361 0070 09E0     		b	.L18
 362              	.L19:
 348:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		{
 349:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			ulMaxPRIGROUPValue--;
 363              		.loc 1 349 0
 364 0072 254B     		ldr	r3, .L21+20
 365 0074 1B68     		ldr	r3, [r3]
 366 0076 013B     		subs	r3, r3, #1
 367 0078 234A     		ldr	r2, .L21+20
 368 007a 1360     		str	r3, [r2]
 350:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 369              		.loc 1 350 0
 370 007c FB79     		ldrb	r3, [r7, #7]
 371 007e DBB2     		uxtb	r3, r3
 372 0080 5B00     		lsls	r3, r3, #1
 373 0082 DBB2     		uxtb	r3, r3
 374 0084 FB71     		strb	r3, [r7, #7]
 375              	.L18:
 347:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 376              		.loc 1 347 0
 377 0086 FB79     		ldrb	r3, [r7, #7]
 378 0088 DBB2     		uxtb	r3, r3
 379 008a DBB2     		uxtb	r3, r3
 380 008c 5BB2     		sxtb	r3, r3
 381 008e 002B     		cmp	r3, #0
 382 0090 EFDB     		blt	.L19
 351:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		}
 352:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 353:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 354:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		register. */
 355:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 383              		.loc 1 355 0
 384 0092 1D4B     		ldr	r3, .L21+20
 385 0094 1B68     		ldr	r3, [r3]
 386 0096 1B02     		lsls	r3, r3, #8
 387 0098 1B4A     		ldr	r2, .L21+20
 388 009a 1360     		str	r3, [r2]
 356:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 389              		.loc 1 356 0
 390 009c 1A4B     		ldr	r3, .L21+20
 391 009e 1B68     		ldr	r3, [r3]
 392 00a0 03F4E063 		and	r3, r3, #1792
 393 00a4 184A     		ldr	r2, .L21+20
 394 00a6 1360     		str	r3, [r2]
 357:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 358:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 359:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		value. */
 360:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 395              		.loc 1 360 0
 396 00a8 BB68     		ldr	r3, [r7, #8]
 397 00aa DAB2     		uxtb	r2, r3
 398 00ac 7B69     		ldr	r3, [r7, #20]
 399 00ae 1A70     		strb	r2, [r3]
 400              	.LBE37:
 361:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	}
 362:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	#endif /* conifgASSERT_DEFINED */
 363:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 364:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 365:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 401              		.loc 1 365 0
 402 00b0 164A     		ldr	r2, .L21+24
 403 00b2 164B     		ldr	r3, .L21+24
 404 00b4 1B68     		ldr	r3, [r3]
 405 00b6 43F47003 		orr	r3, r3, #15728640
 406 00ba 1360     		str	r3, [r2]
 366:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 407              		.loc 1 366 0
 408 00bc 134A     		ldr	r2, .L21+24
 409 00be 134B     		ldr	r3, .L21+24
 410 00c0 1B68     		ldr	r3, [r3]
 411 00c2 43F07043 		orr	r3, r3, #-268435456
 412 00c6 1360     		str	r3, [r2]
 367:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 368:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 369:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	here already. */
 370:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	vPortSetupTimerInterrupt();
 413              		.loc 1 370 0
 414 00c8 FFF7FEFF 		bl	vPortSetupTimerInterrupt
 371:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 372:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 373:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting = 0;
 415              		.loc 1 373 0
 416 00cc 104B     		ldr	r3, .L21+28
 417 00ce 0022     		movs	r2, #0
 418 00d0 1A60     		str	r2, [r3]
 374:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 375:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Ensure the VFP is enabled - it should be anyway. */
 376:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	vPortEnableVFP();
 419              		.loc 1 376 0
 420 00d2 FFF7FEFF 		bl	vPortEnableVFP
 377:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 378:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Lazy save always. */
 379:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 421              		.loc 1 379 0
 422 00d6 0F4A     		ldr	r2, .L21+32
 423 00d8 0E4B     		ldr	r3, .L21+32
 424 00da 1B68     		ldr	r3, [r3]
 425 00dc 43F04043 		orr	r3, r3, #-1073741824
 426 00e0 1360     		str	r3, [r2]
 380:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 381:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Start the first task. */
 382:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	prvPortStartFirstTask();
 427              		.loc 1 382 0
 428 00e2 FFF7FEFF 		bl	prvPortStartFirstTask
 383:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 384:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 385:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	exit error function to prevent compiler warnings about a static function
 386:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	not being called in the case that the application writer overrides this
 387:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS. */
 388:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	prvTaskExitError();
 429              		.loc 1 388 0
 430 00e6 FFF7FEFF 		bl	prvTaskExitError
 389:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 390:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Should not get here! */
 391:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	return 0;
 431              		.loc 1 391 0
 432 00ea 0023     		movs	r3, #0
 392:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 433              		.loc 1 392 0
 434 00ec 1846     		mov	r0, r3
 435 00ee 1837     		adds	r7, r7, #24
 436              		.cfi_def_cfa_offset 8
 437 00f0 BD46     		mov	sp, r7
 438              		.cfi_def_cfa_register 13
 439              		@ sp needed
 440 00f2 80BD     		pop	{r7, pc}
 441              	.L22:
 442              		.align	2
 443              	.L21:
 444 00f4 00ED00E0 		.word	-536810240
 445 00f8 71C20F41 		.word	1091551857
 446 00fc 70C20F41 		.word	1091551856
 447 0100 00E400E0 		.word	-536812544
 448 0104 00000000 		.word	ucMaxSysCallPriority
 449 0108 00000000 		.word	ulMaxPRIGROUPValue
 450 010c 20ED00E0 		.word	-536810208
 451 0110 00000000 		.word	uxCriticalNesting
 452 0114 34EF00E0 		.word	-536809676
 453              		.cfi_endproc
 454              	.LFE8:
 456              		.section	.text.vPortEndScheduler,"ax",%progbits
 457              		.align	2
 458              		.global	vPortEndScheduler
 459              		.thumb
 460              		.thumb_func
 462              	vPortEndScheduler:
 463              	.LFB9:
 393:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 394:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 395:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortEndScheduler( void )
 396:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 464              		.loc 1 396 0
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 8
 467              		@ frame_needed = 1, uses_anonymous_args = 0
 468              		@ link register save eliminated.
 469 0000 80B4     		push	{r7}
 470              		.cfi_def_cfa_offset 4
 471              		.cfi_offset 7, -4
 472 0002 83B0     		sub	sp, sp, #12
 473              		.cfi_def_cfa_offset 16
 474 0004 00AF     		add	r7, sp, #0
 475              		.cfi_def_cfa_register 7
 397:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 398:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	Artificially force an assert. */
 399:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 476              		.loc 1 399 0
 477 0006 0A4B     		ldr	r3, .L26
 478 0008 1B68     		ldr	r3, [r3]
 479 000a B3F57A7F 		cmp	r3, #1000
 480 000e 09D0     		beq	.L23
 481              	.LBB38:
 482              	.LBB39:
 483              		.loc 2 215 0 discriminator 1
 484              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 485 0010 4FF00703 			mov r3, #7												
 486 0014 83F31188 		msr basepri, r3											
 487 0018 BFF36F8F 		isb														
 488 001c BFF34F8F 		dsb														
 489              	
 490              	@ 0 "" 2
 491              		.thumb
 492 0020 7B60     		str	r3, [r7, #4]
 493              	.L25:
 494              	.LBE39:
 495              	.LBE38:
 496              		.loc 1 399 0 discriminator 1
 497 0022 FEE7     		b	.L25
 498              	.L23:
 400:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 499              		.loc 1 400 0
 500 0024 0C37     		adds	r7, r7, #12
 501              		.cfi_def_cfa_offset 4
 502 0026 BD46     		mov	sp, r7
 503              		.cfi_def_cfa_register 13
 504              		@ sp needed
 505 0028 5DF8047B 		ldr	r7, [sp], #4
 506              		.cfi_restore 7
 507              		.cfi_def_cfa_offset 0
 508 002c 7047     		bx	lr
 509              	.L27:
 510 002e 00BF     		.align	2
 511              	.L26:
 512 0030 00000000 		.word	uxCriticalNesting
 513              		.cfi_endproc
 514              	.LFE9:
 516              		.section	.text.vPortEnterCritical,"ax",%progbits
 517              		.align	2
 518              		.global	vPortEnterCritical
 519              		.thumb
 520              		.thumb_func
 522              	vPortEnterCritical:
 523              	.LFB10:
 401:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 402:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 403:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 404:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 524              		.loc 1 404 0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 8
 527              		@ frame_needed = 1, uses_anonymous_args = 0
 528              		@ link register save eliminated.
 529 0000 80B4     		push	{r7}
 530              		.cfi_def_cfa_offset 4
 531              		.cfi_offset 7, -4
 532 0002 83B0     		sub	sp, sp, #12
 533              		.cfi_def_cfa_offset 16
 534 0004 00AF     		add	r7, sp, #0
 535              		.cfi_def_cfa_register 7
 536              	.LBB40:
 537              	.LBB41:
 538              		.loc 2 215 0
 539              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 540 0006 4FF00703 			mov r3, #7												
 541 000a 83F31188 		msr basepri, r3											
 542 000e BFF36F8F 		isb														
 543 0012 BFF34F8F 		dsb														
 544              	
 545              	@ 0 "" 2
 546              		.thumb
 547 0016 7B60     		str	r3, [r7, #4]
 548              	.LBE41:
 549              	.LBE40:
 405:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 406:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 550              		.loc 1 406 0
 551 0018 0E4B     		ldr	r3, .L31
 552 001a 1B68     		ldr	r3, [r3]
 553 001c 0133     		adds	r3, r3, #1
 554 001e 0D4A     		ldr	r2, .L31
 555 0020 1360     		str	r3, [r2]
 407:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 408:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 409:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 410:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 411:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 412:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	assert function also uses a critical section. */
 413:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 1 )
 556              		.loc 1 413 0
 557 0022 0C4B     		ldr	r3, .L31
 558 0024 1B68     		ldr	r3, [r3]
 559 0026 012B     		cmp	r3, #1
 560 0028 0ED1     		bne	.L28
 414:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	{
 415:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 561              		.loc 1 415 0
 562 002a 0B4B     		ldr	r3, .L31+4
 563 002c 1B68     		ldr	r3, [r3]
 564 002e DBB2     		uxtb	r3, r3
 565 0030 002B     		cmp	r3, #0
 566 0032 09D0     		beq	.L28
 567              	.LBB42:
 568              	.LBB43:
 569              		.loc 2 215 0 discriminator 1
 570              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 571 0034 4FF00703 			mov r3, #7												
 572 0038 83F31188 		msr basepri, r3											
 573 003c BFF36F8F 		isb														
 574 0040 BFF34F8F 		dsb														
 575              	
 576              	@ 0 "" 2
 577              		.thumb
 578 0044 3B60     		str	r3, [r7]
 579              	.L30:
 580              	.LBE43:
 581              	.LBE42:
 582              		.loc 1 415 0 discriminator 1
 583 0046 FEE7     		b	.L30
 584              	.L28:
 416:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	}
 417:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 585              		.loc 1 417 0
 586 0048 0C37     		adds	r7, r7, #12
 587              		.cfi_def_cfa_offset 4
 588 004a BD46     		mov	sp, r7
 589              		.cfi_def_cfa_register 13
 590              		@ sp needed
 591 004c 5DF8047B 		ldr	r7, [sp], #4
 592              		.cfi_restore 7
 593              		.cfi_def_cfa_offset 0
 594 0050 7047     		bx	lr
 595              	.L32:
 596 0052 00BF     		.align	2
 597              	.L31:
 598 0054 00000000 		.word	uxCriticalNesting
 599 0058 04ED00E0 		.word	-536810236
 600              		.cfi_endproc
 601              	.LFE10:
 603              		.section	.text.vPortExitCritical,"ax",%progbits
 604              		.align	2
 605              		.global	vPortExitCritical
 606              		.thumb
 607              		.thumb_func
 609              	vPortExitCritical:
 610              	.LFB11:
 418:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 419:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 420:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortExitCritical( void )
 421:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 611              		.loc 1 421 0
 612              		.cfi_startproc
 613              		@ args = 0, pretend = 0, frame = 8
 614              		@ frame_needed = 1, uses_anonymous_args = 0
 615              		@ link register save eliminated.
 616 0000 80B4     		push	{r7}
 617              		.cfi_def_cfa_offset 4
 618              		.cfi_offset 7, -4
 619 0002 83B0     		sub	sp, sp, #12
 620              		.cfi_def_cfa_offset 16
 621 0004 00AF     		add	r7, sp, #0
 622              		.cfi_def_cfa_register 7
 422:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting );
 623              		.loc 1 422 0
 624 0006 104B     		ldr	r3, .L37
 625 0008 1B68     		ldr	r3, [r3]
 626 000a 002B     		cmp	r3, #0
 627 000c 09D1     		bne	.L34
 628              	.LBB44:
 629              	.LBB45:
 630              		.loc 2 215 0 discriminator 1
 631              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 632 000e 4FF00703 			mov r3, #7												
 633 0012 83F31188 		msr basepri, r3											
 634 0016 BFF36F8F 		isb														
 635 001a BFF34F8F 		dsb														
 636              	
 637              	@ 0 "" 2
 638              		.thumb
 639 001e 7B60     		str	r3, [r7, #4]
 640              	.L35:
 641              	.LBE45:
 642              	.LBE44:
 643              		.loc 1 422 0 discriminator 1
 644 0020 FEE7     		b	.L35
 645              	.L34:
 423:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 646              		.loc 1 423 0
 647 0022 094B     		ldr	r3, .L37
 648 0024 1B68     		ldr	r3, [r3]
 649 0026 013B     		subs	r3, r3, #1
 650 0028 074A     		ldr	r2, .L37
 651 002a 1360     		str	r3, [r2]
 424:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 652              		.loc 1 424 0
 653 002c 064B     		ldr	r3, .L37
 654 002e 1B68     		ldr	r3, [r3]
 655 0030 002B     		cmp	r3, #0
 656 0032 04D1     		bne	.L33
 657 0034 0023     		movs	r3, #0
 658 0036 3B60     		str	r3, [r7]
 659              	.LBB46:
 660              	.LBB47:
 216:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 217:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 218:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 219:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 220:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 221:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 222:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 223:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 224:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 225:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 228:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 230:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 232:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 233:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 234:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 235:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 236:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 237:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 238:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 239:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 240:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 241:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 242:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 243:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 244:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 245:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 246:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 248:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 249:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 661              		.loc 2 249 0
 662 0038 3B68     		ldr	r3, [r7]
 663              	@ 249 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 664 003a 83F31188 			msr basepri, r3	
 665              	@ 0 "" 2
 666              		.thumb
 667              	.L33:
 668              	.LBE47:
 669              	.LBE46:
 425:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	{
 426:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		portENABLE_INTERRUPTS();
 427:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	}
 428:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 670              		.loc 1 428 0
 671 003e 0C37     		adds	r7, r7, #12
 672              		.cfi_def_cfa_offset 4
 673 0040 BD46     		mov	sp, r7
 674              		.cfi_def_cfa_register 13
 675              		@ sp needed
 676 0042 5DF8047B 		ldr	r7, [sp], #4
 677              		.cfi_restore 7
 678              		.cfi_def_cfa_offset 0
 679 0046 7047     		bx	lr
 680              	.L38:
 681              		.align	2
 682              	.L37:
 683 0048 00000000 		.word	uxCriticalNesting
 684              		.cfi_endproc
 685              	.LFE11:
 687              		.section	.text.PendSV_Handler,"ax",%progbits
 688              		.align	2
 689              		.global	PendSV_Handler
 690              		.thumb
 691              		.thumb_func
 693              	PendSV_Handler:
 694              	.LFB12:
 429:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 430:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 431:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 432:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 695              		.loc 1 432 0
 696              		.cfi_startproc
 697              		@ Naked Function: prologue and epilogue provided by programmer.
 698              		@ args = 0, pretend = 0, frame = 0
 699              		@ frame_needed = 1, uses_anonymous_args = 0
 433:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* This is a naked function. */
 434:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 435:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 700              		.loc 1 435 0
 701              	@ 435 "../FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 702 0000 EFF30980 			mrs r0, psp							
 703 0004 BFF36F8F 		isb									
 704              											
 705 0008 144B     		ldr	r3, pxCurrentTCBConst			
 706 000a 1A68     		ldr	r2, [r3]						
 707              											
 708 000c 1EF0100F 		tst r14, #0x10						
 709 0010 08BF     		it eq								
 710 0012 20ED108A 		vstmdbeq r0!, {s16-s31}				
 711              											
 712 0016 20E9F04F 		stmdb r0!, {r4-r11, r14}			
 713              											
 714 001a 1060     		str r0, [r2]						
 715              											
 716 001c 4DF8043D 		stmdb sp!, {r3}						
 717 0020 4FF00700 		mov r0, #7 							
 718 0024 80F31188 		msr basepri, r0						
 719 0028 BFF34F8F 		dsb									
 720 002c BFF36F8F 	   isb									
 721 0030 FFF7FEFF 		bl vTaskSwitchContext				
 722 0034 4FF00000 		mov r0, #0							
 723 0038 80F31188 		msr basepri, r0						
 724 003c 08BC     		ldmia sp!, {r3}						
 725              											
 726 003e 1968     		ldr r1, [r3]						
 727 0040 0868     		ldr r0, [r1]						
 728              											
 729 0042 B0E8F04F 		ldmia r0!, {r4-r11, r14}			
 730              											
 731 0046 1EF0100F 		tst r14, #0x10						
 732 004a 08BF     		it eq								
 733 004c B0EC108A 		vldmiaeq r0!, {s16-s31}				
 734              											
 735 0050 80F30988 		msr psp, r0							
 736 0054 BFF36F8F 		isb									
 737              											
 738              											
 739 0058 7047     		bx r14								
 740              											
 741 005a 00BF     		.align 2							
 742 005c 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 743              	
 744              	@ 0 "" 2
 436:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	(
 437:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	mrs r0, psp							\n"
 438:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	isb									\n"
 439:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 440:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 441:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r2, [r3]						\n"
 442:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 443:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, push high vfp registers. *
 444:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 445:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"
 446:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 447:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r4-r11, r14}			\n" /* Save the core registers. */
 448:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 449:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 450:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 451:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb sp!, {r3}						\n"
 452:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, %0 							\n"
 453:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 454:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	dsb									\n"
 455:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"   isb									\n"
 456:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	bl vTaskSwitchContext				\n"
 457:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, #0							\n"
 458:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 459:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia sp!, {r3}						\n"
 460:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 461:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r1, [r3]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 462:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r0, [r1]						\n"
 463:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 464:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r4-r11, r14}			\n" /* Pop the core registers. */
 465:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 466:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, pop the high vfp registers
 467:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 468:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"
 469:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 470:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	msr psp, r0							\n"
 471:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	isb									\n"
 472:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 473:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	#ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 474:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		#if WORKAROUND_PMU_CM001 == 1
 475:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"			push { r14 }				\n"
 476:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"			pop { pc }					\n"
 477:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		#endif
 478:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	#endif
 479:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 480:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	bx r14								\n"
 481:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 482:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	.align 2							\n"
 483:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 484:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 485:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	);
 486:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 745              		.loc 1 486 0
 746              		.thumb
 747              		.cfi_endproc
 748              	.LFE12:
 750              		.section	.text.SysTick_Handler,"ax",%progbits
 751              		.align	2
 752              		.global	SysTick_Handler
 753              		.thumb
 754              		.thumb_func
 756              	SysTick_Handler:
 757              	.LFB13:
 487:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 488:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 489:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 490:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 758              		.loc 1 490 0
 759              		.cfi_startproc
 760              		@ args = 0, pretend = 0, frame = 16
 761              		@ frame_needed = 1, uses_anonymous_args = 0
 762 0000 80B5     		push	{r7, lr}
 763              		.cfi_def_cfa_offset 8
 764              		.cfi_offset 7, -8
 765              		.cfi_offset 14, -4
 766 0002 84B0     		sub	sp, sp, #16
 767              		.cfi_def_cfa_offset 24
 768 0004 00AF     		add	r7, sp, #0
 769              		.cfi_def_cfa_register 7
 770              	.LBB48:
 771              	.LBB49:
 231:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 772              		.loc 2 231 0
 773              	@ 231 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 774 0006 EFF31182 			mrs r2, basepri											
 775 000a 4FF00703 		mov r3, #7												
 776 000e 83F31188 		msr basepri, r3											
 777 0012 BFF36F8F 		isb														
 778 0016 BFF34F8F 		dsb														
 779              	
 780              	@ 0 "" 2
 781              		.thumb
 782 001a FA60     		str	r2, [r7, #12]
 783 001c BB60     		str	r3, [r7, #8]
 784              	.LBE49:
 785              	.LBE48:
 491:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 492:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 493:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	save and then restore the interrupt mask value as its value is already
 494:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	known. */
 495:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 496:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	{
 497:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		/* Increment the RTOS tick. */
 498:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 786              		.loc 1 498 0
 787 001e FFF7FEFF 		bl	xTaskIncrementTick
 788 0022 0346     		mov	r3, r0
 789 0024 002B     		cmp	r3, #0
 790 0026 03D0     		beq	.L42
 499:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		{
 500:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			/* A context switch is required.  Context switching is performed in
 501:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 502:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 791              		.loc 1 502 0
 792 0028 054B     		ldr	r3, .L43
 793 002a 4FF08052 		mov	r2, #268435456
 794 002e 1A60     		str	r2, [r3]
 795              	.L42:
 796 0030 0023     		movs	r3, #0
 797 0032 7B60     		str	r3, [r7, #4]
 798              	.LBB50:
 799              	.LBB51:
 800              		.loc 2 249 0
 801 0034 7B68     		ldr	r3, [r7, #4]
 802              	@ 249 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 803 0036 83F31188 			msr basepri, r3	
 804              	@ 0 "" 2
 805              		.thumb
 806              	.LBE51:
 807              	.LBE50:
 503:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		}
 504:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	}
 505:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 506:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 808              		.loc 1 506 0
 809 003a 1037     		adds	r7, r7, #16
 810              		.cfi_def_cfa_offset 8
 811 003c BD46     		mov	sp, r7
 812              		.cfi_def_cfa_register 13
 813              		@ sp needed
 814 003e 80BD     		pop	{r7, pc}
 815              	.L44:
 816              		.align	2
 817              	.L43:
 818 0040 04ED00E0 		.word	-536810236
 819              		.cfi_endproc
 820              	.LFE13:
 822              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 823              		.align	2
 824              		.weak	vPortSetupTimerInterrupt
 825              		.thumb
 826              		.thumb_func
 828              	vPortSetupTimerInterrupt:
 829              	.LFB14:
 507:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 508:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 509:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 510:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 511:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 512:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	{
 513:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickCTRL;
 514:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	TickType_t xModifiableIdleTime;
 515:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 516:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 517:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 518:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		{
 519:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 520:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		}
 521:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 522:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 523:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 524:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 525:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		kernel with respect to calendar time. */
 526:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 527:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 528:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 529:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		tick periods.  -1 is used because this code will execute part way
 530:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		through one of the tick periods. */
 531:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 532:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 533:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		{
 534:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 535:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		}
 536:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 537:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 538:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 539:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "cpsid i" );
 540:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 541:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 542:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		to be unsuspended then abandon the low power entry. */
 543:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 544:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		{
 545:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			/* Restart from whatever is left in the count register to complete
 546:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			this tick period. */
 547:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 548:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 549:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick. */
 550:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 551:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 552:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			/* Reset the reload register to the value required for normal tick
 553:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			periods. */
 554:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 555:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 556:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 557:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			above. */
 558:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" );
 559:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		}
 560:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		else
 561:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		{
 562:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			/* Set the new reload value. */
 563:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 564:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 565:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 566:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			zero. */
 567:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 568:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 569:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick. */
 570:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 571:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 572:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 573:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 574:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 575:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			should not be executed again.  However, the original expected idle
 576:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 577:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 578:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 579:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			if( xModifiableIdleTime > 0 )
 580:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			{
 581:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "dsb" );
 582:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "wfi" );
 583:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "isb" );
 584:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			}
 585:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 586:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 587:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			/* Stop SysTick.  Again, the time the SysTick is stopped for is
 588:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			accounted for as best it can be, but using the tickless mode will
 589:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			inevitably result in some tiny drift of the time maintained by the
 590:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			kernel with respect to calendar time. */
 591:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			ulSysTickCTRL = portNVIC_SYSTICK_CTRL_REG;
 592:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( ulSysTickCTRL & ~portNVIC_SYSTICK_ENABLE_BIT );
 593:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 594:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 595:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			above. */
 596:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" );
 597:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 598:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			if( ( ulSysTickCTRL & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 599:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			{
 600:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				uint32_t ulCalculatedLoadValue;
 601:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 602:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				/* The tick interrupt has already executed, and the SysTick
 603:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				count reloaded with ulReloadValue.  Reset the
 604:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 605:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				period. */
 606:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 607:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 608:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 609:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				underflowed because the post sleep hook did something
 610:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				that took too long. */
 611:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 612:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				{
 613:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 614:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				}
 615:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 616:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 617:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 618:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				/* The tick interrupt handler will already have pended the tick
 619:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				processing in the kernel.  As the pending tick will be
 620:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				processed as soon as this function exits, the tick value
 621:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				maintained by the tick is stepped forward by one less than the
 622:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				time spent waiting. */
 623:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 624:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			}
 625:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			else
 626:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			{
 627:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 628:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 629:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				periods (not the ulReload value which accounted for part
 630:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				ticks). */
 631:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 632:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 633:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				/* How many complete tick periods passed while the processor
 634:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				was waiting? */
 635:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 636:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 637:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 638:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				period remains. */
 639:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1 ) * ulTimerCountsForOneTick ) - ulCom
 640:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			}
 641:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 642:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 643:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 644:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			value.  The critical section is used to ensure the tick interrupt
 645:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			can only execute once in the case that the reload register is near
 646:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			zero. */
 647:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 648:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			portENTER_CRITICAL();
 649:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			{
 650:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 651:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				vTaskStepTick( ulCompleteTickPeriods );
 652:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 653:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			}
 654:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			portEXIT_CRITICAL();
 655:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		}
 656:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	}
 657:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 658:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 659:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 660:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 661:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 662:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 663:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * frequency.
 664:../FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 665:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 666:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 830              		.loc 1 666 0
 831              		.cfi_startproc
 832              		@ args = 0, pretend = 0, frame = 0
 833              		@ frame_needed = 1, uses_anonymous_args = 0
 834              		@ link register save eliminated.
 835 0000 80B4     		push	{r7}
 836              		.cfi_def_cfa_offset 4
 837              		.cfi_offset 7, -4
 838 0002 00AF     		add	r7, sp, #0
 839              		.cfi_def_cfa_register 7
 667:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 668:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	#if configUSE_TICKLESS_IDLE == 1
 669:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	{
 670:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 671:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 672:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 673:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	}
 674:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 675:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 676:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 677:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 840              		.loc 1 677 0
 841 0004 044B     		ldr	r3, .L46
 842 0006 054A     		ldr	r2, .L46+4
 843 0008 1A60     		str	r2, [r3]
 678:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 844              		.loc 1 678 0
 845 000a 054B     		ldr	r3, .L46+8
 846 000c 0722     		movs	r2, #7
 847 000e 1A60     		str	r2, [r3]
 679:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 848              		.loc 1 679 0
 849 0010 BD46     		mov	sp, r7
 850              		.cfi_def_cfa_register 13
 851              		@ sp needed
 852 0012 5DF8047B 		ldr	r7, [sp], #4
 853              		.cfi_restore 7
 854              		.cfi_def_cfa_offset 0
 855 0016 7047     		bx	lr
 856              	.L47:
 857              		.align	2
 858              	.L46:
 859 0018 14E000E0 		.word	-536813548
 860 001c 7F380100 		.word	79999
 861 0020 10E000E0 		.word	-536813552
 862              		.cfi_endproc
 863              	.LFE14:
 865              		.section	.text.vPortEnableVFP,"ax",%progbits
 866              		.align	2
 867              		.thumb
 868              		.thumb_func
 870              	vPortEnableVFP:
 871              	.LFB15:
 680:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 681:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 682:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* This is a naked function. */
 683:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void )
 684:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 872              		.loc 1 684 0
 873              		.cfi_startproc
 874              		@ Naked Function: prologue and epilogue provided by programmer.
 875              		@ args = 0, pretend = 0, frame = 0
 876              		@ frame_needed = 1, uses_anonymous_args = 0
 685:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 877              		.loc 1 685 0
 878              	@ 685 "../FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 879 0000 DFF80C00 			ldr.w r0, =0xE000ED88		
 880 0004 0168     		ldr r1, [r0]				
 881              									
 882 0006 41F47001 		orr r1, r1, #( 0xf << 20 )	
 883 000a 0160     		str r1, [r0]				
 884 000c 7047     		bx r14						
 885              	@ 0 "" 2
 686:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	(
 687:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		"	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 688:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		"	ldr r1, [r0]				\n"
 689:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		"								\n"
 690:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
 691:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		"	str r1, [r0]				\n"
 692:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		"	bx r14						"
 693:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	);
 694:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 886              		.loc 1 694 0
 887              		.thumb
 888              		.cfi_endproc
 889              	.LFE15:
 891 000e 0000     		.section	.text.vPortValidateInterruptPriority,"ax",%progbits
 892              		.align	2
 893              		.global	vPortValidateInterruptPriority
 894              		.thumb
 895              		.thumb_func
 897              	vPortValidateInterruptPriority:
 898              	.LFB16:
 695:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 696:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 697:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #if( configASSERT_DEFINED == 1 )
 698:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 699:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	void vPortValidateInterruptPriority( void )
 700:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	{
 899              		.loc 1 700 0
 900              		.cfi_startproc
 901              		@ args = 0, pretend = 0, frame = 16
 902              		@ frame_needed = 1, uses_anonymous_args = 0
 903              		@ link register save eliminated.
 904 0000 80B4     		push	{r7}
 905              		.cfi_def_cfa_offset 4
 906              		.cfi_offset 7, -4
 907 0002 85B0     		sub	sp, sp, #20
 908              		.cfi_def_cfa_offset 24
 909 0004 00AF     		add	r7, sp, #0
 910              		.cfi_def_cfa_register 7
 701:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	uint32_t ulCurrentInterrupt;
 702:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	uint8_t ucCurrentPriority;
 703:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 704:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		/* Obtain the number of the currently executing interrupt. */
 705:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 911              		.loc 1 705 0
 912              	@ 705 "../FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 913 0006 EFF30583 		mrs r3, ipsr
 914              	@ 0 "" 2
 915              		.thumb
 916 000a FB60     		str	r3, [r7, #12]
 706:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 707:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		/* Is the interrupt number a user defined interrupt? */
 708:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 917              		.loc 1 708 0
 918 000c FB68     		ldr	r3, [r7, #12]
 919 000e 0F2B     		cmp	r3, #15
 920 0010 13D9     		bls	.L50
 709:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		{
 710:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			/* Look up the interrupt's priority. */
 711:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 921              		.loc 1 711 0
 922 0012 154A     		ldr	r2, .L54
 923 0014 FB68     		ldr	r3, [r7, #12]
 924 0016 1344     		add	r3, r3, r2
 925 0018 1B78     		ldrb	r3, [r3]
 926 001a FB72     		strb	r3, [r7, #11]
 712:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 713:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			/* The following assertion will fail if a service routine (ISR) for
 714:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			an interrupt that has been assigned a priority above
 715:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
 716:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			function.  ISR safe FreeRTOS API functions must *only* be called
 717:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			from interrupts that have been assigned a priority at or below
 718:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 719:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 720:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			Numerically low interrupt priority numbers represent logically high
 721:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			interrupt priorities, therefore the priority of the interrupt must
 722:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			be set to a value equal to or numerically *higher* than
 723:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 724:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 725:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			Interrupts that	use the FreeRTOS API must not be left at their
 726:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			default priority of	zero as that is the highest possible priority,
 727:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
 728:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			and	therefore also guaranteed to be invalid.
 729:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 730:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			FreeRTOS maintains separate thread and ISR API functions to ensure
 731:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			interrupt entry is as fast and simple as possible.
 732:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 733:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			The following links provide detailed information:
 734:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			http://www.freertos.org/RTOS-Cortex-M3-M4.html
 735:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			http://www.freertos.org/FAQHelp.html */
 736:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 927              		.loc 1 736 0
 928 001c 134B     		ldr	r3, .L54+4
 929 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 930 0020 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 931 0022 9A42     		cmp	r2, r3
 932 0024 09D2     		bcs	.L50
 933              	.LBB52:
 934              	.LBB53:
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 935              		.loc 2 215 0 discriminator 1
 936              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 937 0026 4FF00703 			mov r3, #7												
 938 002a 83F31188 		msr basepri, r3											
 939 002e BFF36F8F 		isb														
 940 0032 BFF34F8F 		dsb														
 941              	
 942              	@ 0 "" 2
 943              		.thumb
 944 0036 7B60     		str	r3, [r7, #4]
 945              	.L51:
 946              	.LBE53:
 947              	.LBE52:
 948              		.loc 1 736 0 discriminator 1
 949 0038 FEE7     		b	.L51
 950              	.L50:
 737:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		}
 738:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 739:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		/* Priority grouping:  The interrupt controller (NVIC) allows the bits
 740:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		that define each interrupt's priority to be split between bits that
 741:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		define the interrupt's pre-emption priority bits and bits that define
 742:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		the interrupt's sub-priority.  For simplicity all bits must be defined
 743:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		to be pre-emption priority bits.  The following assertion will fail if
 744:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		this is not the case (if some bits represent a sub-priority).
 745:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 746:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		If the application only uses CMSIS libraries for interrupt
 747:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		configuration then the correct setting can be achieved on all Cortex-M
 748:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
 749:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		scheduler.  Note however that some vendor specific peripheral libraries
 750:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		assume a non-zero priority group setting, in which cases using a value
 751:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		of zero will result in unpredicable behaviour. */
 752:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 951              		.loc 1 752 0
 952 003a 0D4B     		ldr	r3, .L54+8
 953 003c 1B68     		ldr	r3, [r3]
 954 003e 03F4E062 		and	r2, r3, #1792
 955 0042 0C4B     		ldr	r3, .L54+12
 956 0044 1B68     		ldr	r3, [r3]
 957 0046 9A42     		cmp	r2, r3
 958 0048 09D9     		bls	.L49
 959              	.LBB54:
 960              	.LBB55:
 215:/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 961              		.loc 2 215 0 discriminator 1
 962              	@ 215 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../Free
 963 004a 4FF00703 			mov r3, #7												
 964 004e 83F31188 		msr basepri, r3											
 965 0052 BFF36F8F 		isb														
 966 0056 BFF34F8F 		dsb														
 967              	
 968              	@ 0 "" 2
 969              		.thumb
 970 005a 3B60     		str	r3, [r7]
 971              	.L53:
 972              	.LBE55:
 973              	.LBE54:
 974              		.loc 1 752 0 discriminator 2
 975 005c FEE7     		b	.L53
 976              	.L49:
 753:../FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	}
 977              		.loc 1 753 0
 978 005e 1437     		adds	r7, r7, #20
 979              		.cfi_def_cfa_offset 4
 980 0060 BD46     		mov	sp, r7
 981              		.cfi_def_cfa_register 13
 982              		@ sp needed
 983 0062 5DF8047B 		ldr	r7, [sp], #4
 984              		.cfi_restore 7
 985              		.cfi_def_cfa_offset 0
 986 0066 7047     		bx	lr
 987              	.L55:
 988              		.align	2
 989              	.L54:
 990 0068 F0E300E0 		.word	-536812560
 991 006c 00000000 		.word	ucMaxSysCallPriority
 992 0070 0CED00E0 		.word	-536810228
 993 0074 00000000 		.word	ulMaxPRIGROUPValue
 994              		.cfi_endproc
 995              	.LFE16:
 997              		.text
 998              	.Letext0:
 999              		.file 3 "/home/houxd/prog/NXP/S32DS_ARM_v2.0/S32DS/arm_ewl2/EWL_C/include/cstdint"
 1000              		.file 4 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/projdef
DEFINED SYMBOLS
                            *ABS*:00000000 port.c
     /tmp/cc8kzYCJ.s:21     .data.uxCriticalNesting:00000000 $d
     /tmp/cc8kzYCJ.s:24     .data.uxCriticalNesting:00000000 uxCriticalNesting
     /tmp/cc8kzYCJ.s:29     .bss.ucMaxSysCallPriority:00000000 ucMaxSysCallPriority
     /tmp/cc8kzYCJ.s:30     .bss.ucMaxSysCallPriority:00000000 $d
     /tmp/cc8kzYCJ.s:32     .bss.ulMaxPRIGROUPValue:00000000 $d
     /tmp/cc8kzYCJ.s:35     .bss.ulMaxPRIGROUPValue:00000000 ulMaxPRIGROUPValue
     /tmp/cc8kzYCJ.s:38     .rodata.pcInterruptPriorityRegisters:00000000 $d
     /tmp/cc8kzYCJ.s:41     .rodata.pcInterruptPriorityRegisters:00000000 pcInterruptPriorityRegisters
     /tmp/cc8kzYCJ.s:44     .text.pxPortInitialiseStack:00000000 $t
     /tmp/cc8kzYCJ.s:49     .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
     /tmp/cc8kzYCJ.s:127    .text.pxPortInitialiseStack:00000060 $d
     /tmp/cc8kzYCJ.s:136    .text.prvTaskExitError:00000000 prvTaskExitError
     /tmp/cc8kzYCJ.s:132    .text.prvTaskExitError:00000000 $t
     /tmp/cc8kzYCJ.s:194    .text.prvTaskExitError:00000038 $d
     /tmp/cc8kzYCJ.s:199    .text.SVC_Handler:00000000 $t
     /tmp/cc8kzYCJ.s:204    .text.SVC_Handler:00000000 SVC_Handler
     /tmp/cc8kzYCJ.s:224    .text.SVC_Handler:0000001c pxCurrentTCBConst2
     /tmp/cc8kzYCJ.s:224    .text.SVC_Handler:0000001c $d
     /tmp/cc8kzYCJ.s:233    .text.prvPortStartFirstTask:00000000 $t
     /tmp/cc8kzYCJ.s:237    .text.prvPortStartFirstTask:00000000 prvPortStartFirstTask
     /tmp/cc8kzYCJ.s:264    .text.xPortStartScheduler:00000000 $t
     /tmp/cc8kzYCJ.s:269    .text.xPortStartScheduler:00000000 xPortStartScheduler
     /tmp/cc8kzYCJ.s:828    .text.vPortSetupTimerInterrupt:00000000 vPortSetupTimerInterrupt
     /tmp/cc8kzYCJ.s:870    .text.vPortEnableVFP:00000000 vPortEnableVFP
     /tmp/cc8kzYCJ.s:444    .text.xPortStartScheduler:000000f4 $d
     /tmp/cc8kzYCJ.s:457    .text.vPortEndScheduler:00000000 $t
     /tmp/cc8kzYCJ.s:462    .text.vPortEndScheduler:00000000 vPortEndScheduler
     /tmp/cc8kzYCJ.s:512    .text.vPortEndScheduler:00000030 $d
     /tmp/cc8kzYCJ.s:517    .text.vPortEnterCritical:00000000 $t
     /tmp/cc8kzYCJ.s:522    .text.vPortEnterCritical:00000000 vPortEnterCritical
     /tmp/cc8kzYCJ.s:598    .text.vPortEnterCritical:00000054 $d
     /tmp/cc8kzYCJ.s:604    .text.vPortExitCritical:00000000 $t
     /tmp/cc8kzYCJ.s:609    .text.vPortExitCritical:00000000 vPortExitCritical
     /tmp/cc8kzYCJ.s:683    .text.vPortExitCritical:00000048 $d
     /tmp/cc8kzYCJ.s:688    .text.PendSV_Handler:00000000 $t
     /tmp/cc8kzYCJ.s:693    .text.PendSV_Handler:00000000 PendSV_Handler
     /tmp/cc8kzYCJ.s:742    .text.PendSV_Handler:0000005c pxCurrentTCBConst
     /tmp/cc8kzYCJ.s:742    .text.PendSV_Handler:0000005c $d
     /tmp/cc8kzYCJ.s:751    .text.SysTick_Handler:00000000 $t
     /tmp/cc8kzYCJ.s:756    .text.SysTick_Handler:00000000 SysTick_Handler
     /tmp/cc8kzYCJ.s:818    .text.SysTick_Handler:00000040 $d
     /tmp/cc8kzYCJ.s:823    .text.vPortSetupTimerInterrupt:00000000 $t
     /tmp/cc8kzYCJ.s:859    .text.vPortSetupTimerInterrupt:00000018 $d
     /tmp/cc8kzYCJ.s:866    .text.vPortEnableVFP:00000000 $t
     /tmp/cc8kzYCJ.s:892    .text.vPortValidateInterruptPriority:00000000 $t
     /tmp/cc8kzYCJ.s:897    .text.vPortValidateInterruptPriority:00000000 vPortValidateInterruptPriority
     /tmp/cc8kzYCJ.s:990    .text.vPortValidateInterruptPriority:00000068 $d
     /tmp/cc8kzYCJ.s:891    .text.vPortEnableVFP:0000000e $d
     /tmp/cc8kzYCJ.s:263    .text.prvPortStartFirstTask:0000001a $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.728a2e6911dc01ff85c2d70c52e8fae1
                           .group:00000000 wm4.lib_c99.prefix.8.3580c292f50811c682d980dc4180498e
                           .group:00000000 wm4.common.prefix.16.d7bf937cdf46fd76dde96b376e3b328a
                           .group:00000000 wm4.ewl_c_version.h.9.0bcb57d6a3f89baae1f9b121de2772f5
                           .group:00000000 wm4.os_enum.h.9.f9446d6af68b3fa72a37d4d924d3b347
                           .group:00000000 wm4.ansi_prefix.ARM.h.13.4b23f4c654df3c3277534542f67d200c
                           .group:00000000 wm4.ansi_parms.h.64.90aed58330fdde08746db908036e1f37
                           .group:00000000 wm4.size_t.h.9.f983491a73b5c81f421ee8223b1ac5c0
                           .group:00000000 wm4.wchar_t.h.9.94198016f5b5f455e54ea1f3f054b416
                           .group:00000000 wm4.ewl_lib_ext1.h.14.f9b057cc049671136093886db2a3473f
                           .group:00000000 wm4.ewl_rsize_t.h.11.b283831bb803e76ceb1756da2df9a1b5
                           .group:00000000 wm4.cstddef.32.067e2ea187472b6198f9ace951e27a51
                           .group:00000000 wm4.limits_api.h.9.bc6daa20b3abae2bba6c512044e73b43
                           .group:00000000 wm4.cstdint.134.883feaa2838fb8c945f155045ce06256
                           .group:00000000 wm4.FreeRTOSConfig.h.72.75cb346dabad37f1d1a80e0a337065ed
                           .group:00000000 wm4.projdefs.h.71.b3c50e668908413922aad758934ec914
                           .group:00000000 wm4.portmacro.h.72.f619b572c99e5bd3ac77abd33efb542d
                           .group:00000000 wm4.portable.h.106.61ffdda1afafb5a5e1f7197ade95b43a
                           .group:00000000 wm4.mpu_wrappers.h.71.dd245fe44d82bd40288b5a47f895c82c
                           .group:00000000 wm4.FreeRTOS.h.179.860507a4e765cb3b74f37181fc3c9df6
                           .group:00000000 wm4.list.h.103.6a12b7b9a7a136c3cca0ee53675c5498
                           .group:00000000 wm4.task.h.88.249f28f82749d6a86cb49478ec501d6f

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
