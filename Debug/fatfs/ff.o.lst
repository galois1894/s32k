   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"ff.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.comm	fatfs,568,4
  21              		.global	VolToPart
  22              		.section	.data.VolToPart,"aw",%progbits
  23              		.align	2
  26              	VolToPart:
  27 0000 00       		.byte	0
  28 0001 01       		.byte	1
  29 0002 00       		.byte	0
  30 0003 02       		.byte	2
  31              		.section	.bss.FatFs,"aw",%nobits
  32              		.align	2
  35              	FatFs:
  36 0000 00000000 		.space	8
  36      00000000 
  37              		.section	.bss.Fsid,"aw",%nobits
  38              		.align	1
  41              	Fsid:
  42 0000 0000     		.space	2
  43              		.section	.bss.CurrVol,"aw",%nobits
  46              	CurrVol:
  47 0000 00       		.space	1
  48              		.section	.bss.LfnBuf,"aw",%nobits
  49              		.align	2
  52              	LfnBuf:
  53 0000 00000000 		.space	512
  53      00000000 
  53      00000000 
  53      00000000 
  53      00000000 
  54              		.section	.rodata.ExCvt,"a",%progbits
  55              		.align	2
  58              	ExCvt:
  59 0000 80       		.byte	-128
  60 0001 9A       		.byte	-102
  61 0002 90       		.byte	-112
  62 0003 B6       		.byte	-74
  63 0004 8E       		.byte	-114
  64 0005 B7       		.byte	-73
  65 0006 8F       		.byte	-113
  66 0007 80       		.byte	-128
  67 0008 D2       		.byte	-46
  68 0009 D3       		.byte	-45
  69 000a D4       		.byte	-44
  70 000b D8       		.byte	-40
  71 000c D7       		.byte	-41
  72 000d DE       		.byte	-34
  73 000e 8E       		.byte	-114
  74 000f 8F       		.byte	-113
  75 0010 90       		.byte	-112
  76 0011 92       		.byte	-110
  77 0012 92       		.byte	-110
  78 0013 E2       		.byte	-30
  79 0014 99       		.byte	-103
  80 0015 E3       		.byte	-29
  81 0016 EA       		.byte	-22
  82 0017 EB       		.byte	-21
  83 0018 59       		.byte	89
  84 0019 99       		.byte	-103
  85 001a 9A       		.byte	-102
  86 001b 9D       		.byte	-99
  87 001c 9C       		.byte	-100
  88 001d 9D       		.byte	-99
  89 001e 9E       		.byte	-98
  90 001f 9F       		.byte	-97
  91 0020 B5       		.byte	-75
  92 0021 D6       		.byte	-42
  93 0022 E0       		.byte	-32
  94 0023 E9       		.byte	-23
  95 0024 A5       		.byte	-91
  96 0025 A5       		.byte	-91
  97 0026 A6       		.byte	-90
  98 0027 A7       		.byte	-89
  99 0028 A8       		.byte	-88
 100 0029 A9       		.byte	-87
 101 002a AA       		.byte	-86
 102 002b AB       		.byte	-85
 103 002c AC       		.byte	-84
 104 002d 21       		.byte	33
 105 002e AE       		.byte	-82
 106 002f AF       		.byte	-81
 107 0030 B0       		.byte	-80
 108 0031 B1       		.byte	-79
 109 0032 B2       		.byte	-78
 110 0033 B3       		.byte	-77
 111 0034 B4       		.byte	-76
 112 0035 B5       		.byte	-75
 113 0036 B6       		.byte	-74
 114 0037 B7       		.byte	-73
 115 0038 B8       		.byte	-72
 116 0039 B9       		.byte	-71
 117 003a BA       		.byte	-70
 118 003b BB       		.byte	-69
 119 003c BC       		.byte	-68
 120 003d BD       		.byte	-67
 121 003e BE       		.byte	-66
 122 003f BF       		.byte	-65
 123 0040 C0       		.byte	-64
 124 0041 C1       		.byte	-63
 125 0042 C2       		.byte	-62
 126 0043 C3       		.byte	-61
 127 0044 C4       		.byte	-60
 128 0045 C5       		.byte	-59
 129 0046 C7       		.byte	-57
 130 0047 C7       		.byte	-57
 131 0048 C8       		.byte	-56
 132 0049 C9       		.byte	-55
 133 004a CA       		.byte	-54
 134 004b CB       		.byte	-53
 135 004c CC       		.byte	-52
 136 004d CD       		.byte	-51
 137 004e CE       		.byte	-50
 138 004f CF       		.byte	-49
 139 0050 D0       		.byte	-48
 140 0051 D1       		.byte	-47
 141 0052 D2       		.byte	-46
 142 0053 D3       		.byte	-45
 143 0054 D4       		.byte	-44
 144 0055 D5       		.byte	-43
 145 0056 D6       		.byte	-42
 146 0057 D7       		.byte	-41
 147 0058 D8       		.byte	-40
 148 0059 D9       		.byte	-39
 149 005a DA       		.byte	-38
 150 005b DB       		.byte	-37
 151 005c DC       		.byte	-36
 152 005d DD       		.byte	-35
 153 005e DE       		.byte	-34
 154 005f DF       		.byte	-33
 155 0060 E0       		.byte	-32
 156 0061 E1       		.byte	-31
 157 0062 E2       		.byte	-30
 158 0063 E3       		.byte	-29
 159 0064 E5       		.byte	-27
 160 0065 E5       		.byte	-27
 161 0066 E6       		.byte	-26
 162 0067 E7       		.byte	-25
 163 0068 E7       		.byte	-25
 164 0069 E9       		.byte	-23
 165 006a EA       		.byte	-22
 166 006b EB       		.byte	-21
 167 006c ED       		.byte	-19
 168 006d ED       		.byte	-19
 169 006e EE       		.byte	-18
 170 006f EF       		.byte	-17
 171 0070 F0       		.byte	-16
 172 0071 F1       		.byte	-15
 173 0072 F2       		.byte	-14
 174 0073 F3       		.byte	-13
 175 0074 F4       		.byte	-12
 176 0075 F5       		.byte	-11
 177 0076 F6       		.byte	-10
 178 0077 F7       		.byte	-9
 179 0078 F8       		.byte	-8
 180 0079 F9       		.byte	-7
 181 007a FA       		.byte	-6
 182 007b FB       		.byte	-5
 183 007c FC       		.byte	-4
 184 007d FD       		.byte	-3
 185 007e FE       		.byte	-2
 186 007f FF       		.byte	-1
 187              		.section	.text.SD_mount,"ax",%progbits
 188              		.align	2
 189              		.global	SD_mount
 190              		.thumb
 191              		.thumb_func
 193              	SD_mount:
 194              	.LFB0:
 195              		.file 1 "../fatfs/ff.c"
   1:../fatfs/ff.c **** /*----------------------------------------------------------------------------/
   2:../fatfs/ff.c **** /  FatFs - FAT file system module  R0.09b                 (C)ChaN, 2013
   3:../fatfs/ff.c **** /-----------------------------------------------------------------------------/
   4:../fatfs/ff.c **** / FatFs module is a generic FAT file system module for small embedded systems.
   5:../fatfs/ff.c **** / This is a free software that opened for education, research and commercial
   6:../fatfs/ff.c **** / developments under license policy of following terms.
   7:../fatfs/ff.c **** /
   8:../fatfs/ff.c **** /  Copyright (C) 2013, ChaN, all right reserved.
   9:../fatfs/ff.c **** /
  10:../fatfs/ff.c **** / * The FatFs module is a free software and there is NO WARRANTY.
  11:../fatfs/ff.c **** / * No restriction on use. You can use, modify and redistribute it for
  12:../fatfs/ff.c **** /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
  13:../fatfs/ff.c **** / * Redistributions of source code must retain the above copyright notice.
  14:../fatfs/ff.c **** /
  15:../fatfs/ff.c **** /-----------------------------------------------------------------------------/
  16:../fatfs/ff.c **** / Feb 26,'06 R0.00  Prototype.
  17:../fatfs/ff.c **** /
  18:../fatfs/ff.c **** / Apr 29,'06 R0.01  First stable version.
  19:../fatfs/ff.c **** /
  20:../fatfs/ff.c **** / Jun 01,'06 R0.02  Added FAT12 support.
  21:../fatfs/ff.c **** /                   Removed unbuffered mode.
  22:../fatfs/ff.c **** /                   Fixed a problem on small (<32M) partition.
  23:../fatfs/ff.c **** / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
  24:../fatfs/ff.c **** /
  25:../fatfs/ff.c **** / Sep 22,'06 R0.03  Added f_rename().
  26:../fatfs/ff.c **** /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
  27:../fatfs/ff.c **** / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
  28:../fatfs/ff.c **** /                   Fixed f_mkdir() creates incorrect directory on FAT32.
  29:../fatfs/ff.c **** /
  30:../fatfs/ff.c **** / Feb 04,'07 R0.04  Supported multiple drive system.
  31:../fatfs/ff.c **** /                   Changed some interfaces for multiple drive system.
  32:../fatfs/ff.c **** /                   Changed f_mountdrv() to f_mount().
  33:../fatfs/ff.c **** /                   Added f_mkfs().
  34:../fatfs/ff.c **** / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
  35:../fatfs/ff.c **** /                   Added a capability of extending file size to f_lseek().
  36:../fatfs/ff.c **** /                   Added minimization level 3.
  37:../fatfs/ff.c **** /                   Fixed an endian sensitive code in f_mkfs().
  38:../fatfs/ff.c **** / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
  39:../fatfs/ff.c **** /                   Added FSInfo support.
  40:../fatfs/ff.c **** /                   Fixed DBCS name can result FR_INVALID_NAME.
  41:../fatfs/ff.c **** /                   Fixed short seek (<= csize) collapses the file object.
  42:../fatfs/ff.c **** /
  43:../fatfs/ff.c **** / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
  44:../fatfs/ff.c **** /                   Fixed f_mkfs() on FAT32 creates incorrect FSInfo.
  45:../fatfs/ff.c **** /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
  46:../fatfs/ff.c **** / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
  47:../fatfs/ff.c **** /                   Fixed off by one error at FAT sub-type determination.
  48:../fatfs/ff.c **** /                   Fixed btr in f_read() can be mistruncated.
  49:../fatfs/ff.c **** /                   Fixed cached sector is not flushed when create and close without write.
  50:../fatfs/ff.c **** /
  51:../fatfs/ff.c **** / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
  52:../fatfs/ff.c **** /                   Improved performance of f_lseek() on moving to the same or following cluster.
  53:../fatfs/ff.c **** /
  54:../fatfs/ff.c **** / Apr 01,'09 R0.07  Merged Tiny-FatFs as a configuration option. (_FS_TINY)
  55:../fatfs/ff.c **** /                   Added long file name feature.
  56:../fatfs/ff.c **** /                   Added multiple code page feature.
  57:../fatfs/ff.c **** /                   Added re-entrancy for multitask operation.
  58:../fatfs/ff.c **** /                   Added auto cluster size selection to f_mkfs().
  59:../fatfs/ff.c **** /                   Added rewind option to f_readdir().
  60:../fatfs/ff.c **** /                   Changed result code of critical errors.
  61:../fatfs/ff.c **** /                   Renamed string functions to avoid name collision.
  62:../fatfs/ff.c **** / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
  63:../fatfs/ff.c **** /                   Added multiple sector size feature.
  64:../fatfs/ff.c **** / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
  65:../fatfs/ff.c **** /                   Fixed wrong cache control in f_lseek().
  66:../fatfs/ff.c **** /                   Added relative path feature.
  67:../fatfs/ff.c **** /                   Added f_chdir() and f_chdrive().
  68:../fatfs/ff.c **** /                   Added proper case conversion to extended char.
  69:../fatfs/ff.c **** / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
  70:../fatfs/ff.c **** /                   Fixed f_unlink() fails to remove a sub-dir on _FS_RPATH.
  71:../fatfs/ff.c **** /                   Fixed name matching error on the 13 char boundary.
  72:../fatfs/ff.c **** /                   Added a configuration option, _LFN_UNICODE.
  73:../fatfs/ff.c **** /                   Changed f_readdir() to return the SFN with always upper case on non-LFN cfg.
  74:../fatfs/ff.c **** /
  75:../fatfs/ff.c **** / May 15,'10 R0.08  Added a memory configuration option. (_USE_LFN = 3)
  76:../fatfs/ff.c **** /                   Added file lock feature. (_FS_SHARE)
  77:../fatfs/ff.c **** /                   Added fast seek feature. (_USE_FASTSEEK)
  78:../fatfs/ff.c **** /                   Changed some types on the API, XCHAR->TCHAR.
  79:../fatfs/ff.c **** /                   Changed fname member in the FILINFO structure on Unicode cfg.
  80:../fatfs/ff.c **** /                   String functions support UTF-8 encoding files on Unicode cfg.
  81:../fatfs/ff.c **** / Aug 16,'10 R0.08a Added f_getcwd(). (_FS_RPATH = 2)
  82:../fatfs/ff.c **** /                   Added sector erase feature. (_USE_ERASE)
  83:../fatfs/ff.c **** /                   Moved file lock semaphore table from fs object to the bss.
  84:../fatfs/ff.c **** /                   Fixed a wrong directory entry is created on non-LFN cfg when the given name con
  85:../fatfs/ff.c **** /                   Fixed f_mkfs() creates wrong FAT32 volume.
  86:../fatfs/ff.c **** / Jan 15,'11 R0.08b Fast seek feature is also applied to f_read() and f_write().
  87:../fatfs/ff.c **** /                   f_lseek() reports required table size on creating CLMP.
  88:../fatfs/ff.c **** /                   Extended format syntax of f_printf function.
  89:../fatfs/ff.c **** /                   Ignores duplicated directory separators in given path name.
  90:../fatfs/ff.c **** /
  91:../fatfs/ff.c **** / Sep 06,'11 R0.09  f_mkfs() supports multiple partition to finish the multiple partition feature.
  92:../fatfs/ff.c **** /                   Added f_fdisk(). (_MULTI_PARTITION = 2)
  93:../fatfs/ff.c **** / Aug 27,'12 R0.09a Fixed assertion failure due to OS/2 EA on FAT12/16 volume.
  94:../fatfs/ff.c **** /                   Changed f_open() and f_opendir() reject null object pointer to avoid crash.
  95:../fatfs/ff.c **** /                   Changed option name _FS_SHARE to _FS_LOCK.
  96:../fatfs/ff.c **** / Jan 24,'13 R0.09b Added f_setlabel() and f_getlabel(). (_USE_LABEL = 1)
  97:../fatfs/ff.c **** /---------------------------------------------------------------------------*/
  98:../fatfs/ff.c **** 
  99:../fatfs/ff.c **** #include "ff.h"			/* FatFs configurations and declarations */
 100:../fatfs/ff.c **** #include "diskio.h"		/* Declarations of low level disk I/O functions */
 101:../fatfs/ff.c **** 
 102:../fatfs/ff.c **** FATFS 	fatfs[1];
 103:../fatfs/ff.c **** 
 104:../fatfs/ff.c **** PARTITION VolToPart[] = {
 105:../fatfs/ff.c **** 							{0, 1},    /* Logical drive 0 ==> Physical drive 0, 1st partition */
 106:../fatfs/ff.c ****   							{0, 2},    /* Logical drive 1 ==> Physical drive 0, 2nd partition */
 107:../fatfs/ff.c **** //							{0, 3}     /* Logical drive 2 ==> Physical drive 0, 3rd partition */
 108:../fatfs/ff.c **** 						};
 109:../fatfs/ff.c **** /*--------------------------------------------------------------------------
 110:../fatfs/ff.c **** 
 111:../fatfs/ff.c ****    Module Private Definitions
 112:../fatfs/ff.c **** 
 113:../fatfs/ff.c **** ---------------------------------------------------------------------------*/
 114:../fatfs/ff.c **** 
 115:../fatfs/ff.c **** #if _FATFS != 82786	/* Revision ID */
 116:../fatfs/ff.c **** #error Wrong include file (ff.h).
 117:../fatfs/ff.c **** #endif
 118:../fatfs/ff.c **** 
 119:../fatfs/ff.c **** 
 120:../fatfs/ff.c **** /* Definitions on sector size */
 121:../fatfs/ff.c **** #if _MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
 122:../fatfs/ff.c **** #error Wrong sector size.
 123:../fatfs/ff.c **** #endif
 124:../fatfs/ff.c **** #if _MAX_SS != 512
 125:../fatfs/ff.c **** #define	SS(fs)	((fs)->ssize)	/* Variable sector size */
 126:../fatfs/ff.c **** #else
 127:../fatfs/ff.c **** #define	SS(fs)	512U			/* Fixed sector size */
 128:../fatfs/ff.c **** #endif
 129:../fatfs/ff.c **** 
 130:../fatfs/ff.c **** 
 131:../fatfs/ff.c **** /* Reentrancy related */
 132:../fatfs/ff.c **** #if _FS_REENTRANT
 133:../fatfs/ff.c **** #if _USE_LFN == 1
 134:../fatfs/ff.c **** #error Static LFN work area must not be used in re-entrant configuration.
 135:../fatfs/ff.c **** #endif
 136:../fatfs/ff.c **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
 137:../fatfs/ff.c **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 138:../fatfs/ff.c **** #else
 139:../fatfs/ff.c **** #define	ENTER_FF(fs)
 140:../fatfs/ff.c **** #define LEAVE_FF(fs, res)	return res
 141:../fatfs/ff.c **** #endif
 142:../fatfs/ff.c **** 
 143:../fatfs/ff.c **** #define	ABORT(fs, res)		{ fp->flag |= FA__ERROR; LEAVE_FF(fs, res); }
 144:../fatfs/ff.c **** 
 145:../fatfs/ff.c **** 
 146:../fatfs/ff.c **** /* File access control feature */
 147:../fatfs/ff.c **** #if _FS_LOCK
 148:../fatfs/ff.c **** #if _FS_READONLY
 149:../fatfs/ff.c **** #error _FS_LOCK must be 0 on read-only cfg.
 150:../fatfs/ff.c **** #endif
 151:../fatfs/ff.c **** typedef struct {
 152:../fatfs/ff.c **** 	FATFS *fatfs;				/* File ID 1, volume (NULL:blank entry) */
 153:../fatfs/ff.c **** 	DWORD clu;				/* File ID 2, directory */
 154:../fatfs/ff.c **** 	WORD idx;				/* File ID 3, directory index */
 155:../fatfs/ff.c **** 	WORD ctr;				/* File open counter, 0:none, 0x01..0xFF:read open count, 0x100:write mode */
 156:../fatfs/ff.c **** } FILESEM;
 157:../fatfs/ff.c **** #endif
 158:../fatfs/ff.c **** 
 159:../fatfs/ff.c **** 
 160:../fatfs/ff.c **** 
 161:../fatfs/ff.c **** /* DBCS code ranges and SBCS extend char conversion table */
 162:../fatfs/ff.c **** 
 163:../fatfs/ff.c **** #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
 164:../fatfs/ff.c **** #define _DF1S	0x81	/* DBC 1st byte range 1 start */
 165:../fatfs/ff.c **** #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
 166:../fatfs/ff.c **** #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
 167:../fatfs/ff.c **** #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
 168:../fatfs/ff.c **** #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
 169:../fatfs/ff.c **** #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
 170:../fatfs/ff.c **** #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
 171:../fatfs/ff.c **** #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
 172:../fatfs/ff.c **** 
 173:../fatfs/ff.c **** #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
 174:../fatfs/ff.c **** #define _DF1S	0x81
 175:../fatfs/ff.c **** #define _DF1E	0xFE
 176:../fatfs/ff.c **** #define _DS1S	0x40
 177:../fatfs/ff.c **** #define _DS1E	0x7E
 178:../fatfs/ff.c **** #define _DS2S	0x80
 179:../fatfs/ff.c **** #define _DS2E	0xFE
 180:../fatfs/ff.c **** 
 181:../fatfs/ff.c **** #elif _CODE_PAGE == 949	/* Korean */
 182:../fatfs/ff.c **** #define _DF1S	0x81
 183:../fatfs/ff.c **** #define _DF1E	0xFE
 184:../fatfs/ff.c **** #define _DS1S	0x41
 185:../fatfs/ff.c **** #define _DS1E	0x5A
 186:../fatfs/ff.c **** #define _DS2S	0x61
 187:../fatfs/ff.c **** #define _DS2E	0x7A
 188:../fatfs/ff.c **** #define _DS3S	0x81
 189:../fatfs/ff.c **** #define _DS3E	0xFE
 190:../fatfs/ff.c **** 
 191:../fatfs/ff.c **** #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
 192:../fatfs/ff.c **** #define _DF1S	0x81
 193:../fatfs/ff.c **** #define _DF1E	0xFE
 194:../fatfs/ff.c **** #define _DS1S	0x40
 195:../fatfs/ff.c **** #define _DS1E	0x7E
 196:../fatfs/ff.c **** #define _DS2S	0xA1
 197:../fatfs/ff.c **** #define _DS2E	0xFE
 198:../fatfs/ff.c **** 
 199:../fatfs/ff.c **** #elif _CODE_PAGE == 437	/* U.S. (OEM) */
 200:../fatfs/ff.c **** #define _DF1S	0
 201:../fatfs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F,0x9
 202:../fatfs/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 203:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 204:../fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 205:../fatfs/ff.c **** 
 206:../fatfs/ff.c **** #elif _CODE_PAGE == 720	/* Arabic (OEM) */
 207:../fatfs/ff.c **** #define _DF1S	0
 208:../fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x45,0x41,0x84,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x8E,0x8F,0x9
 209:../fatfs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 210:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 211:../fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 212:../fatfs/ff.c **** 
 213:../fatfs/ff.c **** #elif _CODE_PAGE == 737	/* Greek (OEM) */
 214:../fatfs/ff.c **** #define _DF1S	0
 215:../fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 216:../fatfs/ff.c **** 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96,0xB0,0xB1,0xB2,
 217:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 218:../fatfs/ff.c **** 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xE7,0xE8,0xF1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 219:../fatfs/ff.c **** 
 220:../fatfs/ff.c **** #elif _CODE_PAGE == 775	/* Baltic (OEM) */
 221:../fatfs/ff.c **** #define _DF1S	0
 222:../fatfs/ff.c **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F,0x9
 223:../fatfs/ff.c **** 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 224:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xB5,0xB6,0xB7,
 225:../fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 226:../fatfs/ff.c **** 
 227:../fatfs/ff.c **** #elif _CODE_PAGE == 850	/* Multilingual Latin 1 (OEM) */
 228:../fatfs/ff.c **** #define _DF1S	0
 229:../fatfs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 230:../fatfs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 231:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 232:../fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 233:../fatfs/ff.c **** 
 234:../fatfs/ff.c **** #elif _CODE_PAGE == 852	/* Latin 2 (OEM) */
 235:../fatfs/ff.c **** #define _DF1S	0
 236:../fatfs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F,0x9
 237:../fatfs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF,0xB0,0xB1,0xB2,
 238:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 239:../fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF,0xF0,0xF1,0xF2,
 240:../fatfs/ff.c **** 
 241:../fatfs/ff.c **** #elif _CODE_PAGE == 855	/* Cyrillic (OEM) */
 242:../fatfs/ff.c **** #define _DF1S	0
 243:../fatfs/ff.c **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F,0x9
 244:../fatfs/ff.c **** 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 245:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD3,
 246:../fatfs/ff.c **** 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF,0xF0,0xF2,0xF2,
 247:../fatfs/ff.c **** 
 248:../fatfs/ff.c **** #elif _CODE_PAGE == 857	/* Turkish (OEM) */
 249:../fatfs/ff.c **** #define _DF1S	0
 250:../fatfs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x98,0x8E,0x8F,0x9
 251:../fatfs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 252:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 253:../fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0x59,0xEE,0xEF,0xF0,0xF1,0xF2,
 254:../fatfs/ff.c **** 
 255:../fatfs/ff.c **** #elif _CODE_PAGE == 858	/* Multilingual Latin 1 + Euro (OEM) */
 256:../fatfs/ff.c **** #define _DF1S	0
 257:../fatfs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 258:../fatfs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 259:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 260:../fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 261:../fatfs/ff.c **** 
 262:../fatfs/ff.c **** #elif _CODE_PAGE == 862	/* Hebrew (OEM) */
 263:../fatfs/ff.c **** #define _DF1S	0
 264:../fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 265:../fatfs/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 266:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 267:../fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 268:../fatfs/ff.c **** 
 269:../fatfs/ff.c **** #elif _CODE_PAGE == 866	/* Russian (OEM) */
 270:../fatfs/ff.c **** #define _DF1S	0
 271:../fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 272:../fatfs/ff.c **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0xB0,0xB1,0xB2,
 273:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 274:../fatfs/ff.c **** 				0x90,0x91,0x92,0x93,0x9d,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,0xF0,0xF0,0xF2,
 275:../fatfs/ff.c **** 
 276:../fatfs/ff.c **** #elif _CODE_PAGE == 874	/* Thai (OEM, Windows) */
 277:../fatfs/ff.c **** #define _DF1S	0
 278:../fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 279:../fatfs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 280:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 281:../fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 282:../fatfs/ff.c **** 
 283:../fatfs/ff.c **** #elif _CODE_PAGE == 1250 /* Central Europe (Windows) */
 284:../fatfs/ff.c **** #define _DF1S	0
 285:../fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 286:../fatfs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 287:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 288:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 289:../fatfs/ff.c **** 
 290:../fatfs/ff.c **** #elif _CODE_PAGE == 1251 /* Cyrillic (Windows) */
 291:../fatfs/ff.c **** #define _DF1S	0
 292:../fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x82,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x8
 293:../fatfs/ff.c **** 				0xA0,0xA2,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 294:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 295:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 296:../fatfs/ff.c **** 
 297:../fatfs/ff.c **** #elif _CODE_PAGE == 1252 /* Latin 1 (Windows) */
 298:../fatfs/ff.c **** #define _DF1S	0
 299:../fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 300:../fatfs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 301:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 302:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 303:../fatfs/ff.c **** 
 304:../fatfs/ff.c **** #elif _CODE_PAGE == 1253 /* Greek (Windows) */
 305:../fatfs/ff.c **** #define _DF1S	0
 306:../fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 307:../fatfs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 308:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 309:../fatfs/ff.c **** 				0xE0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 310:../fatfs/ff.c **** 
 311:../fatfs/ff.c **** #elif _CODE_PAGE == 1254 /* Turkish (Windows) */
 312:../fatfs/ff.c **** #define _DF1S	0
 313:../fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 314:../fatfs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 315:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 316:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 317:../fatfs/ff.c **** 
 318:../fatfs/ff.c **** #elif _CODE_PAGE == 1255 /* Hebrew (Windows) */
 319:../fatfs/ff.c **** #define _DF1S	0
 320:../fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 321:../fatfs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 322:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 323:../fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 324:../fatfs/ff.c **** 
 325:../fatfs/ff.c **** #elif _CODE_PAGE == 1256 /* Arabic (Windows) */
 326:../fatfs/ff.c **** #define _DF1S	0
 327:../fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 328:../fatfs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 329:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 330:../fatfs/ff.c **** 				0x41,0xE1,0x41,0xE3,0xE4,0xE5,0xE6,0x43,0x45,0x45,0x45,0x45,0xEC,0xED,0x49,0x49,0xF0,0xF1,0xF2,
 331:../fatfs/ff.c **** 
 332:../fatfs/ff.c **** #elif _CODE_PAGE == 1257 /* Baltic (Windows) */
 333:../fatfs/ff.c **** #define _DF1S	0
 334:../fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 335:../fatfs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 336:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 337:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 338:../fatfs/ff.c **** 
 339:../fatfs/ff.c **** #elif _CODE_PAGE == 1258 /* Vietnam (OEM, Windows) */
 340:../fatfs/ff.c **** #define _DF1S	0
 341:../fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 342:../fatfs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 343:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 344:../fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xEC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 345:../fatfs/ff.c **** 
 346:../fatfs/ff.c **** #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
 347:../fatfs/ff.c **** #if _USE_LFN
 348:../fatfs/ff.c **** #error Cannot use LFN feature without valid code page.
 349:../fatfs/ff.c **** #endif
 350:../fatfs/ff.c **** #define _DF1S	0
 351:../fatfs/ff.c **** 
 352:../fatfs/ff.c **** #else
 353:../fatfs/ff.c **** #error Unknown code page
 354:../fatfs/ff.c **** 
 355:../fatfs/ff.c **** #endif
 356:../fatfs/ff.c **** 
 357:../fatfs/ff.c **** 
 358:../fatfs/ff.c **** 
 359:../fatfs/ff.c **** /* Character code support macros */
 360:../fatfs/ff.c **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 361:../fatfs/ff.c **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 362:../fatfs/ff.c **** #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
 363:../fatfs/ff.c **** 
 364:../fatfs/ff.c **** #if _DF1S		/* Code page is DBCS */
 365:../fatfs/ff.c **** 
 366:../fatfs/ff.c **** #ifdef _DF2S	/* Two 1st byte areas */
 367:../fatfs/ff.c **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 368:../fatfs/ff.c **** #else			/* One 1st byte area */
 369:../fatfs/ff.c **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 370:../fatfs/ff.c **** #endif
 371:../fatfs/ff.c **** 
 372:../fatfs/ff.c **** #ifdef _DS3S	/* Three 2nd byte areas */
 373:../fatfs/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 374:../fatfs/ff.c **** #else			/* Two 2nd byte areas */
 375:../fatfs/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 376:../fatfs/ff.c **** #endif
 377:../fatfs/ff.c **** 
 378:../fatfs/ff.c **** #else			/* Code page is SBCS */
 379:../fatfs/ff.c **** 
 380:../fatfs/ff.c **** #define IsDBCS1(c)	0
 381:../fatfs/ff.c **** #define IsDBCS2(c)	0
 382:../fatfs/ff.c **** 
 383:../fatfs/ff.c **** #endif /* _DF1S */
 384:../fatfs/ff.c **** 
 385:../fatfs/ff.c **** 
 386:../fatfs/ff.c **** /* Name status flags */
 387:../fatfs/ff.c **** #define NS			11		/* Index of name status byte in fn[] */
 388:../fatfs/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 389:../fatfs/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
 390:../fatfs/ff.c **** #define NS_LAST		0x04	/* Last segment */
 391:../fatfs/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
 392:../fatfs/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 393:../fatfs/ff.c **** #define NS_DOT		0x20	/* Dot entry */
 394:../fatfs/ff.c **** 
 395:../fatfs/ff.c **** 
 396:../fatfs/ff.c **** /* FAT sub-type boundaries */
 397:../fatfs/ff.c **** /* Note that the FAT spec by Microsoft says 4085 but Windows works with 4087! */
 398:../fatfs/ff.c **** #define MIN_FAT16	4086	/* Minimum number of clusters for FAT16 */
 399:../fatfs/ff.c **** #define	MIN_FAT32	65526	/* Minimum number of clusters for FAT32 */
 400:../fatfs/ff.c **** 
 401:../fatfs/ff.c **** 
 402:../fatfs/ff.c **** /* FatFs refers the members in the FAT structures as byte array instead of
 403:../fatfs/ff.c **** / structure member because the structure is not binary compatible between
 404:../fatfs/ff.c **** / different platforms */
 405:../fatfs/ff.c **** 
 406:../fatfs/ff.c **** #define BS_jmpBoot			0	/* Jump instruction (3) */
 407:../fatfs/ff.c **** #define BS_OEMName			3	/* OEM name (8) */
 408:../fatfs/ff.c **** #define BPB_BytsPerSec		11	/* Sector size [byte] (2) */
 409:../fatfs/ff.c **** #define BPB_SecPerClus		13	/* Cluster size [sector] (1) */
 410:../fatfs/ff.c **** #define BPB_RsvdSecCnt		14	/* Size of reserved area [sector] (2) */
 411:../fatfs/ff.c **** #define BPB_NumFATs			16	/* Number of FAT copies (1) */
 412:../fatfs/ff.c **** #define BPB_RootEntCnt		17	/* Number of root dir entries for FAT12/16 (2) */
 413:../fatfs/ff.c **** #define BPB_TotSec16		19	/* Volume size [sector] (2) */
 414:../fatfs/ff.c **** #define BPB_Media			21	/* Media descriptor (1) */
 415:../fatfs/ff.c **** #define BPB_FATSz16			22	/* FAT size [sector] (2) */
 416:../fatfs/ff.c **** #define BPB_SecPerTrk		24	/* Track size [sector] (2) */
 417:../fatfs/ff.c **** #define BPB_NumHeads		26	/* Number of heads (2) */
 418:../fatfs/ff.c **** #define BPB_HiddSec			28	/* Number of special hidden sectors (4) */
 419:../fatfs/ff.c **** #define BPB_TotSec32		32	/* Volume size [sector] (4) */
 420:../fatfs/ff.c **** #define BS_DrvNum			36	/* Physical drive number (2) */
 421:../fatfs/ff.c **** #define BS_BootSig			38	/* Extended boot signature (1) */
 422:../fatfs/ff.c **** #define BS_VolID			39	/* Volume serial number (4) */
 423:../fatfs/ff.c **** #define BS_VolLab			43	/* Volume label (8) */
 424:../fatfs/ff.c **** #define BS_FilSysType		54	/* File system type (1) */
 425:../fatfs/ff.c **** #define BPB_FATSz32			36	/* FAT size [sector] (4) */
 426:../fatfs/ff.c **** #define BPB_ExtFlags		40	/* Extended flags (2) */
 427:../fatfs/ff.c **** #define BPB_FSVer			42	/* File system version (2) */
 428:../fatfs/ff.c **** #define BPB_RootClus		44	/* Root dir first cluster (4) */
 429:../fatfs/ff.c **** #define BPB_FSInfo			48	/* Offset of FSInfo sector (2) */
 430:../fatfs/ff.c **** #define BPB_BkBootSec		50	/* Offset of backup boot sector (2) */
 431:../fatfs/ff.c **** #define BS_DrvNum32			64	/* Physical drive number (2) */
 432:../fatfs/ff.c **** #define BS_BootSig32		66	/* Extended boot signature (1) */
 433:../fatfs/ff.c **** #define BS_VolID32			67	/* Volume serial number (4) */
 434:../fatfs/ff.c **** #define BS_VolLab32			71	/* Volume label (8) */
 435:../fatfs/ff.c **** #define BS_FilSysType32		82	/* File system type (1) */
 436:../fatfs/ff.c **** #define	FSI_LeadSig			0	/* FSI: Leading signature (4) */
 437:../fatfs/ff.c **** #define	FSI_StrucSig		484	/* FSI: Structure signature (4) */
 438:../fatfs/ff.c **** #define	FSI_Free_Count		488	/* FSI: Number of free clusters (4) */
 439:../fatfs/ff.c **** #define	FSI_Nxt_Free		492	/* FSI: Last allocated cluster (4) */
 440:../fatfs/ff.c **** #define MBR_Table			446	/* MBR: Partition table offset (2) */
 441:../fatfs/ff.c **** #define	SZ_PTE				16	/* MBR: Size of a partition table entry */
 442:../fatfs/ff.c **** #define BS_55AA				510	/* Boot sector signature (2) */
 443:../fatfs/ff.c **** 
 444:../fatfs/ff.c **** #define	DIR_Name			0	/* Short file name (11) */
 445:../fatfs/ff.c **** #define	DIR_Attr			11	/* Attribute (1) */
 446:../fatfs/ff.c **** #define	DIR_NTres			12	/* NT flag (1) */
 447:../fatfs/ff.c **** #define DIR_CrtTimeTenth	13	/* Created time sub-second (1) */
 448:../fatfs/ff.c **** #define	DIR_CrtTime			14	/* Created time (2) */
 449:../fatfs/ff.c **** #define	DIR_CrtDate			16	/* Created date (2) */
 450:../fatfs/ff.c **** #define DIR_LstAccDate		18	/* Last accessed date (2) */
 451:../fatfs/ff.c **** #define	DIR_FstClusHI		20	/* Higher 16-bit of first cluster (2) */
 452:../fatfs/ff.c **** #define	DIR_WrtTime			22	/* Modified time (2) */
 453:../fatfs/ff.c **** #define	DIR_WrtDate			24	/* Modified date (2) */
 454:../fatfs/ff.c **** #define	DIR_FstClusLO		26	/* Lower 16-bit of first cluster (2) */
 455:../fatfs/ff.c **** #define	DIR_FileSize		28	/* File size (4) */
 456:../fatfs/ff.c **** #define	LDIR_Ord			0	/* LFN entry order and LLE flag (1) */
 457:../fatfs/ff.c **** #define	LDIR_Attr			11	/* LFN attribute (1) */
 458:../fatfs/ff.c **** #define	LDIR_Type			12	/* LFN type (1) */
 459:../fatfs/ff.c **** #define	LDIR_Chksum			13	/* Sum of corresponding SFN entry */
 460:../fatfs/ff.c **** #define	LDIR_FstClusLO		26	/* Filled by zero (0) */
 461:../fatfs/ff.c **** #define	SZ_DIR				32		/* Size of a directory entry */
 462:../fatfs/ff.c **** #define	LLE					0x40	/* Last long entry flag in LDIR_Ord */
 463:../fatfs/ff.c **** #define	DDE					0xE5	/* Deleted directory entry mark in DIR_Name[0] */
 464:../fatfs/ff.c **** #define	NDDE				0x05	/* Replacement of the character collides with DDE */
 465:../fatfs/ff.c **** 
 466:../fatfs/ff.c **** 
 467:../fatfs/ff.c **** /*------------------------------------------------------------*/
 468:../fatfs/ff.c **** /* Module private work area                                   */
 469:../fatfs/ff.c **** /*------------------------------------------------------------*/
 470:../fatfs/ff.c **** /* Note that uninitialized variables with static duration are
 471:../fatfs/ff.c **** /  zeroed/nulled at start-up. If not, the compiler or start-up
 472:../fatfs/ff.c **** /  routine is out of ANSI-C standard.
 473:../fatfs/ff.c **** */
 474:../fatfs/ff.c **** 
 475:../fatfs/ff.c **** #if _VOLUMES
 476:../fatfs/ff.c **** static
 477:../fatfs/ff.c **** FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
 478:../fatfs/ff.c **** #else
 479:../fatfs/ff.c **** #error Number of volumes must not be 0.
 480:../fatfs/ff.c **** #endif
 481:../fatfs/ff.c **** 
 482:../fatfs/ff.c **** static
 483:../fatfs/ff.c **** WORD Fsid;				/* File system mount ID */
 484:../fatfs/ff.c **** 
 485:../fatfs/ff.c **** #if _FS_RPATH
 486:../fatfs/ff.c **** static
 487:../fatfs/ff.c **** BYTE CurrVol;			/* Current drive */
 488:../fatfs/ff.c **** #endif
 489:../fatfs/ff.c **** 
 490:../fatfs/ff.c **** #if _FS_LOCK
 491:../fatfs/ff.c **** static
 492:../fatfs/ff.c **** FILESEM	Files[_FS_LOCK];	/* File lock semaphores */
 493:../fatfs/ff.c **** #endif
 494:../fatfs/ff.c **** 
 495:../fatfs/ff.c **** #if _USE_LFN == 0			/* No LFN feature */
 496:../fatfs/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]
 497:../fatfs/ff.c **** #define INIT_BUF(dobj)		(dobj).fn = sfn
 498:../fatfs/ff.c **** #define	FREE_BUF()
 499:../fatfs/ff.c **** 
 500:../fatfs/ff.c **** #elif _USE_LFN == 1			/* LFN feature with static working buffer */
 501:../fatfs/ff.c **** static WCHAR LfnBuf[_MAX_LFN+1];
 502:../fatfs/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]
 503:../fatfs/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = LfnBuf; }
 504:../fatfs/ff.c **** #define	FREE_BUF()
 505:../fatfs/ff.c **** 
 506:../fatfs/ff.c **** #elif _USE_LFN == 2 		/* LFN feature with dynamic working buffer on the stack */
 507:../fatfs/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR lbuf[_MAX_LFN+1]
 508:../fatfs/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = lbuf; }
 509:../fatfs/ff.c **** #define	FREE_BUF()
 510:../fatfs/ff.c **** 
 511:../fatfs/ff.c **** #elif _USE_LFN == 3 		/* LFN feature with dynamic working buffer on the heap */
 512:../fatfs/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR *lfn
 513:../fatfs/ff.c **** #define INIT_BUF(dobj)		{ lfn = ff_memalloc((_MAX_LFN + 1) * 2); \
 514:../fatfs/ff.c **** 							  if (!lfn) LEAVE_FF((dobj).fs, FR_NOT_ENOUGH_CORE); \
 515:../fatfs/ff.c **** 							  (dobj).lfn = lfn;	(dobj).fn = sfn; }
 516:../fatfs/ff.c **** #define	FREE_BUF()			ff_memfree(lfn)
 517:../fatfs/ff.c **** 
 518:../fatfs/ff.c **** #else
 519:../fatfs/ff.c **** #error Wrong LFN configuration.
 520:../fatfs/ff.c **** #endif
 521:../fatfs/ff.c **** 
 522:../fatfs/ff.c **** 
 523:../fatfs/ff.c **** #ifdef _EXCVT
 524:../fatfs/ff.c **** static
 525:../fatfs/ff.c **** const BYTE ExCvt[] = _EXCVT;	/* Upper conversion table for extended chars */
 526:../fatfs/ff.c **** #endif
 527:../fatfs/ff.c **** 
 528:../fatfs/ff.c **** 
 529:../fatfs/ff.c **** 
 530:../fatfs/ff.c **** 
 531:../fatfs/ff.c **** 
 532:../fatfs/ff.c **** 
 533:../fatfs/ff.c **** /*--------------------------------------------------------------------------
 534:../fatfs/ff.c **** 
 535:../fatfs/ff.c ****    Module Private Functions
 536:../fatfs/ff.c **** 
 537:../fatfs/ff.c **** ---------------------------------------------------------------------------*/
 538:../fatfs/ff.c **** void SD_mount(void)
 539:../fatfs/ff.c **** {
 196              		.loc 1 539 0
 197              		.cfi_startproc
 198              		@ args = 0, pretend = 0, frame = 0
 199              		@ frame_needed = 1, uses_anonymous_args = 0
 200 0000 80B5     		push	{r7, lr}
 201              		.cfi_def_cfa_offset 8
 202              		.cfi_offset 7, -8
 203              		.cfi_offset 14, -4
 204 0002 00AF     		add	r7, sp, #0
 205              		.cfi_def_cfa_register 7
 540:../fatfs/ff.c **** 	if (f_mount(0, &fatfs[0])!=FR_OK)
 206              		.loc 1 540 0
 207 0004 0020     		movs	r0, #0
 208 0006 0449     		ldr	r1, .L4
 209 0008 FFF7FEFF 		bl	f_mount
 210 000c 0346     		mov	r3, r0
 211 000e 002B     		cmp	r3, #0
 212 0010 00D0     		beq	.L1
 213              	.L3:
 541:../fatfs/ff.c **** 	{
 542:../fatfs/ff.c **** 			while(1);
 214              		.loc 1 542 0 discriminator 1
 215 0012 FEE7     		b	.L3
 216              	.L1:
 543:../fatfs/ff.c **** 	}
 544:../fatfs/ff.c **** 
 545:../fatfs/ff.c **** }
 217              		.loc 1 545 0
 218 0014 80BD     		pop	{r7, pc}
 219              	.L5:
 220 0016 00BF     		.align	2
 221              	.L4:
 222 0018 00000000 		.word	fatfs
 223              		.cfi_endproc
 224              	.LFE0:
 226              		.section	.text.mem_cpy,"ax",%progbits
 227              		.align	2
 228              		.thumb
 229              		.thumb_func
 231              	mem_cpy:
 232              	.LFB1:
 546:../fatfs/ff.c **** 
 547:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 548:../fatfs/ff.c **** /* String functions                                                      */
 549:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 550:../fatfs/ff.c **** 
 551:../fatfs/ff.c **** /* Copy memory to memory */
 552:../fatfs/ff.c **** static
 553:../fatfs/ff.c **** void mem_cpy (void* dst, const void* src, UINT cnt) {
 233              		.loc 1 553 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 24
 236              		@ frame_needed = 1, uses_anonymous_args = 0
 237              		@ link register save eliminated.
 238 0000 80B4     		push	{r7}
 239              		.cfi_def_cfa_offset 4
 240              		.cfi_offset 7, -4
 241 0002 87B0     		sub	sp, sp, #28
 242              		.cfi_def_cfa_offset 32
 243 0004 00AF     		add	r7, sp, #0
 244              		.cfi_def_cfa_register 7
 245 0006 F860     		str	r0, [r7, #12]
 246 0008 B960     		str	r1, [r7, #8]
 247 000a 7A60     		str	r2, [r7, #4]
 554:../fatfs/ff.c **** 	BYTE *d = (BYTE*)dst;
 248              		.loc 1 554 0
 249 000c FB68     		ldr	r3, [r7, #12]
 250 000e 7B61     		str	r3, [r7, #20]
 555:../fatfs/ff.c **** 	const BYTE *s = (const BYTE*)src;
 251              		.loc 1 555 0
 252 0010 BB68     		ldr	r3, [r7, #8]
 253 0012 3B61     		str	r3, [r7, #16]
 556:../fatfs/ff.c **** 
 557:../fatfs/ff.c **** #if _WORD_ACCESS == 1
 558:../fatfs/ff.c **** 	while (cnt >= sizeof (int)) {
 559:../fatfs/ff.c **** 		*(int*)d = *(int*)s;
 560:../fatfs/ff.c **** 		d += sizeof (int); s += sizeof (int);
 561:../fatfs/ff.c **** 		cnt -= sizeof (int);
 562:../fatfs/ff.c **** 	}
 563:../fatfs/ff.c **** #endif
 564:../fatfs/ff.c **** 	while (cnt--)
 254              		.loc 1 564 0
 255 0014 07E0     		b	.L7
 256              	.L8:
 565:../fatfs/ff.c **** 		*d++ = *s++;
 257              		.loc 1 565 0
 258 0016 7B69     		ldr	r3, [r7, #20]
 259 0018 5A1C     		adds	r2, r3, #1
 260 001a 7A61     		str	r2, [r7, #20]
 261 001c 3A69     		ldr	r2, [r7, #16]
 262 001e 511C     		adds	r1, r2, #1
 263 0020 3961     		str	r1, [r7, #16]
 264 0022 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 265 0024 1A70     		strb	r2, [r3]
 266              	.L7:
 564:../fatfs/ff.c **** 		*d++ = *s++;
 267              		.loc 1 564 0
 268 0026 7B68     		ldr	r3, [r7, #4]
 269 0028 5A1E     		subs	r2, r3, #1
 270 002a 7A60     		str	r2, [r7, #4]
 271 002c 002B     		cmp	r3, #0
 272 002e F2D1     		bne	.L8
 566:../fatfs/ff.c **** }
 273              		.loc 1 566 0
 274 0030 1C37     		adds	r7, r7, #28
 275              		.cfi_def_cfa_offset 4
 276 0032 BD46     		mov	sp, r7
 277              		.cfi_def_cfa_register 13
 278              		@ sp needed
 279 0034 5DF8047B 		ldr	r7, [sp], #4
 280              		.cfi_restore 7
 281              		.cfi_def_cfa_offset 0
 282 0038 7047     		bx	lr
 283              		.cfi_endproc
 284              	.LFE1:
 286 003a 00BF     		.section	.text.mem_set,"ax",%progbits
 287              		.align	2
 288              		.thumb
 289              		.thumb_func
 291              	mem_set:
 292              	.LFB2:
 567:../fatfs/ff.c **** 
 568:../fatfs/ff.c **** /* Fill memory */
 569:../fatfs/ff.c **** static
 570:../fatfs/ff.c **** void mem_set (void* dst, int val, UINT cnt) {
 293              		.loc 1 570 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 24
 296              		@ frame_needed = 1, uses_anonymous_args = 0
 297              		@ link register save eliminated.
 298 0000 80B4     		push	{r7}
 299              		.cfi_def_cfa_offset 4
 300              		.cfi_offset 7, -4
 301 0002 87B0     		sub	sp, sp, #28
 302              		.cfi_def_cfa_offset 32
 303 0004 00AF     		add	r7, sp, #0
 304              		.cfi_def_cfa_register 7
 305 0006 F860     		str	r0, [r7, #12]
 306 0008 B960     		str	r1, [r7, #8]
 307 000a 7A60     		str	r2, [r7, #4]
 571:../fatfs/ff.c **** 	BYTE *d = (BYTE*)dst;
 308              		.loc 1 571 0
 309 000c FB68     		ldr	r3, [r7, #12]
 310 000e 7B61     		str	r3, [r7, #20]
 572:../fatfs/ff.c **** 
 573:../fatfs/ff.c **** 	while (cnt--)
 311              		.loc 1 573 0
 312 0010 05E0     		b	.L10
 313              	.L11:
 574:../fatfs/ff.c **** 		*d++ = (BYTE)val;
 314              		.loc 1 574 0
 315 0012 7B69     		ldr	r3, [r7, #20]
 316 0014 5A1C     		adds	r2, r3, #1
 317 0016 7A61     		str	r2, [r7, #20]
 318 0018 BA68     		ldr	r2, [r7, #8]
 319 001a D2B2     		uxtb	r2, r2
 320 001c 1A70     		strb	r2, [r3]
 321              	.L10:
 573:../fatfs/ff.c **** 		*d++ = (BYTE)val;
 322              		.loc 1 573 0
 323 001e 7B68     		ldr	r3, [r7, #4]
 324 0020 5A1E     		subs	r2, r3, #1
 325 0022 7A60     		str	r2, [r7, #4]
 326 0024 002B     		cmp	r3, #0
 327 0026 F4D1     		bne	.L11
 575:../fatfs/ff.c **** }
 328              		.loc 1 575 0
 329 0028 1C37     		adds	r7, r7, #28
 330              		.cfi_def_cfa_offset 4
 331 002a BD46     		mov	sp, r7
 332              		.cfi_def_cfa_register 13
 333              		@ sp needed
 334 002c 5DF8047B 		ldr	r7, [sp], #4
 335              		.cfi_restore 7
 336              		.cfi_def_cfa_offset 0
 337 0030 7047     		bx	lr
 338              		.cfi_endproc
 339              	.LFE2:
 341 0032 00BF     		.section	.text.mem_cmp,"ax",%progbits
 342              		.align	2
 343              		.thumb
 344              		.thumb_func
 346              	mem_cmp:
 347              	.LFB3:
 576:../fatfs/ff.c **** 
 577:../fatfs/ff.c **** /* Compare memory to memory */
 578:../fatfs/ff.c **** static
 579:../fatfs/ff.c **** int mem_cmp (const void* dst, const void* src, UINT cnt) {
 348              		.loc 1 579 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 32
 351              		@ frame_needed = 1, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353 0000 80B4     		push	{r7}
 354              		.cfi_def_cfa_offset 4
 355              		.cfi_offset 7, -4
 356 0002 89B0     		sub	sp, sp, #36
 357              		.cfi_def_cfa_offset 40
 358 0004 00AF     		add	r7, sp, #0
 359              		.cfi_def_cfa_register 7
 360 0006 F860     		str	r0, [r7, #12]
 361 0008 B960     		str	r1, [r7, #8]
 362 000a 7A60     		str	r2, [r7, #4]
 580:../fatfs/ff.c **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 363              		.loc 1 580 0
 364 000c FB68     		ldr	r3, [r7, #12]
 365 000e FB61     		str	r3, [r7, #28]
 366 0010 BB68     		ldr	r3, [r7, #8]
 367 0012 BB61     		str	r3, [r7, #24]
 581:../fatfs/ff.c **** 	int r = 0;
 368              		.loc 1 581 0
 369 0014 0023     		movs	r3, #0
 370 0016 7B61     		str	r3, [r7, #20]
 582:../fatfs/ff.c **** 
 583:../fatfs/ff.c **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 371              		.loc 1 583 0
 372 0018 00BF     		nop
 373              	.L14:
 374              		.loc 1 583 0 is_stmt 0 discriminator 2
 375 001a 7B68     		ldr	r3, [r7, #4]
 376 001c 5A1E     		subs	r2, r3, #1
 377 001e 7A60     		str	r2, [r7, #4]
 378 0020 002B     		cmp	r3, #0
 379 0022 0DD0     		beq	.L13
 380              		.loc 1 583 0 discriminator 1
 381 0024 FB69     		ldr	r3, [r7, #28]
 382 0026 5A1C     		adds	r2, r3, #1
 383 0028 FA61     		str	r2, [r7, #28]
 384 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 385 002c 1946     		mov	r1, r3
 386 002e BB69     		ldr	r3, [r7, #24]
 387 0030 5A1C     		adds	r2, r3, #1
 388 0032 BA61     		str	r2, [r7, #24]
 389 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 390 0036 CB1A     		subs	r3, r1, r3
 391 0038 7B61     		str	r3, [r7, #20]
 392 003a 7B69     		ldr	r3, [r7, #20]
 393 003c 002B     		cmp	r3, #0
 394 003e ECD0     		beq	.L14
 395              	.L13:
 584:../fatfs/ff.c **** 	return r;
 396              		.loc 1 584 0 is_stmt 1
 397 0040 7B69     		ldr	r3, [r7, #20]
 585:../fatfs/ff.c **** }
 398              		.loc 1 585 0
 399 0042 1846     		mov	r0, r3
 400 0044 2437     		adds	r7, r7, #36
 401              		.cfi_def_cfa_offset 4
 402 0046 BD46     		mov	sp, r7
 403              		.cfi_def_cfa_register 13
 404              		@ sp needed
 405 0048 5DF8047B 		ldr	r7, [sp], #4
 406              		.cfi_restore 7
 407              		.cfi_def_cfa_offset 0
 408 004c 7047     		bx	lr
 409              		.cfi_endproc
 410              	.LFE3:
 412 004e 00BF     		.section	.text.chk_chr,"ax",%progbits
 413              		.align	2
 414              		.thumb
 415              		.thumb_func
 417              	chk_chr:
 418              	.LFB4:
 586:../fatfs/ff.c **** 
 587:../fatfs/ff.c **** /* Check if chr is contained in the string */
 588:../fatfs/ff.c **** static
 589:../fatfs/ff.c **** int chk_chr (const char* str, int chr) {
 419              		.loc 1 589 0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 8
 422              		@ frame_needed = 1, uses_anonymous_args = 0
 423              		@ link register save eliminated.
 424 0000 80B4     		push	{r7}
 425              		.cfi_def_cfa_offset 4
 426              		.cfi_offset 7, -4
 427 0002 83B0     		sub	sp, sp, #12
 428              		.cfi_def_cfa_offset 16
 429 0004 00AF     		add	r7, sp, #0
 430              		.cfi_def_cfa_register 7
 431 0006 7860     		str	r0, [r7, #4]
 432 0008 3960     		str	r1, [r7]
 590:../fatfs/ff.c **** 	while (*str && *str != chr) str++;
 433              		.loc 1 590 0
 434 000a 02E0     		b	.L17
 435              	.L19:
 436              		.loc 1 590 0 is_stmt 0 discriminator 3
 437 000c 7B68     		ldr	r3, [r7, #4]
 438 000e 0133     		adds	r3, r3, #1
 439 0010 7B60     		str	r3, [r7, #4]
 440              	.L17:
 441              		.loc 1 590 0 discriminator 1
 442 0012 7B68     		ldr	r3, [r7, #4]
 443 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 444 0016 002B     		cmp	r3, #0
 445 0018 05D0     		beq	.L18
 446              		.loc 1 590 0 discriminator 2
 447 001a 7B68     		ldr	r3, [r7, #4]
 448 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 449 001e 1A46     		mov	r2, r3
 450 0020 3B68     		ldr	r3, [r7]
 451 0022 9A42     		cmp	r2, r3
 452 0024 F2D1     		bne	.L19
 453              	.L18:
 591:../fatfs/ff.c **** 	return *str;
 454              		.loc 1 591 0 is_stmt 1
 455 0026 7B68     		ldr	r3, [r7, #4]
 456 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 592:../fatfs/ff.c **** }
 457              		.loc 1 592 0
 458 002a 1846     		mov	r0, r3
 459 002c 0C37     		adds	r7, r7, #12
 460              		.cfi_def_cfa_offset 4
 461 002e BD46     		mov	sp, r7
 462              		.cfi_def_cfa_register 13
 463              		@ sp needed
 464 0030 5DF8047B 		ldr	r7, [sp], #4
 465              		.cfi_restore 7
 466              		.cfi_def_cfa_offset 0
 467 0034 7047     		bx	lr
 468              		.cfi_endproc
 469              	.LFE4:
 471 0036 00BF     		.section	.text.sync_window,"ax",%progbits
 472              		.align	2
 473              		.thumb
 474              		.thumb_func
 476              	sync_window:
 477              	.LFB5:
 593:../fatfs/ff.c **** 
 594:../fatfs/ff.c **** 
 595:../fatfs/ff.c **** 
 596:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 597:../fatfs/ff.c **** /* Request/Release grant to access the volume                            */
 598:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 599:../fatfs/ff.c **** #if _FS_REENTRANT
 600:../fatfs/ff.c **** 
 601:../fatfs/ff.c **** static
 602:../fatfs/ff.c **** int lock_fs (
 603:../fatfs/ff.c **** 	FATFS *fatfs		/* File system object */
 604:../fatfs/ff.c **** )
 605:../fatfs/ff.c **** {
 606:../fatfs/ff.c **** 	return ff_req_grant(fatfs->sobj);
 607:../fatfs/ff.c **** }
 608:../fatfs/ff.c **** 
 609:../fatfs/ff.c **** 
 610:../fatfs/ff.c **** static
 611:../fatfs/ff.c **** void unlock_fs (
 612:../fatfs/ff.c **** 	FATFS *fatfs,		/* File system object */
 613:../fatfs/ff.c **** 	FRESULT res		/* Result code to be returned */
 614:../fatfs/ff.c **** )
 615:../fatfs/ff.c **** {
 616:../fatfs/ff.c **** 	if (fatfs &&
 617:../fatfs/ff.c **** 		res != FR_NOT_ENABLED &&
 618:../fatfs/ff.c **** 		res != FR_INVALID_DRIVE &&
 619:../fatfs/ff.c **** 		res != FR_INVALID_OBJECT &&
 620:../fatfs/ff.c **** 		res != FR_TIMEOUT) {
 621:../fatfs/ff.c **** 		ff_rel_grant(fatfs->sobj);
 622:../fatfs/ff.c **** 	}
 623:../fatfs/ff.c **** }
 624:../fatfs/ff.c **** #endif
 625:../fatfs/ff.c **** 
 626:../fatfs/ff.c **** 
 627:../fatfs/ff.c **** 
 628:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 629:../fatfs/ff.c **** /* File lock control functions                                           */
 630:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 631:../fatfs/ff.c **** #if _FS_LOCK
 632:../fatfs/ff.c **** 
 633:../fatfs/ff.c **** static
 634:../fatfs/ff.c **** FRESULT chk_lock (	/* Check if the file can be accessed */
 635:../fatfs/ff.c **** 	DIR* dj,		/* Directory object pointing the file to be checked */
 636:../fatfs/ff.c **** 	int acc			/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 637:../fatfs/ff.c **** )
 638:../fatfs/ff.c **** {
 639:../fatfs/ff.c **** 	UINT i, be;
 640:../fatfs/ff.c **** 
 641:../fatfs/ff.c **** 	/* Search file semaphore table */
 642:../fatfs/ff.c **** 	for (i = be = 0; i < _FS_LOCK; i++) {
 643:../fatfs/ff.c **** 		if (Files[i].fatfs) {	/* Existing entry */
 644:../fatfs/ff.c **** 			if (Files[i].fatfs == dj->fatfs &&	 	/* Check if the file matched with an open file */
 645:../fatfs/ff.c **** 				Files[i].clu == dj->sclust &&
 646:../fatfs/ff.c **** 				Files[i].idx == dj->index) break;
 647:../fatfs/ff.c **** 		} else {			/* Blank entry */
 648:../fatfs/ff.c **** 			be++;
 649:../fatfs/ff.c **** 		}
 650:../fatfs/ff.c **** 	}
 651:../fatfs/ff.c **** 	if (i == _FS_LOCK)	/* The file is not opened */
 652:../fatfs/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file?
 653:../fatfs/ff.c **** 
 654:../fatfs/ff.c **** 	/* The file has been opened. Reject any open against writing file and all write mode open */
 655:../fatfs/ff.c **** 	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 656:../fatfs/ff.c **** }
 657:../fatfs/ff.c **** 
 658:../fatfs/ff.c **** 
 659:../fatfs/ff.c **** static
 660:../fatfs/ff.c **** int enq_lock (void)	/* Check if an entry is available for a new file */
 661:../fatfs/ff.c **** {
 662:../fatfs/ff.c **** 	UINT i;
 663:../fatfs/ff.c **** 
 664:../fatfs/ff.c **** 	for (i = 0; i < _FS_LOCK && Files[i].fatfs; i++) ;
 665:../fatfs/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 666:../fatfs/ff.c **** }
 667:../fatfs/ff.c **** 
 668:../fatfs/ff.c **** 
 669:../fatfs/ff.c **** static
 670:../fatfs/ff.c **** UINT inc_lock (	/* Increment file open counter and returns its index (0:int error) */
 671:../fatfs/ff.c **** 	DIR* dj,	/* Directory object pointing the file to register or increment */
 672:../fatfs/ff.c **** 	int acc		/* Desired access mode (0:Read, !0:Write) */
 673:../fatfs/ff.c **** )
 674:../fatfs/ff.c **** {
 675:../fatfs/ff.c **** 	UINT i;
 676:../fatfs/ff.c **** 
 677:../fatfs/ff.c **** 
 678:../fatfs/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {	/* Find the file */
 679:../fatfs/ff.c **** 		if (Files[i].fatfs == dj->fatfs &&
 680:../fatfs/ff.c **** 			Files[i].clu == dj->sclust &&
 681:../fatfs/ff.c **** 			Files[i].idx == dj->index) break;
 682:../fatfs/ff.c **** 	}
 683:../fatfs/ff.c **** 
 684:../fatfs/ff.c **** 	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 685:../fatfs/ff.c **** 		for (i = 0; i < _FS_LOCK && Files[i].fatfs; i++) ;
 686:../fatfs/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No space to register (int err) */
 687:../fatfs/ff.c **** 		Files[i].fatfs = dj->fatfs;
 688:../fatfs/ff.c **** 		Files[i].clu = dj->sclust;
 689:../fatfs/ff.c **** 		Files[i].idx = dj->index;
 690:../fatfs/ff.c **** 		Files[i].ctr = 0;
 691:../fatfs/ff.c **** 	}
 692:../fatfs/ff.c **** 
 693:../fatfs/ff.c **** 	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 694:../fatfs/ff.c **** 
 695:../fatfs/ff.c **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 696:../fatfs/ff.c **** 
 697:../fatfs/ff.c **** 	return i + 1;
 698:../fatfs/ff.c **** }
 699:../fatfs/ff.c **** 
 700:../fatfs/ff.c **** 
 701:../fatfs/ff.c **** static
 702:../fatfs/ff.c **** FRESULT dec_lock (	/* Decrement file open counter */
 703:../fatfs/ff.c **** 	UINT i			/* Semaphore index */
 704:../fatfs/ff.c **** )
 705:../fatfs/ff.c **** {
 706:../fatfs/ff.c **** 	WORD n;
 707:../fatfs/ff.c **** 	FRESULT res;
 708:../fatfs/ff.c **** 
 709:../fatfs/ff.c **** 
 710:../fatfs/ff.c **** 	if (--i < _FS_LOCK) {
 711:../fatfs/ff.c **** 		n = Files[i].ctr;
 712:../fatfs/ff.c **** 		if (n == 0x100) n = 0;
 713:../fatfs/ff.c **** 		if (n) n--;
 714:../fatfs/ff.c **** 		Files[i].ctr = n;
 715:../fatfs/ff.c **** 		if (!n) Files[i].fatfs = 0;
 716:../fatfs/ff.c **** 		res = FR_OK;
 717:../fatfs/ff.c **** 	} else {
 718:../fatfs/ff.c **** 		res = FR_INT_ERR;
 719:../fatfs/ff.c **** 	}
 720:../fatfs/ff.c **** 	return res;
 721:../fatfs/ff.c **** }
 722:../fatfs/ff.c **** 
 723:../fatfs/ff.c **** 
 724:../fatfs/ff.c **** static
 725:../fatfs/ff.c **** void clear_lock (	/* Clear lock entries of the volume */
 726:../fatfs/ff.c **** 	FATFS *fatfs
 727:../fatfs/ff.c **** )
 728:../fatfs/ff.c **** {
 729:../fatfs/ff.c **** 	UINT i;
 730:../fatfs/ff.c **** 
 731:../fatfs/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {
 732:../fatfs/ff.c **** 		if (Files[i].fatfs == fatfs) Files[i].fatfs = 0;
 733:../fatfs/ff.c **** 	}
 734:../fatfs/ff.c **** }
 735:../fatfs/ff.c **** #endif
 736:../fatfs/ff.c **** 
 737:../fatfs/ff.c **** 
 738:../fatfs/ff.c **** 
 739:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 740:../fatfs/ff.c **** /* Move/Flush disk access window                                         */
 741:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 742:../fatfs/ff.c **** 
 743:../fatfs/ff.c **** 
 744:../fatfs/ff.c **** #if !_FS_READONLY
 745:../fatfs/ff.c **** static
 746:../fatfs/ff.c **** FRESULT sync_window (
 747:../fatfs/ff.c **** 	FATFS *fs		/* File system object */
 748:../fatfs/ff.c **** )
 749:../fatfs/ff.c **** {
 478              		.loc 1 749 0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 16
 481              		@ frame_needed = 1, uses_anonymous_args = 0
 482 0000 80B5     		push	{r7, lr}
 483              		.cfi_def_cfa_offset 8
 484              		.cfi_offset 7, -8
 485              		.cfi_offset 14, -4
 486 0002 84B0     		sub	sp, sp, #16
 487              		.cfi_def_cfa_offset 24
 488 0004 00AF     		add	r7, sp, #0
 489              		.cfi_def_cfa_register 7
 490 0006 7860     		str	r0, [r7, #4]
 750:../fatfs/ff.c **** 	DWORD wsect;
 751:../fatfs/ff.c **** 	UINT nf;
 752:../fatfs/ff.c **** 
 753:../fatfs/ff.c **** 	
 754:../fatfs/ff.c **** 	if (fs->wflag) {	/* Write back the sector if it is dirty */
 491              		.loc 1 754 0
 492 0008 7B68     		ldr	r3, [r7, #4]
 493 000a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 494 000c 002B     		cmp	r3, #0
 495 000e 3AD0     		beq	.L22
 755:../fatfs/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 496              		.loc 1 755 0
 497 0010 7B68     		ldr	r3, [r7, #4]
 498 0012 5B6B     		ldr	r3, [r3, #52]
 499 0014 FB60     		str	r3, [r7, #12]
 756:../fatfs/ff.c **** 		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 500              		.loc 1 756 0
 501 0016 7B68     		ldr	r3, [r7, #4]
 502 0018 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 503 001a 7B68     		ldr	r3, [r7, #4]
 504 001c 3833     		adds	r3, r3, #56
 505 001e 1046     		mov	r0, r2
 506 0020 1946     		mov	r1, r3
 507 0022 FA68     		ldr	r2, [r7, #12]
 508 0024 0123     		movs	r3, #1
 509 0026 FFF7FEFF 		bl	disk_write
 510 002a 0346     		mov	r3, r0
 511 002c 002B     		cmp	r3, #0
 512 002e 01D0     		beq	.L23
 757:../fatfs/ff.c **** 			return FR_DISK_ERR;
 513              		.loc 1 757 0
 514 0030 0123     		movs	r3, #1
 515 0032 29E0     		b	.L24
 516              	.L23:
 758:../fatfs/ff.c **** 		fs->wflag = 0;
 517              		.loc 1 758 0
 518 0034 7B68     		ldr	r3, [r7, #4]
 519 0036 0022     		movs	r2, #0
 520 0038 1A71     		strb	r2, [r3, #4]
 759:../fatfs/ff.c **** 		if (wsect >= fs->fatbase && wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area? */
 521              		.loc 1 759 0
 522 003a 7B68     		ldr	r3, [r7, #4]
 523 003c 9A6A     		ldr	r2, [r3, #40]
 524 003e FB68     		ldr	r3, [r7, #12]
 525 0040 9A42     		cmp	r2, r3
 526 0042 20D8     		bhi	.L22
 527              		.loc 1 759 0 is_stmt 0 discriminator 1
 528 0044 7B68     		ldr	r3, [r7, #4]
 529 0046 9A6A     		ldr	r2, [r3, #40]
 530 0048 7B68     		ldr	r3, [r7, #4]
 531 004a 1B6A     		ldr	r3, [r3, #32]
 532 004c 1A44     		add	r2, r2, r3
 533 004e FB68     		ldr	r3, [r7, #12]
 534 0050 9A42     		cmp	r2, r3
 535 0052 18D9     		bls	.L22
 760:../fatfs/ff.c **** 			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 536              		.loc 1 760 0 is_stmt 1
 537 0054 7B68     		ldr	r3, [r7, #4]
 538 0056 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 539 0058 BB60     		str	r3, [r7, #8]
 540 005a 11E0     		b	.L25
 541              	.L26:
 761:../fatfs/ff.c **** 				wsect += fs->fsize;
 542              		.loc 1 761 0 discriminator 3
 543 005c 7B68     		ldr	r3, [r7, #4]
 544 005e 1B6A     		ldr	r3, [r3, #32]
 545 0060 FA68     		ldr	r2, [r7, #12]
 546 0062 1344     		add	r3, r3, r2
 547 0064 FB60     		str	r3, [r7, #12]
 762:../fatfs/ff.c **** 				disk_write(fs->drv, fs->win, wsect, 1);
 548              		.loc 1 762 0 discriminator 3
 549 0066 7B68     		ldr	r3, [r7, #4]
 550 0068 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 551 006a 7B68     		ldr	r3, [r7, #4]
 552 006c 3833     		adds	r3, r3, #56
 553 006e 1046     		mov	r0, r2
 554 0070 1946     		mov	r1, r3
 555 0072 FA68     		ldr	r2, [r7, #12]
 556 0074 0123     		movs	r3, #1
 557 0076 FFF7FEFF 		bl	disk_write
 760:../fatfs/ff.c **** 			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 558              		.loc 1 760 0 discriminator 3
 559 007a BB68     		ldr	r3, [r7, #8]
 560 007c 013B     		subs	r3, r3, #1
 561 007e BB60     		str	r3, [r7, #8]
 562              	.L25:
 760:../fatfs/ff.c **** 			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 563              		.loc 1 760 0 is_stmt 0 discriminator 1
 564 0080 BB68     		ldr	r3, [r7, #8]
 565 0082 012B     		cmp	r3, #1
 566 0084 EAD8     		bhi	.L26
 567              	.L22:
 763:../fatfs/ff.c **** 			}
 764:../fatfs/ff.c **** 		}
 765:../fatfs/ff.c **** 	}
 766:../fatfs/ff.c **** 	return FR_OK;
 568              		.loc 1 766 0 is_stmt 1
 569 0086 0023     		movs	r3, #0
 570              	.L24:
 767:../fatfs/ff.c **** }
 571              		.loc 1 767 0
 572 0088 1846     		mov	r0, r3
 573 008a 1037     		adds	r7, r7, #16
 574              		.cfi_def_cfa_offset 8
 575 008c BD46     		mov	sp, r7
 576              		.cfi_def_cfa_register 13
 577              		@ sp needed
 578 008e 80BD     		pop	{r7, pc}
 579              		.cfi_endproc
 580              	.LFE5:
 582              		.section	.text.move_window,"ax",%progbits
 583              		.align	2
 584              		.thumb
 585              		.thumb_func
 587              	move_window:
 588              	.LFB6:
 768:../fatfs/ff.c **** #endif
 769:../fatfs/ff.c **** 
 770:../fatfs/ff.c **** 
 771:../fatfs/ff.c **** static
 772:../fatfs/ff.c **** FRESULT move_window (
 773:../fatfs/ff.c **** 	FATFS *fs,		/* File system object */
 774:../fatfs/ff.c **** 	DWORD sector	/* Sector number to make appearance in the fs->win[] */
 775:../fatfs/ff.c **** )
 776:../fatfs/ff.c **** {
 589              		.loc 1 776 0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 8
 592              		@ frame_needed = 1, uses_anonymous_args = 0
 593 0000 80B5     		push	{r7, lr}
 594              		.cfi_def_cfa_offset 8
 595              		.cfi_offset 7, -8
 596              		.cfi_offset 14, -4
 597 0002 82B0     		sub	sp, sp, #8
 598              		.cfi_def_cfa_offset 16
 599 0004 00AF     		add	r7, sp, #0
 600              		.cfi_def_cfa_register 7
 601 0006 7860     		str	r0, [r7, #4]
 602 0008 3960     		str	r1, [r7]
 777:../fatfs/ff.c **** 	if (sector != fs->winsect) {	/* Changed current window */
 603              		.loc 1 777 0
 604 000a 7B68     		ldr	r3, [r7, #4]
 605 000c 5A6B     		ldr	r2, [r3, #52]
 606 000e 3B68     		ldr	r3, [r7]
 607 0010 9A42     		cmp	r2, r3
 608 0012 19D0     		beq	.L28
 778:../fatfs/ff.c **** #if !_FS_READONLY
 779:../fatfs/ff.c **** 		if (sync_window(fs) != FR_OK)
 609              		.loc 1 779 0
 610 0014 7868     		ldr	r0, [r7, #4]
 611 0016 FFF7FEFF 		bl	sync_window
 612 001a 0346     		mov	r3, r0
 613 001c 002B     		cmp	r3, #0
 614 001e 01D0     		beq	.L29
 780:../fatfs/ff.c **** 			return FR_DISK_ERR;
 615              		.loc 1 780 0
 616 0020 0123     		movs	r3, #1
 617 0022 12E0     		b	.L30
 618              	.L29:
 781:../fatfs/ff.c **** #endif
 782:../fatfs/ff.c **** 		if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 619              		.loc 1 782 0
 620 0024 7B68     		ldr	r3, [r7, #4]
 621 0026 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 622 0028 7B68     		ldr	r3, [r7, #4]
 623 002a 3833     		adds	r3, r3, #56
 624 002c 1046     		mov	r0, r2
 625 002e 1946     		mov	r1, r3
 626 0030 3A68     		ldr	r2, [r7]
 627 0032 0123     		movs	r3, #1
 628 0034 FFF7FEFF 		bl	disk_read
 629 0038 0346     		mov	r3, r0
 630 003a 002B     		cmp	r3, #0
 631 003c 01D0     		beq	.L31
 783:../fatfs/ff.c **** 			return FR_DISK_ERR;
 632              		.loc 1 783 0
 633 003e 0123     		movs	r3, #1
 634 0040 03E0     		b	.L30
 635              	.L31:
 784:../fatfs/ff.c **** 		fs->winsect = sector;
 636              		.loc 1 784 0
 637 0042 7B68     		ldr	r3, [r7, #4]
 638 0044 3A68     		ldr	r2, [r7]
 639 0046 5A63     		str	r2, [r3, #52]
 640              	.L28:
 785:../fatfs/ff.c **** 	}
 786:../fatfs/ff.c **** 
 787:../fatfs/ff.c **** 	return FR_OK;
 641              		.loc 1 787 0
 642 0048 0023     		movs	r3, #0
 643              	.L30:
 788:../fatfs/ff.c **** }
 644              		.loc 1 788 0
 645 004a 1846     		mov	r0, r3
 646 004c 0837     		adds	r7, r7, #8
 647              		.cfi_def_cfa_offset 8
 648 004e BD46     		mov	sp, r7
 649              		.cfi_def_cfa_register 13
 650              		@ sp needed
 651 0050 80BD     		pop	{r7, pc}
 652              		.cfi_endproc
 653              	.LFE6:
 655 0052 00BF     		.section	.text.sync_fs,"ax",%progbits
 656              		.align	2
 657              		.thumb
 658              		.thumb_func
 660              	sync_fs:
 661              	.LFB7:
 789:../fatfs/ff.c **** 
 790:../fatfs/ff.c **** 
 791:../fatfs/ff.c **** 
 792:../fatfs/ff.c **** 
 793:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 794:../fatfs/ff.c **** /* Synchronize file system and strage device                             */
 795:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 796:../fatfs/ff.c **** #if !_FS_READONLY
 797:../fatfs/ff.c **** static
 798:../fatfs/ff.c **** FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
 799:../fatfs/ff.c **** 	FATFS *fs		/* File system object */
 800:../fatfs/ff.c **** )
 801:../fatfs/ff.c **** {
 662              		.loc 1 801 0
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 16
 665              		@ frame_needed = 1, uses_anonymous_args = 0
 666 0000 80B5     		push	{r7, lr}
 667              		.cfi_def_cfa_offset 8
 668              		.cfi_offset 7, -8
 669              		.cfi_offset 14, -4
 670 0002 84B0     		sub	sp, sp, #16
 671              		.cfi_def_cfa_offset 24
 672 0004 00AF     		add	r7, sp, #0
 673              		.cfi_def_cfa_register 7
 674 0006 7860     		str	r0, [r7, #4]
 802:../fatfs/ff.c **** 	FRESULT res;
 803:../fatfs/ff.c **** 
 804:../fatfs/ff.c **** 
 805:../fatfs/ff.c **** 	res = sync_window(fs);
 675              		.loc 1 805 0
 676 0008 7868     		ldr	r0, [r7, #4]
 677 000a FFF7FEFF 		bl	sync_window
 678 000e 0346     		mov	r3, r0
 679 0010 FB73     		strb	r3, [r7, #15]
 806:../fatfs/ff.c **** 	if (res == FR_OK) {
 680              		.loc 1 806 0
 681 0012 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 682 0014 002B     		cmp	r3, #0
 683 0016 40F09280 		bne	.L33
 807:../fatfs/ff.c **** 		/* Update FSInfo sector if needed */
 808:../fatfs/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 684              		.loc 1 808 0
 685 001a 7B68     		ldr	r3, [r7, #4]
 686 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 687 001e 032B     		cmp	r3, #3
 688 0020 40F08180 		bne	.L34
 689              		.loc 1 808 0 is_stmt 0 discriminator 1
 690 0024 7B68     		ldr	r3, [r7, #4]
 691 0026 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 692 0028 002B     		cmp	r3, #0
 693 002a 7CD0     		beq	.L34
 809:../fatfs/ff.c **** 			fs->winsect = 0;
 694              		.loc 1 809 0 is_stmt 1
 695 002c 7B68     		ldr	r3, [r7, #4]
 696 002e 0022     		movs	r2, #0
 697 0030 5A63     		str	r2, [r3, #52]
 810:../fatfs/ff.c **** 			/* Create FSInfo structure */
 811:../fatfs/ff.c **** 			mem_set(fs->win, 0, 512);
 698              		.loc 1 811 0
 699 0032 7B68     		ldr	r3, [r7, #4]
 700 0034 3833     		adds	r3, r3, #56
 701 0036 1846     		mov	r0, r3
 702 0038 0021     		movs	r1, #0
 703 003a 4FF40072 		mov	r2, #512
 704 003e FFF7FEFF 		bl	mem_set
 812:../fatfs/ff.c **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 705              		.loc 1 812 0
 706 0042 7B68     		ldr	r3, [r7, #4]
 707 0044 5522     		movs	r2, #85
 708 0046 83F83622 		strb	r2, [r3, #566]
 709 004a 7B68     		ldr	r3, [r7, #4]
 710 004c AA22     		movs	r2, #170
 711 004e 83F83722 		strb	r2, [r3, #567]
 813:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 712              		.loc 1 813 0
 713 0052 7B68     		ldr	r3, [r7, #4]
 714 0054 5222     		movs	r2, #82
 715 0056 83F83820 		strb	r2, [r3, #56]
 716 005a 7B68     		ldr	r3, [r7, #4]
 717 005c 5222     		movs	r2, #82
 718 005e 83F83920 		strb	r2, [r3, #57]
 719 0062 7B68     		ldr	r3, [r7, #4]
 720 0064 6122     		movs	r2, #97
 721 0066 83F83A20 		strb	r2, [r3, #58]
 722 006a 7B68     		ldr	r3, [r7, #4]
 723 006c 4122     		movs	r2, #65
 724 006e 83F83B20 		strb	r2, [r3, #59]
 814:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 725              		.loc 1 814 0
 726 0072 7B68     		ldr	r3, [r7, #4]
 727 0074 7222     		movs	r2, #114
 728 0076 83F81C22 		strb	r2, [r3, #540]
 729 007a 7B68     		ldr	r3, [r7, #4]
 730 007c 7222     		movs	r2, #114
 731 007e 83F81D22 		strb	r2, [r3, #541]
 732 0082 7B68     		ldr	r3, [r7, #4]
 733 0084 4122     		movs	r2, #65
 734 0086 83F81E22 		strb	r2, [r3, #542]
 735 008a 7B68     		ldr	r3, [r7, #4]
 736 008c 6122     		movs	r2, #97
 737 008e 83F81F22 		strb	r2, [r3, #543]
 815:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 738              		.loc 1 815 0
 739 0092 7B68     		ldr	r3, [r7, #4]
 740 0094 1B69     		ldr	r3, [r3, #16]
 741 0096 DAB2     		uxtb	r2, r3
 742 0098 7B68     		ldr	r3, [r7, #4]
 743 009a 83F82022 		strb	r2, [r3, #544]
 744 009e 7B68     		ldr	r3, [r7, #4]
 745 00a0 1B69     		ldr	r3, [r3, #16]
 746 00a2 9BB2     		uxth	r3, r3
 747 00a4 1B0A     		lsrs	r3, r3, #8
 748 00a6 9BB2     		uxth	r3, r3
 749 00a8 DAB2     		uxtb	r2, r3
 750 00aa 7B68     		ldr	r3, [r7, #4]
 751 00ac 83F82122 		strb	r2, [r3, #545]
 752 00b0 7B68     		ldr	r3, [r7, #4]
 753 00b2 1B69     		ldr	r3, [r3, #16]
 754 00b4 1B0C     		lsrs	r3, r3, #16
 755 00b6 DAB2     		uxtb	r2, r3
 756 00b8 7B68     		ldr	r3, [r7, #4]
 757 00ba 83F82222 		strb	r2, [r3, #546]
 758 00be 7B68     		ldr	r3, [r7, #4]
 759 00c0 1B69     		ldr	r3, [r3, #16]
 760 00c2 1B0E     		lsrs	r3, r3, #24
 761 00c4 DAB2     		uxtb	r2, r3
 762 00c6 7B68     		ldr	r3, [r7, #4]
 763 00c8 83F82322 		strb	r2, [r3, #547]
 816:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 764              		.loc 1 816 0
 765 00cc 7B68     		ldr	r3, [r7, #4]
 766 00ce DB68     		ldr	r3, [r3, #12]
 767 00d0 DAB2     		uxtb	r2, r3
 768 00d2 7B68     		ldr	r3, [r7, #4]
 769 00d4 83F82422 		strb	r2, [r3, #548]
 770 00d8 7B68     		ldr	r3, [r7, #4]
 771 00da DB68     		ldr	r3, [r3, #12]
 772 00dc 9BB2     		uxth	r3, r3
 773 00de 1B0A     		lsrs	r3, r3, #8
 774 00e0 9BB2     		uxth	r3, r3
 775 00e2 DAB2     		uxtb	r2, r3
 776 00e4 7B68     		ldr	r3, [r7, #4]
 777 00e6 83F82522 		strb	r2, [r3, #549]
 778 00ea 7B68     		ldr	r3, [r7, #4]
 779 00ec DB68     		ldr	r3, [r3, #12]
 780 00ee 1B0C     		lsrs	r3, r3, #16
 781 00f0 DAB2     		uxtb	r2, r3
 782 00f2 7B68     		ldr	r3, [r7, #4]
 783 00f4 83F82622 		strb	r2, [r3, #550]
 784 00f8 7B68     		ldr	r3, [r7, #4]
 785 00fa DB68     		ldr	r3, [r3, #12]
 786 00fc 1B0E     		lsrs	r3, r3, #24
 787 00fe DAB2     		uxtb	r2, r3
 788 0100 7B68     		ldr	r3, [r7, #4]
 789 0102 83F82722 		strb	r2, [r3, #551]
 817:../fatfs/ff.c **** 			/* Write it into the FSInfo sector */
 818:../fatfs/ff.c **** 			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 790              		.loc 1 818 0
 791 0106 7B68     		ldr	r3, [r7, #4]
 792 0108 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 793 010a 7B68     		ldr	r3, [r7, #4]
 794 010c 03F13802 		add	r2, r3, #56
 795 0110 7B68     		ldr	r3, [r7, #4]
 796 0112 5B69     		ldr	r3, [r3, #20]
 797 0114 0846     		mov	r0, r1
 798 0116 1146     		mov	r1, r2
 799 0118 1A46     		mov	r2, r3
 800 011a 0123     		movs	r3, #1
 801 011c FFF7FEFF 		bl	disk_write
 819:../fatfs/ff.c **** 			fs->fsi_flag = 0;
 802              		.loc 1 819 0
 803 0120 7B68     		ldr	r3, [r7, #4]
 804 0122 0022     		movs	r2, #0
 805 0124 5A71     		strb	r2, [r3, #5]
 806              	.L34:
 820:../fatfs/ff.c **** 		}
 821:../fatfs/ff.c **** 		/* Make sure that no pending write process in the physical drive */
 822:../fatfs/ff.c **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 807              		.loc 1 822 0
 808 0126 7B68     		ldr	r3, [r7, #4]
 809 0128 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 810 012a 1846     		mov	r0, r3
 811 012c 0021     		movs	r1, #0
 812 012e 0022     		movs	r2, #0
 813 0130 FFF7FEFF 		bl	disk_ioctl
 814 0134 0346     		mov	r3, r0
 815 0136 002B     		cmp	r3, #0
 816 0138 01D0     		beq	.L33
 823:../fatfs/ff.c **** 			res = FR_DISK_ERR;
 817              		.loc 1 823 0
 818 013a 0123     		movs	r3, #1
 819 013c FB73     		strb	r3, [r7, #15]
 820              	.L33:
 824:../fatfs/ff.c **** 	}
 825:../fatfs/ff.c **** 
 826:../fatfs/ff.c **** 	return res;
 821              		.loc 1 826 0
 822 013e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 827:../fatfs/ff.c **** }
 823              		.loc 1 827 0
 824 0140 1846     		mov	r0, r3
 825 0142 1037     		adds	r7, r7, #16
 826              		.cfi_def_cfa_offset 8
 827 0144 BD46     		mov	sp, r7
 828              		.cfi_def_cfa_register 13
 829              		@ sp needed
 830 0146 80BD     		pop	{r7, pc}
 831              		.cfi_endproc
 832              	.LFE7:
 834              		.section	.text.clust2sect,"ax",%progbits
 835              		.align	2
 836              		.global	clust2sect
 837              		.thumb
 838              		.thumb_func
 840              	clust2sect:
 841              	.LFB8:
 828:../fatfs/ff.c **** #endif
 829:../fatfs/ff.c **** 
 830:../fatfs/ff.c **** 
 831:../fatfs/ff.c **** 
 832:../fatfs/ff.c **** 
 833:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 834:../fatfs/ff.c **** /* Get sector# from cluster#                                             */
 835:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 836:../fatfs/ff.c **** 
 837:../fatfs/ff.c **** 
 838:../fatfs/ff.c **** DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
 839:../fatfs/ff.c **** 	FATFS *fs,		/* File system object */
 840:../fatfs/ff.c **** 	DWORD clst		/* Cluster# to be converted */
 841:../fatfs/ff.c **** )
 842:../fatfs/ff.c **** {
 842              		.loc 1 842 0
 843              		.cfi_startproc
 844              		@ args = 0, pretend = 0, frame = 8
 845              		@ frame_needed = 1, uses_anonymous_args = 0
 846              		@ link register save eliminated.
 847 0000 80B4     		push	{r7}
 848              		.cfi_def_cfa_offset 4
 849              		.cfi_offset 7, -4
 850 0002 83B0     		sub	sp, sp, #12
 851              		.cfi_def_cfa_offset 16
 852 0004 00AF     		add	r7, sp, #0
 853              		.cfi_def_cfa_register 7
 854 0006 7860     		str	r0, [r7, #4]
 855 0008 3960     		str	r1, [r7]
 843:../fatfs/ff.c **** 	clst -= 2;
 856              		.loc 1 843 0
 857 000a 3B68     		ldr	r3, [r7]
 858 000c 023B     		subs	r3, r3, #2
 859 000e 3B60     		str	r3, [r7]
 844:../fatfs/ff.c **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 860              		.loc 1 844 0
 861 0010 7B68     		ldr	r3, [r7, #4]
 862 0012 DB69     		ldr	r3, [r3, #28]
 863 0014 9A1E     		subs	r2, r3, #2
 864 0016 3B68     		ldr	r3, [r7]
 865 0018 9A42     		cmp	r2, r3
 866 001a 01D8     		bhi	.L37
 867              		.loc 1 844 0 is_stmt 0 discriminator 1
 868 001c 0023     		movs	r3, #0
 869 001e 08E0     		b	.L38
 870              	.L37:
 845:../fatfs/ff.c **** 	return clst * fs->csize + fs->database;
 871              		.loc 1 845 0 is_stmt 1
 872 0020 7B68     		ldr	r3, [r7, #4]
 873 0022 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 874 0024 1A46     		mov	r2, r3
 875 0026 3B68     		ldr	r3, [r7]
 876 0028 03FB02F2 		mul	r2, r3, r2
 877 002c 7B68     		ldr	r3, [r7, #4]
 878 002e 1B6B     		ldr	r3, [r3, #48]
 879 0030 1344     		add	r3, r3, r2
 880              	.L38:
 846:../fatfs/ff.c **** }
 881              		.loc 1 846 0
 882 0032 1846     		mov	r0, r3
 883 0034 0C37     		adds	r7, r7, #12
 884              		.cfi_def_cfa_offset 4
 885 0036 BD46     		mov	sp, r7
 886              		.cfi_def_cfa_register 13
 887              		@ sp needed
 888 0038 5DF8047B 		ldr	r7, [sp], #4
 889              		.cfi_restore 7
 890              		.cfi_def_cfa_offset 0
 891 003c 7047     		bx	lr
 892              		.cfi_endproc
 893              	.LFE8:
 895 003e 00BF     		.section	.text.get_fat,"ax",%progbits
 896              		.align	2
 897              		.global	get_fat
 898              		.thumb
 899              		.thumb_func
 901              	get_fat:
 902              	.LFB9:
 847:../fatfs/ff.c **** 
 848:../fatfs/ff.c **** 
 849:../fatfs/ff.c **** 
 850:../fatfs/ff.c **** 
 851:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 852:../fatfs/ff.c **** /* FAT access - Read value of a FAT entry                                */
 853:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 854:../fatfs/ff.c **** 
 855:../fatfs/ff.c **** 
 856:../fatfs/ff.c **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
 857:../fatfs/ff.c **** 	FATFS *fs,	/* File system object */
 858:../fatfs/ff.c **** 	DWORD clst	/* Cluster# to get the link information */
 859:../fatfs/ff.c **** )
 860:../fatfs/ff.c **** {
 903              		.loc 1 860 0
 904              		.cfi_startproc
 905              		@ args = 0, pretend = 0, frame = 24
 906              		@ frame_needed = 1, uses_anonymous_args = 0
 907 0000 80B5     		push	{r7, lr}
 908              		.cfi_def_cfa_offset 8
 909              		.cfi_offset 7, -8
 910              		.cfi_offset 14, -4
 911 0002 86B0     		sub	sp, sp, #24
 912              		.cfi_def_cfa_offset 32
 913 0004 00AF     		add	r7, sp, #0
 914              		.cfi_def_cfa_register 7
 915 0006 7860     		str	r0, [r7, #4]
 916 0008 3960     		str	r1, [r7]
 861:../fatfs/ff.c **** 	UINT wc, bc;
 862:../fatfs/ff.c **** 	BYTE *p;
 863:../fatfs/ff.c **** 
 864:../fatfs/ff.c **** 
 865:../fatfs/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 917              		.loc 1 865 0
 918 000a 3B68     		ldr	r3, [r7]
 919 000c 012B     		cmp	r3, #1
 920 000e 04D9     		bls	.L40
 921              		.loc 1 865 0 is_stmt 0 discriminator 1
 922 0010 7B68     		ldr	r3, [r7, #4]
 923 0012 DA69     		ldr	r2, [r3, #28]
 924 0014 3B68     		ldr	r3, [r7]
 925 0016 9A42     		cmp	r2, r3
 926 0018 01D8     		bhi	.L41
 927              	.L40:
 866:../fatfs/ff.c **** 		return 1;
 928              		.loc 1 866 0 is_stmt 1
 929 001a 0123     		movs	r3, #1
 930 001c 98E0     		b	.L42
 931              	.L41:
 867:../fatfs/ff.c **** 
 868:../fatfs/ff.c **** 	switch (fs->fs_type) {
 932              		.loc 1 868 0
 933 001e 7B68     		ldr	r3, [r7, #4]
 934 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 935 0022 022B     		cmp	r3, #2
 936 0024 48D0     		beq	.L44
 937 0026 032B     		cmp	r3, #3
 938 0028 67D0     		beq	.L45
 939 002a 012B     		cmp	r3, #1
 940 002c 40F08E80 		bne	.L43
 869:../fatfs/ff.c **** 	case FS_FAT12 :
 870:../fatfs/ff.c **** 		bc = (UINT)clst; bc += bc / 2;
 941              		.loc 1 870 0
 942 0030 3B68     		ldr	r3, [r7]
 943 0032 7B61     		str	r3, [r7, #20]
 944 0034 7B69     		ldr	r3, [r7, #20]
 945 0036 5B08     		lsrs	r3, r3, #1
 946 0038 7A69     		ldr	r2, [r7, #20]
 947 003a 1344     		add	r3, r3, r2
 948 003c 7B61     		str	r3, [r7, #20]
 871:../fatfs/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fatfs)))) break;
 949              		.loc 1 871 0
 950 003e 7B68     		ldr	r3, [r7, #4]
 951 0040 9A6A     		ldr	r2, [r3, #40]
 952 0042 7B69     		ldr	r3, [r7, #20]
 953 0044 5B0A     		lsrs	r3, r3, #9
 954 0046 1344     		add	r3, r3, r2
 955 0048 7868     		ldr	r0, [r7, #4]
 956 004a 1946     		mov	r1, r3
 957 004c FFF7FEFF 		bl	move_window
 958 0050 0346     		mov	r3, r0
 959 0052 002B     		cmp	r3, #0
 960 0054 00D0     		beq	.L47
 961 0056 79E0     		b	.L43
 962              	.L47:
 872:../fatfs/ff.c **** 		wc = fs->win[bc % SS(fatfs)]; bc++;
 963              		.loc 1 872 0
 964 0058 7B69     		ldr	r3, [r7, #20]
 965 005a C3F30803 		ubfx	r3, r3, #0, #9
 966 005e 7A68     		ldr	r2, [r7, #4]
 967 0060 1344     		add	r3, r3, r2
 968 0062 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 969 0066 3B61     		str	r3, [r7, #16]
 970 0068 7B69     		ldr	r3, [r7, #20]
 971 006a 0133     		adds	r3, r3, #1
 972 006c 7B61     		str	r3, [r7, #20]
 873:../fatfs/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fatfs)))) break;
 973              		.loc 1 873 0
 974 006e 7B68     		ldr	r3, [r7, #4]
 975 0070 9A6A     		ldr	r2, [r3, #40]
 976 0072 7B69     		ldr	r3, [r7, #20]
 977 0074 5B0A     		lsrs	r3, r3, #9
 978 0076 1344     		add	r3, r3, r2
 979 0078 7868     		ldr	r0, [r7, #4]
 980 007a 1946     		mov	r1, r3
 981 007c FFF7FEFF 		bl	move_window
 982 0080 0346     		mov	r3, r0
 983 0082 002B     		cmp	r3, #0
 984 0084 00D0     		beq	.L48
 985 0086 61E0     		b	.L43
 986              	.L48:
 874:../fatfs/ff.c **** 		wc |= fs->win[bc % SS(fatfs)] << 8;
 987              		.loc 1 874 0
 988 0088 7B69     		ldr	r3, [r7, #20]
 989 008a C3F30803 		ubfx	r3, r3, #0, #9
 990 008e 7A68     		ldr	r2, [r7, #4]
 991 0090 1344     		add	r3, r3, r2
 992 0092 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 993 0096 1B02     		lsls	r3, r3, #8
 994 0098 1A46     		mov	r2, r3
 995 009a 3B69     		ldr	r3, [r7, #16]
 996 009c 1343     		orrs	r3, r3, r2
 997 009e 3B61     		str	r3, [r7, #16]
 875:../fatfs/ff.c **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 998              		.loc 1 875 0
 999 00a0 3B68     		ldr	r3, [r7]
 1000 00a2 03F00103 		and	r3, r3, #1
 1001 00a6 002B     		cmp	r3, #0
 1002 00a8 02D0     		beq	.L49
 1003              		.loc 1 875 0 is_stmt 0 discriminator 1
 1004 00aa 3B69     		ldr	r3, [r7, #16]
 1005 00ac 1B09     		lsrs	r3, r3, #4
 1006 00ae 4FE0     		b	.L42
 1007              	.L49:
 1008              		.loc 1 875 0 discriminator 2
 1009 00b0 3B69     		ldr	r3, [r7, #16]
 1010 00b2 C3F30B03 		ubfx	r3, r3, #0, #12
 1011 00b6 4BE0     		b	.L42
 1012              	.L44:
 876:../fatfs/ff.c **** 
 877:../fatfs/ff.c **** 	case FS_FAT16 :
 878:../fatfs/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fatfs) / 2)))) break;
 1013              		.loc 1 878 0 is_stmt 1
 1014 00b8 7B68     		ldr	r3, [r7, #4]
 1015 00ba 9A6A     		ldr	r2, [r3, #40]
 1016 00bc 3B68     		ldr	r3, [r7]
 1017 00be 1B0A     		lsrs	r3, r3, #8
 1018 00c0 1344     		add	r3, r3, r2
 1019 00c2 7868     		ldr	r0, [r7, #4]
 1020 00c4 1946     		mov	r1, r3
 1021 00c6 FFF7FEFF 		bl	move_window
 1022 00ca 0346     		mov	r3, r0
 1023 00cc 002B     		cmp	r3, #0
 1024 00ce 00D0     		beq	.L51
 1025 00d0 3CE0     		b	.L43
 1026              	.L51:
 879:../fatfs/ff.c **** 		p = &fs->win[clst * 2 % SS(fatfs)];
 1027              		.loc 1 879 0
 1028 00d2 3B68     		ldr	r3, [r7]
 1029 00d4 5B00     		lsls	r3, r3, #1
 1030 00d6 03F4FF73 		and	r3, r3, #510
 1031 00da 3833     		adds	r3, r3, #56
 1032 00dc 7A68     		ldr	r2, [r7, #4]
 1033 00de 1344     		add	r3, r3, r2
 1034 00e0 FB60     		str	r3, [r7, #12]
 880:../fatfs/ff.c **** 		return LD_WORD(p);
 1035              		.loc 1 880 0
 1036 00e2 FB68     		ldr	r3, [r7, #12]
 1037 00e4 0133     		adds	r3, r3, #1
 1038 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1039 00e8 1B02     		lsls	r3, r3, #8
 1040 00ea 9AB2     		uxth	r2, r3
 1041 00ec FB68     		ldr	r3, [r7, #12]
 1042 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1043 00f0 9BB2     		uxth	r3, r3
 1044 00f2 1343     		orrs	r3, r3, r2
 1045 00f4 9BB2     		uxth	r3, r3
 1046 00f6 9BB2     		uxth	r3, r3
 1047 00f8 2AE0     		b	.L42
 1048              	.L45:
 881:../fatfs/ff.c **** 
 882:../fatfs/ff.c **** 	case FS_FAT32 :
 883:../fatfs/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fatfs) / 4)))) break;
 1049              		.loc 1 883 0
 1050 00fa 7B68     		ldr	r3, [r7, #4]
 1051 00fc 9A6A     		ldr	r2, [r3, #40]
 1052 00fe 3B68     		ldr	r3, [r7]
 1053 0100 DB09     		lsrs	r3, r3, #7
 1054 0102 1344     		add	r3, r3, r2
 1055 0104 7868     		ldr	r0, [r7, #4]
 1056 0106 1946     		mov	r1, r3
 1057 0108 FFF7FEFF 		bl	move_window
 1058 010c 0346     		mov	r3, r0
 1059 010e 002B     		cmp	r3, #0
 1060 0110 00D0     		beq	.L52
 1061 0112 1BE0     		b	.L43
 1062              	.L52:
 884:../fatfs/ff.c **** 		p = &fs->win[clst * 4 % SS(fatfs)];
 1063              		.loc 1 884 0
 1064 0114 3B68     		ldr	r3, [r7]
 1065 0116 9B00     		lsls	r3, r3, #2
 1066 0118 03F4FE73 		and	r3, r3, #508
 1067 011c 3833     		adds	r3, r3, #56
 1068 011e 7A68     		ldr	r2, [r7, #4]
 1069 0120 1344     		add	r3, r3, r2
 1070 0122 FB60     		str	r3, [r7, #12]
 885:../fatfs/ff.c **** 		return LD_DWORD(p) & 0x0FFFFFFF;
 1071              		.loc 1 885 0
 1072 0124 FB68     		ldr	r3, [r7, #12]
 1073 0126 0333     		adds	r3, r3, #3
 1074 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1075 012a 1A06     		lsls	r2, r3, #24
 1076 012c FB68     		ldr	r3, [r7, #12]
 1077 012e 0233     		adds	r3, r3, #2
 1078 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1079 0132 1B04     		lsls	r3, r3, #16
 1080 0134 1343     		orrs	r3, r3, r2
 1081 0136 FA68     		ldr	r2, [r7, #12]
 1082 0138 0132     		adds	r2, r2, #1
 1083 013a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1084 013c 1202     		lsls	r2, r2, #8
 1085 013e 1343     		orrs	r3, r3, r2
 1086 0140 FA68     		ldr	r2, [r7, #12]
 1087 0142 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1088 0144 1343     		orrs	r3, r3, r2
 1089 0146 23F07043 		bic	r3, r3, #-268435456
 1090 014a 01E0     		b	.L42
 1091              	.L43:
 886:../fatfs/ff.c **** 	}
 887:../fatfs/ff.c **** 
 888:../fatfs/ff.c **** 	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 1092              		.loc 1 888 0
 1093 014c 4FF0FF33 		mov	r3, #-1
 1094              	.L42:
 889:../fatfs/ff.c **** }
 1095              		.loc 1 889 0
 1096 0150 1846     		mov	r0, r3
 1097 0152 1837     		adds	r7, r7, #24
 1098              		.cfi_def_cfa_offset 8
 1099 0154 BD46     		mov	sp, r7
 1100              		.cfi_def_cfa_register 13
 1101              		@ sp needed
 1102 0156 80BD     		pop	{r7, pc}
 1103              		.cfi_endproc
 1104              	.LFE9:
 1106              		.section	.text.put_fat,"ax",%progbits
 1107              		.align	2
 1108              		.global	put_fat
 1109              		.thumb
 1110              		.thumb_func
 1112              	put_fat:
 1113              	.LFB10:
 890:../fatfs/ff.c **** 
 891:../fatfs/ff.c **** 
 892:../fatfs/ff.c **** 
 893:../fatfs/ff.c **** 
 894:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 895:../fatfs/ff.c **** /* FAT access - Change value of a FAT entry                              */
 896:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 897:../fatfs/ff.c **** #if !_FS_READONLY
 898:../fatfs/ff.c **** 
 899:../fatfs/ff.c **** FRESULT put_fat (
 900:../fatfs/ff.c **** 	FATFS *fs,	/* File system object */
 901:../fatfs/ff.c **** 	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
 902:../fatfs/ff.c **** 	DWORD val	/* New value to mark the cluster */
 903:../fatfs/ff.c **** )
 904:../fatfs/ff.c **** {
 1114              		.loc 1 904 0
 1115              		.cfi_startproc
 1116              		@ args = 0, pretend = 0, frame = 32
 1117              		@ frame_needed = 1, uses_anonymous_args = 0
 1118 0000 80B5     		push	{r7, lr}
 1119              		.cfi_def_cfa_offset 8
 1120              		.cfi_offset 7, -8
 1121              		.cfi_offset 14, -4
 1122 0002 88B0     		sub	sp, sp, #32
 1123              		.cfi_def_cfa_offset 40
 1124 0004 00AF     		add	r7, sp, #0
 1125              		.cfi_def_cfa_register 7
 1126 0006 F860     		str	r0, [r7, #12]
 1127 0008 B960     		str	r1, [r7, #8]
 1128 000a 7A60     		str	r2, [r7, #4]
 905:../fatfs/ff.c **** 	UINT bc;
 906:../fatfs/ff.c **** 	BYTE *p;
 907:../fatfs/ff.c **** 	FRESULT res;
 908:../fatfs/ff.c **** 
 909:../fatfs/ff.c **** 
 910:../fatfs/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 1129              		.loc 1 910 0
 1130 000c BB68     		ldr	r3, [r7, #8]
 1131 000e 012B     		cmp	r3, #1
 1132 0010 04D9     		bls	.L54
 1133              		.loc 1 910 0 is_stmt 0 discriminator 1
 1134 0012 FB68     		ldr	r3, [r7, #12]
 1135 0014 DA69     		ldr	r2, [r3, #28]
 1136 0016 BB68     		ldr	r3, [r7, #8]
 1137 0018 9A42     		cmp	r2, r3
 1138 001a 02D8     		bhi	.L55
 1139              	.L54:
 911:../fatfs/ff.c **** 		res = FR_INT_ERR;
 1140              		.loc 1 911 0 is_stmt 1
 1141 001c 0223     		movs	r3, #2
 1142 001e FB77     		strb	r3, [r7, #31]
 1143 0020 E3E0     		b	.L56
 1144              	.L55:
 912:../fatfs/ff.c **** 
 913:../fatfs/ff.c **** 	} else {
 914:../fatfs/ff.c **** 		switch (fs->fs_type) {
 1145              		.loc 1 914 0
 1146 0022 FB68     		ldr	r3, [r7, #12]
 1147 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1148 0026 022B     		cmp	r3, #2
 1149 0028 70D0     		beq	.L58
 1150 002a 032B     		cmp	r3, #3
 1151 002c 00F09280 		beq	.L59
 1152 0030 012B     		cmp	r3, #1
 1153 0032 40F0D580 		bne	.L71
 915:../fatfs/ff.c **** 		case FS_FAT12 :
 916:../fatfs/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
 1154              		.loc 1 916 0
 1155 0036 BB68     		ldr	r3, [r7, #8]
 1156 0038 BB61     		str	r3, [r7, #24]
 1157 003a BB69     		ldr	r3, [r7, #24]
 1158 003c 5B08     		lsrs	r3, r3, #1
 1159 003e BA69     		ldr	r2, [r7, #24]
 1160 0040 1344     		add	r3, r3, r2
 1161 0042 BB61     		str	r3, [r7, #24]
 917:../fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fatfs)));
 1162              		.loc 1 917 0
 1163 0044 FB68     		ldr	r3, [r7, #12]
 1164 0046 9A6A     		ldr	r2, [r3, #40]
 1165 0048 BB69     		ldr	r3, [r7, #24]
 1166 004a 5B0A     		lsrs	r3, r3, #9
 1167 004c 1344     		add	r3, r3, r2
 1168 004e F868     		ldr	r0, [r7, #12]
 1169 0050 1946     		mov	r1, r3
 1170 0052 FFF7FEFF 		bl	move_window
 1171 0056 0346     		mov	r3, r0
 1172 0058 FB77     		strb	r3, [r7, #31]
 918:../fatfs/ff.c **** 			if (res != FR_OK) break;
 1173              		.loc 1 918 0
 1174 005a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1175 005c 002B     		cmp	r3, #0
 1176 005e 00D0     		beq	.L61
 1177 0060 C0E0     		b	.L62
 1178              	.L61:
 919:../fatfs/ff.c **** 			p = &fs->win[bc % SS(fatfs)];
 1179              		.loc 1 919 0
 1180 0062 BB69     		ldr	r3, [r7, #24]
 1181 0064 C3F30803 		ubfx	r3, r3, #0, #9
 1182 0068 3833     		adds	r3, r3, #56
 1183 006a FA68     		ldr	r2, [r7, #12]
 1184 006c 1344     		add	r3, r3, r2
 1185 006e 7B61     		str	r3, [r7, #20]
 920:../fatfs/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 1186              		.loc 1 920 0
 1187 0070 BB68     		ldr	r3, [r7, #8]
 1188 0072 03F00103 		and	r3, r3, #1
 1189 0076 002B     		cmp	r3, #0
 1190 0078 0DD0     		beq	.L63
 1191              		.loc 1 920 0 is_stmt 0 discriminator 1
 1192 007a 7B69     		ldr	r3, [r7, #20]
 1193 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1194 007e DBB2     		uxtb	r3, r3
 1195 0080 03F00F03 		and	r3, r3, #15
 1196 0084 DAB2     		uxtb	r2, r3
 1197 0086 7B68     		ldr	r3, [r7, #4]
 1198 0088 DBB2     		uxtb	r3, r3
 1199 008a 1B01     		lsls	r3, r3, #4
 1200 008c DBB2     		uxtb	r3, r3
 1201 008e 1343     		orrs	r3, r3, r2
 1202 0090 DBB2     		uxtb	r3, r3
 1203 0092 DBB2     		uxtb	r3, r3
 1204 0094 01E0     		b	.L64
 1205              	.L63:
 1206              		.loc 1 920 0 discriminator 2
 1207 0096 7B68     		ldr	r3, [r7, #4]
 1208 0098 DBB2     		uxtb	r3, r3
 1209              	.L64:
 1210              		.loc 1 920 0 discriminator 4
 1211 009a 7A69     		ldr	r2, [r7, #20]
 1212 009c 1370     		strb	r3, [r2]
 921:../fatfs/ff.c **** 			bc++;
 1213              		.loc 1 921 0 is_stmt 1 discriminator 4
 1214 009e BB69     		ldr	r3, [r7, #24]
 1215 00a0 0133     		adds	r3, r3, #1
 1216 00a2 BB61     		str	r3, [r7, #24]
 922:../fatfs/ff.c **** 			fs->wflag = 1;
 1217              		.loc 1 922 0 discriminator 4
 1218 00a4 FB68     		ldr	r3, [r7, #12]
 1219 00a6 0122     		movs	r2, #1
 1220 00a8 1A71     		strb	r2, [r3, #4]
 923:../fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fatfs)));
 1221              		.loc 1 923 0 discriminator 4
 1222 00aa FB68     		ldr	r3, [r7, #12]
 1223 00ac 9A6A     		ldr	r2, [r3, #40]
 1224 00ae BB69     		ldr	r3, [r7, #24]
 1225 00b0 5B0A     		lsrs	r3, r3, #9
 1226 00b2 1344     		add	r3, r3, r2
 1227 00b4 F868     		ldr	r0, [r7, #12]
 1228 00b6 1946     		mov	r1, r3
 1229 00b8 FFF7FEFF 		bl	move_window
 1230 00bc 0346     		mov	r3, r0
 1231 00be FB77     		strb	r3, [r7, #31]
 924:../fatfs/ff.c **** 			if (res != FR_OK) break;
 1232              		.loc 1 924 0 discriminator 4
 1233 00c0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1234 00c2 002B     		cmp	r3, #0
 1235 00c4 00D0     		beq	.L65
 1236              		.loc 1 924 0 is_stmt 0
 1237 00c6 8DE0     		b	.L62
 1238              	.L65:
 925:../fatfs/ff.c **** 			p = &fs->win[bc % SS(fatfs)];
 1239              		.loc 1 925 0 is_stmt 1
 1240 00c8 BB69     		ldr	r3, [r7, #24]
 1241 00ca C3F30803 		ubfx	r3, r3, #0, #9
 1242 00ce 3833     		adds	r3, r3, #56
 1243 00d0 FA68     		ldr	r2, [r7, #12]
 1244 00d2 1344     		add	r3, r3, r2
 1245 00d4 7B61     		str	r3, [r7, #20]
 926:../fatfs/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 1246              		.loc 1 926 0
 1247 00d6 BB68     		ldr	r3, [r7, #8]
 1248 00d8 03F00103 		and	r3, r3, #1
 1249 00dc 002B     		cmp	r3, #0
 1250 00de 03D0     		beq	.L66
 1251              		.loc 1 926 0 is_stmt 0 discriminator 1
 1252 00e0 7B68     		ldr	r3, [r7, #4]
 1253 00e2 1B09     		lsrs	r3, r3, #4
 1254 00e4 DBB2     		uxtb	r3, r3
 1255 00e6 0EE0     		b	.L67
 1256              	.L66:
 1257              		.loc 1 926 0 discriminator 2
 1258 00e8 7B69     		ldr	r3, [r7, #20]
 1259 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1260 00ec DBB2     		uxtb	r3, r3
 1261 00ee 23F00F03 		bic	r3, r3, #15
 1262 00f2 DAB2     		uxtb	r2, r3
 1263 00f4 7B68     		ldr	r3, [r7, #4]
 1264 00f6 1B0A     		lsrs	r3, r3, #8
 1265 00f8 DBB2     		uxtb	r3, r3
 1266 00fa 03F00F03 		and	r3, r3, #15
 1267 00fe DBB2     		uxtb	r3, r3
 1268 0100 1343     		orrs	r3, r3, r2
 1269 0102 DBB2     		uxtb	r3, r3
 1270 0104 DBB2     		uxtb	r3, r3
 1271              	.L67:
 1272              		.loc 1 926 0 discriminator 4
 1273 0106 7A69     		ldr	r2, [r7, #20]
 1274 0108 1370     		strb	r3, [r2]
 927:../fatfs/ff.c **** 			break;
 1275              		.loc 1 927 0 is_stmt 1 discriminator 4
 1276 010a 6BE0     		b	.L62
 1277              	.L58:
 928:../fatfs/ff.c **** 
 929:../fatfs/ff.c **** 		case FS_FAT16 :
 930:../fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fatfs) / 2)));
 1278              		.loc 1 930 0
 1279 010c FB68     		ldr	r3, [r7, #12]
 1280 010e 9A6A     		ldr	r2, [r3, #40]
 1281 0110 BB68     		ldr	r3, [r7, #8]
 1282 0112 1B0A     		lsrs	r3, r3, #8
 1283 0114 1344     		add	r3, r3, r2
 1284 0116 F868     		ldr	r0, [r7, #12]
 1285 0118 1946     		mov	r1, r3
 1286 011a FFF7FEFF 		bl	move_window
 1287 011e 0346     		mov	r3, r0
 1288 0120 FB77     		strb	r3, [r7, #31]
 931:../fatfs/ff.c **** 			if (res != FR_OK) break;
 1289              		.loc 1 931 0
 1290 0122 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1291 0124 002B     		cmp	r3, #0
 1292 0126 00D0     		beq	.L68
 1293 0128 5CE0     		b	.L62
 1294              	.L68:
 932:../fatfs/ff.c **** 			p = &fs->win[clst * 2 % SS(fatfs)];
 1295              		.loc 1 932 0
 1296 012a BB68     		ldr	r3, [r7, #8]
 1297 012c 5B00     		lsls	r3, r3, #1
 1298 012e 03F4FF73 		and	r3, r3, #510
 1299 0132 3833     		adds	r3, r3, #56
 1300 0134 FA68     		ldr	r2, [r7, #12]
 1301 0136 1344     		add	r3, r3, r2
 1302 0138 7B61     		str	r3, [r7, #20]
 933:../fatfs/ff.c **** 			ST_WORD(p, (WORD)val);
 1303              		.loc 1 933 0
 1304 013a 7B68     		ldr	r3, [r7, #4]
 1305 013c DAB2     		uxtb	r2, r3
 1306 013e 7B69     		ldr	r3, [r7, #20]
 1307 0140 1A70     		strb	r2, [r3]
 1308 0142 7B69     		ldr	r3, [r7, #20]
 1309 0144 0133     		adds	r3, r3, #1
 1310 0146 7A68     		ldr	r2, [r7, #4]
 1311 0148 92B2     		uxth	r2, r2
 1312 014a 120A     		lsrs	r2, r2, #8
 1313 014c 92B2     		uxth	r2, r2
 1314 014e D2B2     		uxtb	r2, r2
 1315 0150 1A70     		strb	r2, [r3]
 934:../fatfs/ff.c **** 			break;
 1316              		.loc 1 934 0
 1317 0152 47E0     		b	.L62
 1318              	.L59:
 935:../fatfs/ff.c **** 
 936:../fatfs/ff.c **** 		case FS_FAT32 :
 937:../fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fatfs) / 4)));
 1319              		.loc 1 937 0
 1320 0154 FB68     		ldr	r3, [r7, #12]
 1321 0156 9A6A     		ldr	r2, [r3, #40]
 1322 0158 BB68     		ldr	r3, [r7, #8]
 1323 015a DB09     		lsrs	r3, r3, #7
 1324 015c 1344     		add	r3, r3, r2
 1325 015e F868     		ldr	r0, [r7, #12]
 1326 0160 1946     		mov	r1, r3
 1327 0162 FFF7FEFF 		bl	move_window
 1328 0166 0346     		mov	r3, r0
 1329 0168 FB77     		strb	r3, [r7, #31]
 938:../fatfs/ff.c **** 			if (res != FR_OK) break;
 1330              		.loc 1 938 0
 1331 016a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1332 016c 002B     		cmp	r3, #0
 1333 016e 00D0     		beq	.L69
 1334 0170 38E0     		b	.L62
 1335              	.L69:
 939:../fatfs/ff.c **** 			p = &fs->win[clst * 4 % SS(fatfs)];
 1336              		.loc 1 939 0
 1337 0172 BB68     		ldr	r3, [r7, #8]
 1338 0174 9B00     		lsls	r3, r3, #2
 1339 0176 03F4FE73 		and	r3, r3, #508
 1340 017a 3833     		adds	r3, r3, #56
 1341 017c FA68     		ldr	r2, [r7, #12]
 1342 017e 1344     		add	r3, r3, r2
 1343 0180 7B61     		str	r3, [r7, #20]
 940:../fatfs/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 1344              		.loc 1 940 0
 1345 0182 7B69     		ldr	r3, [r7, #20]
 1346 0184 0333     		adds	r3, r3, #3
 1347 0186 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1348 0188 1A06     		lsls	r2, r3, #24
 1349 018a 7B69     		ldr	r3, [r7, #20]
 1350 018c 0233     		adds	r3, r3, #2
 1351 018e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1352 0190 1B04     		lsls	r3, r3, #16
 1353 0192 1343     		orrs	r3, r3, r2
 1354 0194 7A69     		ldr	r2, [r7, #20]
 1355 0196 0132     		adds	r2, r2, #1
 1356 0198 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1357 019a 1202     		lsls	r2, r2, #8
 1358 019c 1343     		orrs	r3, r3, r2
 1359 019e 7A69     		ldr	r2, [r7, #20]
 1360 01a0 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1361 01a2 1343     		orrs	r3, r3, r2
 1362 01a4 03F07043 		and	r3, r3, #-268435456
 1363 01a8 7A68     		ldr	r2, [r7, #4]
 1364 01aa 1343     		orrs	r3, r3, r2
 1365 01ac 7B60     		str	r3, [r7, #4]
 941:../fatfs/ff.c **** 			ST_DWORD(p, val);
 1366              		.loc 1 941 0
 1367 01ae 7B68     		ldr	r3, [r7, #4]
 1368 01b0 DAB2     		uxtb	r2, r3
 1369 01b2 7B69     		ldr	r3, [r7, #20]
 1370 01b4 1A70     		strb	r2, [r3]
 1371 01b6 7B69     		ldr	r3, [r7, #20]
 1372 01b8 0133     		adds	r3, r3, #1
 1373 01ba 7A68     		ldr	r2, [r7, #4]
 1374 01bc 92B2     		uxth	r2, r2
 1375 01be 120A     		lsrs	r2, r2, #8
 1376 01c0 92B2     		uxth	r2, r2
 1377 01c2 D2B2     		uxtb	r2, r2
 1378 01c4 1A70     		strb	r2, [r3]
 1379 01c6 7B69     		ldr	r3, [r7, #20]
 1380 01c8 0233     		adds	r3, r3, #2
 1381 01ca 7A68     		ldr	r2, [r7, #4]
 1382 01cc 120C     		lsrs	r2, r2, #16
 1383 01ce D2B2     		uxtb	r2, r2
 1384 01d0 1A70     		strb	r2, [r3]
 1385 01d2 7B69     		ldr	r3, [r7, #20]
 1386 01d4 0333     		adds	r3, r3, #3
 1387 01d6 7A68     		ldr	r2, [r7, #4]
 1388 01d8 120E     		lsrs	r2, r2, #24
 1389 01da D2B2     		uxtb	r2, r2
 1390 01dc 1A70     		strb	r2, [r3]
 942:../fatfs/ff.c **** 			break;
 1391              		.loc 1 942 0
 1392 01de 01E0     		b	.L62
 1393              	.L71:
 943:../fatfs/ff.c **** 
 944:../fatfs/ff.c **** 		default :
 945:../fatfs/ff.c **** 			res = FR_INT_ERR;
 1394              		.loc 1 945 0
 1395 01e0 0223     		movs	r3, #2
 1396 01e2 FB77     		strb	r3, [r7, #31]
 1397              	.L62:
 946:../fatfs/ff.c **** 		}
 947:../fatfs/ff.c **** 		fs->wflag = 1;
 1398              		.loc 1 947 0
 1399 01e4 FB68     		ldr	r3, [r7, #12]
 1400 01e6 0122     		movs	r2, #1
 1401 01e8 1A71     		strb	r2, [r3, #4]
 1402              	.L56:
 948:../fatfs/ff.c **** 	}
 949:../fatfs/ff.c **** 
 950:../fatfs/ff.c **** 	return res;
 1403              		.loc 1 950 0
 1404 01ea FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 951:../fatfs/ff.c **** }
 1405              		.loc 1 951 0
 1406 01ec 1846     		mov	r0, r3
 1407 01ee 2037     		adds	r7, r7, #32
 1408              		.cfi_def_cfa_offset 8
 1409 01f0 BD46     		mov	sp, r7
 1410              		.cfi_def_cfa_register 13
 1411              		@ sp needed
 1412 01f2 80BD     		pop	{r7, pc}
 1413              		.cfi_endproc
 1414              	.LFE10:
 1416              		.section	.text.remove_chain,"ax",%progbits
 1417              		.align	2
 1418              		.thumb
 1419              		.thumb_func
 1421              	remove_chain:
 1422              	.LFB11:
 952:../fatfs/ff.c **** #endif /* !_FS_READONLY */
 953:../fatfs/ff.c **** 
 954:../fatfs/ff.c **** 
 955:../fatfs/ff.c **** 
 956:../fatfs/ff.c **** 
 957:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 958:../fatfs/ff.c **** /* FAT handling - Remove a cluster chain                                 */
 959:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 960:../fatfs/ff.c **** #if !_FS_READONLY
 961:../fatfs/ff.c **** static
 962:../fatfs/ff.c **** FRESULT remove_chain (
 963:../fatfs/ff.c **** 	FATFS *fs,			/* File system object */
 964:../fatfs/ff.c **** 	DWORD clst			/* Cluster# to remove a chain from */
 965:../fatfs/ff.c **** )
 966:../fatfs/ff.c **** {
 1423              		.loc 1 966 0
 1424              		.cfi_startproc
 1425              		@ args = 0, pretend = 0, frame = 16
 1426              		@ frame_needed = 1, uses_anonymous_args = 0
 1427 0000 80B5     		push	{r7, lr}
 1428              		.cfi_def_cfa_offset 8
 1429              		.cfi_offset 7, -8
 1430              		.cfi_offset 14, -4
 1431 0002 84B0     		sub	sp, sp, #16
 1432              		.cfi_def_cfa_offset 24
 1433 0004 00AF     		add	r7, sp, #0
 1434              		.cfi_def_cfa_register 7
 1435 0006 7860     		str	r0, [r7, #4]
 1436 0008 3960     		str	r1, [r7]
 967:../fatfs/ff.c **** 	FRESULT res;
 968:../fatfs/ff.c **** 	DWORD nxt;
 969:../fatfs/ff.c **** #if _USE_ERASE
 970:../fatfs/ff.c **** 	DWORD scl = clst, ecl = clst, rt[2];
 971:../fatfs/ff.c **** #endif
 972:../fatfs/ff.c **** 
 973:../fatfs/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 1437              		.loc 1 973 0
 1438 000a 3B68     		ldr	r3, [r7]
 1439 000c 012B     		cmp	r3, #1
 1440 000e 04D9     		bls	.L73
 1441              		.loc 1 973 0 is_stmt 0 discriminator 1
 1442 0010 7B68     		ldr	r3, [r7, #4]
 1443 0012 DA69     		ldr	r2, [r3, #28]
 1444 0014 3B68     		ldr	r3, [r7]
 1445 0016 9A42     		cmp	r2, r3
 1446 0018 02D8     		bhi	.L74
 1447              	.L73:
 974:../fatfs/ff.c **** 		res = FR_INT_ERR;
 1448              		.loc 1 974 0 is_stmt 1
 1449 001a 0223     		movs	r3, #2
 1450 001c FB73     		strb	r3, [r7, #15]
 1451 001e 37E0     		b	.L75
 1452              	.L74:
 975:../fatfs/ff.c **** 
 976:../fatfs/ff.c **** 	} else {
 977:../fatfs/ff.c **** 		res = FR_OK;
 1453              		.loc 1 977 0
 1454 0020 0023     		movs	r3, #0
 1455 0022 FB73     		strb	r3, [r7, #15]
 978:../fatfs/ff.c **** 		while (clst < fs->n_fatent) {			/* Not a last link? */
 1456              		.loc 1 978 0
 1457 0024 2FE0     		b	.L76
 1458              	.L82:
 979:../fatfs/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 1459              		.loc 1 979 0
 1460 0026 7868     		ldr	r0, [r7, #4]
 1461 0028 3968     		ldr	r1, [r7]
 1462 002a FFF7FEFF 		bl	get_fat
 1463 002e B860     		str	r0, [r7, #8]
 980:../fatfs/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
 1464              		.loc 1 980 0
 1465 0030 BB68     		ldr	r3, [r7, #8]
 1466 0032 002B     		cmp	r3, #0
 1467 0034 00D1     		bne	.L77
 1468 0036 2BE0     		b	.L75
 1469              	.L77:
 981:../fatfs/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 1470              		.loc 1 981 0
 1471 0038 BB68     		ldr	r3, [r7, #8]
 1472 003a 012B     		cmp	r3, #1
 1473 003c 02D1     		bne	.L78
 1474              		.loc 1 981 0 is_stmt 0 discriminator 1
 1475 003e 0223     		movs	r3, #2
 1476 0040 FB73     		strb	r3, [r7, #15]
 1477 0042 25E0     		b	.L75
 1478              	.L78:
 982:../fatfs/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 1479              		.loc 1 982 0 is_stmt 1
 1480 0044 BB68     		ldr	r3, [r7, #8]
 1481 0046 B3F1FF3F 		cmp	r3, #-1
 1482 004a 02D1     		bne	.L79
 1483              		.loc 1 982 0 is_stmt 0 discriminator 1
 1484 004c 0123     		movs	r3, #1
 1485 004e FB73     		strb	r3, [r7, #15]
 1486 0050 1EE0     		b	.L75
 1487              	.L79:
 983:../fatfs/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 1488              		.loc 1 983 0 is_stmt 1
 1489 0052 7868     		ldr	r0, [r7, #4]
 1490 0054 3968     		ldr	r1, [r7]
 1491 0056 0022     		movs	r2, #0
 1492 0058 FFF7FEFF 		bl	put_fat
 1493 005c 0346     		mov	r3, r0
 1494 005e FB73     		strb	r3, [r7, #15]
 984:../fatfs/ff.c **** 			if (res != FR_OK) break;
 1495              		.loc 1 984 0
 1496 0060 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1497 0062 002B     		cmp	r3, #0
 1498 0064 00D0     		beq	.L80
 1499 0066 13E0     		b	.L75
 1500              	.L80:
 985:../fatfs/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 1501              		.loc 1 985 0
 1502 0068 7B68     		ldr	r3, [r7, #4]
 1503 006a 1B69     		ldr	r3, [r3, #16]
 1504 006c B3F1FF3F 		cmp	r3, #-1
 1505 0070 07D0     		beq	.L81
 986:../fatfs/ff.c **** 				fs->free_clust++;
 1506              		.loc 1 986 0
 1507 0072 7B68     		ldr	r3, [r7, #4]
 1508 0074 1B69     		ldr	r3, [r3, #16]
 1509 0076 5A1C     		adds	r2, r3, #1
 1510 0078 7B68     		ldr	r3, [r7, #4]
 1511 007a 1A61     		str	r2, [r3, #16]
 987:../fatfs/ff.c **** 				fs->fsi_flag = 1;
 1512              		.loc 1 987 0
 1513 007c 7B68     		ldr	r3, [r7, #4]
 1514 007e 0122     		movs	r2, #1
 1515 0080 5A71     		strb	r2, [r3, #5]
 1516              	.L81:
 988:../fatfs/ff.c **** 			}
 989:../fatfs/ff.c **** #if _USE_ERASE
 990:../fatfs/ff.c **** 			if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 991:../fatfs/ff.c **** 				ecl = nxt;
 992:../fatfs/ff.c **** 			} else {				/* End of contiguous clusters */ 
 993:../fatfs/ff.c **** 				rt[0] = clust2sect(fatfs, scl);					/* Start sector */
 994:../fatfs/ff.c **** 				rt[1] = clust2sect(fatfs, ecl) + fatfs->csize - 1;	/* End sector */
 995:../fatfs/ff.c **** 				disk_ioctl(fatfs->drv, CTRL_ERASE_SECTOR, rt);		/* Erase the block */
 996:../fatfs/ff.c **** 				scl = ecl = nxt;
 997:../fatfs/ff.c **** 			}
 998:../fatfs/ff.c **** #endif
 999:../fatfs/ff.c **** 			clst = nxt;	/* Next cluster */
 1517              		.loc 1 999 0
 1518 0082 BB68     		ldr	r3, [r7, #8]
 1519 0084 3B60     		str	r3, [r7]
 1520              	.L76:
 978:../fatfs/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 1521              		.loc 1 978 0
 1522 0086 7B68     		ldr	r3, [r7, #4]
 1523 0088 DA69     		ldr	r2, [r3, #28]
 1524 008a 3B68     		ldr	r3, [r7]
 1525 008c 9A42     		cmp	r2, r3
 1526 008e CAD8     		bhi	.L82
 1527              	.L75:
1000:../fatfs/ff.c **** 		}
1001:../fatfs/ff.c **** 	}
1002:../fatfs/ff.c **** 
1003:../fatfs/ff.c **** 	return res;
 1528              		.loc 1 1003 0
 1529 0090 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1004:../fatfs/ff.c **** }
 1530              		.loc 1 1004 0
 1531 0092 1846     		mov	r0, r3
 1532 0094 1037     		adds	r7, r7, #16
 1533              		.cfi_def_cfa_offset 8
 1534 0096 BD46     		mov	sp, r7
 1535              		.cfi_def_cfa_register 13
 1536              		@ sp needed
 1537 0098 80BD     		pop	{r7, pc}
 1538              		.cfi_endproc
 1539              	.LFE11:
 1541 009a 00BF     		.section	.text.create_chain,"ax",%progbits
 1542              		.align	2
 1543              		.thumb
 1544              		.thumb_func
 1546              	create_chain:
 1547              	.LFB12:
1005:../fatfs/ff.c **** #endif
1006:../fatfs/ff.c **** 
1007:../fatfs/ff.c **** 
1008:../fatfs/ff.c **** 
1009:../fatfs/ff.c **** 
1010:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1011:../fatfs/ff.c **** /* FAT handling - Stretch or Create a cluster chain                      */
1012:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1013:../fatfs/ff.c **** #if !_FS_READONLY
1014:../fatfs/ff.c **** static
1015:../fatfs/ff.c **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
1016:../fatfs/ff.c **** 	FATFS *fs,			/* File system object */
1017:../fatfs/ff.c **** 	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
1018:../fatfs/ff.c **** )
1019:../fatfs/ff.c **** {
 1548              		.loc 1 1019 0
 1549              		.cfi_startproc
 1550              		@ args = 0, pretend = 0, frame = 24
 1551              		@ frame_needed = 1, uses_anonymous_args = 0
 1552 0000 80B5     		push	{r7, lr}
 1553              		.cfi_def_cfa_offset 8
 1554              		.cfi_offset 7, -8
 1555              		.cfi_offset 14, -4
 1556 0002 86B0     		sub	sp, sp, #24
 1557              		.cfi_def_cfa_offset 32
 1558 0004 00AF     		add	r7, sp, #0
 1559              		.cfi_def_cfa_register 7
 1560 0006 7860     		str	r0, [r7, #4]
 1561 0008 3960     		str	r1, [r7]
1020:../fatfs/ff.c **** 	DWORD cs, ncl, scl;
1021:../fatfs/ff.c **** 	FRESULT res;
1022:../fatfs/ff.c **** 
1023:../fatfs/ff.c **** 
1024:../fatfs/ff.c **** 	if (clst == 0) {		/* Create a new chain */
 1562              		.loc 1 1024 0
 1563 000a 3B68     		ldr	r3, [r7]
 1564 000c 002B     		cmp	r3, #0
 1565 000e 0DD1     		bne	.L85
1025:../fatfs/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
 1566              		.loc 1 1025 0
 1567 0010 7B68     		ldr	r3, [r7, #4]
 1568 0012 DB68     		ldr	r3, [r3, #12]
 1569 0014 3B61     		str	r3, [r7, #16]
1026:../fatfs/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 1570              		.loc 1 1026 0
 1571 0016 3B69     		ldr	r3, [r7, #16]
 1572 0018 002B     		cmp	r3, #0
 1573 001a 04D0     		beq	.L86
 1574              		.loc 1 1026 0 is_stmt 0 discriminator 2
 1575 001c 7B68     		ldr	r3, [r7, #4]
 1576 001e DA69     		ldr	r2, [r3, #28]
 1577 0020 3B69     		ldr	r3, [r7, #16]
 1578 0022 9A42     		cmp	r2, r3
 1579 0024 15D8     		bhi	.L88
 1580              	.L86:
 1581              		.loc 1 1026 0 discriminator 3
 1582 0026 0123     		movs	r3, #1
 1583 0028 3B61     		str	r3, [r7, #16]
 1584 002a 12E0     		b	.L88
 1585              	.L85:
1027:../fatfs/ff.c **** 	}
1028:../fatfs/ff.c **** 	else {					/* Stretch the current chain */
1029:../fatfs/ff.c **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
 1586              		.loc 1 1029 0 is_stmt 1
 1587 002c 7868     		ldr	r0, [r7, #4]
 1588 002e 3968     		ldr	r1, [r7]
 1589 0030 FFF7FEFF 		bl	get_fat
 1590 0034 B860     		str	r0, [r7, #8]
1030:../fatfs/ff.c **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 1591              		.loc 1 1030 0
 1592 0036 BB68     		ldr	r3, [r7, #8]
 1593 0038 012B     		cmp	r3, #1
 1594 003a 01D8     		bhi	.L89
 1595              		.loc 1 1030 0 is_stmt 0 discriminator 1
 1596 003c 0123     		movs	r3, #1
 1597 003e 66E0     		b	.L90
 1598              	.L89:
1031:../fatfs/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 1599              		.loc 1 1031 0 is_stmt 1
 1600 0040 7B68     		ldr	r3, [r7, #4]
 1601 0042 DA69     		ldr	r2, [r3, #28]
 1602 0044 BB68     		ldr	r3, [r7, #8]
 1603 0046 9A42     		cmp	r2, r3
 1604 0048 01D9     		bls	.L91
 1605              		.loc 1 1031 0 is_stmt 0 discriminator 1
 1606 004a BB68     		ldr	r3, [r7, #8]
 1607 004c 5FE0     		b	.L90
 1608              	.L91:
1032:../fatfs/ff.c **** 		scl = clst;
 1609              		.loc 1 1032 0 is_stmt 1
 1610 004e 3B68     		ldr	r3, [r7]
 1611 0050 3B61     		str	r3, [r7, #16]
 1612              	.L88:
1033:../fatfs/ff.c **** 	}
1034:../fatfs/ff.c **** 
1035:../fatfs/ff.c **** 	ncl = scl;				/* Start cluster */
 1613              		.loc 1 1035 0
 1614 0052 3B69     		ldr	r3, [r7, #16]
 1615 0054 7B61     		str	r3, [r7, #20]
 1616              	.L98:
1036:../fatfs/ff.c **** 	for (;;) {
1037:../fatfs/ff.c **** 		ncl++;							/* Next cluster */
 1617              		.loc 1 1037 0
 1618 0056 7B69     		ldr	r3, [r7, #20]
 1619 0058 0133     		adds	r3, r3, #1
 1620 005a 7B61     		str	r3, [r7, #20]
1038:../fatfs/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Wrap around */
 1621              		.loc 1 1038 0
 1622 005c 7B68     		ldr	r3, [r7, #4]
 1623 005e DA69     		ldr	r2, [r3, #28]
 1624 0060 7B69     		ldr	r3, [r7, #20]
 1625 0062 9A42     		cmp	r2, r3
 1626 0064 07D8     		bhi	.L92
1039:../fatfs/ff.c **** 			ncl = 2;
 1627              		.loc 1 1039 0
 1628 0066 0223     		movs	r3, #2
 1629 0068 7B61     		str	r3, [r7, #20]
1040:../fatfs/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
 1630              		.loc 1 1040 0
 1631 006a 7A69     		ldr	r2, [r7, #20]
 1632 006c 3B69     		ldr	r3, [r7, #16]
 1633 006e 9A42     		cmp	r2, r3
 1634 0070 01D9     		bls	.L92
 1635              		.loc 1 1040 0 is_stmt 0 discriminator 1
 1636 0072 0023     		movs	r3, #0
 1637 0074 4BE0     		b	.L90
 1638              	.L92:
1041:../fatfs/ff.c **** 		}
1042:../fatfs/ff.c **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
 1639              		.loc 1 1042 0 is_stmt 1
 1640 0076 7868     		ldr	r0, [r7, #4]
 1641 0078 7969     		ldr	r1, [r7, #20]
 1642 007a FFF7FEFF 		bl	get_fat
 1643 007e B860     		str	r0, [r7, #8]
1043:../fatfs/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
 1644              		.loc 1 1043 0
 1645 0080 BB68     		ldr	r3, [r7, #8]
 1646 0082 002B     		cmp	r3, #0
 1647 0084 0CD1     		bne	.L93
 1648 0086 00BF     		nop
1044:../fatfs/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
1045:../fatfs/ff.c **** 			return cs;
1046:../fatfs/ff.c **** 		if (ncl == scl) return 0;		/* No free cluster */
1047:../fatfs/ff.c **** 	}
1048:../fatfs/ff.c **** 
1049:../fatfs/ff.c **** 	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 1649              		.loc 1 1049 0
 1650 0088 7868     		ldr	r0, [r7, #4]
 1651 008a 7969     		ldr	r1, [r7, #20]
 1652 008c 6FF07042 		mvn	r2, #-268435456
 1653 0090 FFF7FEFF 		bl	put_fat
 1654 0094 0346     		mov	r3, r0
 1655 0096 FB73     		strb	r3, [r7, #15]
1050:../fatfs/ff.c **** 	if (res == FR_OK && clst != 0) {
 1656              		.loc 1 1050 0
 1657 0098 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1658 009a 002B     		cmp	r3, #0
 1659 009c 1AD1     		bne	.L99
 1660 009e 0FE0     		b	.L105
 1661              	.L93:
1044:../fatfs/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 1662              		.loc 1 1044 0
 1663 00a0 BB68     		ldr	r3, [r7, #8]
 1664 00a2 B3F1FF3F 		cmp	r3, #-1
 1665 00a6 02D0     		beq	.L95
1044:../fatfs/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 1666              		.loc 1 1044 0 is_stmt 0 discriminator 1
 1667 00a8 BB68     		ldr	r3, [r7, #8]
 1668 00aa 012B     		cmp	r3, #1
 1669 00ac 01D1     		bne	.L96
 1670              	.L95:
1045:../fatfs/ff.c **** 		if (ncl == scl) return 0;		/* No free cluster */
 1671              		.loc 1 1045 0 is_stmt 1
 1672 00ae BB68     		ldr	r3, [r7, #8]
 1673 00b0 2DE0     		b	.L90
 1674              	.L96:
1046:../fatfs/ff.c **** 	}
 1675              		.loc 1 1046 0
 1676 00b2 7A69     		ldr	r2, [r7, #20]
 1677 00b4 3B69     		ldr	r3, [r7, #16]
 1678 00b6 9A42     		cmp	r2, r3
 1679 00b8 01D1     		bne	.L97
1046:../fatfs/ff.c **** 	}
 1680              		.loc 1 1046 0 is_stmt 0 discriminator 1
 1681 00ba 0023     		movs	r3, #0
 1682 00bc 27E0     		b	.L90
 1683              	.L97:
1047:../fatfs/ff.c **** 
 1684              		.loc 1 1047 0 is_stmt 1
 1685 00be CAE7     		b	.L98
 1686              	.L105:
 1687              		.loc 1 1050 0 discriminator 1
 1688 00c0 3B68     		ldr	r3, [r7]
 1689 00c2 002B     		cmp	r3, #0
 1690 00c4 06D0     		beq	.L99
1051:../fatfs/ff.c **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 1691              		.loc 1 1051 0
 1692 00c6 7868     		ldr	r0, [r7, #4]
 1693 00c8 3968     		ldr	r1, [r7]
 1694 00ca 7A69     		ldr	r2, [r7, #20]
 1695 00cc FFF7FEFF 		bl	put_fat
 1696 00d0 0346     		mov	r3, r0
 1697 00d2 FB73     		strb	r3, [r7, #15]
 1698              	.L99:
1052:../fatfs/ff.c **** 	}
1053:../fatfs/ff.c **** 	if (res == FR_OK) {
 1699              		.loc 1 1053 0
 1700 00d4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1701 00d6 002B     		cmp	r3, #0
 1702 00d8 10D1     		bne	.L100
1054:../fatfs/ff.c **** 		fs->last_clust = ncl;			/* Update FSINFO */
 1703              		.loc 1 1054 0
 1704 00da 7B68     		ldr	r3, [r7, #4]
 1705 00dc 7A69     		ldr	r2, [r7, #20]
 1706 00de DA60     		str	r2, [r3, #12]
1055:../fatfs/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
 1707              		.loc 1 1055 0
 1708 00e0 7B68     		ldr	r3, [r7, #4]
 1709 00e2 1B69     		ldr	r3, [r3, #16]
 1710 00e4 B3F1FF3F 		cmp	r3, #-1
 1711 00e8 10D0     		beq	.L102
1056:../fatfs/ff.c **** 			fs->free_clust--;
 1712              		.loc 1 1056 0
 1713 00ea 7B68     		ldr	r3, [r7, #4]
 1714 00ec 1B69     		ldr	r3, [r3, #16]
 1715 00ee 5A1E     		subs	r2, r3, #1
 1716 00f0 7B68     		ldr	r3, [r7, #4]
 1717 00f2 1A61     		str	r2, [r3, #16]
1057:../fatfs/ff.c **** 			fs->fsi_flag = 1;
 1718              		.loc 1 1057 0
 1719 00f4 7B68     		ldr	r3, [r7, #4]
 1720 00f6 0122     		movs	r2, #1
 1721 00f8 5A71     		strb	r2, [r3, #5]
 1722 00fa 07E0     		b	.L102
 1723              	.L100:
1058:../fatfs/ff.c **** 		}
1059:../fatfs/ff.c **** 	} else {
1060:../fatfs/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 1724              		.loc 1 1060 0
 1725 00fc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1726 00fe 012B     		cmp	r3, #1
 1727 0100 02D1     		bne	.L103
 1728              		.loc 1 1060 0 is_stmt 0 discriminator 1
 1729 0102 4FF0FF33 		mov	r3, #-1
 1730 0106 00E0     		b	.L104
 1731              	.L103:
 1732              		.loc 1 1060 0 discriminator 2
 1733 0108 0123     		movs	r3, #1
 1734              	.L104:
 1735              		.loc 1 1060 0 discriminator 4
 1736 010a 7B61     		str	r3, [r7, #20]
 1737              	.L102:
1061:../fatfs/ff.c **** 	}
1062:../fatfs/ff.c **** 
1063:../fatfs/ff.c **** 	return ncl;		/* Return new cluster number or error code */
 1738              		.loc 1 1063 0 is_stmt 1
 1739 010c 7B69     		ldr	r3, [r7, #20]
 1740              	.L90:
1064:../fatfs/ff.c **** }
 1741              		.loc 1 1064 0
 1742 010e 1846     		mov	r0, r3
 1743 0110 1837     		adds	r7, r7, #24
 1744              		.cfi_def_cfa_offset 8
 1745 0112 BD46     		mov	sp, r7
 1746              		.cfi_def_cfa_register 13
 1747              		@ sp needed
 1748 0114 80BD     		pop	{r7, pc}
 1749              		.cfi_endproc
 1750              	.LFE12:
 1752 0116 00BF     		.section	.text.dir_sdi,"ax",%progbits
 1753              		.align	2
 1754              		.thumb
 1755              		.thumb_func
 1757              	dir_sdi:
 1758              	.LFB13:
1065:../fatfs/ff.c **** #endif /* !_FS_READONLY */
1066:../fatfs/ff.c **** 
1067:../fatfs/ff.c **** 
1068:../fatfs/ff.c **** 
1069:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1070:../fatfs/ff.c **** /* FAT handling - Convert offset into cluster with link map table        */
1071:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1072:../fatfs/ff.c **** 
1073:../fatfs/ff.c **** #if _USE_FASTSEEK
1074:../fatfs/ff.c **** static
1075:../fatfs/ff.c **** DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1076:../fatfs/ff.c **** 	FIL* fp,		/* Pointer to the file object */
1077:../fatfs/ff.c **** 	DWORD ofs		/* File offset to be converted to cluster# */
1078:../fatfs/ff.c **** )
1079:../fatfs/ff.c **** {
1080:../fatfs/ff.c **** 	DWORD cl, ncl, *tbl;
1081:../fatfs/ff.c **** 
1082:../fatfs/ff.c **** 
1083:../fatfs/ff.c **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
1084:../fatfs/ff.c **** 	cl = ofs / SS(fp->fatfs) / fp->fatfs->csize;	/* Cluster order from top of the file */
1085:../fatfs/ff.c **** 	for (;;) {
1086:../fatfs/ff.c **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
1087:../fatfs/ff.c **** 		if (!ncl) return 0;		/* End of table? (error) */
1088:../fatfs/ff.c **** 		if (cl < ncl) break;	/* In this fragment? */
1089:../fatfs/ff.c **** 		cl -= ncl; tbl++;		/* Next fragment */
1090:../fatfs/ff.c **** 	}
1091:../fatfs/ff.c **** 	return cl + *tbl;	/* Return the cluster number */
1092:../fatfs/ff.c **** }
1093:../fatfs/ff.c **** #endif	/* _USE_FASTSEEK */
1094:../fatfs/ff.c **** 
1095:../fatfs/ff.c **** 
1096:../fatfs/ff.c **** 
1097:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1098:../fatfs/ff.c **** /* Directory handling - Set directory index                              */
1099:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1100:../fatfs/ff.c **** 
1101:../fatfs/ff.c **** static
1102:../fatfs/ff.c **** FRESULT dir_sdi (
1103:../fatfs/ff.c **** 	DIR *dj,		/* Pointer to directory object */
1104:../fatfs/ff.c **** 	WORD idx		/* Index of directory table */
1105:../fatfs/ff.c **** )
1106:../fatfs/ff.c **** {
 1759              		.loc 1 1106 0
 1760              		.cfi_startproc
 1761              		@ args = 0, pretend = 0, frame = 16
 1762              		@ frame_needed = 1, uses_anonymous_args = 0
 1763 0000 80B5     		push	{r7, lr}
 1764              		.cfi_def_cfa_offset 8
 1765              		.cfi_offset 7, -8
 1766              		.cfi_offset 14, -4
 1767 0002 84B0     		sub	sp, sp, #16
 1768              		.cfi_def_cfa_offset 24
 1769 0004 00AF     		add	r7, sp, #0
 1770              		.cfi_def_cfa_register 7
 1771 0006 7860     		str	r0, [r7, #4]
 1772 0008 0B46     		mov	r3, r1
 1773 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1107:../fatfs/ff.c **** 	DWORD clst;
1108:../fatfs/ff.c **** 	WORD ic;
1109:../fatfs/ff.c **** 
1110:../fatfs/ff.c **** 
1111:../fatfs/ff.c **** 	dj->index = idx;
 1774              		.loc 1 1111 0
 1775 000c 7B68     		ldr	r3, [r7, #4]
 1776 000e 7A88     		ldrh	r2, [r7, #2]	@ movhi
 1777 0010 DA80     		strh	r2, [r3, #6]	@ movhi
1112:../fatfs/ff.c **** 	clst = dj->sclust;
 1778              		.loc 1 1112 0
 1779 0012 7B68     		ldr	r3, [r7, #4]
 1780 0014 9B68     		ldr	r3, [r3, #8]
 1781 0016 FB60     		str	r3, [r7, #12]
1113:../fatfs/ff.c **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 1782              		.loc 1 1113 0
 1783 0018 FB68     		ldr	r3, [r7, #12]
 1784 001a 012B     		cmp	r3, #1
 1785 001c 05D0     		beq	.L107
 1786              		.loc 1 1113 0 is_stmt 0 discriminator 1
 1787 001e 7B68     		ldr	r3, [r7, #4]
 1788 0020 1B68     		ldr	r3, [r3]
 1789 0022 DA69     		ldr	r2, [r3, #28]
 1790 0024 FB68     		ldr	r3, [r7, #12]
 1791 0026 9A42     		cmp	r2, r3
 1792 0028 01D8     		bhi	.L108
 1793              	.L107:
1114:../fatfs/ff.c **** 		return FR_INT_ERR;
 1794              		.loc 1 1114 0 is_stmt 1
 1795 002a 0223     		movs	r3, #2
 1796 002c 65E0     		b	.L109
 1797              	.L108:
1115:../fatfs/ff.c **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 1798              		.loc 1 1115 0
 1799 002e FB68     		ldr	r3, [r7, #12]
 1800 0030 002B     		cmp	r3, #0
 1801 0032 08D1     		bne	.L110
 1802              		.loc 1 1115 0 is_stmt 0 discriminator 1
 1803 0034 7B68     		ldr	r3, [r7, #4]
 1804 0036 1B68     		ldr	r3, [r3]
 1805 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1806 003a 032B     		cmp	r3, #3
 1807 003c 03D1     		bne	.L110
1116:../fatfs/ff.c **** 		clst = dj->fs->dirbase;
 1808              		.loc 1 1116 0 is_stmt 1
 1809 003e 7B68     		ldr	r3, [r7, #4]
 1810 0040 1B68     		ldr	r3, [r3]
 1811 0042 DB6A     		ldr	r3, [r3, #44]
 1812 0044 FB60     		str	r3, [r7, #12]
 1813              	.L110:
1117:../fatfs/ff.c **** 
1118:../fatfs/ff.c **** 	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 1814              		.loc 1 1118 0
 1815 0046 FB68     		ldr	r3, [r7, #12]
 1816 0048 002B     		cmp	r3, #0
 1817 004a 14D1     		bne	.L111
1119:../fatfs/ff.c **** 		dj->clust = clst;
 1818              		.loc 1 1119 0
 1819 004c 7B68     		ldr	r3, [r7, #4]
 1820 004e FA68     		ldr	r2, [r7, #12]
 1821 0050 DA60     		str	r2, [r3, #12]
1120:../fatfs/ff.c **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 1822              		.loc 1 1120 0
 1823 0052 7B68     		ldr	r3, [r7, #4]
 1824 0054 1B68     		ldr	r3, [r3]
 1825 0056 1B89     		ldrh	r3, [r3, #8]
 1826 0058 7A88     		ldrh	r2, [r7, #2]
 1827 005a 9A42     		cmp	r2, r3
 1828 005c 01D3     		bcc	.L112
1121:../fatfs/ff.c **** 			return FR_INT_ERR;
 1829              		.loc 1 1121 0
 1830 005e 0223     		movs	r3, #2
 1831 0060 4BE0     		b	.L109
 1832              	.L112:
1122:../fatfs/ff.c **** 		dj->sect = dj->fs->dirbase + idx / (SS(dj->fatfs) / SZ_DIR);	/* Sector# */
 1833              		.loc 1 1122 0
 1834 0062 7B68     		ldr	r3, [r7, #4]
 1835 0064 1B68     		ldr	r3, [r3]
 1836 0066 DB6A     		ldr	r3, [r3, #44]
 1837 0068 7A88     		ldrh	r2, [r7, #2]
 1838 006a 1209     		lsrs	r2, r2, #4
 1839 006c 92B2     		uxth	r2, r2
 1840 006e 1A44     		add	r2, r2, r3
 1841 0070 7B68     		ldr	r3, [r7, #4]
 1842 0072 1A61     		str	r2, [r3, #16]
 1843 0074 36E0     		b	.L113
 1844              	.L111:
1123:../fatfs/ff.c **** 	}
1124:../fatfs/ff.c **** 	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
1125:../fatfs/ff.c **** 		ic = SS(dj->fatfs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
 1845              		.loc 1 1125 0
 1846 0076 7B68     		ldr	r3, [r7, #4]
 1847 0078 1B68     		ldr	r3, [r3]
 1848 007a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1849 007c 9BB2     		uxth	r3, r3
 1850 007e 1B01     		lsls	r3, r3, #4
 1851 0080 7B81     		strh	r3, [r7, #10]	@ movhi
1126:../fatfs/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 1852              		.loc 1 1126 0
 1853 0082 1BE0     		b	.L114
 1854              	.L118:
1127:../fatfs/ff.c **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 1855              		.loc 1 1127 0
 1856 0084 7B68     		ldr	r3, [r7, #4]
 1857 0086 1B68     		ldr	r3, [r3]
 1858 0088 1846     		mov	r0, r3
 1859 008a F968     		ldr	r1, [r7, #12]
 1860 008c FFF7FEFF 		bl	get_fat
 1861 0090 F860     		str	r0, [r7, #12]
1128:../fatfs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 1862              		.loc 1 1128 0
 1863 0092 FB68     		ldr	r3, [r7, #12]
 1864 0094 B3F1FF3F 		cmp	r3, #-1
 1865 0098 01D1     		bne	.L115
 1866              		.loc 1 1128 0 is_stmt 0 discriminator 1
 1867 009a 0123     		movs	r3, #1
 1868 009c 2DE0     		b	.L109
 1869              	.L115:
1129:../fatfs/ff.c **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 1870              		.loc 1 1129 0 is_stmt 1
 1871 009e FB68     		ldr	r3, [r7, #12]
 1872 00a0 012B     		cmp	r3, #1
 1873 00a2 05D9     		bls	.L116
 1874              		.loc 1 1129 0 is_stmt 0 discriminator 1
 1875 00a4 7B68     		ldr	r3, [r7, #4]
 1876 00a6 1B68     		ldr	r3, [r3]
 1877 00a8 DA69     		ldr	r2, [r3, #28]
 1878 00aa FB68     		ldr	r3, [r7, #12]
 1879 00ac 9A42     		cmp	r2, r3
 1880 00ae 01D8     		bhi	.L117
 1881              	.L116:
1130:../fatfs/ff.c **** 				return FR_INT_ERR;
 1882              		.loc 1 1130 0 is_stmt 1
 1883 00b0 0223     		movs	r3, #2
 1884 00b2 22E0     		b	.L109
 1885              	.L117:
1131:../fatfs/ff.c **** 			idx -= ic;
 1886              		.loc 1 1131 0
 1887 00b4 7A88     		ldrh	r2, [r7, #2]	@ movhi
 1888 00b6 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1889 00b8 D31A     		subs	r3, r2, r3
 1890 00ba 7B80     		strh	r3, [r7, #2]	@ movhi
 1891              	.L114:
1126:../fatfs/ff.c **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 1892              		.loc 1 1126 0
 1893 00bc 7A88     		ldrh	r2, [r7, #2]
 1894 00be 7B89     		ldrh	r3, [r7, #10]
 1895 00c0 9A42     		cmp	r2, r3
 1896 00c2 DFD2     		bcs	.L118
1132:../fatfs/ff.c **** 		}
1133:../fatfs/ff.c **** 		dj->clust = clst;
 1897              		.loc 1 1133 0
 1898 00c4 7B68     		ldr	r3, [r7, #4]
 1899 00c6 FA68     		ldr	r2, [r7, #12]
 1900 00c8 DA60     		str	r2, [r3, #12]
1134:../fatfs/ff.c **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fatfs) / SZ_DIR);	/* Sector# */
 1901              		.loc 1 1134 0
 1902 00ca 7B68     		ldr	r3, [r7, #4]
 1903 00cc 1B68     		ldr	r3, [r3]
 1904 00ce 1846     		mov	r0, r3
 1905 00d0 F968     		ldr	r1, [r7, #12]
 1906 00d2 FFF7FEFF 		bl	clust2sect
 1907 00d6 0246     		mov	r2, r0
 1908 00d8 7B88     		ldrh	r3, [r7, #2]
 1909 00da 1B09     		lsrs	r3, r3, #4
 1910 00dc 9BB2     		uxth	r3, r3
 1911 00de 1A44     		add	r2, r2, r3
 1912 00e0 7B68     		ldr	r3, [r7, #4]
 1913 00e2 1A61     		str	r2, [r3, #16]
 1914              	.L113:
1135:../fatfs/ff.c **** 	}
1136:../fatfs/ff.c **** 
1137:../fatfs/ff.c **** 	dj->dir = dj->fs->win + (idx % (SS(dj->fatfs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sect
 1915              		.loc 1 1137 0
 1916 00e4 7B68     		ldr	r3, [r7, #4]
 1917 00e6 1A68     		ldr	r2, [r3]
 1918 00e8 7B88     		ldrh	r3, [r7, #2]
 1919 00ea 03F00F03 		and	r3, r3, #15
 1920 00ee 5B01     		lsls	r3, r3, #5
 1921 00f0 3833     		adds	r3, r3, #56
 1922 00f2 1A44     		add	r2, r2, r3
 1923 00f4 7B68     		ldr	r3, [r7, #4]
 1924 00f6 5A61     		str	r2, [r3, #20]
1138:../fatfs/ff.c **** 
1139:../fatfs/ff.c **** 	return FR_OK;	/* Seek succeeded */
 1925              		.loc 1 1139 0
 1926 00f8 0023     		movs	r3, #0
 1927              	.L109:
1140:../fatfs/ff.c **** }
 1928              		.loc 1 1140 0
 1929 00fa 1846     		mov	r0, r3
 1930 00fc 1037     		adds	r7, r7, #16
 1931              		.cfi_def_cfa_offset 8
 1932 00fe BD46     		mov	sp, r7
 1933              		.cfi_def_cfa_register 13
 1934              		@ sp needed
 1935 0100 80BD     		pop	{r7, pc}
 1936              		.cfi_endproc
 1937              	.LFE13:
 1939 0102 00BF     		.section	.text.dir_next,"ax",%progbits
 1940              		.align	2
 1941              		.thumb
 1942              		.thumb_func
 1944              	dir_next:
 1945              	.LFB14:
1141:../fatfs/ff.c **** 
1142:../fatfs/ff.c **** 
1143:../fatfs/ff.c **** 
1144:../fatfs/ff.c **** 
1145:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1146:../fatfs/ff.c **** /* Directory handling - Move directory table index next                  */
1147:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1148:../fatfs/ff.c **** 
1149:../fatfs/ff.c **** static
1150:../fatfs/ff.c **** FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
1151:../fatfs/ff.c **** 	DIR *dj,		/* Pointer to the directory object */
1152:../fatfs/ff.c **** 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
1153:../fatfs/ff.c **** )
1154:../fatfs/ff.c **** {
 1946              		.loc 1 1154 0
 1947              		.cfi_startproc
 1948              		@ args = 0, pretend = 0, frame = 16
 1949              		@ frame_needed = 1, uses_anonymous_args = 0
 1950 0000 90B5     		push	{r4, r7, lr}
 1951              		.cfi_def_cfa_offset 12
 1952              		.cfi_offset 4, -12
 1953              		.cfi_offset 7, -8
 1954              		.cfi_offset 14, -4
 1955 0002 85B0     		sub	sp, sp, #20
 1956              		.cfi_def_cfa_offset 32
 1957 0004 00AF     		add	r7, sp, #0
 1958              		.cfi_def_cfa_register 7
 1959 0006 7860     		str	r0, [r7, #4]
 1960 0008 3960     		str	r1, [r7]
1155:../fatfs/ff.c **** 	DWORD clst;
1156:../fatfs/ff.c **** 	WORD i;
1157:../fatfs/ff.c **** 	//int  istretch;
1158:../fatfs/ff.c **** 
1159:../fatfs/ff.c **** 
1160:../fatfs/ff.c **** 	//stretch = stretch;		/* To suppress warning on read-only cfg. */
1161:../fatfs/ff.c **** 	i = dj->index + 1;
 1961              		.loc 1 1161 0
 1962 000a 7B68     		ldr	r3, [r7, #4]
 1963 000c DB88     		ldrh	r3, [r3, #6]
 1964 000e 0133     		adds	r3, r3, #1
 1965 0010 3B81     		strh	r3, [r7, #8]	@ movhi
1162:../fatfs/ff.c **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 1966              		.loc 1 1162 0
 1967 0012 3B89     		ldrh	r3, [r7, #8]
 1968 0014 002B     		cmp	r3, #0
 1969 0016 03D0     		beq	.L120
 1970              		.loc 1 1162 0 is_stmt 0 discriminator 1
 1971 0018 7B68     		ldr	r3, [r7, #4]
 1972 001a 1B69     		ldr	r3, [r3, #16]
 1973 001c 002B     		cmp	r3, #0
 1974 001e 01D1     		bne	.L121
 1975              	.L120:
1163:../fatfs/ff.c **** 		return FR_NO_FILE;
 1976              		.loc 1 1163 0 is_stmt 1
 1977 0020 0423     		movs	r3, #4
 1978 0022 BAE0     		b	.L122
 1979              	.L121:
1164:../fatfs/ff.c **** 
1165:../fatfs/ff.c **** 	if (!(i % (SS(dj->fatfs) / SZ_DIR))) {	/* Sector changed? */
 1980              		.loc 1 1165 0
 1981 0024 3B89     		ldrh	r3, [r7, #8]	@ movhi
 1982 0026 03F00F03 		and	r3, r3, #15
 1983 002a 9BB2     		uxth	r3, r3
 1984 002c 002B     		cmp	r3, #0
 1985 002e 40F0A680 		bne	.L123
1166:../fatfs/ff.c **** 		dj->sect++;					/* Next sector */
 1986              		.loc 1 1166 0
 1987 0032 7B68     		ldr	r3, [r7, #4]
 1988 0034 1B69     		ldr	r3, [r3, #16]
 1989 0036 5A1C     		adds	r2, r3, #1
 1990 0038 7B68     		ldr	r3, [r7, #4]
 1991 003a 1A61     		str	r2, [r3, #16]
1167:../fatfs/ff.c **** 
1168:../fatfs/ff.c **** 		if (dj->clust == 0) {	/* Static table */
 1992              		.loc 1 1168 0
 1993 003c 7B68     		ldr	r3, [r7, #4]
 1994 003e DB68     		ldr	r3, [r3, #12]
 1995 0040 002B     		cmp	r3, #0
 1996 0042 08D1     		bne	.L124
1169:../fatfs/ff.c **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 1997              		.loc 1 1169 0
 1998 0044 7B68     		ldr	r3, [r7, #4]
 1999 0046 1B68     		ldr	r3, [r3]
 2000 0048 1B89     		ldrh	r3, [r3, #8]
 2001 004a 3A89     		ldrh	r2, [r7, #8]
 2002 004c 9A42     		cmp	r2, r3
 2003 004e C0F09680 		bcc	.L123
1170:../fatfs/ff.c **** 				return FR_NO_FILE;
 2004              		.loc 1 1170 0
 2005 0052 0423     		movs	r3, #4
 2006 0054 A1E0     		b	.L122
 2007              	.L124:
1171:../fatfs/ff.c **** 		}
1172:../fatfs/ff.c **** 		else {					/* Dynamic table */
1173:../fatfs/ff.c **** 			if (((i / (SS(dj->fatfs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 2008              		.loc 1 1173 0
 2009 0056 3B89     		ldrh	r3, [r7, #8]
 2010 0058 1B09     		lsrs	r3, r3, #4
 2011 005a 9BB2     		uxth	r3, r3
 2012 005c 1A46     		mov	r2, r3
 2013 005e 7B68     		ldr	r3, [r7, #4]
 2014 0060 1B68     		ldr	r3, [r3]
 2015 0062 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2016 0064 013B     		subs	r3, r3, #1
 2017 0066 1340     		ands	r3, r3, r2
 2018 0068 002B     		cmp	r3, #0
 2019 006a 40F08880 		bne	.L123
1174:../fatfs/ff.c **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 2020              		.loc 1 1174 0
 2021 006e 7B68     		ldr	r3, [r7, #4]
 2022 0070 1A68     		ldr	r2, [r3]
 2023 0072 7B68     		ldr	r3, [r7, #4]
 2024 0074 DB68     		ldr	r3, [r3, #12]
 2025 0076 1046     		mov	r0, r2
 2026 0078 1946     		mov	r1, r3
 2027 007a FFF7FEFF 		bl	get_fat
 2028 007e F860     		str	r0, [r7, #12]
1175:../fatfs/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 2029              		.loc 1 1175 0
 2030 0080 FB68     		ldr	r3, [r7, #12]
 2031 0082 012B     		cmp	r3, #1
 2032 0084 01D8     		bhi	.L125
 2033              		.loc 1 1175 0 is_stmt 0 discriminator 1
 2034 0086 0223     		movs	r3, #2
 2035 0088 87E0     		b	.L122
 2036              	.L125:
1176:../fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 2037              		.loc 1 1176 0 is_stmt 1
 2038 008a FB68     		ldr	r3, [r7, #12]
 2039 008c B3F1FF3F 		cmp	r3, #-1
 2040 0090 01D1     		bne	.L126
 2041              		.loc 1 1176 0 is_stmt 0 discriminator 1
 2042 0092 0123     		movs	r3, #1
 2043 0094 81E0     		b	.L122
 2044              	.L126:
1177:../fatfs/ff.c **** 				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 2045              		.loc 1 1177 0 is_stmt 1
 2046 0096 7B68     		ldr	r3, [r7, #4]
 2047 0098 1B68     		ldr	r3, [r3]
 2048 009a DA69     		ldr	r2, [r3, #28]
 2049 009c FB68     		ldr	r3, [r7, #12]
 2050 009e 9A42     		cmp	r2, r3
 2051 00a0 61D8     		bhi	.L127
 2052              	.LBB2:
1178:../fatfs/ff.c **** #if !_FS_READONLY
1179:../fatfs/ff.c **** 					BYTE c;
1180:../fatfs/ff.c **** 					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 2053              		.loc 1 1180 0
 2054 00a2 3B68     		ldr	r3, [r7]
 2055 00a4 002B     		cmp	r3, #0
 2056 00a6 01D1     		bne	.L128
 2057              		.loc 1 1180 0 is_stmt 0 discriminator 1
 2058 00a8 0423     		movs	r3, #4
 2059 00aa 76E0     		b	.L122
 2060              	.L128:
1181:../fatfs/ff.c **** 					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 2061              		.loc 1 1181 0 is_stmt 1
 2062 00ac 7B68     		ldr	r3, [r7, #4]
 2063 00ae 1A68     		ldr	r2, [r3]
 2064 00b0 7B68     		ldr	r3, [r7, #4]
 2065 00b2 DB68     		ldr	r3, [r3, #12]
 2066 00b4 1046     		mov	r0, r2
 2067 00b6 1946     		mov	r1, r3
 2068 00b8 FFF7FEFF 		bl	create_chain
 2069 00bc F860     		str	r0, [r7, #12]
1182:../fatfs/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 2070              		.loc 1 1182 0
 2071 00be FB68     		ldr	r3, [r7, #12]
 2072 00c0 002B     		cmp	r3, #0
 2073 00c2 01D1     		bne	.L129
 2074              		.loc 1 1182 0 is_stmt 0 discriminator 1
 2075 00c4 0723     		movs	r3, #7
 2076 00c6 68E0     		b	.L122
 2077              	.L129:
1183:../fatfs/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 2078              		.loc 1 1183 0 is_stmt 1
 2079 00c8 FB68     		ldr	r3, [r7, #12]
 2080 00ca 012B     		cmp	r3, #1
 2081 00cc 01D1     		bne	.L130
 2082              		.loc 1 1183 0 is_stmt 0 discriminator 1
 2083 00ce 0223     		movs	r3, #2
 2084 00d0 63E0     		b	.L122
 2085              	.L130:
1184:../fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 2086              		.loc 1 1184 0 is_stmt 1
 2087 00d2 FB68     		ldr	r3, [r7, #12]
 2088 00d4 B3F1FF3F 		cmp	r3, #-1
 2089 00d8 01D1     		bne	.L131
 2090              		.loc 1 1184 0 is_stmt 0 discriminator 1
 2091 00da 0123     		movs	r3, #1
 2092 00dc 5DE0     		b	.L122
 2093              	.L131:
1185:../fatfs/ff.c **** 					/* Clean-up stretched table */
1186:../fatfs/ff.c **** 					if (sync_window(dj->fs)) return FR_DISK_ERR;	/* Flush active window */
 2094              		.loc 1 1186 0 is_stmt 1
 2095 00de 7B68     		ldr	r3, [r7, #4]
 2096 00e0 1B68     		ldr	r3, [r3]
 2097 00e2 1846     		mov	r0, r3
 2098 00e4 FFF7FEFF 		bl	sync_window
 2099 00e8 0346     		mov	r3, r0
 2100 00ea 002B     		cmp	r3, #0
 2101 00ec 01D0     		beq	.L132
 2102              		.loc 1 1186 0 is_stmt 0 discriminator 1
 2103 00ee 0123     		movs	r3, #1
 2104 00f0 53E0     		b	.L122
 2105              	.L132:
1187:../fatfs/ff.c **** 					mem_set(dj->fs->win, 0, SS(dj->fatfs));			/* Clear window buffer */
 2106              		.loc 1 1187 0 is_stmt 1
 2107 00f2 7B68     		ldr	r3, [r7, #4]
 2108 00f4 1B68     		ldr	r3, [r3]
 2109 00f6 3833     		adds	r3, r3, #56
 2110 00f8 1846     		mov	r0, r3
 2111 00fa 0021     		movs	r1, #0
 2112 00fc 4FF40072 		mov	r2, #512
 2113 0100 FFF7FEFF 		bl	mem_set
1188:../fatfs/ff.c **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 2114              		.loc 1 1188 0
 2115 0104 7B68     		ldr	r3, [r7, #4]
 2116 0106 1C68     		ldr	r4, [r3]
 2117 0108 7B68     		ldr	r3, [r7, #4]
 2118 010a 1B68     		ldr	r3, [r3]
 2119 010c 1846     		mov	r0, r3
 2120 010e F968     		ldr	r1, [r7, #12]
 2121 0110 FFF7FEFF 		bl	clust2sect
 2122 0114 0346     		mov	r3, r0
 2123 0116 6363     		str	r3, [r4, #52]
1189:../fatfs/ff.c **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 2124              		.loc 1 1189 0
 2125 0118 0023     		movs	r3, #0
 2126 011a FB72     		strb	r3, [r7, #11]
 2127 011c 15E0     		b	.L133
 2128              	.L135:
1190:../fatfs/ff.c **** 						dj->fs->wflag = 1;
 2129              		.loc 1 1190 0
 2130 011e 7B68     		ldr	r3, [r7, #4]
 2131 0120 1B68     		ldr	r3, [r3]
 2132 0122 0122     		movs	r2, #1
 2133 0124 1A71     		strb	r2, [r3, #4]
1191:../fatfs/ff.c **** 						if (sync_window(dj->fs)) return FR_DISK_ERR;
 2134              		.loc 1 1191 0
 2135 0126 7B68     		ldr	r3, [r7, #4]
 2136 0128 1B68     		ldr	r3, [r3]
 2137 012a 1846     		mov	r0, r3
 2138 012c FFF7FEFF 		bl	sync_window
 2139 0130 0346     		mov	r3, r0
 2140 0132 002B     		cmp	r3, #0
 2141 0134 01D0     		beq	.L134
 2142              		.loc 1 1191 0 is_stmt 0 discriminator 1
 2143 0136 0123     		movs	r3, #1
 2144 0138 2FE0     		b	.L122
 2145              	.L134:
1192:../fatfs/ff.c **** 						dj->fs->winsect++;
 2146              		.loc 1 1192 0 is_stmt 1 discriminator 2
 2147 013a 7B68     		ldr	r3, [r7, #4]
 2148 013c 1B68     		ldr	r3, [r3]
 2149 013e 5A6B     		ldr	r2, [r3, #52]
 2150 0140 0132     		adds	r2, r2, #1
 2151 0142 5A63     		str	r2, [r3, #52]
1189:../fatfs/ff.c **** 						dj->fs->wflag = 1;
 2152              		.loc 1 1189 0 discriminator 2
 2153 0144 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2154 0146 0133     		adds	r3, r3, #1
 2155 0148 FB72     		strb	r3, [r7, #11]
 2156              	.L133:
1189:../fatfs/ff.c **** 						dj->fs->wflag = 1;
 2157              		.loc 1 1189 0 is_stmt 0 discriminator 1
 2158 014a 7B68     		ldr	r3, [r7, #4]
 2159 014c 1B68     		ldr	r3, [r3]
 2160 014e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2161 0150 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 2162 0152 9A42     		cmp	r2, r3
 2163 0154 E3D3     		bcc	.L135
1193:../fatfs/ff.c **** 					}
1194:../fatfs/ff.c **** 					dj->fs->winsect -= c;						/* Rewind window address */
 2164              		.loc 1 1194 0 is_stmt 1
 2165 0156 7B68     		ldr	r3, [r7, #4]
 2166 0158 1B68     		ldr	r3, [r3]
 2167 015a 7A68     		ldr	r2, [r7, #4]
 2168 015c 1268     		ldr	r2, [r2]
 2169 015e 516B     		ldr	r1, [r2, #52]
 2170 0160 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 2171 0162 8A1A     		subs	r2, r1, r2
 2172 0164 5A63     		str	r2, [r3, #52]
 2173              	.L127:
 2174              	.LBE2:
1195:../fatfs/ff.c **** #else
1196:../fatfs/ff.c **** 					return FR_NO_FILE;			/* Report EOT */
1197:../fatfs/ff.c **** #endif
1198:../fatfs/ff.c **** 				}
1199:../fatfs/ff.c **** 				dj->clust = clst;				/* Initialize data for new cluster */
 2175              		.loc 1 1199 0
 2176 0166 7B68     		ldr	r3, [r7, #4]
 2177 0168 FA68     		ldr	r2, [r7, #12]
 2178 016a DA60     		str	r2, [r3, #12]
1200:../fatfs/ff.c **** 				dj->sect = clust2sect(dj->fs, clst);
 2179              		.loc 1 1200 0
 2180 016c 7B68     		ldr	r3, [r7, #4]
 2181 016e 1B68     		ldr	r3, [r3]
 2182 0170 1846     		mov	r0, r3
 2183 0172 F968     		ldr	r1, [r7, #12]
 2184 0174 FFF7FEFF 		bl	clust2sect
 2185 0178 0246     		mov	r2, r0
 2186 017a 7B68     		ldr	r3, [r7, #4]
 2187 017c 1A61     		str	r2, [r3, #16]
 2188              	.L123:
1201:../fatfs/ff.c **** 			}
1202:../fatfs/ff.c **** 		}
1203:../fatfs/ff.c **** 	}
1204:../fatfs/ff.c **** 
1205:../fatfs/ff.c **** 	dj->index = i;
 2189              		.loc 1 1205 0
 2190 017e 7B68     		ldr	r3, [r7, #4]
 2191 0180 3A89     		ldrh	r2, [r7, #8]	@ movhi
 2192 0182 DA80     		strh	r2, [r3, #6]	@ movhi
1206:../fatfs/ff.c **** 	dj->dir = dj->fs->win + (i % (SS(dj->fatfs) / SZ_DIR)) * SZ_DIR;
 2193              		.loc 1 1206 0
 2194 0184 7B68     		ldr	r3, [r7, #4]
 2195 0186 1A68     		ldr	r2, [r3]
 2196 0188 3B89     		ldrh	r3, [r7, #8]
 2197 018a 03F00F03 		and	r3, r3, #15
 2198 018e 5B01     		lsls	r3, r3, #5
 2199 0190 3833     		adds	r3, r3, #56
 2200 0192 1A44     		add	r2, r2, r3
 2201 0194 7B68     		ldr	r3, [r7, #4]
 2202 0196 5A61     		str	r2, [r3, #20]
1207:../fatfs/ff.c **** 
1208:../fatfs/ff.c **** 	return FR_OK;
 2203              		.loc 1 1208 0
 2204 0198 0023     		movs	r3, #0
 2205              	.L122:
1209:../fatfs/ff.c **** }
 2206              		.loc 1 1209 0
 2207 019a 1846     		mov	r0, r3
 2208 019c 1437     		adds	r7, r7, #20
 2209              		.cfi_def_cfa_offset 12
 2210 019e BD46     		mov	sp, r7
 2211              		.cfi_def_cfa_register 13
 2212              		@ sp needed
 2213 01a0 90BD     		pop	{r4, r7, pc}
 2214              		.cfi_endproc
 2215              	.LFE14:
 2217 01a2 00BF     		.section	.text.dir_alloc,"ax",%progbits
 2218              		.align	2
 2219              		.thumb
 2220              		.thumb_func
 2222              	dir_alloc:
 2223              	.LFB15:
1210:../fatfs/ff.c **** 
1211:../fatfs/ff.c **** 
1212:../fatfs/ff.c **** 
1213:../fatfs/ff.c **** 
1214:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1215:../fatfs/ff.c **** /* Directory handling - Reserve directory entry                          */
1216:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1217:../fatfs/ff.c **** 
1218:../fatfs/ff.c **** #if !_FS_READONLY
1219:../fatfs/ff.c **** static
1220:../fatfs/ff.c **** FRESULT dir_alloc (
1221:../fatfs/ff.c **** 	DIR* dj,	/* Pointer to the directory object */
1222:../fatfs/ff.c **** 	UINT nent	/* Number of contiguous entries to allocate (1-21) */
1223:../fatfs/ff.c **** )
1224:../fatfs/ff.c **** {
 2224              		.loc 1 1224 0
 2225              		.cfi_startproc
 2226              		@ args = 0, pretend = 0, frame = 16
 2227              		@ frame_needed = 1, uses_anonymous_args = 0
 2228 0000 80B5     		push	{r7, lr}
 2229              		.cfi_def_cfa_offset 8
 2230              		.cfi_offset 7, -8
 2231              		.cfi_offset 14, -4
 2232 0002 84B0     		sub	sp, sp, #16
 2233              		.cfi_def_cfa_offset 24
 2234 0004 00AF     		add	r7, sp, #0
 2235              		.cfi_def_cfa_register 7
 2236 0006 7860     		str	r0, [r7, #4]
 2237 0008 3960     		str	r1, [r7]
1225:../fatfs/ff.c **** 	FRESULT res;
1226:../fatfs/ff.c **** 	UINT n;
1227:../fatfs/ff.c **** 
1228:../fatfs/ff.c **** 
1229:../fatfs/ff.c **** 	res = dir_sdi(dj, 0);
 2238              		.loc 1 1229 0
 2239 000a 7868     		ldr	r0, [r7, #4]
 2240 000c 0021     		movs	r1, #0
 2241 000e FFF7FEFF 		bl	dir_sdi
 2242 0012 0346     		mov	r3, r0
 2243 0014 FB73     		strb	r3, [r7, #15]
1230:../fatfs/ff.c **** 	if (res == FR_OK) {
 2244              		.loc 1 1230 0
 2245 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2246 0018 002B     		cmp	r3, #0
 2247 001a 2DD1     		bne	.L137
1231:../fatfs/ff.c **** 		n = 0;
 2248              		.loc 1 1231 0
 2249 001c 0023     		movs	r3, #0
 2250 001e BB60     		str	r3, [r7, #8]
 2251              	.L143:
1232:../fatfs/ff.c **** 		do {
1233:../fatfs/ff.c **** 			res = move_window(dj->fs, dj->sect);
 2252              		.loc 1 1233 0
 2253 0020 7B68     		ldr	r3, [r7, #4]
 2254 0022 1A68     		ldr	r2, [r3]
 2255 0024 7B68     		ldr	r3, [r7, #4]
 2256 0026 1B69     		ldr	r3, [r3, #16]
 2257 0028 1046     		mov	r0, r2
 2258 002a 1946     		mov	r1, r3
 2259 002c FFF7FEFF 		bl	move_window
 2260 0030 0346     		mov	r3, r0
 2261 0032 FB73     		strb	r3, [r7, #15]
1234:../fatfs/ff.c **** 			if (res != FR_OK) break;
 2262              		.loc 1 1234 0
 2263 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2264 0036 002B     		cmp	r3, #0
 2265 0038 00D0     		beq	.L138
 2266 003a 1DE0     		b	.L137
 2267              	.L138:
1235:../fatfs/ff.c **** 			if (dj->dir[0] == DDE || dj->dir[0] == 0) {	/* Is it a blank entry? */
 2268              		.loc 1 1235 0
 2269 003c 7B68     		ldr	r3, [r7, #4]
 2270 003e 5B69     		ldr	r3, [r3, #20]
 2271 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2272 0042 E52B     		cmp	r3, #229
 2273 0044 04D0     		beq	.L139
 2274              		.loc 1 1235 0 is_stmt 0 discriminator 1
 2275 0046 7B68     		ldr	r3, [r7, #4]
 2276 0048 5B69     		ldr	r3, [r3, #20]
 2277 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2278 004c 002B     		cmp	r3, #0
 2279 004e 08D1     		bne	.L140
 2280              	.L139:
1236:../fatfs/ff.c **** 				if (++n == nent) break;	/* A block of contiguous entry is found */
 2281              		.loc 1 1236 0 is_stmt 1
 2282 0050 BB68     		ldr	r3, [r7, #8]
 2283 0052 0133     		adds	r3, r3, #1
 2284 0054 BB60     		str	r3, [r7, #8]
 2285 0056 BA68     		ldr	r2, [r7, #8]
 2286 0058 3B68     		ldr	r3, [r7]
 2287 005a 9A42     		cmp	r2, r3
 2288 005c 00D1     		bne	.L141
 2289 005e 0BE0     		b	.L137
 2290              	.L141:
 2291 0060 01E0     		b	.L142
 2292              	.L140:
1237:../fatfs/ff.c **** 			} else {
1238:../fatfs/ff.c **** 				n = 0;					/* Not a blank entry. Restart to search */
 2293              		.loc 1 1238 0
 2294 0062 0023     		movs	r3, #0
 2295 0064 BB60     		str	r3, [r7, #8]
 2296              	.L142:
1239:../fatfs/ff.c **** 			}
1240:../fatfs/ff.c **** 			res = dir_next(dj, 1);		/* Next entry with table stretch enabled */
 2297              		.loc 1 1240 0
 2298 0066 7868     		ldr	r0, [r7, #4]
 2299 0068 0121     		movs	r1, #1
 2300 006a FFF7FEFF 		bl	dir_next
 2301 006e 0346     		mov	r3, r0
 2302 0070 FB73     		strb	r3, [r7, #15]
1241:../fatfs/ff.c **** 		} while (res == FR_OK);
 2303              		.loc 1 1241 0
 2304 0072 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2305 0074 002B     		cmp	r3, #0
 2306 0076 D3D0     		beq	.L143
 2307              	.L137:
1242:../fatfs/ff.c **** 	}
1243:../fatfs/ff.c **** 	if (res == FR_NO_FILE) res = FR_DENIED;		//Patches for FatFs R0.09b come from official web site
 2308              		.loc 1 1243 0
 2309 0078 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2310 007a 042B     		cmp	r3, #4
 2311 007c 01D1     		bne	.L144
 2312              		.loc 1 1243 0 is_stmt 0 discriminator 1
 2313 007e 0723     		movs	r3, #7
 2314 0080 FB73     		strb	r3, [r7, #15]
 2315              	.L144:
1244:../fatfs/ff.c **** 	return res;
 2316              		.loc 1 1244 0 is_stmt 1
 2317 0082 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1245:../fatfs/ff.c **** }
 2318              		.loc 1 1245 0
 2319 0084 1846     		mov	r0, r3
 2320 0086 1037     		adds	r7, r7, #16
 2321              		.cfi_def_cfa_offset 8
 2322 0088 BD46     		mov	sp, r7
 2323              		.cfi_def_cfa_register 13
 2324              		@ sp needed
 2325 008a 80BD     		pop	{r7, pc}
 2326              		.cfi_endproc
 2327              	.LFE15:
 2329              		.section	.text.ld_clust,"ax",%progbits
 2330              		.align	2
 2331              		.thumb
 2332              		.thumb_func
 2334              	ld_clust:
 2335              	.LFB16:
1246:../fatfs/ff.c **** #endif
1247:../fatfs/ff.c **** 
1248:../fatfs/ff.c **** 
1249:../fatfs/ff.c **** 
1250:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1251:../fatfs/ff.c **** /* Directory handling - Load/Store start cluster number                  */
1252:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1253:../fatfs/ff.c **** 
1254:../fatfs/ff.c **** static
1255:../fatfs/ff.c **** DWORD ld_clust (
1256:../fatfs/ff.c **** 	FATFS *fs,	/* Pointer to the fs object */
1257:../fatfs/ff.c **** 	BYTE *dir	/* Pointer to the directory entry */
1258:../fatfs/ff.c **** )
1259:../fatfs/ff.c **** {
 2336              		.loc 1 1259 0
 2337              		.cfi_startproc
 2338              		@ args = 0, pretend = 0, frame = 16
 2339              		@ frame_needed = 1, uses_anonymous_args = 0
 2340              		@ link register save eliminated.
 2341 0000 80B4     		push	{r7}
 2342              		.cfi_def_cfa_offset 4
 2343              		.cfi_offset 7, -4
 2344 0002 85B0     		sub	sp, sp, #20
 2345              		.cfi_def_cfa_offset 24
 2346 0004 00AF     		add	r7, sp, #0
 2347              		.cfi_def_cfa_register 7
 2348 0006 7860     		str	r0, [r7, #4]
 2349 0008 3960     		str	r1, [r7]
1260:../fatfs/ff.c **** 	DWORD cl;
1261:../fatfs/ff.c **** 
1262:../fatfs/ff.c **** 	cl = LD_WORD(dir+DIR_FstClusLO);
 2350              		.loc 1 1262 0
 2351 000a 3B68     		ldr	r3, [r7]
 2352 000c 1B33     		adds	r3, r3, #27
 2353 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2354 0010 1B02     		lsls	r3, r3, #8
 2355 0012 9AB2     		uxth	r2, r3
 2356 0014 3B68     		ldr	r3, [r7]
 2357 0016 1A33     		adds	r3, r3, #26
 2358 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2359 001a 9BB2     		uxth	r3, r3
 2360 001c 1343     		orrs	r3, r3, r2
 2361 001e 9BB2     		uxth	r3, r3
 2362 0020 9BB2     		uxth	r3, r3
 2363 0022 FB60     		str	r3, [r7, #12]
1263:../fatfs/ff.c **** 	if (fs->fs_type == FS_FAT32)
 2364              		.loc 1 1263 0
 2365 0024 7B68     		ldr	r3, [r7, #4]
 2366 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2367 0028 032B     		cmp	r3, #3
 2368 002a 0FD1     		bne	.L147
1264:../fatfs/ff.c **** 		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
 2369              		.loc 1 1264 0
 2370 002c 3B68     		ldr	r3, [r7]
 2371 002e 1533     		adds	r3, r3, #21
 2372 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2373 0032 1B02     		lsls	r3, r3, #8
 2374 0034 9AB2     		uxth	r2, r3
 2375 0036 3B68     		ldr	r3, [r7]
 2376 0038 1433     		adds	r3, r3, #20
 2377 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2378 003c 9BB2     		uxth	r3, r3
 2379 003e 1343     		orrs	r3, r3, r2
 2380 0040 9BB2     		uxth	r3, r3
 2381 0042 9BB2     		uxth	r3, r3
 2382 0044 1B04     		lsls	r3, r3, #16
 2383 0046 FA68     		ldr	r2, [r7, #12]
 2384 0048 1343     		orrs	r3, r3, r2
 2385 004a FB60     		str	r3, [r7, #12]
 2386              	.L147:
1265:../fatfs/ff.c **** 
1266:../fatfs/ff.c **** 	return cl;
 2387              		.loc 1 1266 0
 2388 004c FB68     		ldr	r3, [r7, #12]
1267:../fatfs/ff.c **** }
 2389              		.loc 1 1267 0
 2390 004e 1846     		mov	r0, r3
 2391 0050 1437     		adds	r7, r7, #20
 2392              		.cfi_def_cfa_offset 4
 2393 0052 BD46     		mov	sp, r7
 2394              		.cfi_def_cfa_register 13
 2395              		@ sp needed
 2396 0054 5DF8047B 		ldr	r7, [sp], #4
 2397              		.cfi_restore 7
 2398              		.cfi_def_cfa_offset 0
 2399 0058 7047     		bx	lr
 2400              		.cfi_endproc
 2401              	.LFE16:
 2403 005a 00BF     		.section	.text.st_clust,"ax",%progbits
 2404              		.align	2
 2405              		.thumb
 2406              		.thumb_func
 2408              	st_clust:
 2409              	.LFB17:
1268:../fatfs/ff.c **** 
1269:../fatfs/ff.c **** 
1270:../fatfs/ff.c **** #if !_FS_READONLY
1271:../fatfs/ff.c **** static
1272:../fatfs/ff.c **** void st_clust (
1273:../fatfs/ff.c **** 	BYTE *dir,	/* Pointer to the directory entry */
1274:../fatfs/ff.c **** 	DWORD cl	/* Value to be set */
1275:../fatfs/ff.c **** )
1276:../fatfs/ff.c **** {
 2410              		.loc 1 1276 0
 2411              		.cfi_startproc
 2412              		@ args = 0, pretend = 0, frame = 8
 2413              		@ frame_needed = 1, uses_anonymous_args = 0
 2414              		@ link register save eliminated.
 2415 0000 80B4     		push	{r7}
 2416              		.cfi_def_cfa_offset 4
 2417              		.cfi_offset 7, -4
 2418 0002 83B0     		sub	sp, sp, #12
 2419              		.cfi_def_cfa_offset 16
 2420 0004 00AF     		add	r7, sp, #0
 2421              		.cfi_def_cfa_register 7
 2422 0006 7860     		str	r0, [r7, #4]
 2423 0008 3960     		str	r1, [r7]
1277:../fatfs/ff.c **** 	ST_WORD(dir+DIR_FstClusLO, cl);
 2424              		.loc 1 1277 0
 2425 000a 7B68     		ldr	r3, [r7, #4]
 2426 000c 1A33     		adds	r3, r3, #26
 2427 000e 3A68     		ldr	r2, [r7]
 2428 0010 D2B2     		uxtb	r2, r2
 2429 0012 1A70     		strb	r2, [r3]
 2430 0014 7B68     		ldr	r3, [r7, #4]
 2431 0016 1B33     		adds	r3, r3, #27
 2432 0018 3A68     		ldr	r2, [r7]
 2433 001a 92B2     		uxth	r2, r2
 2434 001c 120A     		lsrs	r2, r2, #8
 2435 001e 92B2     		uxth	r2, r2
 2436 0020 D2B2     		uxtb	r2, r2
 2437 0022 1A70     		strb	r2, [r3]
1278:../fatfs/ff.c **** 	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 2438              		.loc 1 1278 0
 2439 0024 7B68     		ldr	r3, [r7, #4]
 2440 0026 1433     		adds	r3, r3, #20
 2441 0028 3A68     		ldr	r2, [r7]
 2442 002a 120C     		lsrs	r2, r2, #16
 2443 002c D2B2     		uxtb	r2, r2
 2444 002e 1A70     		strb	r2, [r3]
 2445 0030 7B68     		ldr	r3, [r7, #4]
 2446 0032 1533     		adds	r3, r3, #21
 2447 0034 3A68     		ldr	r2, [r7]
 2448 0036 120C     		lsrs	r2, r2, #16
 2449 0038 92B2     		uxth	r2, r2
 2450 003a 120A     		lsrs	r2, r2, #8
 2451 003c 92B2     		uxth	r2, r2
 2452 003e D2B2     		uxtb	r2, r2
 2453 0040 1A70     		strb	r2, [r3]
1279:../fatfs/ff.c **** }
 2454              		.loc 1 1279 0
 2455 0042 0C37     		adds	r7, r7, #12
 2456              		.cfi_def_cfa_offset 4
 2457 0044 BD46     		mov	sp, r7
 2458              		.cfi_def_cfa_register 13
 2459              		@ sp needed
 2460 0046 5DF8047B 		ldr	r7, [sp], #4
 2461              		.cfi_restore 7
 2462              		.cfi_def_cfa_offset 0
 2463 004a 7047     		bx	lr
 2464              		.cfi_endproc
 2465              	.LFE17:
 2467              		.section	.rodata.LfnOfs,"a",%progbits
 2468              		.align	2
 2471              	LfnOfs:
 2472 0000 01       		.byte	1
 2473 0001 03       		.byte	3
 2474 0002 05       		.byte	5
 2475 0003 07       		.byte	7
 2476 0004 09       		.byte	9
 2477 0005 0E       		.byte	14
 2478 0006 10       		.byte	16
 2479 0007 12       		.byte	18
 2480 0008 14       		.byte	20
 2481 0009 16       		.byte	22
 2482 000a 18       		.byte	24
 2483 000b 1C       		.byte	28
 2484 000c 1E       		.byte	30
 2485              		.section	.text.cmp_lfn,"ax",%progbits
 2486              		.align	2
 2487              		.thumb
 2488              		.thumb_func
 2490              	cmp_lfn:
 2491              	.LFB18:
1280:../fatfs/ff.c **** #endif
1281:../fatfs/ff.c **** 
1282:../fatfs/ff.c **** 
1283:../fatfs/ff.c **** 
1284:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1285:../fatfs/ff.c **** /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
1286:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1287:../fatfs/ff.c **** #if _USE_LFN
1288:../fatfs/ff.c **** static
1289:../fatfs/ff.c **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN chars in the directory 
1290:../fatfs/ff.c **** 
1291:../fatfs/ff.c **** 
1292:../fatfs/ff.c **** static
1293:../fatfs/ff.c **** int cmp_lfn (			/* 1:Matched, 0:Not matched */
1294:../fatfs/ff.c **** 	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
1295:../fatfs/ff.c **** 	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
1296:../fatfs/ff.c **** )
1297:../fatfs/ff.c **** {
 2492              		.loc 1 1297 0
 2493              		.cfi_startproc
 2494              		@ args = 0, pretend = 0, frame = 24
 2495              		@ frame_needed = 1, uses_anonymous_args = 0
 2496 0000 80B5     		push	{r7, lr}
 2497              		.cfi_def_cfa_offset 8
 2498              		.cfi_offset 7, -8
 2499              		.cfi_offset 14, -4
 2500 0002 86B0     		sub	sp, sp, #24
 2501              		.cfi_def_cfa_offset 32
 2502 0004 00AF     		add	r7, sp, #0
 2503              		.cfi_def_cfa_register 7
 2504 0006 7860     		str	r0, [r7, #4]
 2505 0008 3960     		str	r1, [r7]
1298:../fatfs/ff.c **** 	UINT i, s;
1299:../fatfs/ff.c **** 	WCHAR wc, uc;
1300:../fatfs/ff.c **** 
1301:../fatfs/ff.c **** 
1302:../fatfs/ff.c **** 	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
 2506              		.loc 1 1302 0
 2507 000a 3B68     		ldr	r3, [r7]
 2508 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2509 000e 23F04003 		bic	r3, r3, #64
 2510 0012 5A1E     		subs	r2, r3, #1
 2511 0014 1346     		mov	r3, r2
 2512 0016 5B00     		lsls	r3, r3, #1
 2513 0018 1344     		add	r3, r3, r2
 2514 001a 9B00     		lsls	r3, r3, #2
 2515 001c 1344     		add	r3, r3, r2
 2516 001e 7B61     		str	r3, [r7, #20]
1303:../fatfs/ff.c **** 	s = 0; wc = 1;
 2517              		.loc 1 1303 0
 2518 0020 0023     		movs	r3, #0
 2519 0022 3B61     		str	r3, [r7, #16]
 2520 0024 0123     		movs	r3, #1
 2521 0026 FB81     		strh	r3, [r7, #14]	@ movhi
 2522              	.L155:
1304:../fatfs/ff.c **** 	do {
1305:../fatfs/ff.c **** 		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 2523              		.loc 1 1305 0
 2524 0028 2B4A     		ldr	r2, .L157
 2525 002a 3B69     		ldr	r3, [r7, #16]
 2526 002c 1344     		add	r3, r3, r2
 2527 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2528 0030 0133     		adds	r3, r3, #1
 2529 0032 3A68     		ldr	r2, [r7]
 2530 0034 1344     		add	r3, r3, r2
 2531 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2532 0038 1B02     		lsls	r3, r3, #8
 2533 003a 99B2     		uxth	r1, r3
 2534 003c 264A     		ldr	r2, .L157
 2535 003e 3B69     		ldr	r3, [r7, #16]
 2536 0040 1344     		add	r3, r3, r2
 2537 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2538 0044 1A46     		mov	r2, r3
 2539 0046 3B68     		ldr	r3, [r7]
 2540 0048 1344     		add	r3, r3, r2
 2541 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2542 004c 9BB2     		uxth	r3, r3
 2543 004e 0A46     		mov	r2, r1	@ movhi
 2544 0050 1343     		orrs	r3, r3, r2
 2545 0052 9BB2     		uxth	r3, r3
 2546 0054 BB81     		strh	r3, [r7, #12]	@ movhi
1306:../fatfs/ff.c **** 		if (wc) {	/* Last char has not been processed */
 2547              		.loc 1 1306 0
 2548 0056 FB89     		ldrh	r3, [r7, #14]
 2549 0058 002B     		cmp	r3, #0
 2550 005a 19D0     		beq	.L151
1307:../fatfs/ff.c **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 2551              		.loc 1 1307 0
 2552 005c BB89     		ldrh	r3, [r7, #12]
 2553 005e 1846     		mov	r0, r3
 2554 0060 FFF7FEFF 		bl	ff_wtoupper
 2555 0064 0346     		mov	r3, r0
 2556 0066 FB81     		strh	r3, [r7, #14]	@ movhi
1308:../fatfs/ff.c **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 2557              		.loc 1 1308 0
 2558 0068 7B69     		ldr	r3, [r7, #20]
 2559 006a FE2B     		cmp	r3, #254
 2560 006c 0ED8     		bhi	.L152
 2561              		.loc 1 1308 0 is_stmt 0 discriminator 1
 2562 006e 7B69     		ldr	r3, [r7, #20]
 2563 0070 5A1C     		adds	r2, r3, #1
 2564 0072 7A61     		str	r2, [r7, #20]
 2565 0074 5B00     		lsls	r3, r3, #1
 2566 0076 7A68     		ldr	r2, [r7, #4]
 2567 0078 1344     		add	r3, r3, r2
 2568 007a 1B88     		ldrh	r3, [r3]
 2569 007c 1846     		mov	r0, r3
 2570 007e FFF7FEFF 		bl	ff_wtoupper
 2571 0082 0346     		mov	r3, r0
 2572 0084 1A46     		mov	r2, r3
 2573 0086 FB89     		ldrh	r3, [r7, #14]
 2574 0088 9342     		cmp	r3, r2
 2575 008a 08D0     		beq	.L153
 2576              	.L152:
1309:../fatfs/ff.c **** 				return 0;				/* Not matched */
 2577              		.loc 1 1309 0 is_stmt 1
 2578 008c 0023     		movs	r3, #0
 2579 008e 1FE0     		b	.L154
 2580              	.L151:
1310:../fatfs/ff.c **** 		} else {
1311:../fatfs/ff.c **** 			if (uc != 0xFFFF) return 0;	/* Check filler */
 2581              		.loc 1 1311 0
 2582 0090 BB89     		ldrh	r3, [r7, #12]
 2583 0092 4FF6FF72 		movw	r2, #65535
 2584 0096 9342     		cmp	r3, r2
 2585 0098 01D0     		beq	.L153
 2586              		.loc 1 1311 0 is_stmt 0 discriminator 1
 2587 009a 0023     		movs	r3, #0
 2588 009c 18E0     		b	.L154
 2589              	.L153:
1312:../fatfs/ff.c **** 		}
1313:../fatfs/ff.c **** 	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
 2590              		.loc 1 1313 0 is_stmt 1
 2591 009e 3B69     		ldr	r3, [r7, #16]
 2592 00a0 0133     		adds	r3, r3, #1
 2593 00a2 3B61     		str	r3, [r7, #16]
 2594 00a4 3B69     		ldr	r3, [r7, #16]
 2595 00a6 0C2B     		cmp	r3, #12
 2596 00a8 BED9     		bls	.L155
1314:../fatfs/ff.c **** 
1315:../fatfs/ff.c **** 	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
 2597              		.loc 1 1315 0
 2598 00aa 3B68     		ldr	r3, [r7]
 2599 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2600 00ae 03F04003 		and	r3, r3, #64
 2601 00b2 002B     		cmp	r3, #0
 2602 00b4 0BD0     		beq	.L156
 2603              		.loc 1 1315 0 is_stmt 0 discriminator 1
 2604 00b6 FB89     		ldrh	r3, [r7, #14]
 2605 00b8 002B     		cmp	r3, #0
 2606 00ba 08D0     		beq	.L156
 2607              		.loc 1 1315 0 discriminator 2
 2608 00bc 7B69     		ldr	r3, [r7, #20]
 2609 00be 5B00     		lsls	r3, r3, #1
 2610 00c0 7A68     		ldr	r2, [r7, #4]
 2611 00c2 1344     		add	r3, r3, r2
 2612 00c4 1B88     		ldrh	r3, [r3]
 2613 00c6 002B     		cmp	r3, #0
 2614 00c8 01D0     		beq	.L156
1316:../fatfs/ff.c **** 		return 0;
 2615              		.loc 1 1316 0 is_stmt 1
 2616 00ca 0023     		movs	r3, #0
 2617 00cc 00E0     		b	.L154
 2618              	.L156:
1317:../fatfs/ff.c **** 
1318:../fatfs/ff.c **** 	return 1;						/* The part of LFN matched */
 2619              		.loc 1 1318 0
 2620 00ce 0123     		movs	r3, #1
 2621              	.L154:
1319:../fatfs/ff.c **** }
 2622              		.loc 1 1319 0
 2623 00d0 1846     		mov	r0, r3
 2624 00d2 1837     		adds	r7, r7, #24
 2625              		.cfi_def_cfa_offset 8
 2626 00d4 BD46     		mov	sp, r7
 2627              		.cfi_def_cfa_register 13
 2628              		@ sp needed
 2629 00d6 80BD     		pop	{r7, pc}
 2630              	.L158:
 2631              		.align	2
 2632              	.L157:
 2633 00d8 00000000 		.word	LfnOfs
 2634              		.cfi_endproc
 2635              	.LFE18:
 2637              		.section	.text.pick_lfn,"ax",%progbits
 2638              		.align	2
 2639              		.thumb
 2640              		.thumb_func
 2642              	pick_lfn:
 2643              	.LFB19:
1320:../fatfs/ff.c **** 
1321:../fatfs/ff.c **** 
1322:../fatfs/ff.c **** 
1323:../fatfs/ff.c **** static
1324:../fatfs/ff.c **** int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
1325:../fatfs/ff.c **** 	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
1326:../fatfs/ff.c **** 	BYTE *dir			/* Pointer to the directory entry */
1327:../fatfs/ff.c **** )
1328:../fatfs/ff.c **** {
 2644              		.loc 1 1328 0
 2645              		.cfi_startproc
 2646              		@ args = 0, pretend = 0, frame = 24
 2647              		@ frame_needed = 1, uses_anonymous_args = 0
 2648              		@ link register save eliminated.
 2649 0000 80B4     		push	{r7}
 2650              		.cfi_def_cfa_offset 4
 2651              		.cfi_offset 7, -4
 2652 0002 87B0     		sub	sp, sp, #28
 2653              		.cfi_def_cfa_offset 32
 2654 0004 00AF     		add	r7, sp, #0
 2655              		.cfi_def_cfa_register 7
 2656 0006 7860     		str	r0, [r7, #4]
 2657 0008 3960     		str	r1, [r7]
1329:../fatfs/ff.c **** 	UINT i, s;
1330:../fatfs/ff.c **** 	WCHAR wc, uc;
1331:../fatfs/ff.c **** 
1332:../fatfs/ff.c **** 
1333:../fatfs/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 2658              		.loc 1 1333 0
 2659 000a 3B68     		ldr	r3, [r7]
 2660 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2661 000e 03F03F03 		and	r3, r3, #63
 2662 0012 5A1E     		subs	r2, r3, #1
 2663 0014 1346     		mov	r3, r2
 2664 0016 5B00     		lsls	r3, r3, #1
 2665 0018 1344     		add	r3, r3, r2
 2666 001a 9B00     		lsls	r3, r3, #2
 2667 001c 1344     		add	r3, r3, r2
 2668 001e 7B61     		str	r3, [r7, #20]
1334:../fatfs/ff.c **** 
1335:../fatfs/ff.c **** 	s = 0; wc = 1;
 2669              		.loc 1 1335 0
 2670 0020 0023     		movs	r3, #0
 2671 0022 3B61     		str	r3, [r7, #16]
 2672 0024 0123     		movs	r3, #1
 2673 0026 FB81     		strh	r3, [r7, #14]	@ movhi
 2674              	.L164:
1336:../fatfs/ff.c **** 	do {
1337:../fatfs/ff.c **** 		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 2675              		.loc 1 1337 0
 2676 0028 274A     		ldr	r2, .L167
 2677 002a 3B69     		ldr	r3, [r7, #16]
 2678 002c 1344     		add	r3, r3, r2
 2679 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2680 0030 0133     		adds	r3, r3, #1
 2681 0032 3A68     		ldr	r2, [r7]
 2682 0034 1344     		add	r3, r3, r2
 2683 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2684 0038 1B02     		lsls	r3, r3, #8
 2685 003a 99B2     		uxth	r1, r3
 2686 003c 224A     		ldr	r2, .L167
 2687 003e 3B69     		ldr	r3, [r7, #16]
 2688 0040 1344     		add	r3, r3, r2
 2689 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2690 0044 1A46     		mov	r2, r3
 2691 0046 3B68     		ldr	r3, [r7]
 2692 0048 1344     		add	r3, r3, r2
 2693 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2694 004c 9BB2     		uxth	r3, r3
 2695 004e 0A46     		mov	r2, r1	@ movhi
 2696 0050 1343     		orrs	r3, r3, r2
 2697 0052 9BB2     		uxth	r3, r3
 2698 0054 BB81     		strh	r3, [r7, #12]	@ movhi
1338:../fatfs/ff.c **** 		if (wc) {	/* Last char has not been processed */
 2699              		.loc 1 1338 0
 2700 0056 FB89     		ldrh	r3, [r7, #14]
 2701 0058 002B     		cmp	r3, #0
 2702 005a 0FD0     		beq	.L160
1339:../fatfs/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 2703              		.loc 1 1339 0
 2704 005c 7B69     		ldr	r3, [r7, #20]
 2705 005e FE2B     		cmp	r3, #254
 2706 0060 01D9     		bls	.L161
 2707              		.loc 1 1339 0 is_stmt 0 discriminator 1
 2708 0062 0023     		movs	r3, #0
 2709 0064 29E0     		b	.L162
 2710              	.L161:
1340:../fatfs/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
 2711              		.loc 1 1340 0 is_stmt 1
 2712 0066 7B69     		ldr	r3, [r7, #20]
 2713 0068 5A1C     		adds	r2, r3, #1
 2714 006a 7A61     		str	r2, [r7, #20]
 2715 006c 5B00     		lsls	r3, r3, #1
 2716 006e 7A68     		ldr	r2, [r7, #4]
 2717 0070 1344     		add	r3, r3, r2
 2718 0072 BA89     		ldrh	r2, [r7, #12]	@ movhi
 2719 0074 FA81     		strh	r2, [r7, #14]	@ movhi
 2720 0076 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2721 0078 1A80     		strh	r2, [r3]	@ movhi
 2722 007a 06E0     		b	.L163
 2723              	.L160:
1341:../fatfs/ff.c **** 		} else {
1342:../fatfs/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
 2724              		.loc 1 1342 0
 2725 007c BB89     		ldrh	r3, [r7, #12]
 2726 007e 4FF6FF72 		movw	r2, #65535
 2727 0082 9342     		cmp	r3, r2
 2728 0084 01D0     		beq	.L163
 2729              		.loc 1 1342 0 is_stmt 0 discriminator 1
 2730 0086 0023     		movs	r3, #0
 2731 0088 17E0     		b	.L162
 2732              	.L163:
1343:../fatfs/ff.c **** 		}
1344:../fatfs/ff.c **** 	} while (++s < 13);						/* Read all character in the entry */
 2733              		.loc 1 1344 0 is_stmt 1
 2734 008a 3B69     		ldr	r3, [r7, #16]
 2735 008c 0133     		adds	r3, r3, #1
 2736 008e 3B61     		str	r3, [r7, #16]
 2737 0090 3B69     		ldr	r3, [r7, #16]
 2738 0092 0C2B     		cmp	r3, #12
 2739 0094 C8D9     		bls	.L164
1345:../fatfs/ff.c **** 
1346:../fatfs/ff.c **** 	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
 2740              		.loc 1 1346 0
 2741 0096 3B68     		ldr	r3, [r7]
 2742 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2743 009a 03F04003 		and	r3, r3, #64
 2744 009e 002B     		cmp	r3, #0
 2745 00a0 0AD0     		beq	.L165
1347:../fatfs/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 2746              		.loc 1 1347 0
 2747 00a2 7B69     		ldr	r3, [r7, #20]
 2748 00a4 FE2B     		cmp	r3, #254
 2749 00a6 01D9     		bls	.L166
 2750              		.loc 1 1347 0 is_stmt 0 discriminator 1
 2751 00a8 0023     		movs	r3, #0
 2752 00aa 06E0     		b	.L162
 2753              	.L166:
1348:../fatfs/ff.c **** 		lfnbuf[i] = 0;
 2754              		.loc 1 1348 0 is_stmt 1
 2755 00ac 7B69     		ldr	r3, [r7, #20]
 2756 00ae 5B00     		lsls	r3, r3, #1
 2757 00b0 7A68     		ldr	r2, [r7, #4]
 2758 00b2 1344     		add	r3, r3, r2
 2759 00b4 0022     		movs	r2, #0
 2760 00b6 1A80     		strh	r2, [r3]	@ movhi
 2761              	.L165:
1349:../fatfs/ff.c **** 	}
1350:../fatfs/ff.c **** 
1351:../fatfs/ff.c **** 	return 1;
 2762              		.loc 1 1351 0
 2763 00b8 0123     		movs	r3, #1
 2764              	.L162:
1352:../fatfs/ff.c **** }
 2765              		.loc 1 1352 0
 2766 00ba 1846     		mov	r0, r3
 2767 00bc 1C37     		adds	r7, r7, #28
 2768              		.cfi_def_cfa_offset 4
 2769 00be BD46     		mov	sp, r7
 2770              		.cfi_def_cfa_register 13
 2771              		@ sp needed
 2772 00c0 5DF8047B 		ldr	r7, [sp], #4
 2773              		.cfi_restore 7
 2774              		.cfi_def_cfa_offset 0
 2775 00c4 7047     		bx	lr
 2776              	.L168:
 2777 00c6 00BF     		.align	2
 2778              	.L167:
 2779 00c8 00000000 		.word	LfnOfs
 2780              		.cfi_endproc
 2781              	.LFE19:
 2783              		.section	.text.fit_lfn,"ax",%progbits
 2784              		.align	2
 2785              		.thumb
 2786              		.thumb_func
 2788              	fit_lfn:
 2789              	.LFB20:
1353:../fatfs/ff.c **** 
1354:../fatfs/ff.c **** 
1355:../fatfs/ff.c **** #if !_FS_READONLY
1356:../fatfs/ff.c **** static
1357:../fatfs/ff.c **** void fit_lfn (
1358:../fatfs/ff.c **** 	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
1359:../fatfs/ff.c **** 	BYTE *dir,				/* Pointer to the directory entry */
1360:../fatfs/ff.c **** 	BYTE ord,				/* LFN order (1-20) */
1361:../fatfs/ff.c **** 	BYTE sum				/* SFN sum */
1362:../fatfs/ff.c **** )
1363:../fatfs/ff.c **** {
 2790              		.loc 1 1363 0
 2791              		.cfi_startproc
 2792              		@ args = 0, pretend = 0, frame = 32
 2793              		@ frame_needed = 1, uses_anonymous_args = 0
 2794              		@ link register save eliminated.
 2795 0000 80B4     		push	{r7}
 2796              		.cfi_def_cfa_offset 4
 2797              		.cfi_offset 7, -4
 2798 0002 89B0     		sub	sp, sp, #36
 2799              		.cfi_def_cfa_offset 40
 2800 0004 00AF     		add	r7, sp, #0
 2801              		.cfi_def_cfa_register 7
 2802 0006 F860     		str	r0, [r7, #12]
 2803 0008 B960     		str	r1, [r7, #8]
 2804 000a 1146     		mov	r1, r2
 2805 000c 1A46     		mov	r2, r3
 2806 000e 0B46     		mov	r3, r1
 2807 0010 FB71     		strb	r3, [r7, #7]
 2808 0012 1346     		mov	r3, r2
 2809 0014 BB71     		strb	r3, [r7, #6]
1364:../fatfs/ff.c **** 	UINT i, s;
1365:../fatfs/ff.c **** 	WCHAR wc;
1366:../fatfs/ff.c **** 
1367:../fatfs/ff.c **** 
1368:../fatfs/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set check sum */
 2810              		.loc 1 1368 0
 2811 0016 BB68     		ldr	r3, [r7, #8]
 2812 0018 0D33     		adds	r3, r3, #13
 2813 001a BA79     		ldrb	r2, [r7, #6]
 2814 001c 1A70     		strb	r2, [r3]
1369:../fatfs/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 2815              		.loc 1 1369 0
 2816 001e BB68     		ldr	r3, [r7, #8]
 2817 0020 0B33     		adds	r3, r3, #11
 2818 0022 0F22     		movs	r2, #15
 2819 0024 1A70     		strb	r2, [r3]
1370:../fatfs/ff.c **** 	dir[LDIR_Type] = 0;
 2820              		.loc 1 1370 0
 2821 0026 BB68     		ldr	r3, [r7, #8]
 2822 0028 0C33     		adds	r3, r3, #12
 2823 002a 0022     		movs	r2, #0
 2824 002c 1A70     		strb	r2, [r3]
1371:../fatfs/ff.c **** 	ST_WORD(dir+LDIR_FstClusLO, 0);
 2825              		.loc 1 1371 0
 2826 002e BB68     		ldr	r3, [r7, #8]
 2827 0030 1A33     		adds	r3, r3, #26
 2828 0032 0022     		movs	r2, #0
 2829 0034 1A70     		strb	r2, [r3]
 2830 0036 BB68     		ldr	r3, [r7, #8]
 2831 0038 1B33     		adds	r3, r3, #27
 2832 003a 0022     		movs	r2, #0
 2833 003c 1A70     		strb	r2, [r3]
1372:../fatfs/ff.c **** 
1373:../fatfs/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 2834              		.loc 1 1373 0
 2835 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2836 0040 5A1E     		subs	r2, r3, #1
 2837 0042 1346     		mov	r3, r2
 2838 0044 5B00     		lsls	r3, r3, #1
 2839 0046 1344     		add	r3, r3, r2
 2840 0048 9B00     		lsls	r3, r3, #2
 2841 004a 1344     		add	r3, r3, r2
 2842 004c FB61     		str	r3, [r7, #28]
1374:../fatfs/ff.c **** 	s = wc = 0;
 2843              		.loc 1 1374 0
 2844 004e 0023     		movs	r3, #0
 2845 0050 FB82     		strh	r3, [r7, #22]	@ movhi
 2846 0052 0023     		movs	r3, #0
 2847 0054 BB61     		str	r3, [r7, #24]
 2848              	.L172:
1375:../fatfs/ff.c **** 	do {
1376:../fatfs/ff.c **** 		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 2849              		.loc 1 1376 0
 2850 0056 FB8A     		ldrh	r3, [r7, #22]
 2851 0058 4FF6FF72 		movw	r2, #65535
 2852 005c 9342     		cmp	r3, r2
 2853 005e 07D0     		beq	.L170
 2854              		.loc 1 1376 0 is_stmt 0 discriminator 1
 2855 0060 FB69     		ldr	r3, [r7, #28]
 2856 0062 5A1C     		adds	r2, r3, #1
 2857 0064 FA61     		str	r2, [r7, #28]
 2858 0066 5B00     		lsls	r3, r3, #1
 2859 0068 FA68     		ldr	r2, [r7, #12]
 2860 006a 1344     		add	r3, r3, r2
 2861 006c 1B88     		ldrh	r3, [r3]	@ movhi
 2862 006e FB82     		strh	r3, [r7, #22]	@ movhi
 2863              	.L170:
1377:../fatfs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 2864              		.loc 1 1377 0 is_stmt 1
 2865 0070 1C4A     		ldr	r2, .L175
 2866 0072 BB69     		ldr	r3, [r7, #24]
 2867 0074 1344     		add	r3, r3, r2
 2868 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2869 0078 1A46     		mov	r2, r3
 2870 007a BB68     		ldr	r3, [r7, #8]
 2871 007c 1344     		add	r3, r3, r2
 2872 007e FA8A     		ldrh	r2, [r7, #22]	@ movhi
 2873 0080 D2B2     		uxtb	r2, r2
 2874 0082 1A70     		strb	r2, [r3]
 2875 0084 174A     		ldr	r2, .L175
 2876 0086 BB69     		ldr	r3, [r7, #24]
 2877 0088 1344     		add	r3, r3, r2
 2878 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2879 008c 0133     		adds	r3, r3, #1
 2880 008e BA68     		ldr	r2, [r7, #8]
 2881 0090 1344     		add	r3, r3, r2
 2882 0092 FA8A     		ldrh	r2, [r7, #22]
 2883 0094 120A     		lsrs	r2, r2, #8
 2884 0096 92B2     		uxth	r2, r2
 2885 0098 D2B2     		uxtb	r2, r2
 2886 009a 1A70     		strb	r2, [r3]
1378:../fatfs/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 2887              		.loc 1 1378 0
 2888 009c FB8A     		ldrh	r3, [r7, #22]
 2889 009e 002B     		cmp	r3, #0
 2890 00a0 02D1     		bne	.L171
 2891              		.loc 1 1378 0 is_stmt 0 discriminator 1
 2892 00a2 4FF6FF73 		movw	r3, #65535
 2893 00a6 FB82     		strh	r3, [r7, #22]	@ movhi
 2894              	.L171:
1379:../fatfs/ff.c **** 	} while (++s < 13);
 2895              		.loc 1 1379 0 is_stmt 1
 2896 00a8 BB69     		ldr	r3, [r7, #24]
 2897 00aa 0133     		adds	r3, r3, #1
 2898 00ac BB61     		str	r3, [r7, #24]
 2899 00ae BB69     		ldr	r3, [r7, #24]
 2900 00b0 0C2B     		cmp	r3, #12
 2901 00b2 D0D9     		bls	.L172
1380:../fatfs/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
 2902              		.loc 1 1380 0
 2903 00b4 FB8A     		ldrh	r3, [r7, #22]
 2904 00b6 4FF6FF72 		movw	r2, #65535
 2905 00ba 9342     		cmp	r3, r2
 2906 00bc 06D0     		beq	.L173
 2907              		.loc 1 1380 0 is_stmt 0 discriminator 2
 2908 00be FB69     		ldr	r3, [r7, #28]
 2909 00c0 5B00     		lsls	r3, r3, #1
 2910 00c2 FA68     		ldr	r2, [r7, #12]
 2911 00c4 1344     		add	r3, r3, r2
 2912 00c6 1B88     		ldrh	r3, [r3]
 2913 00c8 002B     		cmp	r3, #0
 2914 00ca 03D1     		bne	.L174
 2915              	.L173:
 2916              		.loc 1 1380 0 discriminator 3
 2917 00cc FB79     		ldrb	r3, [r7, #7]
 2918 00ce 43F04003 		orr	r3, r3, #64
 2919 00d2 FB71     		strb	r3, [r7, #7]
 2920              	.L174:
1381:../fatfs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 2921              		.loc 1 1381 0 is_stmt 1
 2922 00d4 BB68     		ldr	r3, [r7, #8]
 2923 00d6 FA79     		ldrb	r2, [r7, #7]
 2924 00d8 1A70     		strb	r2, [r3]
1382:../fatfs/ff.c **** }
 2925              		.loc 1 1382 0
 2926 00da 2437     		adds	r7, r7, #36
 2927              		.cfi_def_cfa_offset 4
 2928 00dc BD46     		mov	sp, r7
 2929              		.cfi_def_cfa_register 13
 2930              		@ sp needed
 2931 00de 5DF8047B 		ldr	r7, [sp], #4
 2932              		.cfi_restore 7
 2933              		.cfi_def_cfa_offset 0
 2934 00e2 7047     		bx	lr
 2935              	.L176:
 2936              		.align	2
 2937              	.L175:
 2938 00e4 00000000 		.word	LfnOfs
 2939              		.cfi_endproc
 2940              	.LFE20:
 2942              		.section	.text.gen_numname,"ax",%progbits
 2943              		.align	2
 2944              		.global	gen_numname
 2945              		.thumb
 2946              		.thumb_func
 2948              	gen_numname:
 2949              	.LFB21:
1383:../fatfs/ff.c **** 
1384:../fatfs/ff.c **** #endif
1385:../fatfs/ff.c **** #endif
1386:../fatfs/ff.c **** 
1387:../fatfs/ff.c **** 
1388:../fatfs/ff.c **** 
1389:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1390:../fatfs/ff.c **** /* Create numbered name                                                  */
1391:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1392:../fatfs/ff.c **** #if _USE_LFN
1393:../fatfs/ff.c **** void gen_numname (
1394:../fatfs/ff.c **** 	BYTE *dst,			/* Pointer to generated SFN */
1395:../fatfs/ff.c **** 	const BYTE *src,	/* Pointer to source SFN to be modified */
1396:../fatfs/ff.c **** 	const WCHAR *lfn,	/* Pointer to LFN */
1397:../fatfs/ff.c **** 	WORD seq			/* Sequence number */
1398:../fatfs/ff.c **** )
1399:../fatfs/ff.c **** {
 2950              		.loc 1 1399 0
 2951              		.cfi_startproc
 2952              		@ args = 0, pretend = 0, frame = 40
 2953              		@ frame_needed = 1, uses_anonymous_args = 0
 2954 0000 80B5     		push	{r7, lr}
 2955              		.cfi_def_cfa_offset 8
 2956              		.cfi_offset 7, -8
 2957              		.cfi_offset 14, -4
 2958 0002 8AB0     		sub	sp, sp, #40
 2959              		.cfi_def_cfa_offset 48
 2960 0004 00AF     		add	r7, sp, #0
 2961              		.cfi_def_cfa_register 7
 2962 0006 F860     		str	r0, [r7, #12]
 2963 0008 B960     		str	r1, [r7, #8]
 2964 000a 7A60     		str	r2, [r7, #4]
 2965 000c 7B80     		strh	r3, [r7, #2]	@ movhi
1400:../fatfs/ff.c **** 	BYTE ns[8], c;
1401:../fatfs/ff.c **** 	UINT i, j;
1402:../fatfs/ff.c **** 
1403:../fatfs/ff.c **** 
1404:../fatfs/ff.c **** 	mem_cpy(dst, src, 11);
 2966              		.loc 1 1404 0
 2967 000e F868     		ldr	r0, [r7, #12]
 2968 0010 B968     		ldr	r1, [r7, #8]
 2969 0012 0B22     		movs	r2, #11
 2970 0014 FFF7FEFF 		bl	mem_cpy
1405:../fatfs/ff.c **** 
1406:../fatfs/ff.c **** 	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 2971              		.loc 1 1406 0
 2972 0018 7B88     		ldrh	r3, [r7, #2]
 2973 001a 052B     		cmp	r3, #5
 2974 001c 0FD9     		bls	.L178
 2975              	.L179:
1407:../fatfs/ff.c **** 		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
 2976              		.loc 1 1407 0 discriminator 1
 2977 001e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2978 0020 9AB2     		uxth	r2, r3
 2979 0022 5208     		lsrs	r2, r2, #1
 2980 0024 DB03     		lsls	r3, r3, #15
 2981 0026 1343     		orrs	r3, r3, r2
 2982 0028 9AB2     		uxth	r2, r3
 2983 002a 7B68     		ldr	r3, [r7, #4]
 2984 002c 991C     		adds	r1, r3, #2
 2985 002e 7960     		str	r1, [r7, #4]
 2986 0030 1B88     		ldrh	r3, [r3]
 2987 0032 1344     		add	r3, r3, r2
 2988 0034 7B80     		strh	r3, [r7, #2]	@ movhi
 2989 0036 7B68     		ldr	r3, [r7, #4]
 2990 0038 1B88     		ldrh	r3, [r3]
 2991 003a 002B     		cmp	r3, #0
 2992 003c EFD1     		bne	.L179
 2993              	.L178:
1408:../fatfs/ff.c **** 	}
1409:../fatfs/ff.c **** 
1410:../fatfs/ff.c **** 	/* itoa (hexdecimal) */
1411:../fatfs/ff.c **** 	i = 7;
 2994              		.loc 1 1411 0
 2995 003e 0723     		movs	r3, #7
 2996 0040 3B62     		str	r3, [r7, #32]
 2997              	.L181:
1412:../fatfs/ff.c **** 	do {
1413:../fatfs/ff.c **** 		c = (seq % 16) + '0';
 2998              		.loc 1 1413 0
 2999 0042 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3000 0044 DBB2     		uxtb	r3, r3
 3001 0046 03F00F03 		and	r3, r3, #15
 3002 004a DBB2     		uxtb	r3, r3
 3003 004c 3033     		adds	r3, r3, #48
 3004 004e 87F82730 		strb	r3, [r7, #39]
1414:../fatfs/ff.c **** 		if (c > '9') c += 7;
 3005              		.loc 1 1414 0
 3006 0052 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 3007 0056 392B     		cmp	r3, #57
 3008 0058 04D9     		bls	.L180
 3009              		.loc 1 1414 0 is_stmt 0 discriminator 1
 3010 005a 97F82730 		ldrb	r3, [r7, #39]
 3011 005e 0733     		adds	r3, r3, #7
 3012 0060 87F82730 		strb	r3, [r7, #39]
 3013              	.L180:
1415:../fatfs/ff.c **** 		ns[i--] = c;
 3014              		.loc 1 1415 0 is_stmt 1
 3015 0064 3B6A     		ldr	r3, [r7, #32]
 3016 0066 5A1E     		subs	r2, r3, #1
 3017 0068 3A62     		str	r2, [r7, #32]
 3018 006a 07F12802 		add	r2, r7, #40
 3019 006e 1344     		add	r3, r3, r2
 3020 0070 97F82720 		ldrb	r2, [r7, #39]
 3021 0074 03F8142C 		strb	r2, [r3, #-20]
1416:../fatfs/ff.c **** 		seq /= 16;
 3022              		.loc 1 1416 0
 3023 0078 7B88     		ldrh	r3, [r7, #2]
 3024 007a 1B09     		lsrs	r3, r3, #4
 3025 007c 7B80     		strh	r3, [r7, #2]	@ movhi
1417:../fatfs/ff.c **** 	} while (seq);
 3026              		.loc 1 1417 0
 3027 007e 7B88     		ldrh	r3, [r7, #2]
 3028 0080 002B     		cmp	r3, #0
 3029 0082 DED1     		bne	.L181
1418:../fatfs/ff.c **** 	ns[i] = '~';
 3030              		.loc 1 1418 0
 3031 0084 07F11402 		add	r2, r7, #20
 3032 0088 3B6A     		ldr	r3, [r7, #32]
 3033 008a 1344     		add	r3, r3, r2
 3034 008c 7E22     		movs	r2, #126
 3035 008e 1A70     		strb	r2, [r3]
1419:../fatfs/ff.c **** 
1420:../fatfs/ff.c **** 	/* Append the number */
1421:../fatfs/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
 3036              		.loc 1 1421 0
 3037 0090 0023     		movs	r3, #0
 3038 0092 FB61     		str	r3, [r7, #28]
 3039 0094 02E0     		b	.L182
 3040              	.L184:
 3041              		.loc 1 1421 0 is_stmt 0 discriminator 2
 3042 0096 FB69     		ldr	r3, [r7, #28]
 3043 0098 0133     		adds	r3, r3, #1
 3044 009a FB61     		str	r3, [r7, #28]
 3045              	.L182:
 3046              		.loc 1 1421 0 discriminator 1
 3047 009c FA69     		ldr	r2, [r7, #28]
 3048 009e 3B6A     		ldr	r3, [r7, #32]
 3049 00a0 9A42     		cmp	r2, r3
 3050 00a2 05D2     		bcs	.L183
 3051              		.loc 1 1421 0 discriminator 3
 3052 00a4 FA68     		ldr	r2, [r7, #12]
 3053 00a6 FB69     		ldr	r3, [r7, #28]
 3054 00a8 1344     		add	r3, r3, r2
 3055 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3056 00ac 202B     		cmp	r3, #32
 3057 00ae F2D1     		bne	.L184
 3058              	.L183:
1422:../fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
1423:../fatfs/ff.c **** 			if (j == i - 1) break;
1424:../fatfs/ff.c **** 			j++;
1425:../fatfs/ff.c **** 		}
1426:../fatfs/ff.c **** 	}
1427:../fatfs/ff.c **** 	do {
1428:../fatfs/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
 3059              		.loc 1 1428 0 is_stmt 1
 3060 00b0 FB69     		ldr	r3, [r7, #28]
 3061 00b2 5A1C     		adds	r2, r3, #1
 3062 00b4 FA61     		str	r2, [r7, #28]
 3063 00b6 FA68     		ldr	r2, [r7, #12]
 3064 00b8 1A44     		add	r2, r2, r3
 3065 00ba 3B6A     		ldr	r3, [r7, #32]
 3066 00bc 072B     		cmp	r3, #7
 3067 00be 08D8     		bhi	.L185
 3068              		.loc 1 1428 0 is_stmt 0 discriminator 1
 3069 00c0 3B6A     		ldr	r3, [r7, #32]
 3070 00c2 591C     		adds	r1, r3, #1
 3071 00c4 3962     		str	r1, [r7, #32]
 3072 00c6 07F12801 		add	r1, r7, #40
 3073 00ca 0B44     		add	r3, r3, r1
 3074 00cc 13F8143C 		ldrb	r3, [r3, #-20]	@ zero_extendqisi2
 3075 00d0 00E0     		b	.L186
 3076              	.L185:
 3077              		.loc 1 1428 0 discriminator 2
 3078 00d2 2023     		movs	r3, #32
 3079              	.L186:
 3080              		.loc 1 1428 0 discriminator 4
 3081 00d4 1370     		strb	r3, [r2]
1429:../fatfs/ff.c **** 	} while (j < 8);
 3082              		.loc 1 1429 0 is_stmt 1 discriminator 4
 3083 00d6 FB69     		ldr	r3, [r7, #28]
 3084 00d8 072B     		cmp	r3, #7
 3085 00da E9D9     		bls	.L183
1430:../fatfs/ff.c **** }
 3086              		.loc 1 1430 0
 3087 00dc 2837     		adds	r7, r7, #40
 3088              		.cfi_def_cfa_offset 8
 3089 00de BD46     		mov	sp, r7
 3090              		.cfi_def_cfa_register 13
 3091              		@ sp needed
 3092 00e0 80BD     		pop	{r7, pc}
 3093              		.cfi_endproc
 3094              	.LFE21:
 3096 00e2 00BF     		.section	.text.sum_sfn,"ax",%progbits
 3097              		.align	2
 3098              		.thumb
 3099              		.thumb_func
 3101              	sum_sfn:
 3102              	.LFB22:
1431:../fatfs/ff.c **** #endif
1432:../fatfs/ff.c **** 
1433:../fatfs/ff.c **** 
1434:../fatfs/ff.c **** 
1435:../fatfs/ff.c **** 
1436:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1437:../fatfs/ff.c **** /* Calculate sum of an SFN                                               */
1438:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1439:../fatfs/ff.c **** #if _USE_LFN
1440:../fatfs/ff.c **** static
1441:../fatfs/ff.c **** BYTE sum_sfn (
1442:../fatfs/ff.c **** 	const BYTE *dir		/* Ptr to directory entry */
1443:../fatfs/ff.c **** )
1444:../fatfs/ff.c **** {
 3103              		.loc 1 1444 0
 3104              		.cfi_startproc
 3105              		@ args = 0, pretend = 0, frame = 16
 3106              		@ frame_needed = 1, uses_anonymous_args = 0
 3107              		@ link register save eliminated.
 3108 0000 80B4     		push	{r7}
 3109              		.cfi_def_cfa_offset 4
 3110              		.cfi_offset 7, -4
 3111 0002 85B0     		sub	sp, sp, #20
 3112              		.cfi_def_cfa_offset 24
 3113 0004 00AF     		add	r7, sp, #0
 3114              		.cfi_def_cfa_register 7
 3115 0006 7860     		str	r0, [r7, #4]
1445:../fatfs/ff.c **** 	BYTE sum = 0;
 3116              		.loc 1 1445 0
 3117 0008 0023     		movs	r3, #0
 3118 000a FB73     		strb	r3, [r7, #15]
1446:../fatfs/ff.c **** 	UINT n = 11;
 3119              		.loc 1 1446 0
 3120 000c 0B23     		movs	r3, #11
 3121 000e BB60     		str	r3, [r7, #8]
 3122              	.L188:
1447:../fatfs/ff.c **** 
1448:../fatfs/ff.c **** 	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 3123              		.loc 1 1448 0 discriminator 1
 3124 0010 FB7B     		ldrb	r3, [r7, #15]
 3125 0012 DAB2     		uxtb	r2, r3
 3126 0014 5208     		lsrs	r2, r2, #1
 3127 0016 DB01     		lsls	r3, r3, #7
 3128 0018 1343     		orrs	r3, r3, r2
 3129 001a DAB2     		uxtb	r2, r3
 3130 001c 7B68     		ldr	r3, [r7, #4]
 3131 001e 591C     		adds	r1, r3, #1
 3132 0020 7960     		str	r1, [r7, #4]
 3133 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3134 0024 1344     		add	r3, r3, r2
 3135 0026 FB73     		strb	r3, [r7, #15]
 3136 0028 BB68     		ldr	r3, [r7, #8]
 3137 002a 013B     		subs	r3, r3, #1
 3138 002c BB60     		str	r3, [r7, #8]
 3139 002e BB68     		ldr	r3, [r7, #8]
 3140 0030 002B     		cmp	r3, #0
 3141 0032 EDD1     		bne	.L188
1449:../fatfs/ff.c **** 	return sum;
 3142              		.loc 1 1449 0
 3143 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1450:../fatfs/ff.c **** }
 3144              		.loc 1 1450 0
 3145 0036 1846     		mov	r0, r3
 3146 0038 1437     		adds	r7, r7, #20
 3147              		.cfi_def_cfa_offset 4
 3148 003a BD46     		mov	sp, r7
 3149              		.cfi_def_cfa_register 13
 3150              		@ sp needed
 3151 003c 5DF8047B 		ldr	r7, [sp], #4
 3152              		.cfi_restore 7
 3153              		.cfi_def_cfa_offset 0
 3154 0040 7047     		bx	lr
 3155              		.cfi_endproc
 3156              	.LFE22:
 3158 0042 00BF     		.section	.text.dir_find,"ax",%progbits
 3159              		.align	2
 3160              		.thumb
 3161              		.thumb_func
 3163              	dir_find:
 3164              	.LFB23:
1451:../fatfs/ff.c **** #endif
1452:../fatfs/ff.c **** 
1453:../fatfs/ff.c **** 
1454:../fatfs/ff.c **** 
1455:../fatfs/ff.c **** 
1456:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1457:../fatfs/ff.c **** /* Directory handling - Find an object in the directory                  */
1458:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1459:../fatfs/ff.c **** 
1460:../fatfs/ff.c **** static
1461:../fatfs/ff.c **** FRESULT dir_find (
1462:../fatfs/ff.c **** 	DIR *dj			/* Pointer to the directory object linked to the file name */
1463:../fatfs/ff.c **** )
1464:../fatfs/ff.c **** {
 3165              		.loc 1 1464 0
 3166              		.cfi_startproc
 3167              		@ args = 0, pretend = 0, frame = 24
 3168              		@ frame_needed = 1, uses_anonymous_args = 0
 3169 0000 80B5     		push	{r7, lr}
 3170              		.cfi_def_cfa_offset 8
 3171              		.cfi_offset 7, -8
 3172              		.cfi_offset 14, -4
 3173 0002 86B0     		sub	sp, sp, #24
 3174              		.cfi_def_cfa_offset 32
 3175 0004 00AF     		add	r7, sp, #0
 3176              		.cfi_def_cfa_register 7
 3177 0006 7860     		str	r0, [r7, #4]
1465:../fatfs/ff.c **** 	FRESULT res;
1466:../fatfs/ff.c **** 	BYTE c, *dir;
1467:../fatfs/ff.c **** #if _USE_LFN
1468:../fatfs/ff.c **** 	BYTE a, ord, sum;
1469:../fatfs/ff.c **** #endif
1470:../fatfs/ff.c **** 
1471:../fatfs/ff.c **** 	res = dir_sdi(dj, 0);			/* Rewind directory object */
 3178              		.loc 1 1471 0
 3179 0008 7868     		ldr	r0, [r7, #4]
 3180 000a 0021     		movs	r1, #0
 3181 000c FFF7FEFF 		bl	dir_sdi
 3182 0010 0346     		mov	r3, r0
 3183 0012 FB75     		strb	r3, [r7, #23]
1472:../fatfs/ff.c **** 	if (res != FR_OK) return res;
 3184              		.loc 1 1472 0
 3185 0014 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3186 0016 002B     		cmp	r3, #0
 3187 0018 01D0     		beq	.L191
 3188              		.loc 1 1472 0 is_stmt 0 discriminator 1
 3189 001a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3190 001c 94E0     		b	.L192
 3191              	.L191:
1473:../fatfs/ff.c **** 
1474:../fatfs/ff.c **** #if _USE_LFN
1475:../fatfs/ff.c **** 	ord = sum = 0xFF;
 3192              		.loc 1 1475 0 is_stmt 1
 3193 001e FF23     		movs	r3, #255
 3194 0020 3B75     		strb	r3, [r7, #20]
 3195 0022 3B7D     		ldrb	r3, [r7, #20]
 3196 0024 7B75     		strb	r3, [r7, #21]
 3197              	.L205:
1476:../fatfs/ff.c **** #endif
1477:../fatfs/ff.c **** 	do {
1478:../fatfs/ff.c **** 		res = move_window(dj->fs, dj->sect);
 3198              		.loc 1 1478 0
 3199 0026 7B68     		ldr	r3, [r7, #4]
 3200 0028 1A68     		ldr	r2, [r3]
 3201 002a 7B68     		ldr	r3, [r7, #4]
 3202 002c 1B69     		ldr	r3, [r3, #16]
 3203 002e 1046     		mov	r0, r2
 3204 0030 1946     		mov	r1, r3
 3205 0032 FFF7FEFF 		bl	move_window
 3206 0036 0346     		mov	r3, r0
 3207 0038 FB75     		strb	r3, [r7, #23]
1479:../fatfs/ff.c **** 		if (res != FR_OK) break;
 3208              		.loc 1 1479 0
 3209 003a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3210 003c 002B     		cmp	r3, #0
 3211 003e 00D0     		beq	.L193
 3212 0040 81E0     		b	.L194
 3213              	.L193:
1480:../fatfs/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 3214              		.loc 1 1480 0
 3215 0042 7B68     		ldr	r3, [r7, #4]
 3216 0044 5B69     		ldr	r3, [r3, #20]
 3217 0046 3B61     		str	r3, [r7, #16]
1481:../fatfs/ff.c **** 		c = dir[DIR_Name];
 3218              		.loc 1 1481 0
 3219 0048 3B69     		ldr	r3, [r7, #16]
 3220 004a 1B78     		ldrb	r3, [r3]
 3221 004c BB75     		strb	r3, [r7, #22]
1482:../fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 3222              		.loc 1 1482 0
 3223 004e BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 3224 0050 002B     		cmp	r3, #0
 3225 0052 02D1     		bne	.L195
 3226              		.loc 1 1482 0 is_stmt 0 discriminator 1
 3227 0054 0423     		movs	r3, #4
 3228 0056 FB75     		strb	r3, [r7, #23]
 3229 0058 75E0     		b	.L194
 3230              	.L195:
1483:../fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
1484:../fatfs/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
 3231              		.loc 1 1484 0 is_stmt 1
 3232 005a 3B69     		ldr	r3, [r7, #16]
 3233 005c 0B33     		adds	r3, r3, #11
 3234 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3235 0060 03F03F03 		and	r3, r3, #63
 3236 0064 FB73     		strb	r3, [r7, #15]
1485:../fatfs/ff.c **** 		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 3237              		.loc 1 1485 0
 3238 0066 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 3239 0068 E52B     		cmp	r3, #229
 3240 006a 07D0     		beq	.L196
 3241              		.loc 1 1485 0 is_stmt 0 discriminator 1
 3242 006c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3243 006e 03F00803 		and	r3, r3, #8
 3244 0072 002B     		cmp	r3, #0
 3245 0074 05D0     		beq	.L197
 3246              		.loc 1 1485 0 discriminator 2
 3247 0076 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3248 0078 0F2B     		cmp	r3, #15
 3249 007a 02D0     		beq	.L197
 3250              	.L196:
1486:../fatfs/ff.c **** 			ord = 0xFF;
 3251              		.loc 1 1486 0 is_stmt 1
 3252 007c FF23     		movs	r3, #255
 3253 007e 7B75     		strb	r3, [r7, #21]
 3254 0080 57E0     		b	.L198
 3255              	.L197:
1487:../fatfs/ff.c **** 		} else {
1488:../fatfs/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
 3256              		.loc 1 1488 0
 3257 0082 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3258 0084 0F2B     		cmp	r3, #15
 3259 0086 2FD1     		bne	.L199
1489:../fatfs/ff.c **** 				if (dj->lfn) {
 3260              		.loc 1 1489 0
 3261 0088 7B68     		ldr	r3, [r7, #4]
 3262 008a DB69     		ldr	r3, [r3, #28]
 3263 008c 002B     		cmp	r3, #0
 3264 008e 50D0     		beq	.L198
1490:../fatfs/ff.c **** 					if (c & LLE) {		/* Is it start of LFN sequence? */
 3265              		.loc 1 1490 0
 3266 0090 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 3267 0092 03F04003 		and	r3, r3, #64
 3268 0096 002B     		cmp	r3, #0
 3269 0098 0CD0     		beq	.L201
1491:../fatfs/ff.c **** 						sum = dir[LDIR_Chksum];
 3270              		.loc 1 1491 0
 3271 009a 3B69     		ldr	r3, [r7, #16]
 3272 009c 5B7B     		ldrb	r3, [r3, #13]
 3273 009e 3B75     		strb	r3, [r7, #20]
1492:../fatfs/ff.c **** 						c &= ~LLE; ord = c;	/* LFN start order */
 3274              		.loc 1 1492 0
 3275 00a0 BB7D     		ldrb	r3, [r7, #22]
 3276 00a2 23F04003 		bic	r3, r3, #64
 3277 00a6 BB75     		strb	r3, [r7, #22]
 3278 00a8 BB7D     		ldrb	r3, [r7, #22]
 3279 00aa 7B75     		strb	r3, [r7, #21]
1493:../fatfs/ff.c **** 						dj->lfn_idx = dj->index;
 3280              		.loc 1 1493 0
 3281 00ac 7B68     		ldr	r3, [r7, #4]
 3282 00ae DA88     		ldrh	r2, [r3, #6]
 3283 00b0 7B68     		ldr	r3, [r7, #4]
 3284 00b2 1A84     		strh	r2, [r3, #32]	@ movhi
 3285              	.L201:
1494:../fatfs/ff.c **** 					}
1495:../fatfs/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
1496:../fatfs/ff.c **** 					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 3286              		.loc 1 1496 0
 3287 00b4 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 3288 00b6 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 3289 00b8 9A42     		cmp	r2, r3
 3290 00ba 12D1     		bne	.L202
 3291              		.loc 1 1496 0 is_stmt 0 discriminator 1
 3292 00bc 3B69     		ldr	r3, [r7, #16]
 3293 00be 0D33     		adds	r3, r3, #13
 3294 00c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3295 00c2 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 3296 00c4 9A42     		cmp	r2, r3
 3297 00c6 0CD1     		bne	.L202
 3298              		.loc 1 1496 0 discriminator 3
 3299 00c8 7B68     		ldr	r3, [r7, #4]
 3300 00ca DB69     		ldr	r3, [r3, #28]
 3301 00cc 1846     		mov	r0, r3
 3302 00ce 3969     		ldr	r1, [r7, #16]
 3303 00d0 FFF7FEFF 		bl	cmp_lfn
 3304 00d4 0346     		mov	r3, r0
 3305 00d6 002B     		cmp	r3, #0
 3306 00d8 03D0     		beq	.L202
 3307              		.loc 1 1496 0 discriminator 5
 3308 00da 7B7D     		ldrb	r3, [r7, #21]
 3309 00dc 013B     		subs	r3, r3, #1
 3310 00de DBB2     		uxtb	r3, r3
 3311 00e0 00E0     		b	.L203
 3312              	.L202:
 3313              		.loc 1 1496 0 discriminator 6
 3314 00e2 FF23     		movs	r3, #255
 3315              	.L203:
 3316              		.loc 1 1496 0 discriminator 8
 3317 00e4 7B75     		strb	r3, [r7, #21]
 3318 00e6 24E0     		b	.L198
 3319              	.L199:
1497:../fatfs/ff.c **** 				}
1498:../fatfs/ff.c **** 			} else {					/* An SFN entry is found */
1499:../fatfs/ff.c **** 				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 3320              		.loc 1 1499 0 is_stmt 1
 3321 00e8 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 3322 00ea 002B     		cmp	r3, #0
 3323 00ec 08D1     		bne	.L204
 3324              		.loc 1 1499 0 is_stmt 0 discriminator 1
 3325 00ee 3869     		ldr	r0, [r7, #16]
 3326 00f0 FFF7FEFF 		bl	sum_sfn
 3327 00f4 0346     		mov	r3, r0
 3328 00f6 1A46     		mov	r2, r3
 3329 00f8 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 3330 00fa 9342     		cmp	r3, r2
 3331 00fc 00D1     		bne	.L204
 3332              		.loc 1 1499 0
 3333 00fe 22E0     		b	.L194
 3334              	.L204:
1500:../fatfs/ff.c **** 				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 3335              		.loc 1 1500 0 is_stmt 1
 3336 0100 FF23     		movs	r3, #255
 3337 0102 7B75     		strb	r3, [r7, #21]
 3338 0104 7B68     		ldr	r3, [r7, #4]
 3339 0106 4FF6FF72 		movw	r2, #65535
 3340 010a 1A84     		strh	r2, [r3, #32]	@ movhi
1501:../fatfs/ff.c **** 				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 3341              		.loc 1 1501 0
 3342 010c 7B68     		ldr	r3, [r7, #4]
 3343 010e 9B69     		ldr	r3, [r3, #24]
 3344 0110 0B33     		adds	r3, r3, #11
 3345 0112 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3346 0114 03F00103 		and	r3, r3, #1
 3347 0118 002B     		cmp	r3, #0
 3348 011a 0AD1     		bne	.L198
 3349              		.loc 1 1501 0 is_stmt 0 discriminator 1
 3350 011c 7B68     		ldr	r3, [r7, #4]
 3351 011e 9B69     		ldr	r3, [r3, #24]
 3352 0120 3869     		ldr	r0, [r7, #16]
 3353 0122 1946     		mov	r1, r3
 3354 0124 0B22     		movs	r2, #11
 3355 0126 FFF7FEFF 		bl	mem_cmp
 3356 012a 0346     		mov	r3, r0
 3357 012c 002B     		cmp	r3, #0
 3358 012e 00D1     		bne	.L198
 3359              		.loc 1 1501 0
 3360 0130 09E0     		b	.L194
 3361              	.L198:
1502:../fatfs/ff.c **** 			}
1503:../fatfs/ff.c **** 		}
1504:../fatfs/ff.c **** #else		/* Non LFN configuration */
1505:../fatfs/ff.c **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
1506:../fatfs/ff.c **** 			break;
1507:../fatfs/ff.c **** #endif
1508:../fatfs/ff.c **** 		res = dir_next(dj, 0);		/* Next entry */
 3362              		.loc 1 1508 0 is_stmt 1
 3363 0132 7868     		ldr	r0, [r7, #4]
 3364 0134 0021     		movs	r1, #0
 3365 0136 FFF7FEFF 		bl	dir_next
 3366 013a 0346     		mov	r3, r0
 3367 013c FB75     		strb	r3, [r7, #23]
1509:../fatfs/ff.c **** 	} while (res == FR_OK);
 3368              		.loc 1 1509 0
 3369 013e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3370 0140 002B     		cmp	r3, #0
 3371 0142 3FF470AF 		beq	.L205
 3372              	.L194:
1510:../fatfs/ff.c **** 
1511:../fatfs/ff.c **** 	return res;
 3373              		.loc 1 1511 0
 3374 0146 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3375              	.L192:
1512:../fatfs/ff.c **** }
 3376              		.loc 1 1512 0
 3377 0148 1846     		mov	r0, r3
 3378 014a 1837     		adds	r7, r7, #24
 3379              		.cfi_def_cfa_offset 8
 3380 014c BD46     		mov	sp, r7
 3381              		.cfi_def_cfa_register 13
 3382              		@ sp needed
 3383 014e 80BD     		pop	{r7, pc}
 3384              		.cfi_endproc
 3385              	.LFE23:
 3387              		.section	.text.dir_read,"ax",%progbits
 3388              		.align	2
 3389              		.thumb
 3390              		.thumb_func
 3392              	dir_read:
 3393              	.LFB24:
1513:../fatfs/ff.c **** 
1514:../fatfs/ff.c **** 
1515:../fatfs/ff.c **** 
1516:../fatfs/ff.c **** 
1517:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1518:../fatfs/ff.c **** /* Read an object from the directory                                     */
1519:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1520:../fatfs/ff.c **** #if _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2
1521:../fatfs/ff.c **** static
1522:../fatfs/ff.c **** FRESULT dir_read (
1523:../fatfs/ff.c **** 	DIR *dj,		/* Pointer to the directory object */
1524:../fatfs/ff.c **** 	int vol			/* Filtered by 0:file/dir or 1:volume label */
1525:../fatfs/ff.c **** )
1526:../fatfs/ff.c **** {
 3394              		.loc 1 1526 0
 3395              		.cfi_startproc
 3396              		@ args = 0, pretend = 0, frame = 24
 3397              		@ frame_needed = 1, uses_anonymous_args = 0
 3398 0000 80B5     		push	{r7, lr}
 3399              		.cfi_def_cfa_offset 8
 3400              		.cfi_offset 7, -8
 3401              		.cfi_offset 14, -4
 3402 0002 86B0     		sub	sp, sp, #24
 3403              		.cfi_def_cfa_offset 32
 3404 0004 00AF     		add	r7, sp, #0
 3405              		.cfi_def_cfa_register 7
 3406 0006 7860     		str	r0, [r7, #4]
 3407 0008 3960     		str	r1, [r7]
1527:../fatfs/ff.c **** 	FRESULT res;
1528:../fatfs/ff.c **** 	BYTE a, c, *dir;
1529:../fatfs/ff.c **** #if _USE_LFN
1530:../fatfs/ff.c **** 	BYTE ord = 0xFF, sum = 0xFF;
 3408              		.loc 1 1530 0
 3409 000a FF23     		movs	r3, #255
 3410 000c 7B75     		strb	r3, [r7, #21]
 3411 000e FF23     		movs	r3, #255
 3412 0010 3B75     		strb	r3, [r7, #20]
1531:../fatfs/ff.c **** #endif
1532:../fatfs/ff.c **** 
1533:../fatfs/ff.c **** 	res = FR_NO_FILE;
 3413              		.loc 1 1533 0
 3414 0012 0423     		movs	r3, #4
 3415 0014 FB75     		strb	r3, [r7, #23]
1534:../fatfs/ff.c **** 	while (dj->sect) {
 3416              		.loc 1 1534 0
 3417 0016 79E0     		b	.L207
 3418              	.L220:
1535:../fatfs/ff.c **** 		res = move_window(dj->fs, dj->sect);
 3419              		.loc 1 1535 0
 3420 0018 7B68     		ldr	r3, [r7, #4]
 3421 001a 1A68     		ldr	r2, [r3]
 3422 001c 7B68     		ldr	r3, [r7, #4]
 3423 001e 1B69     		ldr	r3, [r3, #16]
 3424 0020 1046     		mov	r0, r2
 3425 0022 1946     		mov	r1, r3
 3426 0024 FFF7FEFF 		bl	move_window
 3427 0028 0346     		mov	r3, r0
 3428 002a FB75     		strb	r3, [r7, #23]
1536:../fatfs/ff.c **** 		if (res != FR_OK) break;
 3429              		.loc 1 1536 0
 3430 002c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3431 002e 002B     		cmp	r3, #0
 3432 0030 00D0     		beq	.L208
 3433 0032 6FE0     		b	.L209
 3434              	.L208:
1537:../fatfs/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 3435              		.loc 1 1537 0
 3436 0034 7B68     		ldr	r3, [r7, #4]
 3437 0036 5B69     		ldr	r3, [r3, #20]
 3438 0038 3B61     		str	r3, [r7, #16]
1538:../fatfs/ff.c **** 		c = dir[DIR_Name];
 3439              		.loc 1 1538 0
 3440 003a 3B69     		ldr	r3, [r7, #16]
 3441 003c 1B78     		ldrb	r3, [r3]
 3442 003e BB75     		strb	r3, [r7, #22]
1539:../fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 3443              		.loc 1 1539 0
 3444 0040 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 3445 0042 002B     		cmp	r3, #0
 3446 0044 02D1     		bne	.L210
 3447              		.loc 1 1539 0 is_stmt 0 discriminator 1
 3448 0046 0423     		movs	r3, #4
 3449 0048 FB75     		strb	r3, [r7, #23]
 3450 004a 63E0     		b	.L209
 3451              	.L210:
1540:../fatfs/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
 3452              		.loc 1 1540 0 is_stmt 1
 3453 004c 3B69     		ldr	r3, [r7, #16]
 3454 004e 0B33     		adds	r3, r3, #11
 3455 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3456 0052 03F03F03 		and	r3, r3, #63
 3457 0056 FB73     		strb	r3, [r7, #15]
1541:../fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
1542:../fatfs/ff.c **** 		if (c == DDE || (!_FS_RPATH && c == '.') || (a == AM_VOL) != vol) {	/* An entry without valid dat
 3458              		.loc 1 1542 0
 3459 0058 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 3460 005a E52B     		cmp	r3, #229
 3461 005c 09D0     		beq	.L211
 3462              		.loc 1 1542 0 is_stmt 0 discriminator 1
 3463 005e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3464 0060 082B     		cmp	r3, #8
 3465 0062 0CBF     		ite	eq
 3466 0064 0123     		moveq	r3, #1
 3467 0066 0023     		movne	r3, #0
 3468 0068 DBB2     		uxtb	r3, r3
 3469 006a 1A46     		mov	r2, r3
 3470 006c 3B68     		ldr	r3, [r7]
 3471 006e 9A42     		cmp	r2, r3
 3472 0070 02D0     		beq	.L212
 3473              	.L211:
1543:../fatfs/ff.c **** 			ord = 0xFF;
 3474              		.loc 1 1543 0 is_stmt 1
 3475 0072 FF23     		movs	r3, #255
 3476 0074 7B75     		strb	r3, [r7, #21]
 3477 0076 3FE0     		b	.L213
 3478              	.L212:
1544:../fatfs/ff.c **** 		} else {
1545:../fatfs/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
 3479              		.loc 1 1545 0
 3480 0078 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3481 007a 0F2B     		cmp	r3, #15
 3482 007c 2BD1     		bne	.L214
1546:../fatfs/ff.c **** 				if (c & LLE) {			/* Is it start of LFN sequence? */
 3483              		.loc 1 1546 0
 3484 007e BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 3485 0080 03F04003 		and	r3, r3, #64
 3486 0084 002B     		cmp	r3, #0
 3487 0086 0CD0     		beq	.L215
1547:../fatfs/ff.c **** 					sum = dir[LDIR_Chksum];
 3488              		.loc 1 1547 0
 3489 0088 3B69     		ldr	r3, [r7, #16]
 3490 008a 5B7B     		ldrb	r3, [r3, #13]
 3491 008c 3B75     		strb	r3, [r7, #20]
1548:../fatfs/ff.c **** 					c &= ~LLE; ord = c;
 3492              		.loc 1 1548 0
 3493 008e BB7D     		ldrb	r3, [r7, #22]
 3494 0090 23F04003 		bic	r3, r3, #64
 3495 0094 BB75     		strb	r3, [r7, #22]
 3496 0096 BB7D     		ldrb	r3, [r7, #22]
 3497 0098 7B75     		strb	r3, [r7, #21]
1549:../fatfs/ff.c **** 					dj->lfn_idx = dj->index;
 3498              		.loc 1 1549 0
 3499 009a 7B68     		ldr	r3, [r7, #4]
 3500 009c DA88     		ldrh	r2, [r3, #6]
 3501 009e 7B68     		ldr	r3, [r7, #4]
 3502 00a0 1A84     		strh	r2, [r3, #32]	@ movhi
 3503              	.L215:
1550:../fatfs/ff.c **** 				}
1551:../fatfs/ff.c **** 				/* Check LFN validity and capture it */
1552:../fatfs/ff.c **** 				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 3504              		.loc 1 1552 0
 3505 00a2 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 3506 00a4 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 3507 00a6 9A42     		cmp	r2, r3
 3508 00a8 12D1     		bne	.L216
 3509              		.loc 1 1552 0 is_stmt 0 discriminator 1
 3510 00aa 3B69     		ldr	r3, [r7, #16]
 3511 00ac 0D33     		adds	r3, r3, #13
 3512 00ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3513 00b0 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 3514 00b2 9A42     		cmp	r2, r3
 3515 00b4 0CD1     		bne	.L216
 3516              		.loc 1 1552 0 discriminator 3
 3517 00b6 7B68     		ldr	r3, [r7, #4]
 3518 00b8 DB69     		ldr	r3, [r3, #28]
 3519 00ba 1846     		mov	r0, r3
 3520 00bc 3969     		ldr	r1, [r7, #16]
 3521 00be FFF7FEFF 		bl	pick_lfn
 3522 00c2 0346     		mov	r3, r0
 3523 00c4 002B     		cmp	r3, #0
 3524 00c6 03D0     		beq	.L216
 3525              		.loc 1 1552 0 discriminator 5
 3526 00c8 7B7D     		ldrb	r3, [r7, #21]
 3527 00ca 013B     		subs	r3, r3, #1
 3528 00cc DBB2     		uxtb	r3, r3
 3529 00ce 00E0     		b	.L217
 3530              	.L216:
 3531              		.loc 1 1552 0 discriminator 6
 3532 00d0 FF23     		movs	r3, #255
 3533              	.L217:
 3534              		.loc 1 1552 0 discriminator 8
 3535 00d2 7B75     		strb	r3, [r7, #21]
 3536 00d4 10E0     		b	.L213
 3537              	.L214:
1553:../fatfs/ff.c **** 			} else {					/* An SFN entry is found */
1554:../fatfs/ff.c **** 				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 3538              		.loc 1 1554 0 is_stmt 1
 3539 00d6 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 3540 00d8 002B     		cmp	r3, #0
 3541 00da 07D1     		bne	.L218
 3542              		.loc 1 1554 0 is_stmt 0 discriminator 1
 3543 00dc 3869     		ldr	r0, [r7, #16]
 3544 00de FFF7FEFF 		bl	sum_sfn
 3545 00e2 0346     		mov	r3, r0
 3546 00e4 1A46     		mov	r2, r3
 3547 00e6 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 3548 00e8 9342     		cmp	r3, r2
 3549 00ea 04D0     		beq	.L219
 3550              	.L218:
1555:../fatfs/ff.c **** 					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
 3551              		.loc 1 1555 0 is_stmt 1
 3552 00ec 7B68     		ldr	r3, [r7, #4]
 3553 00ee 4FF6FF72 		movw	r2, #65535
 3554 00f2 1A84     		strh	r2, [r3, #32]	@ movhi
1556:../fatfs/ff.c **** 				break;
 3555              		.loc 1 1556 0
 3556 00f4 0EE0     		b	.L209
 3557              	.L219:
 3558 00f6 0DE0     		b	.L209
 3559              	.L213:
1557:../fatfs/ff.c **** 			}
1558:../fatfs/ff.c **** 		}
1559:../fatfs/ff.c **** #else		/* Non LFN configuration */
1560:../fatfs/ff.c **** 		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (a == AM_VOL) == vol)	/* Is it a valid 
1561:../fatfs/ff.c **** 			break;
1562:../fatfs/ff.c **** #endif
1563:../fatfs/ff.c **** 		res = dir_next(dj, 0);				/* Next entry */
 3560              		.loc 1 1563 0
 3561 00f8 7868     		ldr	r0, [r7, #4]
 3562 00fa 0021     		movs	r1, #0
 3563 00fc FFF7FEFF 		bl	dir_next
 3564 0100 0346     		mov	r3, r0
 3565 0102 FB75     		strb	r3, [r7, #23]
1564:../fatfs/ff.c **** 		if (res != FR_OK) break;
 3566              		.loc 1 1564 0
 3567 0104 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3568 0106 002B     		cmp	r3, #0
 3569 0108 00D0     		beq	.L207
 3570 010a 03E0     		b	.L209
 3571              	.L207:
1534:../fatfs/ff.c **** 		res = move_window(dj->fs, dj->sect);
 3572              		.loc 1 1534 0
 3573 010c 7B68     		ldr	r3, [r7, #4]
 3574 010e 1B69     		ldr	r3, [r3, #16]
 3575 0110 002B     		cmp	r3, #0
 3576 0112 81D1     		bne	.L220
 3577              	.L209:
1565:../fatfs/ff.c **** 	}
1566:../fatfs/ff.c **** 
1567:../fatfs/ff.c **** 	if (res != FR_OK) dj->sect = 0;
 3578              		.loc 1 1567 0
 3579 0114 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3580 0116 002B     		cmp	r3, #0
 3581 0118 02D0     		beq	.L221
 3582              		.loc 1 1567 0 is_stmt 0 discriminator 1
 3583 011a 7B68     		ldr	r3, [r7, #4]
 3584 011c 0022     		movs	r2, #0
 3585 011e 1A61     		str	r2, [r3, #16]
 3586              	.L221:
1568:../fatfs/ff.c **** 
1569:../fatfs/ff.c **** 	return res;
 3587              		.loc 1 1569 0 is_stmt 1
 3588 0120 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1570:../fatfs/ff.c **** }
 3589              		.loc 1 1570 0
 3590 0122 1846     		mov	r0, r3
 3591 0124 1837     		adds	r7, r7, #24
 3592              		.cfi_def_cfa_offset 8
 3593 0126 BD46     		mov	sp, r7
 3594              		.cfi_def_cfa_register 13
 3595              		@ sp needed
 3596 0128 80BD     		pop	{r7, pc}
 3597              		.cfi_endproc
 3598              	.LFE24:
 3600 012a 00BF     		.section	.text.dir_register,"ax",%progbits
 3601              		.align	2
 3602              		.thumb
 3603              		.thumb_func
 3605              	dir_register:
 3606              	.LFB25:
1571:../fatfs/ff.c **** #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
1572:../fatfs/ff.c **** 
1573:../fatfs/ff.c **** 
1574:../fatfs/ff.c **** 
1575:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1576:../fatfs/ff.c **** /* Register an object to the directory                                   */
1577:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1578:../fatfs/ff.c **** #if !_FS_READONLY
1579:../fatfs/ff.c **** static
1580:../fatfs/ff.c **** FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_D
1581:../fatfs/ff.c **** 	DIR *dj				/* Target directory with object name to be created */
1582:../fatfs/ff.c **** )
1583:../fatfs/ff.c **** {
 3607              		.loc 1 1583 0
 3608              		.cfi_startproc
 3609              		@ args = 0, pretend = 0, frame = 40
 3610              		@ frame_needed = 1, uses_anonymous_args = 0
 3611 0000 80B5     		push	{r7, lr}
 3612              		.cfi_def_cfa_offset 8
 3613              		.cfi_offset 7, -8
 3614              		.cfi_offset 14, -4
 3615 0002 8AB0     		sub	sp, sp, #40
 3616              		.cfi_def_cfa_offset 48
 3617 0004 00AF     		add	r7, sp, #0
 3618              		.cfi_def_cfa_register 7
 3619 0006 7860     		str	r0, [r7, #4]
1584:../fatfs/ff.c **** 	FRESULT res;
1585:../fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
1586:../fatfs/ff.c **** 	WORD n, ne;
1587:../fatfs/ff.c **** 	BYTE sn[12], *fn, sum;
1588:../fatfs/ff.c **** 	WCHAR *lfn;
1589:../fatfs/ff.c **** 
1590:../fatfs/ff.c **** 
1591:../fatfs/ff.c **** 	fn = dj->fn; lfn = dj->lfn;
 3620              		.loc 1 1591 0
 3621 0008 7B68     		ldr	r3, [r7, #4]
 3622 000a 9B69     		ldr	r3, [r3, #24]
 3623 000c FB61     		str	r3, [r7, #28]
 3624 000e 7B68     		ldr	r3, [r7, #4]
 3625 0010 DB69     		ldr	r3, [r3, #28]
 3626 0012 BB61     		str	r3, [r7, #24]
1592:../fatfs/ff.c **** 	mem_cpy(sn, fn, 12);
 3627              		.loc 1 1592 0
 3628 0014 07F10803 		add	r3, r7, #8
 3629 0018 1846     		mov	r0, r3
 3630 001a F969     		ldr	r1, [r7, #28]
 3631 001c 0C22     		movs	r2, #12
 3632 001e FFF7FEFF 		bl	mem_cpy
1593:../fatfs/ff.c **** 
1594:../fatfs/ff.c **** 	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
 3633              		.loc 1 1594 0
 3634 0022 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 3635 0024 03F02003 		and	r3, r3, #32
 3636 0028 002B     		cmp	r3, #0
 3637 002a 01D0     		beq	.L224
1595:../fatfs/ff.c **** 		return FR_INVALID_NAME;
 3638              		.loc 1 1595 0
 3639 002c 0623     		movs	r3, #6
 3640 002e E3E0     		b	.L241
 3641              	.L224:
1596:../fatfs/ff.c **** 
1597:../fatfs/ff.c **** 	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 3642              		.loc 1 1597 0
 3643 0030 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 3644 0032 03F00103 		and	r3, r3, #1
 3645 0036 002B     		cmp	r3, #0
 3646 0038 35D0     		beq	.L226
1598:../fatfs/ff.c **** 		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
 3647              		.loc 1 1598 0
 3648 003a FB69     		ldr	r3, [r7, #28]
 3649 003c 0B33     		adds	r3, r3, #11
 3650 003e 0022     		movs	r2, #0
 3651 0040 1A70     		strb	r2, [r3]
 3652 0042 7B68     		ldr	r3, [r7, #4]
 3653 0044 0022     		movs	r2, #0
 3654 0046 DA61     		str	r2, [r3, #28]
1599:../fatfs/ff.c **** 		for (n = 1; n < 100; n++) {
 3655              		.loc 1 1599 0
 3656 0048 0123     		movs	r3, #1
 3657 004a BB84     		strh	r3, [r7, #36]	@ movhi
 3658 004c 15E0     		b	.L227
 3659              	.L230:
1600:../fatfs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 3660              		.loc 1 1600 0
 3661 004e 07F10802 		add	r2, r7, #8
 3662 0052 BB8C     		ldrh	r3, [r7, #36]
 3663 0054 F869     		ldr	r0, [r7, #28]
 3664 0056 1146     		mov	r1, r2
 3665 0058 BA69     		ldr	r2, [r7, #24]
 3666 005a FFF7FEFF 		bl	gen_numname
1601:../fatfs/ff.c **** 			res = dir_find(dj);				/* Check if the name collides with existing SFN */
 3667              		.loc 1 1601 0
 3668 005e 7868     		ldr	r0, [r7, #4]
 3669 0060 FFF7FEFF 		bl	dir_find
 3670 0064 0346     		mov	r3, r0
 3671 0066 87F82730 		strb	r3, [r7, #39]
1602:../fatfs/ff.c **** 			if (res != FR_OK) break;
 3672              		.loc 1 1602 0
 3673 006a 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 3674 006e 002B     		cmp	r3, #0
 3675 0070 00D0     		beq	.L228
 3676 0072 05E0     		b	.L229
 3677              	.L228:
1599:../fatfs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 3678              		.loc 1 1599 0 discriminator 2
 3679 0074 BB8C     		ldrh	r3, [r7, #36]
 3680 0076 0133     		adds	r3, r3, #1
 3681 0078 BB84     		strh	r3, [r7, #36]	@ movhi
 3682              	.L227:
1599:../fatfs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 3683              		.loc 1 1599 0 is_stmt 0 discriminator 1
 3684 007a BB8C     		ldrh	r3, [r7, #36]
 3685 007c 632B     		cmp	r3, #99
 3686 007e E6D9     		bls	.L230
 3687              	.L229:
1603:../fatfs/ff.c **** 		}
1604:../fatfs/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 3688              		.loc 1 1604 0 is_stmt 1
 3689 0080 BB8C     		ldrh	r3, [r7, #36]
 3690 0082 642B     		cmp	r3, #100
 3691 0084 01D1     		bne	.L231
 3692              		.loc 1 1604 0 is_stmt 0 discriminator 1
 3693 0086 0723     		movs	r3, #7
 3694 0088 B6E0     		b	.L241
 3695              	.L231:
1605:../fatfs/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 3696              		.loc 1 1605 0 is_stmt 1
 3697 008a 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 3698 008e 042B     		cmp	r3, #4
 3699 0090 02D0     		beq	.L232
 3700              		.loc 1 1605 0 is_stmt 0 discriminator 1
 3701 0092 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 3702 0096 AFE0     		b	.L241
 3703              	.L232:
1606:../fatfs/ff.c **** 		fn[NS] = sn[NS]; dj->lfn = lfn;
 3704              		.loc 1 1606 0 is_stmt 1
 3705 0098 FB69     		ldr	r3, [r7, #28]
 3706 009a 0B33     		adds	r3, r3, #11
 3707 009c FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 3708 009e 1A70     		strb	r2, [r3]
 3709 00a0 7B68     		ldr	r3, [r7, #4]
 3710 00a2 BA69     		ldr	r2, [r7, #24]
 3711 00a4 DA61     		str	r2, [r3, #28]
 3712              	.L226:
1607:../fatfs/ff.c **** 	}
1608:../fatfs/ff.c **** 
1609:../fatfs/ff.c **** 	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 3713              		.loc 1 1609 0
 3714 00a6 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 3715 00a8 03F00203 		and	r3, r3, #2
 3716 00ac 002B     		cmp	r3, #0
 3717 00ae 16D0     		beq	.L233
1610:../fatfs/ff.c **** 		for (n = 0; lfn[n]; n++) ;
 3718              		.loc 1 1610 0
 3719 00b0 0023     		movs	r3, #0
 3720 00b2 BB84     		strh	r3, [r7, #36]	@ movhi
 3721 00b4 02E0     		b	.L234
 3722              	.L235:
 3723              		.loc 1 1610 0 is_stmt 0 discriminator 3
 3724 00b6 BB8C     		ldrh	r3, [r7, #36]
 3725 00b8 0133     		adds	r3, r3, #1
 3726 00ba BB84     		strh	r3, [r7, #36]	@ movhi
 3727              	.L234:
 3728              		.loc 1 1610 0 discriminator 1
 3729 00bc BB8C     		ldrh	r3, [r7, #36]
 3730 00be 5B00     		lsls	r3, r3, #1
 3731 00c0 BA69     		ldr	r2, [r7, #24]
 3732 00c2 1344     		add	r3, r3, r2
 3733 00c4 1B88     		ldrh	r3, [r3]
 3734 00c6 002B     		cmp	r3, #0
 3735 00c8 F5D1     		bne	.L235
1611:../fatfs/ff.c **** 		ne = (n + 25) / 13;
 3736              		.loc 1 1611 0 is_stmt 1
 3737 00ca BB8C     		ldrh	r3, [r7, #36]
 3738 00cc 1933     		adds	r3, r3, #25
 3739 00ce 4C4A     		ldr	r2, .L242
 3740 00d0 82FB0312 		smull	r1, r2, r2, r3
 3741 00d4 9210     		asrs	r2, r2, #2
 3742 00d6 DB17     		asrs	r3, r3, #31
 3743 00d8 D31A     		subs	r3, r2, r3
 3744 00da 7B84     		strh	r3, [r7, #34]	@ movhi
 3745 00dc 01E0     		b	.L236
 3746              	.L233:
1612:../fatfs/ff.c **** 	} else {						/* Otherwise allocate an entry for an SFN  */
1613:../fatfs/ff.c **** 		ne = 1;
 3747              		.loc 1 1613 0
 3748 00de 0123     		movs	r3, #1
 3749 00e0 7B84     		strh	r3, [r7, #34]	@ movhi
 3750              	.L236:
1614:../fatfs/ff.c **** 	}
1615:../fatfs/ff.c **** 	res = dir_alloc(dj, ne);		/* Allocate entries */
 3751              		.loc 1 1615 0
 3752 00e2 7B8C     		ldrh	r3, [r7, #34]
 3753 00e4 7868     		ldr	r0, [r7, #4]
 3754 00e6 1946     		mov	r1, r3
 3755 00e8 FFF7FEFF 		bl	dir_alloc
 3756 00ec 0346     		mov	r3, r0
 3757 00ee 87F82730 		strb	r3, [r7, #39]
1616:../fatfs/ff.c **** 
1617:../fatfs/ff.c **** 	if (res == FR_OK && --ne) {		/* Set LFN entry if needed */
 3758              		.loc 1 1617 0
 3759 00f2 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 3760 00f6 002B     		cmp	r3, #0
 3761 00f8 4AD1     		bne	.L237
 3762              		.loc 1 1617 0 is_stmt 0 discriminator 1
 3763 00fa 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 3764 00fc 013B     		subs	r3, r3, #1
 3765 00fe 7B84     		strh	r3, [r7, #34]	@ movhi
 3766 0100 7B8C     		ldrh	r3, [r7, #34]
 3767 0102 002B     		cmp	r3, #0
 3768 0104 44D0     		beq	.L237
1618:../fatfs/ff.c **** 		res = dir_sdi(dj, (WORD)(dj->index - ne));
 3769              		.loc 1 1618 0 is_stmt 1
 3770 0106 7B68     		ldr	r3, [r7, #4]
 3771 0108 DA88     		ldrh	r2, [r3, #6]
 3772 010a 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 3773 010c D31A     		subs	r3, r2, r3
 3774 010e 9BB2     		uxth	r3, r3
 3775 0110 7868     		ldr	r0, [r7, #4]
 3776 0112 1946     		mov	r1, r3
 3777 0114 FFF7FEFF 		bl	dir_sdi
 3778 0118 0346     		mov	r3, r0
 3779 011a 87F82730 		strb	r3, [r7, #39]
1619:../fatfs/ff.c **** 		if (res == FR_OK) {
 3780              		.loc 1 1619 0
 3781 011e 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 3782 0122 002B     		cmp	r3, #0
 3783 0124 34D1     		bne	.L237
1620:../fatfs/ff.c **** 			sum = sum_sfn(dj->fn);	/* Sum value of the SFN tied to the LFN */
 3784              		.loc 1 1620 0
 3785 0126 7B68     		ldr	r3, [r7, #4]
 3786 0128 9B69     		ldr	r3, [r3, #24]
 3787 012a 1846     		mov	r0, r3
 3788 012c FFF7FEFF 		bl	sum_sfn
 3789 0130 0346     		mov	r3, r0
 3790 0132 FB75     		strb	r3, [r7, #23]
 3791              	.L239:
1621:../fatfs/ff.c **** 			do {					/* Store LFN entries in bottom first */
1622:../fatfs/ff.c **** 				res = move_window(dj->fs, dj->sect);
 3792              		.loc 1 1622 0
 3793 0134 7B68     		ldr	r3, [r7, #4]
 3794 0136 1A68     		ldr	r2, [r3]
 3795 0138 7B68     		ldr	r3, [r7, #4]
 3796 013a 1B69     		ldr	r3, [r3, #16]
 3797 013c 1046     		mov	r0, r2
 3798 013e 1946     		mov	r1, r3
 3799 0140 FFF7FEFF 		bl	move_window
 3800 0144 0346     		mov	r3, r0
 3801 0146 87F82730 		strb	r3, [r7, #39]
1623:../fatfs/ff.c **** 				if (res != FR_OK) break;
 3802              		.loc 1 1623 0
 3803 014a 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 3804 014e 002B     		cmp	r3, #0
 3805 0150 00D0     		beq	.L238
 3806 0152 1DE0     		b	.L237
 3807              	.L238:
1624:../fatfs/ff.c **** 				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
 3808              		.loc 1 1624 0
 3809 0154 7B68     		ldr	r3, [r7, #4]
 3810 0156 D869     		ldr	r0, [r3, #28]
 3811 0158 7B68     		ldr	r3, [r7, #4]
 3812 015a 5969     		ldr	r1, [r3, #20]
 3813 015c 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 3814 015e DAB2     		uxtb	r2, r3
 3815 0160 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3816 0162 FFF7FEFF 		bl	fit_lfn
1625:../fatfs/ff.c **** 				dj->fs->wflag = 1;
 3817              		.loc 1 1625 0
 3818 0166 7B68     		ldr	r3, [r7, #4]
 3819 0168 1B68     		ldr	r3, [r3]
 3820 016a 0122     		movs	r2, #1
 3821 016c 1A71     		strb	r2, [r3, #4]
1626:../fatfs/ff.c **** 				res = dir_next(dj, 0);	/* Next entry */
 3822              		.loc 1 1626 0
 3823 016e 7868     		ldr	r0, [r7, #4]
 3824 0170 0021     		movs	r1, #0
 3825 0172 FFF7FEFF 		bl	dir_next
 3826 0176 0346     		mov	r3, r0
 3827 0178 87F82730 		strb	r3, [r7, #39]
1627:../fatfs/ff.c **** 			} while (res == FR_OK && --ne);
 3828              		.loc 1 1627 0
 3829 017c 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 3830 0180 002B     		cmp	r3, #0
 3831 0182 05D1     		bne	.L237
 3832              		.loc 1 1627 0 is_stmt 0 discriminator 1
 3833 0184 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 3834 0186 013B     		subs	r3, r3, #1
 3835 0188 7B84     		strh	r3, [r7, #34]	@ movhi
 3836 018a 7B8C     		ldrh	r3, [r7, #34]
 3837 018c 002B     		cmp	r3, #0
 3838 018e D1D1     		bne	.L239
 3839              	.L237:
1628:../fatfs/ff.c **** 		}
1629:../fatfs/ff.c **** 	}
1630:../fatfs/ff.c **** #else	/* Non LFN configuration */
1631:../fatfs/ff.c **** 	res = dir_alloc(dj, 1);		/* Allocate an entry for SFN */
1632:../fatfs/ff.c **** #endif
1633:../fatfs/ff.c **** 
1634:../fatfs/ff.c **** 	if (res == FR_OK) {				/* Set SFN entry */
 3840              		.loc 1 1634 0 is_stmt 1
 3841 0190 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 3842 0194 002B     		cmp	r3, #0
 3843 0196 2DD1     		bne	.L240
1635:../fatfs/ff.c **** 		res = move_window(dj->fs, dj->sect);
 3844              		.loc 1 1635 0
 3845 0198 7B68     		ldr	r3, [r7, #4]
 3846 019a 1A68     		ldr	r2, [r3]
 3847 019c 7B68     		ldr	r3, [r7, #4]
 3848 019e 1B69     		ldr	r3, [r3, #16]
 3849 01a0 1046     		mov	r0, r2
 3850 01a2 1946     		mov	r1, r3
 3851 01a4 FFF7FEFF 		bl	move_window
 3852 01a8 0346     		mov	r3, r0
 3853 01aa 87F82730 		strb	r3, [r7, #39]
1636:../fatfs/ff.c **** 		if (res == FR_OK) {
 3854              		.loc 1 1636 0
 3855 01ae 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 3856 01b2 002B     		cmp	r3, #0
 3857 01b4 1ED1     		bne	.L240
1637:../fatfs/ff.c **** 			mem_set(dj->dir, 0, SZ_DIR);	/* Clean the entry */
 3858              		.loc 1 1637 0
 3859 01b6 7B68     		ldr	r3, [r7, #4]
 3860 01b8 5B69     		ldr	r3, [r3, #20]
 3861 01ba 1846     		mov	r0, r3
 3862 01bc 0021     		movs	r1, #0
 3863 01be 2022     		movs	r2, #32
 3864 01c0 FFF7FEFF 		bl	mem_set
1638:../fatfs/ff.c **** 			mem_cpy(dj->dir, dj->fn, 11);	/* Put SFN */
 3865              		.loc 1 1638 0
 3866 01c4 7B68     		ldr	r3, [r7, #4]
 3867 01c6 5A69     		ldr	r2, [r3, #20]
 3868 01c8 7B68     		ldr	r3, [r7, #4]
 3869 01ca 9B69     		ldr	r3, [r3, #24]
 3870 01cc 1046     		mov	r0, r2
 3871 01ce 1946     		mov	r1, r3
 3872 01d0 0B22     		movs	r2, #11
 3873 01d2 FFF7FEFF 		bl	mem_cpy
1639:../fatfs/ff.c **** #if _USE_LFN
1640:../fatfs/ff.c **** 			dj->dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
 3874              		.loc 1 1640 0
 3875 01d6 7B68     		ldr	r3, [r7, #4]
 3876 01d8 5B69     		ldr	r3, [r3, #20]
 3877 01da 0C33     		adds	r3, r3, #12
 3878 01dc 7A68     		ldr	r2, [r7, #4]
 3879 01de 9269     		ldr	r2, [r2, #24]
 3880 01e0 0B32     		adds	r2, r2, #11
 3881 01e2 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 3882 01e4 02F01802 		and	r2, r2, #24
 3883 01e8 D2B2     		uxtb	r2, r2
 3884 01ea 1A70     		strb	r2, [r3]
1641:../fatfs/ff.c **** #endif
1642:../fatfs/ff.c **** 			dj->fs->wflag = 1;
 3885              		.loc 1 1642 0
 3886 01ec 7B68     		ldr	r3, [r7, #4]
 3887 01ee 1B68     		ldr	r3, [r3]
 3888 01f0 0122     		movs	r2, #1
 3889 01f2 1A71     		strb	r2, [r3, #4]
 3890              	.L240:
1643:../fatfs/ff.c **** 		}
1644:../fatfs/ff.c **** 	}
1645:../fatfs/ff.c **** 
1646:../fatfs/ff.c **** 	return res;
 3891              		.loc 1 1646 0
 3892 01f4 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 3893              	.L241:
1647:../fatfs/ff.c **** }
 3894              		.loc 1 1647 0 discriminator 1
 3895 01f8 1846     		mov	r0, r3
 3896 01fa 2837     		adds	r7, r7, #40
 3897              		.cfi_def_cfa_offset 8
 3898 01fc BD46     		mov	sp, r7
 3899              		.cfi_def_cfa_register 13
 3900              		@ sp needed
 3901 01fe 80BD     		pop	{r7, pc}
 3902              	.L243:
 3903              		.align	2
 3904              	.L242:
 3905 0200 4FECC44E 		.word	1321528399
 3906              		.cfi_endproc
 3907              	.LFE25:
 3909              		.section	.text.dir_remove,"ax",%progbits
 3910              		.align	2
 3911              		.thumb
 3912              		.thumb_func
 3914              	dir_remove:
 3915              	.LFB26:
1648:../fatfs/ff.c **** #endif /* !_FS_READONLY */
1649:../fatfs/ff.c **** 
1650:../fatfs/ff.c **** 
1651:../fatfs/ff.c **** 
1652:../fatfs/ff.c **** 
1653:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1654:../fatfs/ff.c **** /* Remove an object from the directory                                   */
1655:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1656:../fatfs/ff.c **** #if !_FS_READONLY && !_FS_MINIMIZE
1657:../fatfs/ff.c **** static
1658:../fatfs/ff.c **** FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
1659:../fatfs/ff.c **** 	DIR *dj				/* Directory object pointing the entry to be removed */
1660:../fatfs/ff.c **** )
1661:../fatfs/ff.c **** {
 3916              		.loc 1 1661 0
 3917              		.cfi_startproc
 3918              		@ args = 0, pretend = 0, frame = 16
 3919              		@ frame_needed = 1, uses_anonymous_args = 0
 3920 0000 80B5     		push	{r7, lr}
 3921              		.cfi_def_cfa_offset 8
 3922              		.cfi_offset 7, -8
 3923              		.cfi_offset 14, -4
 3924 0002 84B0     		sub	sp, sp, #16
 3925              		.cfi_def_cfa_offset 24
 3926 0004 00AF     		add	r7, sp, #0
 3927              		.cfi_def_cfa_register 7
 3928 0006 7860     		str	r0, [r7, #4]
1662:../fatfs/ff.c **** 	FRESULT res;
1663:../fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
1664:../fatfs/ff.c **** 	WORD i;
1665:../fatfs/ff.c **** 
1666:../fatfs/ff.c **** 	i = dj->index;	/* SFN index */
 3929              		.loc 1 1666 0
 3930 0008 7B68     		ldr	r3, [r7, #4]
 3931 000a DB88     		ldrh	r3, [r3, #6]	@ movhi
 3932 000c BB81     		strh	r3, [r7, #12]	@ movhi
1667:../fatfs/ff.c **** 	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of th
 3933              		.loc 1 1667 0
 3934 000e 7B68     		ldr	r3, [r7, #4]
 3935 0010 1B8C     		ldrh	r3, [r3, #32]
 3936 0012 4FF6FF72 		movw	r2, #65535
 3937 0016 9342     		cmp	r3, r2
 3938 0018 02D0     		beq	.L245
 3939              		.loc 1 1667 0 is_stmt 0 discriminator 1
 3940 001a 7B68     		ldr	r3, [r7, #4]
 3941 001c 1B8C     		ldrh	r3, [r3, #32]
 3942 001e 00E0     		b	.L246
 3943              	.L245:
 3944              		.loc 1 1667 0 discriminator 2
 3945 0020 BB89     		ldrh	r3, [r7, #12]
 3946              	.L246:
 3947              		.loc 1 1667 0 discriminator 4
 3948 0022 7868     		ldr	r0, [r7, #4]
 3949 0024 1946     		mov	r1, r3
 3950 0026 FFF7FEFF 		bl	dir_sdi
 3951 002a 0346     		mov	r3, r0
 3952 002c FB73     		strb	r3, [r7, #15]
1668:../fatfs/ff.c **** 	if (res == FR_OK) {
 3953              		.loc 1 1668 0 is_stmt 1 discriminator 4
 3954 002e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3955 0030 002B     		cmp	r3, #0
 3956 0032 29D1     		bne	.L247
 3957              	.L251:
1669:../fatfs/ff.c **** 		do {
1670:../fatfs/ff.c **** 			res = move_window(dj->fs, dj->sect);
 3958              		.loc 1 1670 0
 3959 0034 7B68     		ldr	r3, [r7, #4]
 3960 0036 1A68     		ldr	r2, [r3]
 3961 0038 7B68     		ldr	r3, [r7, #4]
 3962 003a 1B69     		ldr	r3, [r3, #16]
 3963 003c 1046     		mov	r0, r2
 3964 003e 1946     		mov	r1, r3
 3965 0040 FFF7FEFF 		bl	move_window
 3966 0044 0346     		mov	r3, r0
 3967 0046 FB73     		strb	r3, [r7, #15]
1671:../fatfs/ff.c **** 			if (res != FR_OK) break;
 3968              		.loc 1 1671 0
 3969 0048 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3970 004a 002B     		cmp	r3, #0
 3971 004c 00D0     		beq	.L248
 3972 004e 16E0     		b	.L249
 3973              	.L248:
1672:../fatfs/ff.c **** 			*dj->dir = DDE;			/* Mark the entry "deleted" */
 3974              		.loc 1 1672 0
 3975 0050 7B68     		ldr	r3, [r7, #4]
 3976 0052 5B69     		ldr	r3, [r3, #20]
 3977 0054 E522     		movs	r2, #229
 3978 0056 1A70     		strb	r2, [r3]
1673:../fatfs/ff.c **** 			dj->fs->wflag = 1;
 3979              		.loc 1 1673 0
 3980 0058 7B68     		ldr	r3, [r7, #4]
 3981 005a 1B68     		ldr	r3, [r3]
 3982 005c 0122     		movs	r2, #1
 3983 005e 1A71     		strb	r2, [r3, #4]
1674:../fatfs/ff.c **** 			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
 3984              		.loc 1 1674 0
 3985 0060 7B68     		ldr	r3, [r7, #4]
 3986 0062 DB88     		ldrh	r3, [r3, #6]
 3987 0064 BA89     		ldrh	r2, [r7, #12]
 3988 0066 9A42     		cmp	r2, r3
 3989 0068 00D8     		bhi	.L250
 3990 006a 08E0     		b	.L249
 3991              	.L250:
1675:../fatfs/ff.c **** 			res = dir_next(dj, 0);		/* Next entry */
 3992              		.loc 1 1675 0
 3993 006c 7868     		ldr	r0, [r7, #4]
 3994 006e 0021     		movs	r1, #0
 3995 0070 FFF7FEFF 		bl	dir_next
 3996 0074 0346     		mov	r3, r0
 3997 0076 FB73     		strb	r3, [r7, #15]
1676:../fatfs/ff.c **** 		} while (res == FR_OK);
 3998              		.loc 1 1676 0
 3999 0078 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4000 007a 002B     		cmp	r3, #0
 4001 007c DAD0     		beq	.L251
 4002              	.L249:
1677:../fatfs/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
 4003              		.loc 1 1677 0
 4004 007e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4005 0080 042B     		cmp	r3, #4
 4006 0082 01D1     		bne	.L247
 4007              		.loc 1 1677 0 is_stmt 0 discriminator 1
 4008 0084 0223     		movs	r3, #2
 4009 0086 FB73     		strb	r3, [r7, #15]
 4010              	.L247:
1678:../fatfs/ff.c **** 	}
1679:../fatfs/ff.c **** 
1680:../fatfs/ff.c **** #else			/* Non LFN configuration */
1681:../fatfs/ff.c **** 	res = dir_sdi(dj, dj->index);
1682:../fatfs/ff.c **** 	if (res == FR_OK) {
1683:../fatfs/ff.c **** 		res = move_window(dj->fatfs, dj->sect);
1684:../fatfs/ff.c **** 		if (res == FR_OK) {
1685:../fatfs/ff.c **** 			*dj->dir = DDE;			/* Mark the entry "deleted" */
1686:../fatfs/ff.c **** 			dj->fatfs->wflag = 1;
1687:../fatfs/ff.c **** 		}
1688:../fatfs/ff.c **** 	}
1689:../fatfs/ff.c **** #endif
1690:../fatfs/ff.c **** 
1691:../fatfs/ff.c **** 	return res;
 4011              		.loc 1 1691 0 is_stmt 1
 4012 0088 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1692:../fatfs/ff.c **** }
 4013              		.loc 1 1692 0
 4014 008a 1846     		mov	r0, r3
 4015 008c 1037     		adds	r7, r7, #16
 4016              		.cfi_def_cfa_offset 8
 4017 008e BD46     		mov	sp, r7
 4018              		.cfi_def_cfa_register 13
 4019              		@ sp needed
 4020 0090 80BD     		pop	{r7, pc}
 4021              		.cfi_endproc
 4022              	.LFE26:
 4024 0092 00BF     		.section	.rodata
 4025              		.align	2
 4026              	.LC0:
 4027 0000 222A3A3C 		.ascii	"\"*:<>?|\177\000"
 4027      3E3F7C7F 
 4027      00
 4028 0009 000000   		.align	2
 4029              	.LC1:
 4030 000c 2B2C3B3D 		.ascii	"+,;=[]\000"
 4030      5B5D00
 4031              		.section	.text.create_name,"ax",%progbits
 4032              		.align	2
 4033              		.thumb
 4034              		.thumb_func
 4036              	create_name:
 4037              	.LFB27:
1693:../fatfs/ff.c **** #endif /* !_FS_READONLY */
1694:../fatfs/ff.c **** 
1695:../fatfs/ff.c **** 
1696:../fatfs/ff.c **** 
1697:../fatfs/ff.c **** 
1698:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1699:../fatfs/ff.c **** /* Pick a segment and create the object name in directory form           */
1700:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1701:../fatfs/ff.c **** 
1702:../fatfs/ff.c **** static
1703:../fatfs/ff.c **** FRESULT create_name (
1704:../fatfs/ff.c **** 	DIR *dj,			/* Pointer to the directory object */
1705:../fatfs/ff.c **** 	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
1706:../fatfs/ff.c **** )
1707:../fatfs/ff.c **** {
 4038              		.loc 1 1707 0
 4039              		.cfi_startproc
 4040              		@ args = 0, pretend = 0, frame = 40
 4041              		@ frame_needed = 1, uses_anonymous_args = 0
 4042 0000 80B5     		push	{r7, lr}
 4043              		.cfi_def_cfa_offset 8
 4044              		.cfi_offset 7, -8
 4045              		.cfi_offset 14, -4
 4046 0002 8AB0     		sub	sp, sp, #40
 4047              		.cfi_def_cfa_offset 48
 4048 0004 00AF     		add	r7, sp, #0
 4049              		.cfi_def_cfa_register 7
 4050 0006 7860     		str	r0, [r7, #4]
 4051 0008 3960     		str	r1, [r7]
1708:../fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
1709:../fatfs/ff.c **** 	BYTE b, cf;
1710:../fatfs/ff.c **** 	WCHAR w, *lfn;
1711:../fatfs/ff.c **** 	UINT i, ni, si, di;
1712:../fatfs/ff.c **** 	const TCHAR *p;
1713:../fatfs/ff.c **** 
1714:../fatfs/ff.c **** 	/* Create LFN in Unicode */
1715:../fatfs/ff.c **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 4052              		.loc 1 1715 0
 4053 000a 3B68     		ldr	r3, [r7]
 4054 000c 1B68     		ldr	r3, [r3]
 4055 000e 3B61     		str	r3, [r7, #16]
 4056 0010 02E0     		b	.L254
 4057              	.L255:
 4058              		.loc 1 1715 0 is_stmt 0 discriminator 5
 4059 0012 3B69     		ldr	r3, [r7, #16]
 4060 0014 0133     		adds	r3, r3, #1
 4061 0016 3B61     		str	r3, [r7, #16]
 4062              	.L254:
 4063              		.loc 1 1715 0 discriminator 1
 4064 0018 3B69     		ldr	r3, [r7, #16]
 4065 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4066 001c 2F2B     		cmp	r3, #47
 4067 001e F8D0     		beq	.L255
 4068              		.loc 1 1715 0 discriminator 4
 4069 0020 3B69     		ldr	r3, [r7, #16]
 4070 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4071 0024 5C2B     		cmp	r3, #92
 4072 0026 F4D0     		beq	.L255
1716:../fatfs/ff.c **** 	lfn = dj->lfn;
 4073              		.loc 1 1716 0 is_stmt 1
 4074 0028 7B68     		ldr	r3, [r7, #4]
 4075 002a DB69     		ldr	r3, [r3, #28]
 4076 002c FB60     		str	r3, [r7, #12]
1717:../fatfs/ff.c **** 	si = di = 0;
 4077              		.loc 1 1717 0
 4078 002e 0023     		movs	r3, #0
 4079 0030 7B61     		str	r3, [r7, #20]
 4080 0032 7B69     		ldr	r3, [r7, #20]
 4081 0034 BB61     		str	r3, [r7, #24]
 4082              	.L261:
1718:../fatfs/ff.c **** 	for (;;) {
1719:../fatfs/ff.c **** 		w = p[si++];					/* Get a character */
 4083              		.loc 1 1719 0
 4084 0036 BB69     		ldr	r3, [r7, #24]
 4085 0038 5A1C     		adds	r2, r3, #1
 4086 003a BA61     		str	r2, [r7, #24]
 4087 003c 3A69     		ldr	r2, [r7, #16]
 4088 003e 1344     		add	r3, r3, r2
 4089 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4090 0042 BB84     		strh	r3, [r7, #36]	@ movhi
1720:../fatfs/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 4091              		.loc 1 1720 0
 4092 0044 BB8C     		ldrh	r3, [r7, #36]
 4093 0046 1F2B     		cmp	r3, #31
 4094 0048 2FD9     		bls	.L256
 4095              		.loc 1 1720 0 is_stmt 0 discriminator 1
 4096 004a BB8C     		ldrh	r3, [r7, #36]
 4097 004c 2F2B     		cmp	r3, #47
 4098 004e 2CD0     		beq	.L256
 4099              		.loc 1 1720 0 discriminator 2
 4100 0050 BB8C     		ldrh	r3, [r7, #36]
 4101 0052 5C2B     		cmp	r3, #92
 4102 0054 29D0     		beq	.L256
1721:../fatfs/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
 4103              		.loc 1 1721 0 is_stmt 1
 4104 0056 7B69     		ldr	r3, [r7, #20]
 4105 0058 FE2B     		cmp	r3, #254
 4106 005a 01D9     		bls	.L257
1722:../fatfs/ff.c **** 			return FR_INVALID_NAME;
 4107              		.loc 1 1722 0
 4108 005c 0623     		movs	r3, #6
 4109 005e C4E1     		b	.L258
 4110              	.L257:
1723:../fatfs/ff.c **** #if !_LFN_UNICODE
1724:../fatfs/ff.c **** 		w &= 0xFF;
 4111              		.loc 1 1724 0
 4112 0060 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 4113 0062 DBB2     		uxtb	r3, r3
 4114 0064 BB84     		strh	r3, [r7, #36]	@ movhi
1725:../fatfs/ff.c **** 		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1726:../fatfs/ff.c **** 			b = (BYTE)p[si++];			/* Get 2nd byte */
1727:../fatfs/ff.c **** 			if (!IsDBCS2(b))
1728:../fatfs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
1729:../fatfs/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
1730:../fatfs/ff.c **** 		}
1731:../fatfs/ff.c **** 		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 4115              		.loc 1 1731 0
 4116 0066 BB8C     		ldrh	r3, [r7, #36]
 4117 0068 1846     		mov	r0, r3
 4118 006a 0121     		movs	r1, #1
 4119 006c FFF7FEFF 		bl	ff_convert
 4120 0070 0346     		mov	r3, r0
 4121 0072 BB84     		strh	r3, [r7, #36]	@ movhi
1732:../fatfs/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 4122              		.loc 1 1732 0
 4123 0074 BB8C     		ldrh	r3, [r7, #36]
 4124 0076 002B     		cmp	r3, #0
 4125 0078 01D1     		bne	.L259
 4126              		.loc 1 1732 0 is_stmt 0 discriminator 1
 4127 007a 0623     		movs	r3, #6
 4128 007c B5E1     		b	.L258
 4129              	.L259:
1733:../fatfs/ff.c **** #endif
1734:../fatfs/ff.c **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
 4130              		.loc 1 1734 0 is_stmt 1
 4131 007e BB8C     		ldrh	r3, [r7, #36]
 4132 0080 7F2B     		cmp	r3, #127
 4133 0082 09D8     		bhi	.L260
 4134              		.loc 1 1734 0 is_stmt 0 discriminator 1
 4135 0084 BB8C     		ldrh	r3, [r7, #36]
 4136 0086 A548     		ldr	r0, .L306
 4137 0088 1946     		mov	r1, r3
 4138 008a FFF7FEFF 		bl	chk_chr
 4139 008e 0346     		mov	r3, r0
 4140 0090 002B     		cmp	r3, #0
 4141 0092 01D0     		beq	.L260
1735:../fatfs/ff.c **** 			return FR_INVALID_NAME;
 4142              		.loc 1 1735 0 is_stmt 1
 4143 0094 0623     		movs	r3, #6
 4144 0096 A8E1     		b	.L258
 4145              	.L260:
1736:../fatfs/ff.c **** 		lfn[di++] = w;					/* Store the Unicode char */
 4146              		.loc 1 1736 0
 4147 0098 7B69     		ldr	r3, [r7, #20]
 4148 009a 5A1C     		adds	r2, r3, #1
 4149 009c 7A61     		str	r2, [r7, #20]
 4150 009e 5B00     		lsls	r3, r3, #1
 4151 00a0 FA68     		ldr	r2, [r7, #12]
 4152 00a2 1344     		add	r3, r3, r2
 4153 00a4 BA8C     		ldrh	r2, [r7, #36]	@ movhi
 4154 00a6 1A80     		strh	r2, [r3]	@ movhi
1737:../fatfs/ff.c **** 	}
 4155              		.loc 1 1737 0
 4156 00a8 C5E7     		b	.L261
 4157              	.L256:
1738:../fatfs/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
 4158              		.loc 1 1738 0
 4159 00aa 3A69     		ldr	r2, [r7, #16]
 4160 00ac BB69     		ldr	r3, [r7, #24]
 4161 00ae 1A44     		add	r2, r2, r3
 4162 00b0 3B68     		ldr	r3, [r7]
 4163 00b2 1A60     		str	r2, [r3]
1739:../fatfs/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 4164              		.loc 1 1739 0
 4165 00b4 BB8C     		ldrh	r3, [r7, #36]
 4166 00b6 1F2B     		cmp	r3, #31
 4167 00b8 01D8     		bhi	.L262
 4168              		.loc 1 1739 0 is_stmt 0 discriminator 1
 4169 00ba 0423     		movs	r3, #4
 4170 00bc 00E0     		b	.L263
 4171              	.L262:
 4172              		.loc 1 1739 0 discriminator 2
 4173 00be 0023     		movs	r3, #0
 4174              	.L263:
 4175              		.loc 1 1739 0 discriminator 4
 4176 00c0 87F82630 		strb	r3, [r7, #38]
1740:../fatfs/ff.c **** #if _FS_RPATH
1741:../fatfs/ff.c **** 	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
 4177              		.loc 1 1741 0 is_stmt 1 discriminator 4
 4178 00c4 7B69     		ldr	r3, [r7, #20]
 4179 00c6 012B     		cmp	r3, #1
 4180 00c8 09D1     		bne	.L264
 4181              		.loc 1 1741 0 is_stmt 0 discriminator 1
 4182 00ca 7B69     		ldr	r3, [r7, #20]
 4183 00cc 03F10043 		add	r3, r3, #-2147483648
 4184 00d0 013B     		subs	r3, r3, #1
 4185 00d2 5B00     		lsls	r3, r3, #1
 4186 00d4 FA68     		ldr	r2, [r7, #12]
 4187 00d6 1344     		add	r3, r3, r2
 4188 00d8 1B88     		ldrh	r3, [r3]
 4189 00da 2E2B     		cmp	r3, #46
 4190 00dc 16D0     		beq	.L265
 4191              	.L264:
 4192              		.loc 1 1741 0 discriminator 3
 4193 00de 7B69     		ldr	r3, [r7, #20]
 4194 00e0 022B     		cmp	r3, #2
 4195 00e2 3AD1     		bne	.L266
1742:../fatfs/ff.c **** 		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
 4196              		.loc 1 1742 0 is_stmt 1
 4197 00e4 7B69     		ldr	r3, [r7, #20]
 4198 00e6 03F10043 		add	r3, r3, #-2147483648
 4199 00ea 013B     		subs	r3, r3, #1
 4200 00ec 5B00     		lsls	r3, r3, #1
 4201 00ee FA68     		ldr	r2, [r7, #12]
 4202 00f0 1344     		add	r3, r3, r2
 4203 00f2 1B88     		ldrh	r3, [r3]
 4204 00f4 2E2B     		cmp	r3, #46
 4205 00f6 30D1     		bne	.L266
 4206              		.loc 1 1742 0 is_stmt 0 discriminator 1
 4207 00f8 7B69     		ldr	r3, [r7, #20]
 4208 00fa 03F10043 		add	r3, r3, #-2147483648
 4209 00fe 023B     		subs	r3, r3, #2
 4210 0100 5B00     		lsls	r3, r3, #1
 4211 0102 FA68     		ldr	r2, [r7, #12]
 4212 0104 1344     		add	r3, r3, r2
 4213 0106 1B88     		ldrh	r3, [r3]
 4214 0108 2E2B     		cmp	r3, #46
 4215 010a 26D1     		bne	.L266
 4216              	.L265:
1743:../fatfs/ff.c **** 		lfn[di] = 0;
 4217              		.loc 1 1743 0 is_stmt 1
 4218 010c 7B69     		ldr	r3, [r7, #20]
 4219 010e 5B00     		lsls	r3, r3, #1
 4220 0110 FA68     		ldr	r2, [r7, #12]
 4221 0112 1344     		add	r3, r3, r2
 4222 0114 0022     		movs	r2, #0
 4223 0116 1A80     		strh	r2, [r3]	@ movhi
1744:../fatfs/ff.c **** 		for (i = 0; i < 11; i++)
 4224              		.loc 1 1744 0
 4225 0118 0023     		movs	r3, #0
 4226 011a 3B62     		str	r3, [r7, #32]
 4227 011c 0EE0     		b	.L267
 4228              	.L270:
1745:../fatfs/ff.c **** 			dj->fn[i] = (i < di) ? '.' : ' ';
 4229              		.loc 1 1745 0
 4230 011e 7B68     		ldr	r3, [r7, #4]
 4231 0120 9A69     		ldr	r2, [r3, #24]
 4232 0122 3B6A     		ldr	r3, [r7, #32]
 4233 0124 1344     		add	r3, r3, r2
 4234 0126 396A     		ldr	r1, [r7, #32]
 4235 0128 7A69     		ldr	r2, [r7, #20]
 4236 012a 9142     		cmp	r1, r2
 4237 012c 01D2     		bcs	.L268
 4238              		.loc 1 1745 0 is_stmt 0 discriminator 1
 4239 012e 2E22     		movs	r2, #46
 4240 0130 00E0     		b	.L269
 4241              	.L268:
 4242              		.loc 1 1745 0 discriminator 2
 4243 0132 2022     		movs	r2, #32
 4244              	.L269:
 4245              		.loc 1 1745 0 discriminator 4
 4246 0134 1A70     		strb	r2, [r3]
1744:../fatfs/ff.c **** 		for (i = 0; i < 11; i++)
 4247              		.loc 1 1744 0 is_stmt 1 discriminator 4
 4248 0136 3B6A     		ldr	r3, [r7, #32]
 4249 0138 0133     		adds	r3, r3, #1
 4250 013a 3B62     		str	r3, [r7, #32]
 4251              	.L267:
1744:../fatfs/ff.c **** 		for (i = 0; i < 11; i++)
 4252              		.loc 1 1744 0 is_stmt 0 discriminator 2
 4253 013c 3B6A     		ldr	r3, [r7, #32]
 4254 013e 0A2B     		cmp	r3, #10
 4255 0140 EDD9     		bls	.L270
1746:../fatfs/ff.c **** 		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 4256              		.loc 1 1746 0 is_stmt 1
 4257 0142 7B68     		ldr	r3, [r7, #4]
 4258 0144 9A69     		ldr	r2, [r3, #24]
 4259 0146 3B6A     		ldr	r3, [r7, #32]
 4260 0148 1344     		add	r3, r3, r2
 4261 014a 97F82620 		ldrb	r2, [r7, #38]
 4262 014e 42F02002 		orr	r2, r2, #32
 4263 0152 D2B2     		uxtb	r2, r2
 4264 0154 1A70     		strb	r2, [r3]
1747:../fatfs/ff.c **** 		return FR_OK;
 4265              		.loc 1 1747 0
 4266 0156 0023     		movs	r3, #0
 4267 0158 47E1     		b	.L258
 4268              	.L266:
1748:../fatfs/ff.c **** 	}
1749:../fatfs/ff.c **** #endif
1750:../fatfs/ff.c **** 	while (di) {						/* Strip trailing spaces and dots */
 4269              		.loc 1 1750 0
 4270 015a 12E0     		b	.L271
 4271              	.L274:
1751:../fatfs/ff.c **** 		w = lfn[di-1];
 4272              		.loc 1 1751 0
 4273 015c 7B69     		ldr	r3, [r7, #20]
 4274 015e 03F10043 		add	r3, r3, #-2147483648
 4275 0162 013B     		subs	r3, r3, #1
 4276 0164 5B00     		lsls	r3, r3, #1
 4277 0166 FA68     		ldr	r2, [r7, #12]
 4278 0168 1344     		add	r3, r3, r2
 4279 016a 1B88     		ldrh	r3, [r3]	@ movhi
 4280 016c BB84     		strh	r3, [r7, #36]	@ movhi
1752:../fatfs/ff.c **** 		if (w != ' ' && w != '.') break;
 4281              		.loc 1 1752 0
 4282 016e BB8C     		ldrh	r3, [r7, #36]
 4283 0170 202B     		cmp	r3, #32
 4284 0172 03D0     		beq	.L272
 4285              		.loc 1 1752 0 is_stmt 0 discriminator 1
 4286 0174 BB8C     		ldrh	r3, [r7, #36]
 4287 0176 2E2B     		cmp	r3, #46
 4288 0178 00D0     		beq	.L272
 4289              		.loc 1 1752 0
 4290 017a 05E0     		b	.L273
 4291              	.L272:
1753:../fatfs/ff.c **** 		di--;
 4292              		.loc 1 1753 0 is_stmt 1
 4293 017c 7B69     		ldr	r3, [r7, #20]
 4294 017e 013B     		subs	r3, r3, #1
 4295 0180 7B61     		str	r3, [r7, #20]
 4296              	.L271:
1750:../fatfs/ff.c **** 		w = lfn[di-1];
 4297              		.loc 1 1750 0
 4298 0182 7B69     		ldr	r3, [r7, #20]
 4299 0184 002B     		cmp	r3, #0
 4300 0186 E9D1     		bne	.L274
 4301              	.L273:
1754:../fatfs/ff.c **** 	}
1755:../fatfs/ff.c **** 	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 4302              		.loc 1 1755 0
 4303 0188 7B69     		ldr	r3, [r7, #20]
 4304 018a 002B     		cmp	r3, #0
 4305 018c 01D1     		bne	.L275
 4306              		.loc 1 1755 0 is_stmt 0 discriminator 1
 4307 018e 0623     		movs	r3, #6
 4308 0190 2BE1     		b	.L258
 4309              	.L275:
1756:../fatfs/ff.c **** 
1757:../fatfs/ff.c **** 	lfn[di] = 0;						/* LFN is created */
 4310              		.loc 1 1757 0 is_stmt 1
 4311 0192 7B69     		ldr	r3, [r7, #20]
 4312 0194 5B00     		lsls	r3, r3, #1
 4313 0196 FA68     		ldr	r2, [r7, #12]
 4314 0198 1344     		add	r3, r3, r2
 4315 019a 0022     		movs	r2, #0
 4316 019c 1A80     		strh	r2, [r3]	@ movhi
1758:../fatfs/ff.c **** 
1759:../fatfs/ff.c **** 	/* Create SFN in directory form */
1760:../fatfs/ff.c **** 	mem_set(dj->fn, ' ', 11);
 4317              		.loc 1 1760 0
 4318 019e 7B68     		ldr	r3, [r7, #4]
 4319 01a0 9B69     		ldr	r3, [r3, #24]
 4320 01a2 1846     		mov	r0, r3
 4321 01a4 2021     		movs	r1, #32
 4322 01a6 0B22     		movs	r2, #11
 4323 01a8 FFF7FEFF 		bl	mem_set
1761:../fatfs/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 4324              		.loc 1 1761 0
 4325 01ac 0023     		movs	r3, #0
 4326 01ae BB61     		str	r3, [r7, #24]
 4327 01b0 02E0     		b	.L276
 4328              	.L277:
 4329              		.loc 1 1761 0 is_stmt 0 discriminator 5
 4330 01b2 BB69     		ldr	r3, [r7, #24]
 4331 01b4 0133     		adds	r3, r3, #1
 4332 01b6 BB61     		str	r3, [r7, #24]
 4333              	.L276:
 4334              		.loc 1 1761 0 discriminator 1
 4335 01b8 BB69     		ldr	r3, [r7, #24]
 4336 01ba 5B00     		lsls	r3, r3, #1
 4337 01bc FA68     		ldr	r2, [r7, #12]
 4338 01be 1344     		add	r3, r3, r2
 4339 01c0 1B88     		ldrh	r3, [r3]
 4340 01c2 202B     		cmp	r3, #32
 4341 01c4 F5D0     		beq	.L277
 4342              		.loc 1 1761 0 discriminator 4
 4343 01c6 BB69     		ldr	r3, [r7, #24]
 4344 01c8 5B00     		lsls	r3, r3, #1
 4345 01ca FA68     		ldr	r2, [r7, #12]
 4346 01cc 1344     		add	r3, r3, r2
 4347 01ce 1B88     		ldrh	r3, [r3]
 4348 01d0 2E2B     		cmp	r3, #46
 4349 01d2 EED0     		beq	.L277
1762:../fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 4350              		.loc 1 1762 0 is_stmt 1
 4351 01d4 BB69     		ldr	r3, [r7, #24]
 4352 01d6 002B     		cmp	r3, #0
 4353 01d8 05D0     		beq	.L278
 4354              		.loc 1 1762 0 is_stmt 0 discriminator 1
 4355 01da 97F82630 		ldrb	r3, [r7, #38]
 4356 01de 43F00303 		orr	r3, r3, #3
 4357 01e2 87F82630 		strb	r3, [r7, #38]
 4358              	.L278:
1763:../fatfs/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 4359              		.loc 1 1763 0 is_stmt 1
 4360 01e6 02E0     		b	.L279
 4361              	.L281:
 4362              		.loc 1 1763 0 is_stmt 0 discriminator 3
 4363 01e8 7B69     		ldr	r3, [r7, #20]
 4364 01ea 013B     		subs	r3, r3, #1
 4365 01ec 7B61     		str	r3, [r7, #20]
 4366              	.L279:
 4367              		.loc 1 1763 0 discriminator 1
 4368 01ee 7B69     		ldr	r3, [r7, #20]
 4369 01f0 002B     		cmp	r3, #0
 4370 01f2 09D0     		beq	.L280
 4371              		.loc 1 1763 0 discriminator 2
 4372 01f4 7B69     		ldr	r3, [r7, #20]
 4373 01f6 03F10043 		add	r3, r3, #-2147483648
 4374 01fa 013B     		subs	r3, r3, #1
 4375 01fc 5B00     		lsls	r3, r3, #1
 4376 01fe FA68     		ldr	r2, [r7, #12]
 4377 0200 1344     		add	r3, r3, r2
 4378 0202 1B88     		ldrh	r3, [r3]
 4379 0204 2E2B     		cmp	r3, #46
 4380 0206 EFD1     		bne	.L281
 4381              	.L280:
1764:../fatfs/ff.c **** 
1765:../fatfs/ff.c **** 	b = i = 0; ni = 8;
 4382              		.loc 1 1765 0 is_stmt 1
 4383 0208 0023     		movs	r3, #0
 4384 020a 3B62     		str	r3, [r7, #32]
 4385 020c 0023     		movs	r3, #0
 4386 020e 87F82730 		strb	r3, [r7, #39]
 4387 0212 0823     		movs	r3, #8
 4388 0214 FB61     		str	r3, [r7, #28]
 4389              	.L298:
1766:../fatfs/ff.c **** 	for (;;) {
1767:../fatfs/ff.c **** 		w = lfn[si++];					/* Get an LFN char */
 4390              		.loc 1 1767 0
 4391 0216 BB69     		ldr	r3, [r7, #24]
 4392 0218 5A1C     		adds	r2, r3, #1
 4393 021a BA61     		str	r2, [r7, #24]
 4394 021c 5B00     		lsls	r3, r3, #1
 4395 021e FA68     		ldr	r2, [r7, #12]
 4396 0220 1344     		add	r3, r3, r2
 4397 0222 1B88     		ldrh	r3, [r3]	@ movhi
 4398 0224 BB84     		strh	r3, [r7, #36]	@ movhi
1768:../fatfs/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
 4399              		.loc 1 1768 0
 4400 0226 BB8C     		ldrh	r3, [r7, #36]
 4401 0228 002B     		cmp	r3, #0
 4402 022a 00D1     		bne	.L282
 4403 022c 95E0     		b	.L283
 4404              	.L282:
1769:../fatfs/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 4405              		.loc 1 1769 0
 4406 022e BB8C     		ldrh	r3, [r7, #36]
 4407 0230 202B     		cmp	r3, #32
 4408 0232 06D0     		beq	.L284
 4409              		.loc 1 1769 0 is_stmt 0 discriminator 1
 4410 0234 BB8C     		ldrh	r3, [r7, #36]
 4411 0236 2E2B     		cmp	r3, #46
 4412 0238 0AD1     		bne	.L285
 4413              		.loc 1 1769 0 discriminator 2
 4414 023a BA69     		ldr	r2, [r7, #24]
 4415 023c 7B69     		ldr	r3, [r7, #20]
 4416 023e 9A42     		cmp	r2, r3
 4417 0240 06D0     		beq	.L285
 4418              	.L284:
1770:../fatfs/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
 4419              		.loc 1 1770 0 is_stmt 1
 4420 0242 97F82630 		ldrb	r3, [r7, #38]
 4421 0246 43F00303 		orr	r3, r3, #3
 4422 024a 87F82630 		strb	r3, [r7, #38]
 4423 024e 83E0     		b	.L286
 4424              	.L285:
1771:../fatfs/ff.c **** 		}
1772:../fatfs/ff.c **** 
1773:../fatfs/ff.c **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
 4425              		.loc 1 1773 0
 4426 0250 3A6A     		ldr	r2, [r7, #32]
 4427 0252 FB69     		ldr	r3, [r7, #28]
 4428 0254 9A42     		cmp	r2, r3
 4429 0256 03D2     		bcs	.L287
 4430              		.loc 1 1773 0 is_stmt 0 discriminator 1
 4431 0258 BA69     		ldr	r2, [r7, #24]
 4432 025a 7B69     		ldr	r3, [r7, #20]
 4433 025c 9A42     		cmp	r2, r3
 4434 025e 24D1     		bne	.L288
 4435              	.L287:
1774:../fatfs/ff.c **** 			if (ni == 11) {				/* Long extension */
 4436              		.loc 1 1774 0 is_stmt 1
 4437 0260 FB69     		ldr	r3, [r7, #28]
 4438 0262 0B2B     		cmp	r3, #11
 4439 0264 06D1     		bne	.L289
1775:../fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
 4440              		.loc 1 1775 0
 4441 0266 97F82630 		ldrb	r3, [r7, #38]
 4442 026a 43F00303 		orr	r3, r3, #3
 4443 026e 87F82630 		strb	r3, [r7, #38]
 4444 0272 72E0     		b	.L283
 4445              	.L289:
1776:../fatfs/ff.c **** 			}
1777:../fatfs/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 4446              		.loc 1 1777 0
 4447 0274 BA69     		ldr	r2, [r7, #24]
 4448 0276 7B69     		ldr	r3, [r7, #20]
 4449 0278 9A42     		cmp	r2, r3
 4450 027a 05D0     		beq	.L290
 4451              		.loc 1 1777 0 is_stmt 0 discriminator 1
 4452 027c 97F82630 		ldrb	r3, [r7, #38]
 4453 0280 43F00303 		orr	r3, r3, #3
 4454 0284 87F82630 		strb	r3, [r7, #38]
 4455              	.L290:
1778:../fatfs/ff.c **** 			if (si > di) break;			/* No extension */
 4456              		.loc 1 1778 0 is_stmt 1
 4457 0288 BA69     		ldr	r2, [r7, #24]
 4458 028a 7B69     		ldr	r3, [r7, #20]
 4459 028c 9A42     		cmp	r2, r3
 4460 028e 00D9     		bls	.L291
 4461 0290 63E0     		b	.L283
 4462              	.L291:
1779:../fatfs/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
 4463              		.loc 1 1779 0
 4464 0292 7B69     		ldr	r3, [r7, #20]
 4465 0294 BB61     		str	r3, [r7, #24]
 4466 0296 0823     		movs	r3, #8
 4467 0298 3B62     		str	r3, [r7, #32]
 4468 029a 0B23     		movs	r3, #11
 4469 029c FB61     		str	r3, [r7, #28]
1780:../fatfs/ff.c **** 			b <<= 2; continue;
 4470              		.loc 1 1780 0
 4471 029e 97F82730 		ldrb	r3, [r7, #39]
 4472 02a2 9B00     		lsls	r3, r3, #2
 4473 02a4 87F82730 		strb	r3, [r7, #39]
 4474 02a8 56E0     		b	.L286
 4475              	.L288:
1781:../fatfs/ff.c **** 		}
1782:../fatfs/ff.c **** 
1783:../fatfs/ff.c **** 		if (w >= 0x80) {				/* Non ASCII char */
 4476              		.loc 1 1783 0
 4477 02aa BB8C     		ldrh	r3, [r7, #36]
 4478 02ac 7F2B     		cmp	r3, #127
 4479 02ae 14D9     		bls	.L305
1784:../fatfs/ff.c **** #ifdef _EXCVT
1785:../fatfs/ff.c **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 4480              		.loc 1 1785 0
 4481 02b0 BB8C     		ldrh	r3, [r7, #36]
 4482 02b2 1846     		mov	r0, r3
 4483 02b4 0021     		movs	r1, #0
 4484 02b6 FFF7FEFF 		bl	ff_convert
 4485 02ba 0346     		mov	r3, r0
 4486 02bc BB84     		strh	r3, [r7, #36]	@ movhi
1786:../fatfs/ff.c **** 			if (w) w = ExCvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
 4487              		.loc 1 1786 0
 4488 02be BB8C     		ldrh	r3, [r7, #36]
 4489 02c0 002B     		cmp	r3, #0
 4490 02c2 04D0     		beq	.L293
 4491              		.loc 1 1786 0 is_stmt 0 discriminator 1
 4492 02c4 BB8C     		ldrh	r3, [r7, #36]
 4493 02c6 803B     		subs	r3, r3, #128
 4494 02c8 154A     		ldr	r2, .L306+4
 4495 02ca D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4496 02cc BB84     		strh	r3, [r7, #36]	@ movhi
 4497              	.L293:
1787:../fatfs/ff.c **** #else
1788:../fatfs/ff.c **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
1789:../fatfs/ff.c **** #endif
1790:../fatfs/ff.c **** 			cf |= NS_LFN;				/* Force create LFN entry */
 4498              		.loc 1 1790 0 is_stmt 1
 4499 02ce 97F82630 		ldrb	r3, [r7, #38]
 4500 02d2 43F00203 		orr	r3, r3, #2
 4501 02d6 87F82630 		strb	r3, [r7, #38]
 4502              	.L305:
1791:../fatfs/ff.c **** 		}
1792:../fatfs/ff.c **** 
1793:../fatfs/ff.c **** 		if (_DF1S && w >= 0x100) {		/* Double byte char (always false on SBCS cfg) */
1794:../fatfs/ff.c **** 			if (i >= ni - 1) {
1795:../fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
1796:../fatfs/ff.c **** 			}
1797:../fatfs/ff.c **** 			dj->fn[i++] = (BYTE)(w >> 8);
1798:../fatfs/ff.c **** 		} else {						/* Single byte char */
1799:../fatfs/ff.c **** 			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
 4503              		.loc 1 1799 0
 4504 02da BB8C     		ldrh	r3, [r7, #36]
 4505 02dc 002B     		cmp	r3, #0
 4506 02de 07D0     		beq	.L294
 4507              		.loc 1 1799 0 is_stmt 0 discriminator 1
 4508 02e0 BB8C     		ldrh	r3, [r7, #36]
 4509 02e2 1048     		ldr	r0, .L306+8
 4510 02e4 1946     		mov	r1, r3
 4511 02e6 FFF7FEFF 		bl	chk_chr
 4512 02ea 0346     		mov	r3, r0
 4513 02ec 002B     		cmp	r3, #0
 4514 02ee 08D0     		beq	.L295
 4515              	.L294:
1800:../fatfs/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 4516              		.loc 1 1800 0 is_stmt 1
 4517 02f0 5F23     		movs	r3, #95
 4518 02f2 BB84     		strh	r3, [r7, #36]	@ movhi
 4519 02f4 97F82630 		ldrb	r3, [r7, #38]
 4520 02f8 43F00303 		orr	r3, r3, #3
 4521 02fc 87F82630 		strb	r3, [r7, #38]
 4522 0300 21E0     		b	.L296
 4523              	.L295:
1801:../fatfs/ff.c **** 			} else {
1802:../fatfs/ff.c **** 				if (IsUpper(w)) {		/* ASCII large capital */
 4524              		.loc 1 1802 0
 4525 0302 BB8C     		ldrh	r3, [r7, #36]
 4526 0304 402B     		cmp	r3, #64
 4527 0306 0FD9     		bls	.L297
 4528              		.loc 1 1802 0 is_stmt 0 discriminator 1
 4529 0308 BB8C     		ldrh	r3, [r7, #36]
 4530 030a 5A2B     		cmp	r3, #90
 4531 030c 0CD8     		bhi	.L297
1803:../fatfs/ff.c **** 					b |= 2;
 4532              		.loc 1 1803 0 is_stmt 1
 4533 030e 97F82730 		ldrb	r3, [r7, #39]
 4534 0312 43F00203 		orr	r3, r3, #2
 4535 0316 87F82730 		strb	r3, [r7, #39]
 4536 031a 14E0     		b	.L296
 4537              	.L307:
 4538              		.align	2
 4539              	.L306:
 4540 031c 00000000 		.word	.LC0
 4541 0320 00000000 		.word	ExCvt
 4542 0324 0C000000 		.word	.LC1
 4543              	.L297:
1804:../fatfs/ff.c **** 				} else {
1805:../fatfs/ff.c **** 					if (IsLower(w)) {	/* ASCII small capital */
 4544              		.loc 1 1805 0
 4545 0328 BB8C     		ldrh	r3, [r7, #36]
 4546 032a 602B     		cmp	r3, #96
 4547 032c 0BD9     		bls	.L296
 4548              		.loc 1 1805 0 is_stmt 0 discriminator 1
 4549 032e BB8C     		ldrh	r3, [r7, #36]
 4550 0330 7A2B     		cmp	r3, #122
 4551 0332 08D8     		bhi	.L296
1806:../fatfs/ff.c **** 						b |= 1; w -= 0x20;
 4552              		.loc 1 1806 0 is_stmt 1
 4553 0334 97F82730 		ldrb	r3, [r7, #39]
 4554 0338 43F00103 		orr	r3, r3, #1
 4555 033c 87F82730 		strb	r3, [r7, #39]
 4556 0340 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 4557 0342 203B     		subs	r3, r3, #32
 4558 0344 BB84     		strh	r3, [r7, #36]	@ movhi
 4559              	.L296:
1807:../fatfs/ff.c **** 					}
1808:../fatfs/ff.c **** 				}
1809:../fatfs/ff.c **** 			}
1810:../fatfs/ff.c **** 		}
1811:../fatfs/ff.c **** 		dj->fn[i++] = (BYTE)w;
 4560              		.loc 1 1811 0
 4561 0346 7B68     		ldr	r3, [r7, #4]
 4562 0348 9A69     		ldr	r2, [r3, #24]
 4563 034a 3B6A     		ldr	r3, [r7, #32]
 4564 034c 591C     		adds	r1, r3, #1
 4565 034e 3962     		str	r1, [r7, #32]
 4566 0350 1344     		add	r3, r3, r2
 4567 0352 BA8C     		ldrh	r2, [r7, #36]	@ movhi
 4568 0354 D2B2     		uxtb	r2, r2
 4569 0356 1A70     		strb	r2, [r3]
 4570              	.L286:
1812:../fatfs/ff.c **** 	}
 4571              		.loc 1 1812 0
 4572 0358 5DE7     		b	.L298
 4573              	.L283:
1813:../fatfs/ff.c **** 
1814:../fatfs/ff.c **** 	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace i
 4574              		.loc 1 1814 0
 4575 035a 7B68     		ldr	r3, [r7, #4]
 4576 035c 9B69     		ldr	r3, [r3, #24]
 4577 035e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4578 0360 E52B     		cmp	r3, #229
 4579 0362 03D1     		bne	.L299
 4580              		.loc 1 1814 0 is_stmt 0 discriminator 1
 4581 0364 7B68     		ldr	r3, [r7, #4]
 4582 0366 9B69     		ldr	r3, [r3, #24]
 4583 0368 0522     		movs	r2, #5
 4584 036a 1A70     		strb	r2, [r3]
 4585              	.L299:
1815:../fatfs/ff.c **** 
1816:../fatfs/ff.c **** 	if (ni == 8) b <<= 2;
 4586              		.loc 1 1816 0 is_stmt 1
 4587 036c FB69     		ldr	r3, [r7, #28]
 4588 036e 082B     		cmp	r3, #8
 4589 0370 04D1     		bne	.L300
 4590              		.loc 1 1816 0 is_stmt 0 discriminator 1
 4591 0372 97F82730 		ldrb	r3, [r7, #39]
 4592 0376 9B00     		lsls	r3, r3, #2
 4593 0378 87F82730 		strb	r3, [r7, #39]
 4594              	.L300:
1817:../fatfs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
 4595              		.loc 1 1817 0 is_stmt 1
 4596 037c 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 4597 0380 03F00C03 		and	r3, r3, #12
 4598 0384 0C2B     		cmp	r3, #12
 4599 0386 05D0     		beq	.L301
 4600              		.loc 1 1817 0 is_stmt 0 discriminator 1
 4601 0388 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 4602 038c 03F00303 		and	r3, r3, #3
 4603 0390 032B     		cmp	r3, #3
 4604 0392 05D1     		bne	.L302
 4605              	.L301:
1818:../fatfs/ff.c **** 		cf |= NS_LFN;
 4606              		.loc 1 1818 0 is_stmt 1
 4607 0394 97F82630 		ldrb	r3, [r7, #38]
 4608 0398 43F00203 		orr	r3, r3, #2
 4609 039c 87F82630 		strb	r3, [r7, #38]
 4610              	.L302:
1819:../fatfs/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are create
 4611              		.loc 1 1819 0
 4612 03a0 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 4613 03a4 03F00203 		and	r3, r3, #2
 4614 03a8 002B     		cmp	r3, #0
 4615 03aa 17D1     		bne	.L303
1820:../fatfs/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 4616              		.loc 1 1820 0
 4617 03ac 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 4618 03b0 03F00303 		and	r3, r3, #3
 4619 03b4 012B     		cmp	r3, #1
 4620 03b6 05D1     		bne	.L304
 4621              		.loc 1 1820 0 is_stmt 0 discriminator 1
 4622 03b8 97F82630 		ldrb	r3, [r7, #38]
 4623 03bc 43F01003 		orr	r3, r3, #16
 4624 03c0 87F82630 		strb	r3, [r7, #38]
 4625              	.L304:
1821:../fatfs/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 4626              		.loc 1 1821 0 is_stmt 1
 4627 03c4 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 4628 03c8 03F00C03 		and	r3, r3, #12
 4629 03cc 042B     		cmp	r3, #4
 4630 03ce 05D1     		bne	.L303
 4631              		.loc 1 1821 0 is_stmt 0 discriminator 1
 4632 03d0 97F82630 		ldrb	r3, [r7, #38]
 4633 03d4 43F00803 		orr	r3, r3, #8
 4634 03d8 87F82630 		strb	r3, [r7, #38]
 4635              	.L303:
1822:../fatfs/ff.c **** 	}
1823:../fatfs/ff.c **** 
1824:../fatfs/ff.c **** 	dj->fn[NS] = cf;	/* SFN is created */
 4636              		.loc 1 1824 0 is_stmt 1
 4637 03dc 7B68     		ldr	r3, [r7, #4]
 4638 03de 9B69     		ldr	r3, [r3, #24]
 4639 03e0 0B33     		adds	r3, r3, #11
 4640 03e2 97F82620 		ldrb	r2, [r7, #38]
 4641 03e6 1A70     		strb	r2, [r3]
1825:../fatfs/ff.c **** 
1826:../fatfs/ff.c **** 	return FR_OK;
 4642              		.loc 1 1826 0
 4643 03e8 0023     		movs	r3, #0
 4644              	.L258:
1827:../fatfs/ff.c **** 
1828:../fatfs/ff.c **** 
1829:../fatfs/ff.c **** #else	/* Non-LFN configuration */
1830:../fatfs/ff.c **** 	BYTE b, c, d, *sfn;
1831:../fatfs/ff.c **** 	UINT ni, si, i;
1832:../fatfs/ff.c **** 	const char *p;
1833:../fatfs/ff.c **** 
1834:../fatfs/ff.c **** 	/* Create file name in directory form */
1835:../fatfs/ff.c **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
1836:../fatfs/ff.c **** 	sfn = dj->fn;
1837:../fatfs/ff.c **** 	mem_set(sfn, ' ', 11);
1838:../fatfs/ff.c **** 	si = i = b = 0; ni = 8;
1839:../fatfs/ff.c **** #if _FS_RPATH
1840:../fatfs/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
1841:../fatfs/ff.c **** 		for (;;) {
1842:../fatfs/ff.c **** 			c = (BYTE)p[si++];
1843:../fatfs/ff.c **** 			if (c != '.' || si >= 3) break;
1844:../fatfs/ff.c **** 			sfn[i++] = c;
1845:../fatfs/ff.c **** 		}
1846:../fatfs/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
1847:../fatfs/ff.c **** 		*path = &p[si];									/* Return pointer to the next segment */
1848:../fatfs/ff.c **** 		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
1849:../fatfs/ff.c **** 		return FR_OK;
1850:../fatfs/ff.c **** 	}
1851:../fatfs/ff.c **** #endif
1852:../fatfs/ff.c **** 	for (;;) {
1853:../fatfs/ff.c **** 		c = (BYTE)p[si++];
1854:../fatfs/ff.c **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
1855:../fatfs/ff.c **** 		if (c == '.' || i >= ni) {
1856:../fatfs/ff.c **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
1857:../fatfs/ff.c **** 			i = 8; ni = 11;
1858:../fatfs/ff.c **** 			b <<= 2; continue;
1859:../fatfs/ff.c **** 		}
1860:../fatfs/ff.c **** 		if (c >= 0x80) {				/* Extended char? */
1861:../fatfs/ff.c **** 			b |= 3;						/* Eliminate NT flag */
1862:../fatfs/ff.c **** #ifdef _EXCVT
1863:../fatfs/ff.c **** 			c = ExCvt[c - 0x80];		/* To upper extended chars (SBCS cfg) */
1864:../fatfs/ff.c **** #else
1865:../fatfs/ff.c **** #if !_DF1S
1866:../fatfs/ff.c **** 			return FR_INVALID_NAME;		/* Reject extended chars (ASCII cfg) */
1867:../fatfs/ff.c **** #endif
1868:../fatfs/ff.c **** #endif
1869:../fatfs/ff.c **** 		}
1870:../fatfs/ff.c **** 		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1871:../fatfs/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
1872:../fatfs/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
1873:../fatfs/ff.c **** 				return FR_INVALID_NAME;
1874:../fatfs/ff.c **** 			sfn[i++] = c;
1875:../fatfs/ff.c **** 			sfn[i++] = d;
1876:../fatfs/ff.c **** 		} else {						/* Single byte code */
1877:../fatfs/ff.c **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
1878:../fatfs/ff.c **** 				return FR_INVALID_NAME;
1879:../fatfs/ff.c **** 			if (IsUpper(c)) {			/* ASCII large capital? */
1880:../fatfs/ff.c **** 				b |= 2;
1881:../fatfs/ff.c **** 			} else {
1882:../fatfs/ff.c **** 				if (IsLower(c)) {		/* ASCII small capital? */
1883:../fatfs/ff.c **** 					b |= 1; c -= 0x20;
1884:../fatfs/ff.c **** 				}
1885:../fatfs/ff.c **** 			}
1886:../fatfs/ff.c **** 			sfn[i++] = c;
1887:../fatfs/ff.c **** 		}
1888:../fatfs/ff.c **** 	}
1889:../fatfs/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
1890:../fatfs/ff.c **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1891:../fatfs/ff.c **** 
1892:../fatfs/ff.c **** 	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
1893:../fatfs/ff.c **** 	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
1894:../fatfs/ff.c **** 
1895:../fatfs/ff.c **** 	if (ni == 8) b <<= 2;
1896:../fatfs/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
1897:../fatfs/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
1898:../fatfs/ff.c **** 
1899:../fatfs/ff.c **** 	sfn[NS] = c;		/* Store NT flag, File name is created */
1900:../fatfs/ff.c **** 
1901:../fatfs/ff.c **** 	return FR_OK;
1902:../fatfs/ff.c **** #endif
1903:../fatfs/ff.c **** }
 4645              		.loc 1 1903 0
 4646 03ea 1846     		mov	r0, r3
 4647 03ec 2837     		adds	r7, r7, #40
 4648              		.cfi_def_cfa_offset 8
 4649 03ee BD46     		mov	sp, r7
 4650              		.cfi_def_cfa_register 13
 4651              		@ sp needed
 4652 03f0 80BD     		pop	{r7, pc}
 4653              		.cfi_endproc
 4654              	.LFE27:
 4656 03f2 00BF     		.section	.text.get_fileinfo,"ax",%progbits
 4657              		.align	2
 4658              		.thumb
 4659              		.thumb_func
 4661              	get_fileinfo:
 4662              	.LFB28:
1904:../fatfs/ff.c **** 
1905:../fatfs/ff.c **** 
1906:../fatfs/ff.c **** 
1907:../fatfs/ff.c **** 
1908:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1909:../fatfs/ff.c **** /* Get file information from directory entry                             */
1910:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1911:../fatfs/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
1912:../fatfs/ff.c **** static
1913:../fatfs/ff.c **** void get_fileinfo (		/* No return code */
1914:../fatfs/ff.c **** 	DIR *dj,			/* Pointer to the directory object */
1915:../fatfs/ff.c **** 	FILINFO *fno	 	/* Pointer to the file information to be filled */
1916:../fatfs/ff.c **** )
1917:../fatfs/ff.c **** {
 4663              		.loc 1 1917 0
 4664              		.cfi_startproc
 4665              		@ args = 0, pretend = 0, frame = 40
 4666              		@ frame_needed = 1, uses_anonymous_args = 0
 4667 0000 80B5     		push	{r7, lr}
 4668              		.cfi_def_cfa_offset 8
 4669              		.cfi_offset 7, -8
 4670              		.cfi_offset 14, -4
 4671 0002 8AB0     		sub	sp, sp, #40
 4672              		.cfi_def_cfa_offset 48
 4673 0004 00AF     		add	r7, sp, #0
 4674              		.cfi_def_cfa_register 7
 4675 0006 7860     		str	r0, [r7, #4]
 4676 0008 3960     		str	r1, [r7]
1918:../fatfs/ff.c **** 	UINT i;
1919:../fatfs/ff.c **** 	BYTE nt, *dir;
1920:../fatfs/ff.c **** 	TCHAR *p, c;
1921:../fatfs/ff.c **** 
1922:../fatfs/ff.c **** 
1923:../fatfs/ff.c **** 	p = fno->fname;
 4677              		.loc 1 1923 0
 4678 000a 3B68     		ldr	r3, [r7]
 4679 000c 0933     		adds	r3, r3, #9
 4680 000e 3B62     		str	r3, [r7, #32]
1924:../fatfs/ff.c **** 	if (dj->sect) {
 4681              		.loc 1 1924 0
 4682 0010 7B68     		ldr	r3, [r7, #4]
 4683 0012 1B69     		ldr	r3, [r3, #16]
 4684 0014 002B     		cmp	r3, #0
 4685 0016 00F09380 		beq	.L309
1925:../fatfs/ff.c **** 		dir = dj->dir;
 4686              		.loc 1 1925 0
 4687 001a 7B68     		ldr	r3, [r7, #4]
 4688 001c 5B69     		ldr	r3, [r3, #20]
 4689 001e 7B61     		str	r3, [r7, #20]
1926:../fatfs/ff.c **** 		nt = dir[DIR_NTres];		/* NT flag */
 4690              		.loc 1 1926 0
 4691 0020 7B69     		ldr	r3, [r7, #20]
 4692 0022 1B7B     		ldrb	r3, [r3, #12]
 4693 0024 FB74     		strb	r3, [r7, #19]
1927:../fatfs/ff.c **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
 4694              		.loc 1 1927 0
 4695 0026 0023     		movs	r3, #0
 4696 0028 7B62     		str	r3, [r7, #36]
 4697 002a 23E0     		b	.L310
 4698              	.L315:
1928:../fatfs/ff.c **** 			c = dir[i];
 4699              		.loc 1 1928 0
 4700 002c 7A69     		ldr	r2, [r7, #20]
 4701 002e 7B6A     		ldr	r3, [r7, #36]
 4702 0030 1344     		add	r3, r3, r2
 4703 0032 1B78     		ldrb	r3, [r3]
 4704 0034 FB77     		strb	r3, [r7, #31]
1929:../fatfs/ff.c **** 			if (c == ' ') break;
 4705              		.loc 1 1929 0
 4706 0036 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4707 0038 202B     		cmp	r3, #32
 4708 003a 00D1     		bne	.L311
 4709 003c 1DE0     		b	.L312
 4710              	.L311:
1930:../fatfs/ff.c **** 			if (c == NDDE) c = (TCHAR)DDE;
 4711              		.loc 1 1930 0
 4712 003e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4713 0040 052B     		cmp	r3, #5
 4714 0042 01D1     		bne	.L313
 4715              		.loc 1 1930 0 is_stmt 0 discriminator 1
 4716 0044 E523     		movs	r3, #229
 4717 0046 FB77     		strb	r3, [r7, #31]
 4718              	.L313:
1931:../fatfs/ff.c **** 			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
 4719              		.loc 1 1931 0 is_stmt 1
 4720 0048 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 4721 004a 03F00803 		and	r3, r3, #8
 4722 004e 002B     		cmp	r3, #0
 4723 0050 08D0     		beq	.L314
 4724              		.loc 1 1931 0 is_stmt 0 discriminator 1
 4725 0052 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4726 0054 402B     		cmp	r3, #64
 4727 0056 05D9     		bls	.L314
 4728              		.loc 1 1931 0 discriminator 2
 4729 0058 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4730 005a 5A2B     		cmp	r3, #90
 4731 005c 02D8     		bhi	.L314
 4732              		.loc 1 1931 0 discriminator 3
 4733 005e FB7F     		ldrb	r3, [r7, #31]
 4734 0060 2033     		adds	r3, r3, #32
 4735 0062 FB77     		strb	r3, [r7, #31]
 4736              	.L314:
1932:../fatfs/ff.c **** #if _LFN_UNICODE
1933:../fatfs/ff.c **** 			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
1934:../fatfs/ff.c **** 				c = (c << 8) | dir[++i];
1935:../fatfs/ff.c **** 			c = ff_convert(c, 1);
1936:../fatfs/ff.c **** 			if (!c) c = '?';
1937:../fatfs/ff.c **** #endif
1938:../fatfs/ff.c **** 			*p++ = c;
 4737              		.loc 1 1938 0 is_stmt 1 discriminator 2
 4738 0064 3B6A     		ldr	r3, [r7, #32]
 4739 0066 5A1C     		adds	r2, r3, #1
 4740 0068 3A62     		str	r2, [r7, #32]
 4741 006a FA7F     		ldrb	r2, [r7, #31]
 4742 006c 1A70     		strb	r2, [r3]
1927:../fatfs/ff.c **** 			c = dir[i];
 4743              		.loc 1 1927 0 discriminator 2
 4744 006e 7B6A     		ldr	r3, [r7, #36]
 4745 0070 0133     		adds	r3, r3, #1
 4746 0072 7B62     		str	r3, [r7, #36]
 4747              	.L310:
1927:../fatfs/ff.c **** 			c = dir[i];
 4748              		.loc 1 1927 0 is_stmt 0 discriminator 1
 4749 0074 7B6A     		ldr	r3, [r7, #36]
 4750 0076 072B     		cmp	r3, #7
 4751 0078 D8D9     		bls	.L315
 4752              	.L312:
1939:../fatfs/ff.c **** 		}
1940:../fatfs/ff.c **** 		if (dir[8] != ' ') {		/* Copy name extension */
 4753              		.loc 1 1940 0 is_stmt 1
 4754 007a 7B69     		ldr	r3, [r7, #20]
 4755 007c 0833     		adds	r3, r3, #8
 4756 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4757 0080 202B     		cmp	r3, #32
 4758 0082 29D0     		beq	.L316
1941:../fatfs/ff.c **** 			*p++ = '.';
 4759              		.loc 1 1941 0
 4760 0084 3B6A     		ldr	r3, [r7, #32]
 4761 0086 5A1C     		adds	r2, r3, #1
 4762 0088 3A62     		str	r2, [r7, #32]
 4763 008a 2E22     		movs	r2, #46
 4764 008c 1A70     		strb	r2, [r3]
1942:../fatfs/ff.c **** 			for (i = 8; i < 11; i++) {
 4765              		.loc 1 1942 0
 4766 008e 0823     		movs	r3, #8
 4767 0090 7B62     		str	r3, [r7, #36]
 4768 0092 1EE0     		b	.L317
 4769              	.L320:
1943:../fatfs/ff.c **** 				c = dir[i];
 4770              		.loc 1 1943 0
 4771 0094 7A69     		ldr	r2, [r7, #20]
 4772 0096 7B6A     		ldr	r3, [r7, #36]
 4773 0098 1344     		add	r3, r3, r2
 4774 009a 1B78     		ldrb	r3, [r3]
 4775 009c FB77     		strb	r3, [r7, #31]
1944:../fatfs/ff.c **** 				if (c == ' ') break;
 4776              		.loc 1 1944 0
 4777 009e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4778 00a0 202B     		cmp	r3, #32
 4779 00a2 00D1     		bne	.L318
 4780 00a4 18E0     		b	.L316
 4781              	.L318:
1945:../fatfs/ff.c **** 				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
 4782              		.loc 1 1945 0
 4783 00a6 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 4784 00a8 03F01003 		and	r3, r3, #16
 4785 00ac 002B     		cmp	r3, #0
 4786 00ae 08D0     		beq	.L319
 4787              		.loc 1 1945 0 is_stmt 0 discriminator 1
 4788 00b0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4789 00b2 402B     		cmp	r3, #64
 4790 00b4 05D9     		bls	.L319
 4791              		.loc 1 1945 0 discriminator 2
 4792 00b6 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4793 00b8 5A2B     		cmp	r3, #90
 4794 00ba 02D8     		bhi	.L319
 4795              		.loc 1 1945 0 discriminator 3
 4796 00bc FB7F     		ldrb	r3, [r7, #31]
 4797 00be 2033     		adds	r3, r3, #32
 4798 00c0 FB77     		strb	r3, [r7, #31]
 4799              	.L319:
1946:../fatfs/ff.c **** #if _LFN_UNICODE
1947:../fatfs/ff.c **** 				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
1948:../fatfs/ff.c **** 					c = (c << 8) | dir[++i];
1949:../fatfs/ff.c **** 				c = ff_convert(c, 1);
1950:../fatfs/ff.c **** 				if (!c) c = '?';
1951:../fatfs/ff.c **** #endif
1952:../fatfs/ff.c **** 				*p++ = c;
 4800              		.loc 1 1952 0 is_stmt 1 discriminator 2
 4801 00c2 3B6A     		ldr	r3, [r7, #32]
 4802 00c4 5A1C     		adds	r2, r3, #1
 4803 00c6 3A62     		str	r2, [r7, #32]
 4804 00c8 FA7F     		ldrb	r2, [r7, #31]
 4805 00ca 1A70     		strb	r2, [r3]
1942:../fatfs/ff.c **** 				c = dir[i];
 4806              		.loc 1 1942 0 discriminator 2
 4807 00cc 7B6A     		ldr	r3, [r7, #36]
 4808 00ce 0133     		adds	r3, r3, #1
 4809 00d0 7B62     		str	r3, [r7, #36]
 4810              	.L317:
1942:../fatfs/ff.c **** 				c = dir[i];
 4811              		.loc 1 1942 0 is_stmt 0 discriminator 1
 4812 00d2 7B6A     		ldr	r3, [r7, #36]
 4813 00d4 0A2B     		cmp	r3, #10
 4814 00d6 DDD9     		bls	.L320
 4815              	.L316:
1953:../fatfs/ff.c **** 			}
1954:../fatfs/ff.c **** 		}
1955:../fatfs/ff.c **** 		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 4816              		.loc 1 1955 0 is_stmt 1
 4817 00d8 7B69     		ldr	r3, [r7, #20]
 4818 00da DA7A     		ldrb	r2, [r3, #11]	@ zero_extendqisi2
 4819 00dc 3B68     		ldr	r3, [r7]
 4820 00de 1A72     		strb	r2, [r3, #8]
1956:../fatfs/ff.c **** 		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 4821              		.loc 1 1956 0
 4822 00e0 7B69     		ldr	r3, [r7, #20]
 4823 00e2 1F33     		adds	r3, r3, #31
 4824 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4825 00e6 1A06     		lsls	r2, r3, #24
 4826 00e8 7B69     		ldr	r3, [r7, #20]
 4827 00ea 1E33     		adds	r3, r3, #30
 4828 00ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4829 00ee 1B04     		lsls	r3, r3, #16
 4830 00f0 1343     		orrs	r3, r3, r2
 4831 00f2 7A69     		ldr	r2, [r7, #20]
 4832 00f4 1D32     		adds	r2, r2, #29
 4833 00f6 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 4834 00f8 1202     		lsls	r2, r2, #8
 4835 00fa 1343     		orrs	r3, r3, r2
 4836 00fc 7A69     		ldr	r2, [r7, #20]
 4837 00fe 1C32     		adds	r2, r2, #28
 4838 0100 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 4839 0102 1A43     		orrs	r2, r2, r3
 4840 0104 3B68     		ldr	r3, [r7]
 4841 0106 1A60     		str	r2, [r3]
1957:../fatfs/ff.c **** 		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 4842              		.loc 1 1957 0
 4843 0108 7B69     		ldr	r3, [r7, #20]
 4844 010a 1933     		adds	r3, r3, #25
 4845 010c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4846 010e 1B02     		lsls	r3, r3, #8
 4847 0110 9AB2     		uxth	r2, r3
 4848 0112 7B69     		ldr	r3, [r7, #20]
 4849 0114 1833     		adds	r3, r3, #24
 4850 0116 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4851 0118 9BB2     		uxth	r3, r3
 4852 011a 1343     		orrs	r3, r3, r2
 4853 011c 9BB2     		uxth	r3, r3
 4854 011e 9AB2     		uxth	r2, r3
 4855 0120 3B68     		ldr	r3, [r7]
 4856 0122 9A80     		strh	r2, [r3, #4]	@ movhi
1958:../fatfs/ff.c **** 		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 4857              		.loc 1 1958 0
 4858 0124 7B69     		ldr	r3, [r7, #20]
 4859 0126 1733     		adds	r3, r3, #23
 4860 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4861 012a 1B02     		lsls	r3, r3, #8
 4862 012c 9AB2     		uxth	r2, r3
 4863 012e 7B69     		ldr	r3, [r7, #20]
 4864 0130 1633     		adds	r3, r3, #22
 4865 0132 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4866 0134 9BB2     		uxth	r3, r3
 4867 0136 1343     		orrs	r3, r3, r2
 4868 0138 9BB2     		uxth	r3, r3
 4869 013a 9AB2     		uxth	r2, r3
 4870 013c 3B68     		ldr	r3, [r7]
 4871 013e DA80     		strh	r2, [r3, #6]	@ movhi
 4872              	.L309:
1959:../fatfs/ff.c **** 	}
1960:../fatfs/ff.c **** 	*p = 0;		/* Terminate SFN str by a \0 */
 4873              		.loc 1 1960 0
 4874 0140 3B6A     		ldr	r3, [r7, #32]
 4875 0142 0022     		movs	r2, #0
 4876 0144 1A70     		strb	r2, [r3]
1961:../fatfs/ff.c **** 
1962:../fatfs/ff.c **** #if _USE_LFN
1963:../fatfs/ff.c **** 	if (fno->lfname && fno->lfsize) {
 4877              		.loc 1 1963 0
 4878 0146 3B68     		ldr	r3, [r7]
 4879 0148 9B69     		ldr	r3, [r3, #24]
 4880 014a 002B     		cmp	r3, #0
 4881 014c 41D0     		beq	.L308
 4882              		.loc 1 1963 0 is_stmt 0 discriminator 1
 4883 014e 3B68     		ldr	r3, [r7]
 4884 0150 DB69     		ldr	r3, [r3, #28]
 4885 0152 002B     		cmp	r3, #0
 4886 0154 3DD0     		beq	.L308
 4887              	.LBB3:
1964:../fatfs/ff.c **** 		TCHAR *tp = fno->lfname;
 4888              		.loc 1 1964 0 is_stmt 1
 4889 0156 3B68     		ldr	r3, [r7]
 4890 0158 9B69     		ldr	r3, [r3, #24]
 4891 015a FB60     		str	r3, [r7, #12]
1965:../fatfs/ff.c **** 		WCHAR w, *lfn;
1966:../fatfs/ff.c **** 
1967:../fatfs/ff.c **** 		i = 0;
 4892              		.loc 1 1967 0
 4893 015c 0023     		movs	r3, #0
 4894 015e 7B62     		str	r3, [r7, #36]
1968:../fatfs/ff.c **** 		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
 4895              		.loc 1 1968 0
 4896 0160 7B68     		ldr	r3, [r7, #4]
 4897 0162 1B69     		ldr	r3, [r3, #16]
 4898 0164 002B     		cmp	r3, #0
 4899 0166 2FD0     		beq	.L322
 4900              		.loc 1 1968 0 is_stmt 0 discriminator 1
 4901 0168 7B68     		ldr	r3, [r7, #4]
 4902 016a 1B8C     		ldrh	r3, [r3, #32]
 4903 016c 4FF6FF72 		movw	r2, #65535
 4904 0170 9342     		cmp	r3, r2
 4905 0172 29D0     		beq	.L322
1969:../fatfs/ff.c **** 			lfn = dj->lfn;
 4906              		.loc 1 1969 0 is_stmt 1
 4907 0174 7B68     		ldr	r3, [r7, #4]
 4908 0176 DB69     		ldr	r3, [r3, #28]
 4909 0178 BB61     		str	r3, [r7, #24]
1970:../fatfs/ff.c **** 			while ((w = *lfn++) != 0) {			/* Get an LFN char */
 4910              		.loc 1 1970 0
 4911 017a 1DE0     		b	.L323
 4912              	.L326:
1971:../fatfs/ff.c **** #if !_LFN_UNICODE
1972:../fatfs/ff.c **** 				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
 4913              		.loc 1 1972 0
 4914 017c 7B89     		ldrh	r3, [r7, #10]
 4915 017e 1846     		mov	r0, r3
 4916 0180 0021     		movs	r1, #0
 4917 0182 FFF7FEFF 		bl	ff_convert
 4918 0186 0346     		mov	r3, r0
 4919 0188 7B81     		strh	r3, [r7, #10]	@ movhi
1973:../fatfs/ff.c **** 				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
 4920              		.loc 1 1973 0
 4921 018a 7B89     		ldrh	r3, [r7, #10]
 4922 018c 002B     		cmp	r3, #0
 4923 018e 02D1     		bne	.L324
 4924              		.loc 1 1973 0 is_stmt 0 discriminator 1
 4925 0190 0023     		movs	r3, #0
 4926 0192 7B62     		str	r3, [r7, #36]
 4927 0194 18E0     		b	.L322
 4928              	.L324:
1974:../fatfs/ff.c **** 				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
1975:../fatfs/ff.c **** 					tp[i++] = (TCHAR)(w >> 8);
1976:../fatfs/ff.c **** #endif
1977:../fatfs/ff.c **** 				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
 4929              		.loc 1 1977 0 is_stmt 1
 4930 0196 3B68     		ldr	r3, [r7]
 4931 0198 DB69     		ldr	r3, [r3, #28]
 4932 019a 5A1E     		subs	r2, r3, #1
 4933 019c 7B6A     		ldr	r3, [r7, #36]
 4934 019e 9A42     		cmp	r2, r3
 4935 01a0 02D8     		bhi	.L325
 4936              		.loc 1 1977 0 is_stmt 0 discriminator 1
 4937 01a2 0023     		movs	r3, #0
 4938 01a4 7B62     		str	r3, [r7, #36]
 4939 01a6 0FE0     		b	.L322
 4940              	.L325:
1978:../fatfs/ff.c **** 				tp[i++] = (TCHAR)w;
 4941              		.loc 1 1978 0 is_stmt 1
 4942 01a8 7B6A     		ldr	r3, [r7, #36]
 4943 01aa 5A1C     		adds	r2, r3, #1
 4944 01ac 7A62     		str	r2, [r7, #36]
 4945 01ae FA68     		ldr	r2, [r7, #12]
 4946 01b0 1344     		add	r3, r3, r2
 4947 01b2 7A89     		ldrh	r2, [r7, #10]	@ movhi
 4948 01b4 D2B2     		uxtb	r2, r2
 4949 01b6 1A70     		strb	r2, [r3]
 4950              	.L323:
1970:../fatfs/ff.c **** #if !_LFN_UNICODE
 4951              		.loc 1 1970 0
 4952 01b8 BB69     		ldr	r3, [r7, #24]
 4953 01ba 9A1C     		adds	r2, r3, #2
 4954 01bc BA61     		str	r2, [r7, #24]
 4955 01be 1B88     		ldrh	r3, [r3]	@ movhi
 4956 01c0 7B81     		strh	r3, [r7, #10]	@ movhi
 4957 01c2 7B89     		ldrh	r3, [r7, #10]
 4958 01c4 002B     		cmp	r3, #0
 4959 01c6 D9D1     		bne	.L326
 4960              	.L322:
1979:../fatfs/ff.c **** 			}
1980:../fatfs/ff.c **** 		}
1981:../fatfs/ff.c **** 		tp[i] = 0;	/* Terminate the LFN str by a \0 */
 4961              		.loc 1 1981 0
 4962 01c8 FA68     		ldr	r2, [r7, #12]
 4963 01ca 7B6A     		ldr	r3, [r7, #36]
 4964 01cc 1344     		add	r3, r3, r2
 4965 01ce 0022     		movs	r2, #0
 4966 01d0 1A70     		strb	r2, [r3]
 4967              	.L308:
 4968              	.LBE3:
1982:../fatfs/ff.c **** 	}
1983:../fatfs/ff.c **** #endif
1984:../fatfs/ff.c **** }
 4969              		.loc 1 1984 0
 4970 01d2 2837     		adds	r7, r7, #40
 4971              		.cfi_def_cfa_offset 8
 4972 01d4 BD46     		mov	sp, r7
 4973              		.cfi_def_cfa_register 13
 4974              		@ sp needed
 4975 01d6 80BD     		pop	{r7, pc}
 4976              		.cfi_endproc
 4977              	.LFE28:
 4979              		.section	.text.follow_path,"ax",%progbits
 4980              		.align	2
 4981              		.thumb
 4982              		.thumb_func
 4984              	follow_path:
 4985              	.LFB29:
1985:../fatfs/ff.c **** #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2*/
1986:../fatfs/ff.c **** 
1987:../fatfs/ff.c **** 
1988:../fatfs/ff.c **** 
1989:../fatfs/ff.c **** 
1990:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1991:../fatfs/ff.c **** /* Follow a file path                                                    */
1992:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1993:../fatfs/ff.c **** 
1994:../fatfs/ff.c **** static
1995:../fatfs/ff.c **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
1996:../fatfs/ff.c **** 	DIR *dj,			/* Directory object to return last directory and found object */
1997:../fatfs/ff.c **** 	const TCHAR *path	/* Full-path string to find a file or directory */
1998:../fatfs/ff.c **** )
1999:../fatfs/ff.c **** {
 4986              		.loc 1 1999 0
 4987              		.cfi_startproc
 4988              		@ args = 0, pretend = 0, frame = 16
 4989              		@ frame_needed = 1, uses_anonymous_args = 0
 4990 0000 80B5     		push	{r7, lr}
 4991              		.cfi_def_cfa_offset 8
 4992              		.cfi_offset 7, -8
 4993              		.cfi_offset 14, -4
 4994 0002 84B0     		sub	sp, sp, #16
 4995              		.cfi_def_cfa_offset 24
 4996 0004 00AF     		add	r7, sp, #0
 4997              		.cfi_def_cfa_register 7
 4998 0006 7860     		str	r0, [r7, #4]
 4999 0008 3960     		str	r1, [r7]
2000:../fatfs/ff.c **** 	FRESULT res;
2001:../fatfs/ff.c **** 	BYTE *dir, ns;
2002:../fatfs/ff.c **** 
2003:../fatfs/ff.c **** 
2004:../fatfs/ff.c **** #if _FS_RPATH
2005:../fatfs/ff.c **** 	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 5000              		.loc 1 2005 0
 5001 000a 3B68     		ldr	r3, [r7]
 5002 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5003 000e 2F2B     		cmp	r3, #47
 5004 0010 03D0     		beq	.L328
 5005              		.loc 1 2005 0 is_stmt 0 discriminator 1
 5006 0012 3B68     		ldr	r3, [r7]
 5007 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5008 0016 5C2B     		cmp	r3, #92
 5009 0018 06D1     		bne	.L329
 5010              	.L328:
2006:../fatfs/ff.c **** 		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
 5011              		.loc 1 2006 0 is_stmt 1
 5012 001a 3B68     		ldr	r3, [r7]
 5013 001c 0133     		adds	r3, r3, #1
 5014 001e 3B60     		str	r3, [r7]
 5015 0020 7B68     		ldr	r3, [r7, #4]
 5016 0022 0022     		movs	r2, #0
 5017 0024 9A60     		str	r2, [r3, #8]
 5018 0026 04E0     		b	.L330
 5019              	.L329:
2007:../fatfs/ff.c **** 	} else {							/* No heading separator */
2008:../fatfs/ff.c **** 		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
 5020              		.loc 1 2008 0
 5021 0028 7B68     		ldr	r3, [r7, #4]
 5022 002a 1B68     		ldr	r3, [r3]
 5023 002c 9A69     		ldr	r2, [r3, #24]
 5024 002e 7B68     		ldr	r3, [r7, #4]
 5025 0030 9A60     		str	r2, [r3, #8]
 5026              	.L330:
2009:../fatfs/ff.c **** 	}
2010:../fatfs/ff.c **** #else
2011:../fatfs/ff.c **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
2012:../fatfs/ff.c **** 		path++;
2013:../fatfs/ff.c **** 	dj->sclust = 0;						/* Start from the root dir */
2014:../fatfs/ff.c **** #endif
2015:../fatfs/ff.c **** 
2016:../fatfs/ff.c **** 	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 5027              		.loc 1 2016 0
 5028 0032 3B68     		ldr	r3, [r7]
 5029 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5030 0036 1F2B     		cmp	r3, #31
 5031 0038 09D8     		bhi	.L331
2017:../fatfs/ff.c **** 		res = dir_sdi(dj, 0);
 5032              		.loc 1 2017 0
 5033 003a 7868     		ldr	r0, [r7, #4]
 5034 003c 0021     		movs	r1, #0
 5035 003e FFF7FEFF 		bl	dir_sdi
 5036 0042 0346     		mov	r3, r0
 5037 0044 FB73     		strb	r3, [r7, #15]
2018:../fatfs/ff.c **** 		dj->dir = 0;
 5038              		.loc 1 2018 0
 5039 0046 7B68     		ldr	r3, [r7, #4]
 5040 0048 0022     		movs	r2, #0
 5041 004a 5A61     		str	r2, [r3, #20]
 5042 004c 53E0     		b	.L332
 5043              	.L331:
2019:../fatfs/ff.c **** 	} else {							/* Follow path */
2020:../fatfs/ff.c **** 		for (;;) {
2021:../fatfs/ff.c **** 			res = create_name(dj, &path);	/* Get a segment */
 5044              		.loc 1 2021 0
 5045 004e 3B46     		mov	r3, r7
 5046 0050 7868     		ldr	r0, [r7, #4]
 5047 0052 1946     		mov	r1, r3
 5048 0054 FFF7FEFF 		bl	create_name
 5049 0058 0346     		mov	r3, r0
 5050 005a FB73     		strb	r3, [r7, #15]
2022:../fatfs/ff.c **** 			if (res != FR_OK) break;
 5051              		.loc 1 2022 0
 5052 005c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5053 005e 002B     		cmp	r3, #0
 5054 0060 00D0     		beq	.L333
 5055 0062 48E0     		b	.L332
 5056              	.L333:
2023:../fatfs/ff.c **** 			res = dir_find(dj);				/* Find it */
 5057              		.loc 1 2023 0
 5058 0064 7868     		ldr	r0, [r7, #4]
 5059 0066 FFF7FEFF 		bl	dir_find
 5060 006a 0346     		mov	r3, r0
 5061 006c FB73     		strb	r3, [r7, #15]
2024:../fatfs/ff.c **** 			ns = *(dj->fn+NS);
 5062              		.loc 1 2024 0
 5063 006e 7B68     		ldr	r3, [r7, #4]
 5064 0070 9B69     		ldr	r3, [r3, #24]
 5065 0072 DB7A     		ldrb	r3, [r3, #11]
 5066 0074 BB73     		strb	r3, [r7, #14]
2025:../fatfs/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 5067              		.loc 1 2025 0
 5068 0076 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5069 0078 002B     		cmp	r3, #0
 5070 007a 1FD0     		beq	.L334
2026:../fatfs/ff.c **** 				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
 5071              		.loc 1 2026 0
 5072 007c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5073 007e 042B     		cmp	r3, #4
 5074 0080 00D0     		beq	.L335
 5075 0082 38E0     		b	.L332
 5076              	.L335:
2027:../fatfs/ff.c **** 				/* Object not found */
2028:../fatfs/ff.c **** 				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
 5077              		.loc 1 2028 0
 5078 0084 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 5079 0086 03F02003 		and	r3, r3, #32
 5080 008a 002B     		cmp	r3, #0
 5081 008c 0DD0     		beq	.L336
2029:../fatfs/ff.c **** 					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
 5082              		.loc 1 2029 0
 5083 008e 7B68     		ldr	r3, [r7, #4]
 5084 0090 0022     		movs	r2, #0
 5085 0092 9A60     		str	r2, [r3, #8]
 5086 0094 7B68     		ldr	r3, [r7, #4]
 5087 0096 0022     		movs	r2, #0
 5088 0098 5A61     		str	r2, [r3, #20]
2030:../fatfs/ff.c **** 					res = FR_OK;
 5089              		.loc 1 2030 0
 5090 009a 0023     		movs	r3, #0
 5091 009c FB73     		strb	r3, [r7, #15]
2031:../fatfs/ff.c **** 					if (!(ns & NS_LAST)) continue;
 5092              		.loc 1 2031 0
 5093 009e BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 5094 00a0 03F00403 		and	r3, r3, #4
 5095 00a4 002B     		cmp	r3, #0
 5096 00a6 08D1     		bne	.L337
 5097              		.loc 1 2031 0 is_stmt 0 discriminator 1
 5098 00a8 24E0     		b	.L338
 5099              	.L336:
2032:../fatfs/ff.c **** 				} else {							/* Could not find the object */
2033:../fatfs/ff.c **** 					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 5100              		.loc 1 2033 0 is_stmt 1
 5101 00aa BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 5102 00ac 03F00403 		and	r3, r3, #4
 5103 00b0 002B     		cmp	r3, #0
 5104 00b2 02D1     		bne	.L337
 5105              		.loc 1 2033 0 is_stmt 0 discriminator 1
 5106 00b4 0523     		movs	r3, #5
 5107 00b6 FB73     		strb	r3, [r7, #15]
2034:../fatfs/ff.c **** 				}
2035:../fatfs/ff.c **** 				break;
 5108              		.loc 1 2035 0 is_stmt 1 discriminator 1
 5109 00b8 1DE0     		b	.L332
 5110              	.L337:
 5111 00ba 1CE0     		b	.L332
 5112              	.L334:
2036:../fatfs/ff.c **** 			}
2037:../fatfs/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 5113              		.loc 1 2037 0
 5114 00bc BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 5115 00be 03F00403 		and	r3, r3, #4
 5116 00c2 002B     		cmp	r3, #0
 5117 00c4 00D0     		beq	.L339
 5118 00c6 16E0     		b	.L332
 5119              	.L339:
2038:../fatfs/ff.c **** 			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 5120              		.loc 1 2038 0
 5121 00c8 7B68     		ldr	r3, [r7, #4]
 5122 00ca 5B69     		ldr	r3, [r3, #20]
 5123 00cc BB60     		str	r3, [r7, #8]
2039:../fatfs/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 5124              		.loc 1 2039 0
 5125 00ce BB68     		ldr	r3, [r7, #8]
 5126 00d0 0B33     		adds	r3, r3, #11
 5127 00d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5128 00d4 03F01003 		and	r3, r3, #16
 5129 00d8 002B     		cmp	r3, #0
 5130 00da 02D1     		bne	.L340
2040:../fatfs/ff.c **** 				res = FR_NO_PATH; break;
 5131              		.loc 1 2040 0
 5132 00dc 0523     		movs	r3, #5
 5133 00de FB73     		strb	r3, [r7, #15]
 5134 00e0 09E0     		b	.L332
 5135              	.L340:
2041:../fatfs/ff.c **** 			}
2042:../fatfs/ff.c **** 			dj->sclust = ld_clust(dj->fs, dir);
 5136              		.loc 1 2042 0
 5137 00e2 7B68     		ldr	r3, [r7, #4]
 5138 00e4 1B68     		ldr	r3, [r3]
 5139 00e6 1846     		mov	r0, r3
 5140 00e8 B968     		ldr	r1, [r7, #8]
 5141 00ea FFF7FEFF 		bl	ld_clust
 5142 00ee 0246     		mov	r2, r0
 5143 00f0 7B68     		ldr	r3, [r7, #4]
 5144 00f2 9A60     		str	r2, [r3, #8]
 5145              	.L338:
2043:../fatfs/ff.c **** 		}
 5146              		.loc 1 2043 0
 5147 00f4 ABE7     		b	.L331
 5148              	.L332:
2044:../fatfs/ff.c **** 	}
2045:../fatfs/ff.c **** 
2046:../fatfs/ff.c **** 	return res;
 5149              		.loc 1 2046 0
 5150 00f6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2047:../fatfs/ff.c **** }
 5151              		.loc 1 2047 0
 5152 00f8 1846     		mov	r0, r3
 5153 00fa 1037     		adds	r7, r7, #16
 5154              		.cfi_def_cfa_offset 8
 5155 00fc BD46     		mov	sp, r7
 5156              		.cfi_def_cfa_register 13
 5157              		@ sp needed
 5158 00fe 80BD     		pop	{r7, pc}
 5159              		.cfi_endproc
 5160              	.LFE29:
 5162              		.section	.text.check_fs,"ax",%progbits
 5163              		.align	2
 5164              		.thumb
 5165              		.thumb_func
 5167              	check_fs:
 5168              	.LFB30:
2048:../fatfs/ff.c **** 
2049:../fatfs/ff.c **** 
2050:../fatfs/ff.c **** 
2051:../fatfs/ff.c **** 
2052:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2053:../fatfs/ff.c **** /* Load a sector and check if it is an FAT Volume Boot Record            */
2054:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2055:../fatfs/ff.c **** 
2056:../fatfs/ff.c **** static
2057:../fatfs/ff.c **** BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
2058:../fatfs/ff.c **** 	FATFS *fs,	/* File system object */
2059:../fatfs/ff.c **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
2060:../fatfs/ff.c **** )
2061:../fatfs/ff.c **** {
 5169              		.loc 1 2061 0
 5170              		.cfi_startproc
 5171              		@ args = 0, pretend = 0, frame = 8
 5172              		@ frame_needed = 1, uses_anonymous_args = 0
 5173 0000 80B5     		push	{r7, lr}
 5174              		.cfi_def_cfa_offset 8
 5175              		.cfi_offset 7, -8
 5176              		.cfi_offset 14, -4
 5177 0002 82B0     		sub	sp, sp, #8
 5178              		.cfi_def_cfa_offset 16
 5179 0004 00AF     		add	r7, sp, #0
 5180              		.cfi_def_cfa_register 7
 5181 0006 7860     		str	r0, [r7, #4]
 5182 0008 3960     		str	r1, [r7]
2062:../fatfs/ff.c **** 	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 5183              		.loc 1 2062 0
 5184 000a 7B68     		ldr	r3, [r7, #4]
 5185 000c 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5186 000e 7B68     		ldr	r3, [r7, #4]
 5187 0010 3833     		adds	r3, r3, #56
 5188 0012 1046     		mov	r0, r2
 5189 0014 1946     		mov	r1, r3
 5190 0016 3A68     		ldr	r2, [r7]
 5191 0018 0123     		movs	r3, #1
 5192 001a FFF7FEFF 		bl	disk_read
 5193 001e 0346     		mov	r3, r0
 5194 0020 002B     		cmp	r3, #0
 5195 0022 01D0     		beq	.L343
2063:../fatfs/ff.c **** 		return 3;
 5196              		.loc 1 2063 0
 5197 0024 0323     		movs	r3, #3
 5198 0026 43E0     		b	.L344
 5199              	.L343:
2064:../fatfs/ff.c **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 
 5200              		.loc 1 2064 0
 5201 0028 7B68     		ldr	r3, [r7, #4]
 5202 002a 93F83732 		ldrb	r3, [r3, #567]	@ zero_extendqisi2
 5203 002e 1B02     		lsls	r3, r3, #8
 5204 0030 9AB2     		uxth	r2, r3
 5205 0032 7B68     		ldr	r3, [r7, #4]
 5206 0034 93F83632 		ldrb	r3, [r3, #566]	@ zero_extendqisi2
 5207 0038 9BB2     		uxth	r3, r3
 5208 003a 1343     		orrs	r3, r3, r2
 5209 003c 9BB2     		uxth	r3, r3
 5210 003e 1BB2     		sxth	r3, r3
 5211 0040 1D4A     		ldr	r2, .L348
 5212 0042 9342     		cmp	r3, r2
 5213 0044 01D0     		beq	.L345
2065:../fatfs/ff.c **** 		return 2;
 5214              		.loc 1 2065 0
 5215 0046 0223     		movs	r3, #2
 5216 0048 32E0     		b	.L344
 5217              	.L345:
2066:../fatfs/ff.c **** 
2067:../fatfs/ff.c **** 	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 5218              		.loc 1 2067 0
 5219 004a 7B68     		ldr	r3, [r7, #4]
 5220 004c 93F87130 		ldrb	r3, [r3, #113]	@ zero_extendqisi2
 5221 0050 1A06     		lsls	r2, r3, #24
 5222 0052 7B68     		ldr	r3, [r7, #4]
 5223 0054 93F87030 		ldrb	r3, [r3, #112]	@ zero_extendqisi2
 5224 0058 1B04     		lsls	r3, r3, #16
 5225 005a 1343     		orrs	r3, r3, r2
 5226 005c 7A68     		ldr	r2, [r7, #4]
 5227 005e 92F86F20 		ldrb	r2, [r2, #111]	@ zero_extendqisi2
 5228 0062 1202     		lsls	r2, r2, #8
 5229 0064 1343     		orrs	r3, r3, r2
 5230 0066 7A68     		ldr	r2, [r7, #4]
 5231 0068 92F86E20 		ldrb	r2, [r2, #110]	@ zero_extendqisi2
 5232 006c 1343     		orrs	r3, r3, r2
 5233 006e 23F07F43 		bic	r3, r3, #-16777216
 5234 0072 124A     		ldr	r2, .L348+4
 5235 0074 9342     		cmp	r3, r2
 5236 0076 01D1     		bne	.L346
2068:../fatfs/ff.c **** 		return 0;
 5237              		.loc 1 2068 0
 5238 0078 0023     		movs	r3, #0
 5239 007a 19E0     		b	.L344
 5240              	.L346:
2069:../fatfs/ff.c **** 	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 5241              		.loc 1 2069 0
 5242 007c 7B68     		ldr	r3, [r7, #4]
 5243 007e 93F88D30 		ldrb	r3, [r3, #141]	@ zero_extendqisi2
 5244 0082 1A06     		lsls	r2, r3, #24
 5245 0084 7B68     		ldr	r3, [r7, #4]
 5246 0086 93F88C30 		ldrb	r3, [r3, #140]	@ zero_extendqisi2
 5247 008a 1B04     		lsls	r3, r3, #16
 5248 008c 1343     		orrs	r3, r3, r2
 5249 008e 7A68     		ldr	r2, [r7, #4]
 5250 0090 92F88B20 		ldrb	r2, [r2, #139]	@ zero_extendqisi2
 5251 0094 1202     		lsls	r2, r2, #8
 5252 0096 1343     		orrs	r3, r3, r2
 5253 0098 7A68     		ldr	r2, [r7, #4]
 5254 009a 92F88A20 		ldrb	r2, [r2, #138]	@ zero_extendqisi2
 5255 009e 1343     		orrs	r3, r3, r2
 5256 00a0 23F07F43 		bic	r3, r3, #-16777216
 5257 00a4 054A     		ldr	r2, .L348+4
 5258 00a6 9342     		cmp	r3, r2
 5259 00a8 01D1     		bne	.L347
2070:../fatfs/ff.c **** 		return 0;
 5260              		.loc 1 2070 0
 5261 00aa 0023     		movs	r3, #0
 5262 00ac 00E0     		b	.L344
 5263              	.L347:
2071:../fatfs/ff.c **** 
2072:../fatfs/ff.c **** 	return 1;
 5264              		.loc 1 2072 0
 5265 00ae 0123     		movs	r3, #1
 5266              	.L344:
2073:../fatfs/ff.c **** }
 5267              		.loc 1 2073 0
 5268 00b0 1846     		mov	r0, r3
 5269 00b2 0837     		adds	r7, r7, #8
 5270              		.cfi_def_cfa_offset 8
 5271 00b4 BD46     		mov	sp, r7
 5272              		.cfi_def_cfa_register 13
 5273              		@ sp needed
 5274 00b6 80BD     		pop	{r7, pc}
 5275              	.L349:
 5276              		.align	2
 5277              	.L348:
 5278 00b8 55AAFFFF 		.word	-21931
 5279 00bc 46415400 		.word	5521734
 5280              		.cfi_endproc
 5281              	.LFE30:
 5283              		.section	.text.chk_mounted,"ax",%progbits
 5284              		.align	2
 5285              		.thumb
 5286              		.thumb_func
 5288              	chk_mounted:
 5289              	.LFB31:
2074:../fatfs/ff.c **** 
2075:../fatfs/ff.c **** 
2076:../fatfs/ff.c **** 
2077:../fatfs/ff.c **** 
2078:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2079:../fatfs/ff.c **** /* Check if the file system object is valid or not                       */
2080:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2081:../fatfs/ff.c **** 
2082:../fatfs/ff.c **** static
2083:../fatfs/ff.c **** FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
2084:../fatfs/ff.c **** 	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
2085:../fatfs/ff.c **** 	FATFS **rfs,		/* Pointer to pointer to the found file system object */
2086:../fatfs/ff.c **** 	BYTE wmode			/* !=0: Check write protection for write access */
2087:../fatfs/ff.c **** )
2088:../fatfs/ff.c **** {
 5290              		.loc 1 2088 0
 5291              		.cfi_startproc
 5292              		@ args = 0, pretend = 0, frame = 72
 5293              		@ frame_needed = 1, uses_anonymous_args = 0
 5294 0000 80B5     		push	{r7, lr}
 5295              		.cfi_def_cfa_offset 8
 5296              		.cfi_offset 7, -8
 5297              		.cfi_offset 14, -4
 5298 0002 92B0     		sub	sp, sp, #72
 5299              		.cfi_def_cfa_offset 80
 5300 0004 00AF     		add	r7, sp, #0
 5301              		.cfi_def_cfa_register 7
 5302 0006 F860     		str	r0, [r7, #12]
 5303 0008 B960     		str	r1, [r7, #8]
 5304 000a 1346     		mov	r3, r2
 5305 000c FB71     		strb	r3, [r7, #7]
2089:../fatfs/ff.c **** 	BYTE fmt, b, pi, *tbl;
2090:../fatfs/ff.c **** 	UINT vol;
2091:../fatfs/ff.c **** 	DSTATUS stat;
2092:../fatfs/ff.c **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
2093:../fatfs/ff.c **** 	WORD nrsv;
2094:../fatfs/ff.c **** 	const TCHAR *p = *path;
 5306              		.loc 1 2094 0
 5307 000e FB68     		ldr	r3, [r7, #12]
 5308 0010 1B68     		ldr	r3, [r3]
 5309 0012 FB62     		str	r3, [r7, #44]
2095:../fatfs/ff.c **** 	FATFS *fs;
2096:../fatfs/ff.c **** 
2097:../fatfs/ff.c **** 
2098:../fatfs/ff.c **** 	/* Get logical drive number from the path name */
2099:../fatfs/ff.c **** 	vol = p[0] - '0';					/* Is there a drive number? */
 5310              		.loc 1 2099 0
 5311 0014 FB6A     		ldr	r3, [r7, #44]
 5312 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5313 0018 303B     		subs	r3, r3, #48
 5314 001a 3B64     		str	r3, [r7, #64]
2100:../fatfs/ff.c **** 	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 5315              		.loc 1 2100 0
 5316 001c 3B6C     		ldr	r3, [r7, #64]
 5317 001e 092B     		cmp	r3, #9
 5318 0020 0BD8     		bhi	.L351
 5319              		.loc 1 2100 0 is_stmt 0 discriminator 1
 5320 0022 FB6A     		ldr	r3, [r7, #44]
 5321 0024 0133     		adds	r3, r3, #1
 5322 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5323 0028 3A2B     		cmp	r3, #58
 5324 002a 06D1     		bne	.L351
2101:../fatfs/ff.c **** 		p += 2; *path = p;				/* Return pointer to the path name */
 5325              		.loc 1 2101 0 is_stmt 1
 5326 002c FB6A     		ldr	r3, [r7, #44]
 5327 002e 0233     		adds	r3, r3, #2
 5328 0030 FB62     		str	r3, [r7, #44]
 5329 0032 FB68     		ldr	r3, [r7, #12]
 5330 0034 FA6A     		ldr	r2, [r7, #44]
 5331 0036 1A60     		str	r2, [r3]
 5332 0038 02E0     		b	.L352
 5333              	.L351:
2102:../fatfs/ff.c **** 	} else {							/* No drive number, use default drive */
2103:../fatfs/ff.c **** #if _FS_RPATH
2104:../fatfs/ff.c **** 		vol = CurrVol;					/* Use current drive */
 5334              		.loc 1 2104 0
 5335 003a B14B     		ldr	r3, .L385
 5336 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5337 003e 3B64     		str	r3, [r7, #64]
 5338              	.L352:
2105:../fatfs/ff.c **** #else
2106:../fatfs/ff.c **** 		vol = 0;						/* Use drive 0 */
2107:../fatfs/ff.c **** #endif
2108:../fatfs/ff.c **** 	}
2109:../fatfs/ff.c **** 
2110:../fatfs/ff.c **** 	/* Check if the file system object is valid or not */
2111:../fatfs/ff.c **** 	*rfs = 0;
 5339              		.loc 1 2111 0
 5340 0040 BB68     		ldr	r3, [r7, #8]
 5341 0042 0022     		movs	r2, #0
 5342 0044 1A60     		str	r2, [r3]
2112:../fatfs/ff.c **** 	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 5343              		.loc 1 2112 0
 5344 0046 3B6C     		ldr	r3, [r7, #64]
 5345 0048 012B     		cmp	r3, #1
 5346 004a 01D9     		bls	.L353
2113:../fatfs/ff.c **** 		return FR_INVALID_DRIVE;
 5347              		.loc 1 2113 0
 5348 004c 0B23     		movs	r3, #11
 5349 004e 93E2     		b	.L354
 5350              	.L353:
2114:../fatfs/ff.c **** 	fs = FatFs[vol];					/* Get corresponding file system object */
 5351              		.loc 1 2114 0
 5352 0050 AC4A     		ldr	r2, .L385+4
 5353 0052 3B6C     		ldr	r3, [r7, #64]
 5354 0054 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5355 0058 BB62     		str	r3, [r7, #40]
2115:../fatfs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 5356              		.loc 1 2115 0
 5357 005a BB6A     		ldr	r3, [r7, #40]
 5358 005c 002B     		cmp	r3, #0
 5359 005e 01D1     		bne	.L355
 5360              		.loc 1 2115 0 is_stmt 0 discriminator 1
 5361 0060 0C23     		movs	r3, #12
 5362 0062 89E2     		b	.L354
 5363              	.L355:
2116:../fatfs/ff.c **** 
2117:../fatfs/ff.c **** 	ENTER_FF(fatfs);						/* Lock volume */
2118:../fatfs/ff.c **** 
2119:../fatfs/ff.c **** 	*rfs = fs;							/* Return pointer to the corresponding file system object */
 5364              		.loc 1 2119 0 is_stmt 1
 5365 0064 BB68     		ldr	r3, [r7, #8]
 5366 0066 BA6A     		ldr	r2, [r7, #40]
 5367 0068 1A60     		str	r2, [r3]
2120:../fatfs/ff.c **** 	if (fs->fs_type) {					/* If the volume has been mounted */
 5368              		.loc 1 2120 0
 5369 006a BB6A     		ldr	r3, [r7, #40]
 5370 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5371 006e 002B     		cmp	r3, #0
 5372 0070 1AD0     		beq	.L356
2121:../fatfs/ff.c **** 		stat = disk_status(fs->drv);
 5373              		.loc 1 2121 0
 5374 0072 BB6A     		ldr	r3, [r7, #40]
 5375 0074 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5376 0076 1846     		mov	r0, r3
 5377 0078 FFF7FEFF 		bl	disk_status
 5378 007c 0346     		mov	r3, r0
 5379 007e 87F82730 		strb	r3, [r7, #39]
2122:../fatfs/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed)
 5380              		.loc 1 2122 0
 5381 0082 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 5382 0086 03F00103 		and	r3, r3, #1
 5383 008a 002B     		cmp	r3, #0
 5384 008c 0CD1     		bne	.L356
2123:../fatfs/ff.c **** 			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 5385              		.loc 1 2123 0
 5386 008e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5387 0090 002B     		cmp	r3, #0
 5388 0092 07D0     		beq	.L357
 5389              		.loc 1 2123 0 is_stmt 0 discriminator 1
 5390 0094 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 5391 0098 03F00403 		and	r3, r3, #4
 5392 009c 002B     		cmp	r3, #0
 5393 009e 01D0     		beq	.L357
2124:../fatfs/ff.c **** 				return FR_WRITE_PROTECTED;
 5394              		.loc 1 2124 0 is_stmt 1
 5395 00a0 0A23     		movs	r3, #10
 5396 00a2 69E2     		b	.L354
 5397              	.L357:
2125:../fatfs/ff.c **** 			return FR_OK;				/* The file system object is valid */
 5398              		.loc 1 2125 0
 5399 00a4 0023     		movs	r3, #0
 5400 00a6 67E2     		b	.L354
 5401              	.L356:
2126:../fatfs/ff.c **** 		}
2127:../fatfs/ff.c **** 	}
2128:../fatfs/ff.c **** 
2129:../fatfs/ff.c **** 	/* The file system object is not valid. */
2130:../fatfs/ff.c **** 	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
2131:../fatfs/ff.c **** 
2132:../fatfs/ff.c **** 	fs->fs_type = 0;					/* Clear the file system object */
 5402              		.loc 1 2132 0
 5403 00a8 BB6A     		ldr	r3, [r7, #40]
 5404 00aa 0022     		movs	r2, #0
 5405 00ac 1A70     		strb	r2, [r3]
2133:../fatfs/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 5406              		.loc 1 2133 0
 5407 00ae 964A     		ldr	r2, .L385+8
 5408 00b0 3B6C     		ldr	r3, [r7, #64]
 5409 00b2 12F81320 		ldrb	r2, [r2, r3, lsl #1]	@ zero_extendqisi2
 5410 00b6 BB6A     		ldr	r3, [r7, #40]
 5411 00b8 5A70     		strb	r2, [r3, #1]
2134:../fatfs/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 5412              		.loc 1 2134 0
 5413 00ba BB6A     		ldr	r3, [r7, #40]
 5414 00bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5415 00be 1846     		mov	r0, r3
 5416 00c0 FFF7FEFF 		bl	disk_initialize
 5417 00c4 0346     		mov	r3, r0
 5418 00c6 87F82730 		strb	r3, [r7, #39]
2135:../fatfs/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 5419              		.loc 1 2135 0
 5420 00ca 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 5421 00ce 03F00103 		and	r3, r3, #1
 5422 00d2 002B     		cmp	r3, #0
 5423 00d4 01D0     		beq	.L358
2136:../fatfs/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 5424              		.loc 1 2136 0
 5425 00d6 0323     		movs	r3, #3
 5426 00d8 4EE2     		b	.L354
 5427              	.L358:
2137:../fatfs/ff.c **** 	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 5428              		.loc 1 2137 0
 5429 00da FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5430 00dc 002B     		cmp	r3, #0
 5431 00de 07D0     		beq	.L359
 5432              		.loc 1 2137 0 is_stmt 0 discriminator 1
 5433 00e0 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 5434 00e4 03F00403 		and	r3, r3, #4
 5435 00e8 002B     		cmp	r3, #0
 5436 00ea 01D0     		beq	.L359
2138:../fatfs/ff.c **** 		return FR_WRITE_PROTECTED;
 5437              		.loc 1 2138 0 is_stmt 1
 5438 00ec 0A23     		movs	r3, #10
 5439 00ee 43E2     		b	.L354
 5440              	.L359:
2139:../fatfs/ff.c **** #if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
2140:../fatfs/ff.c **** 	if (disk_ioctl(fatfs->drv, GET_SECTOR_SIZE, &fatfs->ssize) != RES_OK)
2141:../fatfs/ff.c **** 		return FR_DISK_ERR;
2142:../fatfs/ff.c **** #endif
2143:../fatfs/ff.c **** 	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
2144:../fatfs/ff.c **** 	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
 5441              		.loc 1 2144 0
 5442 00f0 0023     		movs	r3, #0
 5443 00f2 FB63     		str	r3, [r7, #60]
 5444 00f4 B86A     		ldr	r0, [r7, #40]
 5445 00f6 F96B     		ldr	r1, [r7, #60]
 5446 00f8 FFF7FEFF 		bl	check_fs
 5447 00fc 0346     		mov	r3, r0
 5448 00fe 87F84730 		strb	r3, [r7, #71]
2145:../fatfs/ff.c **** 	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
 5449              		.loc 1 2145 0
 5450 0102 814A     		ldr	r2, .L385+8
 5451 0104 3B6C     		ldr	r3, [r7, #64]
 5452 0106 5B00     		lsls	r3, r3, #1
 5453 0108 1344     		add	r3, r3, r2
 5454 010a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5455 010c 002B     		cmp	r3, #0
 5456 010e 06D0     		beq	.L360
 5457              		.loc 1 2145 0 is_stmt 0 discriminator 1
 5458 0110 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 5459 0114 002B     		cmp	r3, #0
 5460 0116 02D1     		bne	.L360
 5461              		.loc 1 2145 0 discriminator 2
 5462 0118 0123     		movs	r3, #1
 5463 011a 87F84730 		strb	r3, [r7, #71]
 5464              	.L360:
2146:../fatfs/ff.c **** 	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
 5465              		.loc 1 2146 0 is_stmt 1
 5466 011e 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 5467 0122 012B     		cmp	r3, #1
 5468 0124 37D1     		bne	.L361
2147:../fatfs/ff.c **** 		/* Check the partition listed in the partition table */
2148:../fatfs/ff.c **** 		pi = LD2PT(vol);
 5469              		.loc 1 2148 0
 5470 0126 784A     		ldr	r2, .L385+8
 5471 0128 3B6C     		ldr	r3, [r7, #64]
 5472 012a 5B00     		lsls	r3, r3, #1
 5473 012c 1344     		add	r3, r3, r2
 5474 012e 5B78     		ldrb	r3, [r3, #1]
 5475 0130 87F84630 		strb	r3, [r7, #70]
2149:../fatfs/ff.c **** 		if (pi) pi--;
 5476              		.loc 1 2149 0
 5477 0134 97F84630 		ldrb	r3, [r7, #70]	@ zero_extendqisi2
 5478 0138 002B     		cmp	r3, #0
 5479 013a 04D0     		beq	.L362
 5480              		.loc 1 2149 0 is_stmt 0 discriminator 1
 5481 013c 97F84630 		ldrb	r3, [r7, #70]	@ zero_extendqisi2
 5482 0140 013B     		subs	r3, r3, #1
 5483 0142 87F84630 		strb	r3, [r7, #70]
 5484              	.L362:
2150:../fatfs/ff.c **** 		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
 5485              		.loc 1 2150 0 is_stmt 1
 5486 0146 97F84630 		ldrb	r3, [r7, #70]	@ zero_extendqisi2
 5487 014a 1B01     		lsls	r3, r3, #4
 5488 014c 03F5DF73 		add	r3, r3, #446
 5489 0150 3833     		adds	r3, r3, #56
 5490 0152 BA6A     		ldr	r2, [r7, #40]
 5491 0154 1344     		add	r3, r3, r2
 5492 0156 3B62     		str	r3, [r7, #32]
2151:../fatfs/ff.c **** 		if (tbl[4]) {						/* Is the partition existing? */
 5493              		.loc 1 2151 0
 5494 0158 3B6A     		ldr	r3, [r7, #32]
 5495 015a 0433     		adds	r3, r3, #4
 5496 015c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5497 015e 002B     		cmp	r3, #0
 5498 0160 19D0     		beq	.L361
2152:../fatfs/ff.c **** 			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
 5499              		.loc 1 2152 0
 5500 0162 3B6A     		ldr	r3, [r7, #32]
 5501 0164 0B33     		adds	r3, r3, #11
 5502 0166 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5503 0168 1A06     		lsls	r2, r3, #24
 5504 016a 3B6A     		ldr	r3, [r7, #32]
 5505 016c 0A33     		adds	r3, r3, #10
 5506 016e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5507 0170 1B04     		lsls	r3, r3, #16
 5508 0172 1343     		orrs	r3, r3, r2
 5509 0174 3A6A     		ldr	r2, [r7, #32]
 5510 0176 0932     		adds	r2, r2, #9
 5511 0178 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 5512 017a 1202     		lsls	r2, r2, #8
 5513 017c 1343     		orrs	r3, r3, r2
 5514 017e 3A6A     		ldr	r2, [r7, #32]
 5515 0180 0832     		adds	r2, r2, #8
 5516 0182 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 5517 0184 1343     		orrs	r3, r3, r2
 5518 0186 FB63     		str	r3, [r7, #60]
2153:../fatfs/ff.c **** 			fmt = check_fs(fs, bsect);		/* Check the partition */
 5519              		.loc 1 2153 0
 5520 0188 B86A     		ldr	r0, [r7, #40]
 5521 018a F96B     		ldr	r1, [r7, #60]
 5522 018c FFF7FEFF 		bl	check_fs
 5523 0190 0346     		mov	r3, r0
 5524 0192 87F84730 		strb	r3, [r7, #71]
 5525              	.L361:
2154:../fatfs/ff.c **** 		}
2155:../fatfs/ff.c **** 	}
2156:../fatfs/ff.c **** 	if (fmt == 3) return FR_DISK_ERR;
 5526              		.loc 1 2156 0
 5527 0196 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 5528 019a 032B     		cmp	r3, #3
 5529 019c 01D1     		bne	.L363
 5530              		.loc 1 2156 0 is_stmt 0 discriminator 1
 5531 019e 0123     		movs	r3, #1
 5532 01a0 EAE1     		b	.L354
 5533              	.L363:
2157:../fatfs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 5534              		.loc 1 2157 0 is_stmt 1
 5535 01a2 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 5536 01a6 002B     		cmp	r3, #0
 5537 01a8 01D0     		beq	.L364
 5538              		.loc 1 2157 0 is_stmt 0 discriminator 1
 5539 01aa 0D23     		movs	r3, #13
 5540 01ac E4E1     		b	.L354
 5541              	.L364:
2158:../fatfs/ff.c **** 
2159:../fatfs/ff.c **** 	/* An FAT volume is found. Following code initializes the file system object */
2160:../fatfs/ff.c **** 
2161:../fatfs/ff.c **** 	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fatfs))		/* (BPB_BytsPerSec must be equal to the physica
 5542              		.loc 1 2161 0 is_stmt 1
 5543 01ae BB6A     		ldr	r3, [r7, #40]
 5544 01b0 93F84430 		ldrb	r3, [r3, #68]	@ zero_extendqisi2
 5545 01b4 1B02     		lsls	r3, r3, #8
 5546 01b6 9AB2     		uxth	r2, r3
 5547 01b8 BB6A     		ldr	r3, [r7, #40]
 5548 01ba 93F84330 		ldrb	r3, [r3, #67]	@ zero_extendqisi2
 5549 01be 9BB2     		uxth	r3, r3
 5550 01c0 1343     		orrs	r3, r3, r2
 5551 01c2 9BB2     		uxth	r3, r3
 5552 01c4 1BB2     		sxth	r3, r3
 5553 01c6 B3F5007F 		cmp	r3, #512
 5554 01ca 01D0     		beq	.L365
2162:../fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 5555              		.loc 1 2162 0
 5556 01cc 0D23     		movs	r3, #13
 5557 01ce D3E1     		b	.L354
 5558              	.L365:
2163:../fatfs/ff.c **** 
2164:../fatfs/ff.c **** 	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 5559              		.loc 1 2164 0
 5560 01d0 BB6A     		ldr	r3, [r7, #40]
 5561 01d2 93F84F30 		ldrb	r3, [r3, #79]	@ zero_extendqisi2
 5562 01d6 1B02     		lsls	r3, r3, #8
 5563 01d8 9AB2     		uxth	r2, r3
 5564 01da BB6A     		ldr	r3, [r7, #40]
 5565 01dc 93F84E30 		ldrb	r3, [r3, #78]	@ zero_extendqisi2
 5566 01e0 9BB2     		uxth	r3, r3
 5567 01e2 1343     		orrs	r3, r3, r2
 5568 01e4 9BB2     		uxth	r3, r3
 5569 01e6 9BB2     		uxth	r3, r3
 5570 01e8 BB63     		str	r3, [r7, #56]
2165:../fatfs/ff.c **** 	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 5571              		.loc 1 2165 0
 5572 01ea BB6B     		ldr	r3, [r7, #56]
 5573 01ec 002B     		cmp	r3, #0
 5574 01ee 12D1     		bne	.L366
 5575              		.loc 1 2165 0 is_stmt 0 discriminator 1
 5576 01f0 BB6A     		ldr	r3, [r7, #40]
 5577 01f2 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 5578 01f6 1A06     		lsls	r2, r3, #24
 5579 01f8 BB6A     		ldr	r3, [r7, #40]
 5580 01fa 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 5581 01fe 1B04     		lsls	r3, r3, #16
 5582 0200 1343     		orrs	r3, r3, r2
 5583 0202 BA6A     		ldr	r2, [r7, #40]
 5584 0204 92F85D20 		ldrb	r2, [r2, #93]	@ zero_extendqisi2
 5585 0208 1202     		lsls	r2, r2, #8
 5586 020a 1343     		orrs	r3, r3, r2
 5587 020c BA6A     		ldr	r2, [r7, #40]
 5588 020e 92F85C20 		ldrb	r2, [r2, #92]	@ zero_extendqisi2
 5589 0212 1343     		orrs	r3, r3, r2
 5590 0214 BB63     		str	r3, [r7, #56]
 5591              	.L366:
2166:../fatfs/ff.c **** 	fs->fsize = fasize;
 5592              		.loc 1 2166 0 is_stmt 1
 5593 0216 BB6A     		ldr	r3, [r7, #40]
 5594 0218 BA6B     		ldr	r2, [r7, #56]
 5595 021a 1A62     		str	r2, [r3, #32]
2167:../fatfs/ff.c **** 
2168:../fatfs/ff.c **** 	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 5596              		.loc 1 2168 0
 5597 021c BB6A     		ldr	r3, [r7, #40]
 5598 021e 93F84830 		ldrb	r3, [r3, #72]
 5599 0222 FB77     		strb	r3, [r7, #31]
 5600 0224 BB6A     		ldr	r3, [r7, #40]
 5601 0226 FA7F     		ldrb	r2, [r7, #31]
 5602 0228 DA70     		strb	r2, [r3, #3]
2169:../fatfs/ff.c **** 	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 5603              		.loc 1 2169 0
 5604 022a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5605 022c 012B     		cmp	r3, #1
 5606 022e 04D0     		beq	.L367
 5607              		.loc 1 2169 0 is_stmt 0 discriminator 1
 5608 0230 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5609 0232 022B     		cmp	r3, #2
 5610 0234 01D0     		beq	.L367
 5611              		.loc 1 2169 0 discriminator 2
 5612 0236 0D23     		movs	r3, #13
 5613 0238 9EE1     		b	.L354
 5614              	.L367:
2170:../fatfs/ff.c **** 	fasize *= b;										/* Number of sectors for FAT area */
 5615              		.loc 1 2170 0 is_stmt 1
 5616 023a FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 5617 023c BB6B     		ldr	r3, [r7, #56]
 5618 023e 02FB03F3 		mul	r3, r2, r3
 5619 0242 BB63     		str	r3, [r7, #56]
2171:../fatfs/ff.c **** 
2172:../fatfs/ff.c **** 	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
 5620              		.loc 1 2172 0
 5621 0244 BB6A     		ldr	r3, [r7, #40]
 5622 0246 93F84530 		ldrb	r3, [r3, #69]
 5623 024a FB77     		strb	r3, [r7, #31]
 5624 024c BB6A     		ldr	r3, [r7, #40]
 5625 024e FA7F     		ldrb	r2, [r7, #31]
 5626 0250 9A70     		strb	r2, [r3, #2]
2173:../fatfs/ff.c **** 	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 5627              		.loc 1 2173 0
 5628 0252 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5629 0254 002B     		cmp	r3, #0
 5630 0256 05D0     		beq	.L368
 5631              		.loc 1 2173 0 is_stmt 0 discriminator 2
 5632 0258 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 5633 025a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5634 025c 013B     		subs	r3, r3, #1
 5635 025e 1340     		ands	r3, r3, r2
 5636 0260 002B     		cmp	r3, #0
 5637 0262 01D0     		beq	.L369
 5638              	.L368:
 5639              		.loc 1 2173 0 discriminator 3
 5640 0264 0D23     		movs	r3, #13
 5641 0266 87E1     		b	.L354
 5642              	.L369:
2174:../fatfs/ff.c **** 
2175:../fatfs/ff.c **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 5643              		.loc 1 2175 0 is_stmt 1
 5644 0268 BB6A     		ldr	r3, [r7, #40]
 5645 026a 93F84A30 		ldrb	r3, [r3, #74]	@ zero_extendqisi2
 5646 026e 1B02     		lsls	r3, r3, #8
 5647 0270 9AB2     		uxth	r2, r3
 5648 0272 BB6A     		ldr	r3, [r7, #40]
 5649 0274 93F84930 		ldrb	r3, [r3, #73]	@ zero_extendqisi2
 5650 0278 9BB2     		uxth	r3, r3
 5651 027a 1343     		orrs	r3, r3, r2
 5652 027c 9BB2     		uxth	r3, r3
 5653 027e 9AB2     		uxth	r2, r3
 5654 0280 BB6A     		ldr	r3, [r7, #40]
 5655 0282 1A81     		strh	r2, [r3, #8]	@ movhi
2176:../fatfs/ff.c **** 	if (fs->n_rootdir % (SS(fatfs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sect
 5656              		.loc 1 2176 0
 5657 0284 BB6A     		ldr	r3, [r7, #40]
 5658 0286 1B89     		ldrh	r3, [r3, #8]
 5659 0288 03F00F03 		and	r3, r3, #15
 5660 028c 9BB2     		uxth	r3, r3
 5661 028e 002B     		cmp	r3, #0
 5662 0290 01D0     		beq	.L370
 5663              		.loc 1 2176 0 is_stmt 0 discriminator 1
 5664 0292 0D23     		movs	r3, #13
 5665 0294 70E1     		b	.L354
 5666              	.L370:
2177:../fatfs/ff.c **** 
2178:../fatfs/ff.c **** 	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 5667              		.loc 1 2178 0 is_stmt 1
 5668 0296 BB6A     		ldr	r3, [r7, #40]
 5669 0298 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 5670 029c 1B02     		lsls	r3, r3, #8
 5671 029e 9AB2     		uxth	r2, r3
 5672 02a0 BB6A     		ldr	r3, [r7, #40]
 5673 02a2 93F84B30 		ldrb	r3, [r3, #75]	@ zero_extendqisi2
 5674 02a6 9BB2     		uxth	r3, r3
 5675 02a8 1343     		orrs	r3, r3, r2
 5676 02aa 9BB2     		uxth	r3, r3
 5677 02ac 9BB2     		uxth	r3, r3
 5678 02ae 7B63     		str	r3, [r7, #52]
2179:../fatfs/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 5679              		.loc 1 2179 0
 5680 02b0 7B6B     		ldr	r3, [r7, #52]
 5681 02b2 002B     		cmp	r3, #0
 5682 02b4 12D1     		bne	.L371
 5683              		.loc 1 2179 0 is_stmt 0 discriminator 1
 5684 02b6 BB6A     		ldr	r3, [r7, #40]
 5685 02b8 93F85B30 		ldrb	r3, [r3, #91]	@ zero_extendqisi2
 5686 02bc 1A06     		lsls	r2, r3, #24
 5687 02be BB6A     		ldr	r3, [r7, #40]
 5688 02c0 93F85A30 		ldrb	r3, [r3, #90]	@ zero_extendqisi2
 5689 02c4 1B04     		lsls	r3, r3, #16
 5690 02c6 1343     		orrs	r3, r3, r2
 5691 02c8 BA6A     		ldr	r2, [r7, #40]
 5692 02ca 92F85920 		ldrb	r2, [r2, #89]	@ zero_extendqisi2
 5693 02ce 1202     		lsls	r2, r2, #8
 5694 02d0 1343     		orrs	r3, r3, r2
 5695 02d2 BA6A     		ldr	r2, [r7, #40]
 5696 02d4 92F85820 		ldrb	r2, [r2, #88]	@ zero_extendqisi2
 5697 02d8 1343     		orrs	r3, r3, r2
 5698 02da 7B63     		str	r3, [r7, #52]
 5699              	.L371:
2180:../fatfs/ff.c **** 
2181:../fatfs/ff.c **** 	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 5700              		.loc 1 2181 0 is_stmt 1
 5701 02dc BB6A     		ldr	r3, [r7, #40]
 5702 02de 93F84730 		ldrb	r3, [r3, #71]	@ zero_extendqisi2
 5703 02e2 1B02     		lsls	r3, r3, #8
 5704 02e4 9AB2     		uxth	r2, r3
 5705 02e6 BB6A     		ldr	r3, [r7, #40]
 5706 02e8 93F84630 		ldrb	r3, [r3, #70]	@ zero_extendqisi2
 5707 02ec 9BB2     		uxth	r3, r3
 5708 02ee 1343     		orrs	r3, r3, r2
 5709 02f0 9BB2     		uxth	r3, r3
 5710 02f2 BB83     		strh	r3, [r7, #28]	@ movhi
2182:../fatfs/ff.c **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 5711              		.loc 1 2182 0
 5712 02f4 BB8B     		ldrh	r3, [r7, #28]
 5713 02f6 002B     		cmp	r3, #0
 5714 02f8 08D1     		bne	.L372
 5715              		.loc 1 2182 0 is_stmt 0 discriminator 1
 5716 02fa 0D23     		movs	r3, #13
 5717 02fc 3CE1     		b	.L354
 5718              	.L386:
 5719 02fe 00BF     		.align	2
 5720              	.L385:
 5721 0300 00000000 		.word	CurrVol
 5722 0304 00000000 		.word	FatFs
 5723 0308 00000000 		.word	VolToPart
 5724              	.L372:
2183:../fatfs/ff.c **** 
2184:../fatfs/ff.c **** 	/* Determine the FAT sub type */
2185:../fatfs/ff.c **** 	sysect = nrsv + fasize + fs->n_rootdir / (SS(fatfs) / SZ_DIR);	/* RSV+FAT+DIR */
 5725              		.loc 1 2185 0 is_stmt 1
 5726 030c BA8B     		ldrh	r2, [r7, #28]
 5727 030e BB6B     		ldr	r3, [r7, #56]
 5728 0310 1344     		add	r3, r3, r2
 5729 0312 BA6A     		ldr	r2, [r7, #40]
 5730 0314 1289     		ldrh	r2, [r2, #8]
 5731 0316 1209     		lsrs	r2, r2, #4
 5732 0318 92B2     		uxth	r2, r2
 5733 031a 1344     		add	r3, r3, r2
 5734 031c BB61     		str	r3, [r7, #24]
2186:../fatfs/ff.c **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 5735              		.loc 1 2186 0
 5736 031e 7A6B     		ldr	r2, [r7, #52]
 5737 0320 BB69     		ldr	r3, [r7, #24]
 5738 0322 9A42     		cmp	r2, r3
 5739 0324 01D2     		bcs	.L373
 5740              		.loc 1 2186 0 is_stmt 0 discriminator 1
 5741 0326 0D23     		movs	r3, #13
 5742 0328 26E1     		b	.L354
 5743              	.L373:
2187:../fatfs/ff.c **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 5744              		.loc 1 2187 0 is_stmt 1
 5745 032a 7A6B     		ldr	r2, [r7, #52]
 5746 032c BB69     		ldr	r3, [r7, #24]
 5747 032e D31A     		subs	r3, r2, r3
 5748 0330 BA6A     		ldr	r2, [r7, #40]
 5749 0332 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 5750 0334 B3FBF2F3 		udiv	r3, r3, r2
 5751 0338 7B61     		str	r3, [r7, #20]
2188:../fatfs/ff.c **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 5752              		.loc 1 2188 0
 5753 033a 7B69     		ldr	r3, [r7, #20]
 5754 033c 002B     		cmp	r3, #0
 5755 033e 01D1     		bne	.L374
 5756              		.loc 1 2188 0 is_stmt 0 discriminator 1
 5757 0340 0D23     		movs	r3, #13
 5758 0342 19E1     		b	.L354
 5759              	.L374:
2189:../fatfs/ff.c **** 	fmt = FS_FAT12;
 5760              		.loc 1 2189 0 is_stmt 1
 5761 0344 0123     		movs	r3, #1
 5762 0346 87F84730 		strb	r3, [r7, #71]
2190:../fatfs/ff.c **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 5763              		.loc 1 2190 0
 5764 034a 7B69     		ldr	r3, [r7, #20]
 5765 034c 40F6F572 		movw	r2, #4085
 5766 0350 9342     		cmp	r3, r2
 5767 0352 02D9     		bls	.L375
 5768              		.loc 1 2190 0 is_stmt 0 discriminator 1
 5769 0354 0223     		movs	r3, #2
 5770 0356 87F84730 		strb	r3, [r7, #71]
 5771              	.L375:
2191:../fatfs/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 5772              		.loc 1 2191 0 is_stmt 1
 5773 035a 7B69     		ldr	r3, [r7, #20]
 5774 035c 4FF6F572 		movw	r2, #65525
 5775 0360 9342     		cmp	r3, r2
 5776 0362 02D9     		bls	.L376
 5777              		.loc 1 2191 0 is_stmt 0 discriminator 1
 5778 0364 0323     		movs	r3, #3
 5779 0366 87F84730 		strb	r3, [r7, #71]
 5780              	.L376:
2192:../fatfs/ff.c **** 
2193:../fatfs/ff.c **** 	/* Boundaries and Limits */
2194:../fatfs/ff.c **** 	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 5781              		.loc 1 2194 0 is_stmt 1
 5782 036a 7B69     		ldr	r3, [r7, #20]
 5783 036c 9A1C     		adds	r2, r3, #2
 5784 036e BB6A     		ldr	r3, [r7, #40]
 5785 0370 DA61     		str	r2, [r3, #28]
2195:../fatfs/ff.c **** 	fs->volbase = bsect;								/* Volume start sector */
 5786              		.loc 1 2195 0
 5787 0372 BB6A     		ldr	r3, [r7, #40]
 5788 0374 FA6B     		ldr	r2, [r7, #60]
 5789 0376 5A62     		str	r2, [r3, #36]
2196:../fatfs/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 5790              		.loc 1 2196 0
 5791 0378 BA8B     		ldrh	r2, [r7, #28]
 5792 037a FB6B     		ldr	r3, [r7, #60]
 5793 037c 1A44     		add	r2, r2, r3
 5794 037e BB6A     		ldr	r3, [r7, #40]
 5795 0380 9A62     		str	r2, [r3, #40]
2197:../fatfs/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
 5796              		.loc 1 2197 0
 5797 0382 FA6B     		ldr	r2, [r7, #60]
 5798 0384 BB69     		ldr	r3, [r7, #24]
 5799 0386 1A44     		add	r2, r2, r3
 5800 0388 BB6A     		ldr	r3, [r7, #40]
 5801 038a 1A63     		str	r2, [r3, #48]
2198:../fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 5802              		.loc 1 2198 0
 5803 038c 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 5804 0390 032B     		cmp	r3, #3
 5805 0392 1ED1     		bne	.L377
2199:../fatfs/ff.c **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 5806              		.loc 1 2199 0
 5807 0394 BB6A     		ldr	r3, [r7, #40]
 5808 0396 1B89     		ldrh	r3, [r3, #8]
 5809 0398 002B     		cmp	r3, #0
 5810 039a 01D0     		beq	.L378
 5811              		.loc 1 2199 0 is_stmt 0 discriminator 1
 5812 039c 0D23     		movs	r3, #13
 5813 039e EBE0     		b	.L354
 5814              	.L378:
2200:../fatfs/ff.c **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 5815              		.loc 1 2200 0 is_stmt 1
 5816 03a0 BB6A     		ldr	r3, [r7, #40]
 5817 03a2 93F86730 		ldrb	r3, [r3, #103]	@ zero_extendqisi2
 5818 03a6 1A06     		lsls	r2, r3, #24
 5819 03a8 BB6A     		ldr	r3, [r7, #40]
 5820 03aa 93F86630 		ldrb	r3, [r3, #102]	@ zero_extendqisi2
 5821 03ae 1B04     		lsls	r3, r3, #16
 5822 03b0 1343     		orrs	r3, r3, r2
 5823 03b2 BA6A     		ldr	r2, [r7, #40]
 5824 03b4 92F86520 		ldrb	r2, [r2, #101]	@ zero_extendqisi2
 5825 03b8 1202     		lsls	r2, r2, #8
 5826 03ba 1343     		orrs	r3, r3, r2
 5827 03bc BA6A     		ldr	r2, [r7, #40]
 5828 03be 92F86420 		ldrb	r2, [r2, #100]	@ zero_extendqisi2
 5829 03c2 1A43     		orrs	r2, r2, r3
 5830 03c4 BB6A     		ldr	r3, [r7, #40]
 5831 03c6 DA62     		str	r2, [r3, #44]
2201:../fatfs/ff.c **** 		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 5832              		.loc 1 2201 0
 5833 03c8 BB6A     		ldr	r3, [r7, #40]
 5834 03ca DB69     		ldr	r3, [r3, #28]
 5835 03cc 9B00     		lsls	r3, r3, #2
 5836 03ce 3B63     		str	r3, [r7, #48]
 5837 03d0 1FE0     		b	.L379
 5838              	.L377:
2202:../fatfs/ff.c **** 	} else {
2203:../fatfs/ff.c **** 		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 5839              		.loc 1 2203 0
 5840 03d2 BB6A     		ldr	r3, [r7, #40]
 5841 03d4 1B89     		ldrh	r3, [r3, #8]
 5842 03d6 002B     		cmp	r3, #0
 5843 03d8 01D1     		bne	.L380
 5844              		.loc 1 2203 0 is_stmt 0 discriminator 1
 5845 03da 0D23     		movs	r3, #13
 5846 03dc CCE0     		b	.L354
 5847              	.L380:
2204:../fatfs/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 5848              		.loc 1 2204 0 is_stmt 1
 5849 03de BB6A     		ldr	r3, [r7, #40]
 5850 03e0 9A6A     		ldr	r2, [r3, #40]
 5851 03e2 BB6B     		ldr	r3, [r7, #56]
 5852 03e4 1A44     		add	r2, r2, r3
 5853 03e6 BB6A     		ldr	r3, [r7, #40]
 5854 03e8 DA62     		str	r2, [r3, #44]
2205:../fatfs/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
2206:../fatfs/ff.c **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 5855              		.loc 1 2206 0
 5856 03ea 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 5857 03ee 022B     		cmp	r3, #2
 5858 03f0 03D1     		bne	.L381
 5859              		.loc 1 2206 0 is_stmt 0 discriminator 1
 5860 03f2 BB6A     		ldr	r3, [r7, #40]
 5861 03f4 DB69     		ldr	r3, [r3, #28]
 5862 03f6 5B00     		lsls	r3, r3, #1
 5863 03f8 0AE0     		b	.L382
 5864              	.L381:
 5865              		.loc 1 2206 0 discriminator 2
 5866 03fa BB6A     		ldr	r3, [r7, #40]
 5867 03fc DA69     		ldr	r2, [r3, #28]
 5868 03fe 1346     		mov	r3, r2
 5869 0400 5B00     		lsls	r3, r3, #1
 5870 0402 1344     		add	r3, r3, r2
 5871 0404 5A08     		lsrs	r2, r3, #1
 5872 0406 BB6A     		ldr	r3, [r7, #40]
 5873 0408 DB69     		ldr	r3, [r3, #28]
 5874 040a 03F00103 		and	r3, r3, #1
 5875 040e 1344     		add	r3, r3, r2
 5876              	.L382:
2205:../fatfs/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 5877              		.loc 1 2205 0 is_stmt 1
 5878 0410 3B63     		str	r3, [r7, #48]
 5879              	.L379:
2207:../fatfs/ff.c **** 	}
2208:../fatfs/ff.c **** 	if (fs->fsize < (szbfat + (SS(fatfs) - 1)) / SS(fatfs))	/* (BPB_FATSz must not be less than requir
 5880              		.loc 1 2208 0
 5881 0412 BB6A     		ldr	r3, [r7, #40]
 5882 0414 1A6A     		ldr	r2, [r3, #32]
 5883 0416 3B6B     		ldr	r3, [r7, #48]
 5884 0418 03F2FF13 		addw	r3, r3, #511
 5885 041c 5B0A     		lsrs	r3, r3, #9
 5886 041e 9A42     		cmp	r2, r3
 5887 0420 01D2     		bcs	.L383
2209:../fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 5888              		.loc 1 2209 0
 5889 0422 0D23     		movs	r3, #13
 5890 0424 A8E0     		b	.L354
 5891              	.L383:
2210:../fatfs/ff.c **** 
2211:../fatfs/ff.c **** #if !_FS_READONLY
2212:../fatfs/ff.c **** 	/* Initialize cluster allocation information */
2213:../fatfs/ff.c **** 	fs->free_clust = 0xFFFFFFFF;
 5892              		.loc 1 2213 0
 5893 0426 BB6A     		ldr	r3, [r7, #40]
 5894 0428 4FF0FF32 		mov	r2, #-1
 5895 042c 1A61     		str	r2, [r3, #16]
2214:../fatfs/ff.c **** 	fs->last_clust = 0;
 5896              		.loc 1 2214 0
 5897 042e BB6A     		ldr	r3, [r7, #40]
 5898 0430 0022     		movs	r2, #0
 5899 0432 DA60     		str	r2, [r3, #12]
2215:../fatfs/ff.c **** 
2216:../fatfs/ff.c **** 	/* Get fsinfo if available */
2217:../fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 5900              		.loc 1 2217 0
 5901 0434 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 5902 0438 032B     		cmp	r3, #3
 5903 043a 40F08580 		bne	.L384
2218:../fatfs/ff.c **** 	 	fs->fsi_flag = 0;
 5904              		.loc 1 2218 0
 5905 043e BB6A     		ldr	r3, [r7, #40]
 5906 0440 0022     		movs	r2, #0
 5907 0442 5A71     		strb	r2, [r3, #5]
2219:../fatfs/ff.c **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 5908              		.loc 1 2219 0
 5909 0444 BB6A     		ldr	r3, [r7, #40]
 5910 0446 93F86930 		ldrb	r3, [r3, #105]	@ zero_extendqisi2
 5911 044a 1B02     		lsls	r3, r3, #8
 5912 044c 9AB2     		uxth	r2, r3
 5913 044e BB6A     		ldr	r3, [r7, #40]
 5914 0450 93F86830 		ldrb	r3, [r3, #104]	@ zero_extendqisi2
 5915 0454 9BB2     		uxth	r3, r3
 5916 0456 1343     		orrs	r3, r3, r2
 5917 0458 9BB2     		uxth	r3, r3
 5918 045a 9BB2     		uxth	r3, r3
 5919 045c 1A46     		mov	r2, r3
 5920 045e FB6B     		ldr	r3, [r7, #60]
 5921 0460 1A44     		add	r2, r2, r3
 5922 0462 BB6A     		ldr	r3, [r7, #40]
 5923 0464 5A61     		str	r2, [r3, #20]
2220:../fatfs/ff.c **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 5924              		.loc 1 2220 0
 5925 0466 BB6A     		ldr	r3, [r7, #40]
 5926 0468 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 5927 046a BB6A     		ldr	r3, [r7, #40]
 5928 046c 03F13802 		add	r2, r3, #56
 5929 0470 BB6A     		ldr	r3, [r7, #40]
 5930 0472 5B69     		ldr	r3, [r3, #20]
 5931 0474 0846     		mov	r0, r1
 5932 0476 1146     		mov	r1, r2
 5933 0478 1A46     		mov	r2, r3
 5934 047a 0123     		movs	r3, #1
 5935 047c FFF7FEFF 		bl	disk_read
 5936 0480 0346     		mov	r3, r0
 5937 0482 002B     		cmp	r3, #0
 5938 0484 60D1     		bne	.L384
2221:../fatfs/ff.c **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 5939              		.loc 1 2221 0 discriminator 1
 5940 0486 BB6A     		ldr	r3, [r7, #40]
 5941 0488 93F83732 		ldrb	r3, [r3, #567]	@ zero_extendqisi2
 5942 048c 1B02     		lsls	r3, r3, #8
 5943 048e 9AB2     		uxth	r2, r3
 5944 0490 BB6A     		ldr	r3, [r7, #40]
 5945 0492 93F83632 		ldrb	r3, [r3, #566]	@ zero_extendqisi2
 5946 0496 9BB2     		uxth	r3, r3
 5947 0498 1343     		orrs	r3, r3, r2
 5948 049a 9BB2     		uxth	r3, r3
2220:../fatfs/ff.c **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 5949              		.loc 1 2220 0 discriminator 1
 5950 049c 1BB2     		sxth	r3, r3
 5951 049e 384A     		ldr	r2, .L387
 5952 04a0 9342     		cmp	r3, r2
 5953 04a2 51D1     		bne	.L384
2222:../fatfs/ff.c **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 5954              		.loc 1 2222 0
 5955 04a4 BB6A     		ldr	r3, [r7, #40]
 5956 04a6 93F83B30 		ldrb	r3, [r3, #59]	@ zero_extendqisi2
 5957 04aa 1A06     		lsls	r2, r3, #24
 5958 04ac BB6A     		ldr	r3, [r7, #40]
 5959 04ae 93F83A30 		ldrb	r3, [r3, #58]	@ zero_extendqisi2
 5960 04b2 1B04     		lsls	r3, r3, #16
 5961 04b4 1343     		orrs	r3, r3, r2
 5962 04b6 BA6A     		ldr	r2, [r7, #40]
 5963 04b8 92F83920 		ldrb	r2, [r2, #57]	@ zero_extendqisi2
 5964 04bc 1202     		lsls	r2, r2, #8
 5965 04be 1343     		orrs	r3, r3, r2
 5966 04c0 BA6A     		ldr	r2, [r7, #40]
 5967 04c2 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
 5968 04c6 1343     		orrs	r3, r3, r2
2221:../fatfs/ff.c **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 5969              		.loc 1 2221 0
 5970 04c8 2E4A     		ldr	r2, .L387+4
 5971 04ca 9342     		cmp	r3, r2
 5972 04cc 3CD1     		bne	.L384
2223:../fatfs/ff.c **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 5973              		.loc 1 2223 0
 5974 04ce BB6A     		ldr	r3, [r7, #40]
 5975 04d0 93F81F32 		ldrb	r3, [r3, #543]	@ zero_extendqisi2
 5976 04d4 1A06     		lsls	r2, r3, #24
 5977 04d6 BB6A     		ldr	r3, [r7, #40]
 5978 04d8 93F81E32 		ldrb	r3, [r3, #542]	@ zero_extendqisi2
 5979 04dc 1B04     		lsls	r3, r3, #16
 5980 04de 1343     		orrs	r3, r3, r2
 5981 04e0 BA6A     		ldr	r2, [r7, #40]
 5982 04e2 92F81D22 		ldrb	r2, [r2, #541]	@ zero_extendqisi2
 5983 04e6 1202     		lsls	r2, r2, #8
 5984 04e8 1343     		orrs	r3, r3, r2
 5985 04ea BA6A     		ldr	r2, [r7, #40]
 5986 04ec 92F81C22 		ldrb	r2, [r2, #540]	@ zero_extendqisi2
 5987 04f0 1343     		orrs	r3, r3, r2
2222:../fatfs/ff.c **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 5988              		.loc 1 2222 0
 5989 04f2 254A     		ldr	r2, .L387+8
 5990 04f4 9342     		cmp	r3, r2
 5991 04f6 27D1     		bne	.L384
2224:../fatfs/ff.c **** 				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 5992              		.loc 1 2224 0
 5993 04f8 BB6A     		ldr	r3, [r7, #40]
 5994 04fa 93F82732 		ldrb	r3, [r3, #551]	@ zero_extendqisi2
 5995 04fe 1A06     		lsls	r2, r3, #24
 5996 0500 BB6A     		ldr	r3, [r7, #40]
 5997 0502 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
 5998 0506 1B04     		lsls	r3, r3, #16
 5999 0508 1343     		orrs	r3, r3, r2
 6000 050a BA6A     		ldr	r2, [r7, #40]
 6001 050c 92F82522 		ldrb	r2, [r2, #549]	@ zero_extendqisi2
 6002 0510 1202     		lsls	r2, r2, #8
 6003 0512 1343     		orrs	r3, r3, r2
 6004 0514 BA6A     		ldr	r2, [r7, #40]
 6005 0516 92F82422 		ldrb	r2, [r2, #548]	@ zero_extendqisi2
 6006 051a 1A43     		orrs	r2, r2, r3
 6007 051c BB6A     		ldr	r3, [r7, #40]
 6008 051e DA60     		str	r2, [r3, #12]
2225:../fatfs/ff.c **** 				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 6009              		.loc 1 2225 0
 6010 0520 BB6A     		ldr	r3, [r7, #40]
 6011 0522 93F82332 		ldrb	r3, [r3, #547]	@ zero_extendqisi2
 6012 0526 1A06     		lsls	r2, r3, #24
 6013 0528 BB6A     		ldr	r3, [r7, #40]
 6014 052a 93F82232 		ldrb	r3, [r3, #546]	@ zero_extendqisi2
 6015 052e 1B04     		lsls	r3, r3, #16
 6016 0530 1343     		orrs	r3, r3, r2
 6017 0532 BA6A     		ldr	r2, [r7, #40]
 6018 0534 92F82122 		ldrb	r2, [r2, #545]	@ zero_extendqisi2
 6019 0538 1202     		lsls	r2, r2, #8
 6020 053a 1343     		orrs	r3, r3, r2
 6021 053c BA6A     		ldr	r2, [r7, #40]
 6022 053e 92F82022 		ldrb	r2, [r2, #544]	@ zero_extendqisi2
 6023 0542 1A43     		orrs	r2, r2, r3
 6024 0544 BB6A     		ldr	r3, [r7, #40]
 6025 0546 1A61     		str	r2, [r3, #16]
 6026              	.L384:
2226:../fatfs/ff.c **** 		}
2227:../fatfs/ff.c **** 	}
2228:../fatfs/ff.c **** #endif
2229:../fatfs/ff.c **** 	fs->fs_type = fmt;		/* FAT sub-type */
 6027              		.loc 1 2229 0
 6028 0548 BB6A     		ldr	r3, [r7, #40]
 6029 054a 97F84720 		ldrb	r2, [r7, #71]
 6030 054e 1A70     		strb	r2, [r3]
2230:../fatfs/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
 6031              		.loc 1 2230 0
 6032 0550 0E4B     		ldr	r3, .L387+12
 6033 0552 1B88     		ldrh	r3, [r3]
 6034 0554 0133     		adds	r3, r3, #1
 6035 0556 9AB2     		uxth	r2, r3
 6036 0558 0C4B     		ldr	r3, .L387+12
 6037 055a 1A80     		strh	r2, [r3]	@ movhi
 6038 055c 0B4B     		ldr	r3, .L387+12
 6039 055e 1A88     		ldrh	r2, [r3]
 6040 0560 BB6A     		ldr	r3, [r7, #40]
 6041 0562 DA80     		strh	r2, [r3, #6]	@ movhi
2231:../fatfs/ff.c **** 	fs->winsect = 0;		/* Invalidate sector cache */
 6042              		.loc 1 2231 0
 6043 0564 BB6A     		ldr	r3, [r7, #40]
 6044 0566 0022     		movs	r2, #0
 6045 0568 5A63     		str	r2, [r3, #52]
2232:../fatfs/ff.c **** 	fs->wflag = 0;
 6046              		.loc 1 2232 0
 6047 056a BB6A     		ldr	r3, [r7, #40]
 6048 056c 0022     		movs	r2, #0
 6049 056e 1A71     		strb	r2, [r3, #4]
2233:../fatfs/ff.c **** #if _FS_RPATH
2234:../fatfs/ff.c **** 	fs->cdir = 0;			/* Current directory (root dir) */
 6050              		.loc 1 2234 0
 6051 0570 BB6A     		ldr	r3, [r7, #40]
 6052 0572 0022     		movs	r2, #0
 6053 0574 9A61     		str	r2, [r3, #24]
2235:../fatfs/ff.c **** #endif
2236:../fatfs/ff.c **** #if _FS_LOCK				/* Clear file lock semaphores */
2237:../fatfs/ff.c **** 	clear_lock(fatfs);
2238:../fatfs/ff.c **** #endif
2239:../fatfs/ff.c **** 
2240:../fatfs/ff.c **** 	return FR_OK;
 6054              		.loc 1 2240 0
 6055 0576 0023     		movs	r3, #0
 6056              	.L354:
2241:../fatfs/ff.c **** }
 6057              		.loc 1 2241 0
 6058 0578 1846     		mov	r0, r3
 6059 057a 4837     		adds	r7, r7, #72
 6060              		.cfi_def_cfa_offset 8
 6061 057c BD46     		mov	sp, r7
 6062              		.cfi_def_cfa_register 13
 6063              		@ sp needed
 6064 057e 80BD     		pop	{r7, pc}
 6065              	.L388:
 6066              		.align	2
 6067              	.L387:
 6068 0580 55AAFFFF 		.word	-21931
 6069 0584 52526141 		.word	1096897106
 6070 0588 72724161 		.word	1631679090
 6071 058c 00000000 		.word	Fsid
 6072              		.cfi_endproc
 6073              	.LFE31:
 6075              		.section	.text.validate,"ax",%progbits
 6076              		.align	2
 6077              		.thumb
 6078              		.thumb_func
 6080              	validate:
 6081              	.LFB32:
2242:../fatfs/ff.c **** 
2243:../fatfs/ff.c **** 
2244:../fatfs/ff.c **** 
2245:../fatfs/ff.c **** 
2246:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2247:../fatfs/ff.c **** /* Check if the file/dir object is valid or not                          */
2248:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2249:../fatfs/ff.c **** 
2250:../fatfs/ff.c **** static
2251:../fatfs/ff.c **** FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
2252:../fatfs/ff.c **** 	void* obj		/* Pointer to the object FIL/DIR to check validity */
2253:../fatfs/ff.c **** )
2254:../fatfs/ff.c **** {
 6082              		.loc 1 2254 0
 6083              		.cfi_startproc
 6084              		@ args = 0, pretend = 0, frame = 16
 6085              		@ frame_needed = 1, uses_anonymous_args = 0
 6086 0000 80B5     		push	{r7, lr}
 6087              		.cfi_def_cfa_offset 8
 6088              		.cfi_offset 7, -8
 6089              		.cfi_offset 14, -4
 6090 0002 84B0     		sub	sp, sp, #16
 6091              		.cfi_def_cfa_offset 24
 6092 0004 00AF     		add	r7, sp, #0
 6093              		.cfi_def_cfa_register 7
 6094 0006 7860     		str	r0, [r7, #4]
2255:../fatfs/ff.c **** 	FIL *fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
 6095              		.loc 1 2255 0
 6096 0008 7B68     		ldr	r3, [r7, #4]
 6097 000a FB60     		str	r3, [r7, #12]
2256:../fatfs/ff.c **** 
2257:../fatfs/ff.c **** 
2258:../fatfs/ff.c **** 	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 6098              		.loc 1 2258 0
 6099 000c FB68     		ldr	r3, [r7, #12]
 6100 000e 002B     		cmp	r3, #0
 6101 0010 0FD0     		beq	.L390
 6102              		.loc 1 2258 0 is_stmt 0 discriminator 1
 6103 0012 FB68     		ldr	r3, [r7, #12]
 6104 0014 1B68     		ldr	r3, [r3]
 6105 0016 002B     		cmp	r3, #0
 6106 0018 0BD0     		beq	.L390
 6107              		.loc 1 2258 0 discriminator 2
 6108 001a FB68     		ldr	r3, [r7, #12]
 6109 001c 1B68     		ldr	r3, [r3]
 6110 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6111 0020 002B     		cmp	r3, #0
 6112 0022 06D0     		beq	.L390
 6113              		.loc 1 2258 0 discriminator 3
 6114 0024 FB68     		ldr	r3, [r7, #12]
 6115 0026 1B68     		ldr	r3, [r3]
 6116 0028 DA88     		ldrh	r2, [r3, #6]
 6117 002a FB68     		ldr	r3, [r7, #12]
 6118 002c 9B88     		ldrh	r3, [r3, #4]
 6119 002e 9A42     		cmp	r2, r3
 6120 0030 01D0     		beq	.L391
 6121              	.L390:
2259:../fatfs/ff.c **** 		return FR_INVALID_OBJECT;
 6122              		.loc 1 2259 0 is_stmt 1
 6123 0032 0923     		movs	r3, #9
 6124 0034 0DE0     		b	.L392
 6125              	.L391:
2260:../fatfs/ff.c **** 
2261:../fatfs/ff.c **** 	ENTER_FF(fil->fatfs);		/* Lock file system */
2262:../fatfs/ff.c **** 
2263:../fatfs/ff.c **** 	if (disk_status(fil->fs->drv) & STA_NOINIT)
 6126              		.loc 1 2263 0
 6127 0036 FB68     		ldr	r3, [r7, #12]
 6128 0038 1B68     		ldr	r3, [r3]
 6129 003a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 6130 003c 1846     		mov	r0, r3
 6131 003e FFF7FEFF 		bl	disk_status
 6132 0042 0346     		mov	r3, r0
 6133 0044 03F00103 		and	r3, r3, #1
 6134 0048 002B     		cmp	r3, #0
 6135 004a 01D0     		beq	.L393
2264:../fatfs/ff.c **** 		return FR_NOT_READY;
 6136              		.loc 1 2264 0
 6137 004c 0323     		movs	r3, #3
 6138 004e 00E0     		b	.L392
 6139              	.L393:
2265:../fatfs/ff.c **** 
2266:../fatfs/ff.c **** 	return FR_OK;
 6140              		.loc 1 2266 0
 6141 0050 0023     		movs	r3, #0
 6142              	.L392:
2267:../fatfs/ff.c **** }
 6143              		.loc 1 2267 0
 6144 0052 1846     		mov	r0, r3
 6145 0054 1037     		adds	r7, r7, #16
 6146              		.cfi_def_cfa_offset 8
 6147 0056 BD46     		mov	sp, r7
 6148              		.cfi_def_cfa_register 13
 6149              		@ sp needed
 6150 0058 80BD     		pop	{r7, pc}
 6151              		.cfi_endproc
 6152              	.LFE32:
 6154 005a 00BF     		.section	.text.f_mount,"ax",%progbits
 6155              		.align	2
 6156              		.global	f_mount
 6157              		.thumb
 6158              		.thumb_func
 6160              	f_mount:
 6161              	.LFB33:
2268:../fatfs/ff.c **** 
2269:../fatfs/ff.c **** 
2270:../fatfs/ff.c **** 
2271:../fatfs/ff.c **** 
2272:../fatfs/ff.c **** /*--------------------------------------------------------------------------
2273:../fatfs/ff.c **** 
2274:../fatfs/ff.c ****    Public Functions
2275:../fatfs/ff.c **** 
2276:../fatfs/ff.c **** --------------------------------------------------------------------------*/
2277:../fatfs/ff.c **** 
2278:../fatfs/ff.c **** 
2279:../fatfs/ff.c **** 
2280:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2281:../fatfs/ff.c **** /* Mount/Unmount a Logical Drive                                         */
2282:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2283:../fatfs/ff.c **** 
2284:../fatfs/ff.c **** FRESULT f_mount (
2285:../fatfs/ff.c **** 	BYTE vol,		/* Logical drive number to be mounted/unmounted */
2286:../fatfs/ff.c **** 	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
2287:../fatfs/ff.c **** )
2288:../fatfs/ff.c **** {
 6162              		.loc 1 2288 0
 6163              		.cfi_startproc
 6164              		@ args = 0, pretend = 0, frame = 16
 6165              		@ frame_needed = 1, uses_anonymous_args = 0
 6166              		@ link register save eliminated.
 6167 0000 80B4     		push	{r7}
 6168              		.cfi_def_cfa_offset 4
 6169              		.cfi_offset 7, -4
 6170 0002 85B0     		sub	sp, sp, #20
 6171              		.cfi_def_cfa_offset 24
 6172 0004 00AF     		add	r7, sp, #0
 6173              		.cfi_def_cfa_register 7
 6174 0006 0346     		mov	r3, r0
 6175 0008 3960     		str	r1, [r7]
 6176 000a FB71     		strb	r3, [r7, #7]
2289:../fatfs/ff.c **** 	FATFS *rfs;
2290:../fatfs/ff.c **** 
2291:../fatfs/ff.c **** 
2292:../fatfs/ff.c **** 	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
 6177              		.loc 1 2292 0
 6178 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6179 000e 012B     		cmp	r3, #1
 6180 0010 01D9     		bls	.L395
2293:../fatfs/ff.c **** 		return FR_INVALID_DRIVE;
 6181              		.loc 1 2293 0
 6182 0012 0B23     		movs	r3, #11
 6183 0014 16E0     		b	.L396
 6184              	.L395:
2294:../fatfs/ff.c **** 	rfs = FatFs[vol];			/* Get current fs object */
 6185              		.loc 1 2294 0
 6186 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6187 0018 0D4A     		ldr	r2, .L399
 6188 001a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 6189 001e FB60     		str	r3, [r7, #12]
2295:../fatfs/ff.c **** 
2296:../fatfs/ff.c **** 	if (rfs) {
 6190              		.loc 1 2296 0
 6191 0020 FB68     		ldr	r3, [r7, #12]
 6192 0022 002B     		cmp	r3, #0
 6193 0024 02D0     		beq	.L397
2297:../fatfs/ff.c **** #if _FS_LOCK
2298:../fatfs/ff.c **** 		clear_lock(rfs);
2299:../fatfs/ff.c **** #endif
2300:../fatfs/ff.c **** #if _FS_REENTRANT				/* Discard sync object of the current volume */
2301:../fatfs/ff.c **** 		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
2302:../fatfs/ff.c **** #endif
2303:../fatfs/ff.c **** 		rfs->fs_type = 0;		/* Clear old fs object */
 6194              		.loc 1 2303 0
 6195 0026 FB68     		ldr	r3, [r7, #12]
 6196 0028 0022     		movs	r2, #0
 6197 002a 1A70     		strb	r2, [r3]
 6198              	.L397:
2304:../fatfs/ff.c **** 	}
2305:../fatfs/ff.c **** 
2306:../fatfs/ff.c **** 	if (fs) {
 6199              		.loc 1 2306 0
 6200 002c 3B68     		ldr	r3, [r7]
 6201 002e 002B     		cmp	r3, #0
 6202 0030 02D0     		beq	.L398
2307:../fatfs/ff.c **** 		fs->fs_type = 0;		/* Clear new fs object */
 6203              		.loc 1 2307 0
 6204 0032 3B68     		ldr	r3, [r7]
 6205 0034 0022     		movs	r2, #0
 6206 0036 1A70     		strb	r2, [r3]
 6207              	.L398:
2308:../fatfs/ff.c **** #if _FS_REENTRANT				/* Create sync object for the new volume */
2309:../fatfs/ff.c **** 		if (!ff_cre_syncobj(vol, &fatfs->sobj)) return FR_INT_ERR;
2310:../fatfs/ff.c **** #endif
2311:../fatfs/ff.c **** 	}
2312:../fatfs/ff.c **** 	FatFs[vol] = fs;			/* Register new fs object */
 6208              		.loc 1 2312 0
 6209 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6210 003a 0549     		ldr	r1, .L399
 6211 003c 3A68     		ldr	r2, [r7]
 6212 003e 41F82320 		str	r2, [r1, r3, lsl #2]
2313:../fatfs/ff.c **** 
2314:../fatfs/ff.c **** 	return FR_OK;
 6213              		.loc 1 2314 0
 6214 0042 0023     		movs	r3, #0
 6215              	.L396:
2315:../fatfs/ff.c **** }
 6216              		.loc 1 2315 0
 6217 0044 1846     		mov	r0, r3
 6218 0046 1437     		adds	r7, r7, #20
 6219              		.cfi_def_cfa_offset 4
 6220 0048 BD46     		mov	sp, r7
 6221              		.cfi_def_cfa_register 13
 6222              		@ sp needed
 6223 004a 5DF8047B 		ldr	r7, [sp], #4
 6224              		.cfi_restore 7
 6225              		.cfi_def_cfa_offset 0
 6226 004e 7047     		bx	lr
 6227              	.L400:
 6228              		.align	2
 6229              	.L399:
 6230 0050 00000000 		.word	FatFs
 6231              		.cfi_endproc
 6232              	.LFE33:
 6234              		.section	.text.f_open,"ax",%progbits
 6235              		.align	2
 6236              		.global	f_open
 6237              		.thumb
 6238              		.thumb_func
 6240              	f_open:
 6241              	.LFB34:
2316:../fatfs/ff.c **** 
2317:../fatfs/ff.c **** 
2318:../fatfs/ff.c **** 
2319:../fatfs/ff.c **** 
2320:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2321:../fatfs/ff.c **** /* Open or Create a File                                                 */
2322:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2323:../fatfs/ff.c **** 
2324:../fatfs/ff.c **** FRESULT f_open (
2325:../fatfs/ff.c **** 	FIL *fp,			/* Pointer to the blank file object */
2326:../fatfs/ff.c **** 	const TCHAR *path,	/* Pointer to the file name */
2327:../fatfs/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
2328:../fatfs/ff.c **** )
2329:../fatfs/ff.c **** {
 6242              		.loc 1 2329 0
 6243              		.cfi_startproc
 6244              		@ args = 0, pretend = 0, frame = 80
 6245              		@ frame_needed = 1, uses_anonymous_args = 0
 6246 0000 80B5     		push	{r7, lr}
 6247              		.cfi_def_cfa_offset 8
 6248              		.cfi_offset 7, -8
 6249              		.cfi_offset 14, -4
 6250 0002 94B0     		sub	sp, sp, #80
 6251              		.cfi_def_cfa_offset 88
 6252 0004 00AF     		add	r7, sp, #0
 6253              		.cfi_def_cfa_register 7
 6254 0006 F860     		str	r0, [r7, #12]
 6255 0008 B960     		str	r1, [r7, #8]
 6256 000a 1346     		mov	r3, r2
 6257 000c FB71     		strb	r3, [r7, #7]
2330:../fatfs/ff.c **** 	FRESULT res;
2331:../fatfs/ff.c **** 	DIR dj;
2332:../fatfs/ff.c **** 	BYTE *dir;
2333:../fatfs/ff.c **** 	DEF_NAMEBUF;
2334:../fatfs/ff.c **** 
2335:../fatfs/ff.c **** 
2336:../fatfs/ff.c **** 	if (!fp) return FR_INVALID_OBJECT;
 6258              		.loc 1 2336 0
 6259 000e FB68     		ldr	r3, [r7, #12]
 6260 0010 002B     		cmp	r3, #0
 6261 0012 01D1     		bne	.L402
 6262              		.loc 1 2336 0 is_stmt 0 discriminator 1
 6263 0014 0923     		movs	r3, #9
 6264 0016 30E1     		b	.L416
 6265              	.L402:
2337:../fatfs/ff.c **** 	fp->fs = 0;			/* Clear file object */
 6266              		.loc 1 2337 0 is_stmt 1
 6267 0018 FB68     		ldr	r3, [r7, #12]
 6268 001a 0022     		movs	r2, #0
 6269 001c 1A60     		str	r2, [r3]
2338:../fatfs/ff.c **** 
2339:../fatfs/ff.c **** #if !_FS_READONLY
2340:../fatfs/ff.c **** 	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 6270              		.loc 1 2340 0
 6271 001e FB79     		ldrb	r3, [r7, #7]
 6272 0020 03F01F03 		and	r3, r3, #31
 6273 0024 FB71     		strb	r3, [r7, #7]
2341:../fatfs/ff.c **** 	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 6274              		.loc 1 2341 0
 6275 0026 FB79     		ldrb	r3, [r7, #7]
 6276 0028 23F00103 		bic	r3, r3, #1
 6277 002c DBB2     		uxtb	r3, r3
 6278 002e 07F10801 		add	r1, r7, #8
 6279 0032 07F11C02 		add	r2, r7, #28
 6280 0036 0846     		mov	r0, r1
 6281 0038 1146     		mov	r1, r2
 6282 003a 1A46     		mov	r2, r3
 6283 003c FFF7FEFF 		bl	chk_mounted
 6284 0040 0346     		mov	r3, r0
 6285 0042 87F84F30 		strb	r3, [r7, #79]
2342:../fatfs/ff.c **** #else
2343:../fatfs/ff.c **** 	mode &= FA_READ;
2344:../fatfs/ff.c **** 	res = chk_mounted(&path, &dj.fatfs, 0);
2345:../fatfs/ff.c **** #endif
2346:../fatfs/ff.c **** 	if (res == FR_OK) {
 6286              		.loc 1 2346 0
 6287 0046 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 6288 004a 002B     		cmp	r3, #0
 6289 004c 40F01381 		bne	.L404
2347:../fatfs/ff.c **** 		INIT_BUF(dj);
 6290              		.loc 1 2347 0
 6291 0050 07F11003 		add	r3, r7, #16
 6292 0054 7B63     		str	r3, [r7, #52]
 6293 0056 8B4B     		ldr	r3, .L417
 6294 0058 BB63     		str	r3, [r7, #56]
2348:../fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 6295              		.loc 1 2348 0
 6296 005a BB68     		ldr	r3, [r7, #8]
 6297 005c 07F11C02 		add	r2, r7, #28
 6298 0060 1046     		mov	r0, r2
 6299 0062 1946     		mov	r1, r3
 6300 0064 FFF7FEFF 		bl	follow_path
 6301 0068 0346     		mov	r3, r0
 6302 006a 87F84F30 		strb	r3, [r7, #79]
2349:../fatfs/ff.c **** 		dir = dj.dir;
 6303              		.loc 1 2349 0
 6304 006e 3B6B     		ldr	r3, [r7, #48]
 6305 0070 BB64     		str	r3, [r7, #72]
2350:../fatfs/ff.c **** #if !_FS_READONLY	/* R/W configuration */
2351:../fatfs/ff.c **** 		if (res == FR_OK) {
 6306              		.loc 1 2351 0
 6307 0072 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 6308 0076 002B     		cmp	r3, #0
 6309 0078 05D1     		bne	.L405
2352:../fatfs/ff.c **** 			if (!dir)	/* Current dir itself */
 6310              		.loc 1 2352 0
 6311 007a BB6C     		ldr	r3, [r7, #72]
 6312 007c 002B     		cmp	r3, #0
 6313 007e 02D1     		bne	.L405
2353:../fatfs/ff.c **** 				res = FR_INVALID_NAME;
 6314              		.loc 1 2353 0
 6315 0080 0623     		movs	r3, #6
 6316 0082 87F84F30 		strb	r3, [r7, #79]
 6317              	.L405:
2354:../fatfs/ff.c **** #if _FS_LOCK
2355:../fatfs/ff.c **** 			else
2356:../fatfs/ff.c **** 				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2357:../fatfs/ff.c **** #endif
2358:../fatfs/ff.c **** 		}
2359:../fatfs/ff.c **** 		/* Create or Open a file */
2360:../fatfs/ff.c **** 		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 6318              		.loc 1 2360 0
 6319 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6320 0088 03F01C03 		and	r3, r3, #28
 6321 008c 002B     		cmp	r3, #0
 6322 008e 00F09080 		beq	.L406
 6323              	.LBB4:
2361:../fatfs/ff.c **** 			DWORD dw, cl;
2362:../fatfs/ff.c **** 
2363:../fatfs/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
 6324              		.loc 1 2363 0
 6325 0092 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 6326 0096 002B     		cmp	r3, #0
 6327 0098 12D0     		beq	.L407
2364:../fatfs/ff.c **** 				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 6328              		.loc 1 2364 0
 6329 009a 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 6330 009e 042B     		cmp	r3, #4
 6331 00a0 07D1     		bne	.L408
2365:../fatfs/ff.c **** #if _FS_LOCK
2366:../fatfs/ff.c **** 					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2367:../fatfs/ff.c **** #else
2368:../fatfs/ff.c **** 					res = dir_register(&dj);
 6332              		.loc 1 2368 0
 6333 00a2 07F11C03 		add	r3, r7, #28
 6334 00a6 1846     		mov	r0, r3
 6335 00a8 FFF7FEFF 		bl	dir_register
 6336 00ac 0346     		mov	r3, r0
 6337 00ae 87F84F30 		strb	r3, [r7, #79]
 6338              	.L408:
2369:../fatfs/ff.c **** #endif
2370:../fatfs/ff.c **** 				mode |= FA_CREATE_ALWAYS;		/* File is created */
 6339              		.loc 1 2370 0
 6340 00b2 FB79     		ldrb	r3, [r7, #7]
 6341 00b4 43F00803 		orr	r3, r3, #8
 6342 00b8 FB71     		strb	r3, [r7, #7]
2371:../fatfs/ff.c **** 				dir = dj.dir;					/* New entry */
 6343              		.loc 1 2371 0
 6344 00ba 3B6B     		ldr	r3, [r7, #48]
 6345 00bc BB64     		str	r3, [r7, #72]
 6346 00be 12E0     		b	.L409
 6347              	.L407:
2372:../fatfs/ff.c **** 			}
2373:../fatfs/ff.c **** 			else {								/* Any object is already existing */
2374:../fatfs/ff.c **** 				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 6348              		.loc 1 2374 0
 6349 00c0 BB6C     		ldr	r3, [r7, #72]
 6350 00c2 0B33     		adds	r3, r3, #11
 6351 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6352 00c6 03F01103 		and	r3, r3, #17
 6353 00ca 002B     		cmp	r3, #0
 6354 00cc 03D0     		beq	.L410
2375:../fatfs/ff.c **** 					res = FR_DENIED;
 6355              		.loc 1 2375 0
 6356 00ce 0723     		movs	r3, #7
 6357 00d0 87F84F30 		strb	r3, [r7, #79]
 6358 00d4 07E0     		b	.L409
 6359              	.L410:
2376:../fatfs/ff.c **** 				} else {
2377:../fatfs/ff.c **** 					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 6360              		.loc 1 2377 0
 6361 00d6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6362 00d8 03F00403 		and	r3, r3, #4
 6363 00dc 002B     		cmp	r3, #0
 6364 00de 02D0     		beq	.L409
2378:../fatfs/ff.c **** 						res = FR_EXIST;
 6365              		.loc 1 2378 0
 6366 00e0 0823     		movs	r3, #8
 6367 00e2 87F84F30 		strb	r3, [r7, #79]
 6368              	.L409:
2379:../fatfs/ff.c **** 				}
2380:../fatfs/ff.c **** 			}
2381:../fatfs/ff.c **** 			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 6369              		.loc 1 2381 0
 6370 00e6 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 6371 00ea 002B     		cmp	r3, #0
 6372 00ec 60D1     		bne	.L411
 6373              		.loc 1 2381 0 is_stmt 0 discriminator 1
 6374 00ee FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6375 00f0 03F00803 		and	r3, r3, #8
 6376 00f4 002B     		cmp	r3, #0
 6377 00f6 5BD0     		beq	.L411
2382:../fatfs/ff.c **** 				dw = get_fattime();					/* Created time */
 6378              		.loc 1 2382 0 is_stmt 1
 6379 00f8 FFF7FEFF 		bl	get_fattime
 6380 00fc 7864     		str	r0, [r7, #68]
2383:../fatfs/ff.c **** 				ST_DWORD(dir+DIR_CrtTime, dw);
 6381              		.loc 1 2383 0
 6382 00fe BB6C     		ldr	r3, [r7, #72]
 6383 0100 0E33     		adds	r3, r3, #14
 6384 0102 7A6C     		ldr	r2, [r7, #68]
 6385 0104 D2B2     		uxtb	r2, r2
 6386 0106 1A70     		strb	r2, [r3]
 6387 0108 BB6C     		ldr	r3, [r7, #72]
 6388 010a 0F33     		adds	r3, r3, #15
 6389 010c 7A6C     		ldr	r2, [r7, #68]
 6390 010e 92B2     		uxth	r2, r2
 6391 0110 120A     		lsrs	r2, r2, #8
 6392 0112 92B2     		uxth	r2, r2
 6393 0114 D2B2     		uxtb	r2, r2
 6394 0116 1A70     		strb	r2, [r3]
 6395 0118 BB6C     		ldr	r3, [r7, #72]
 6396 011a 1033     		adds	r3, r3, #16
 6397 011c 7A6C     		ldr	r2, [r7, #68]
 6398 011e 120C     		lsrs	r2, r2, #16
 6399 0120 D2B2     		uxtb	r2, r2
 6400 0122 1A70     		strb	r2, [r3]
 6401 0124 BB6C     		ldr	r3, [r7, #72]
 6402 0126 1133     		adds	r3, r3, #17
 6403 0128 7A6C     		ldr	r2, [r7, #68]
 6404 012a 120E     		lsrs	r2, r2, #24
 6405 012c D2B2     		uxtb	r2, r2
 6406 012e 1A70     		strb	r2, [r3]
2384:../fatfs/ff.c **** 				dir[DIR_Attr] = 0;					/* Reset attribute */
 6407              		.loc 1 2384 0
 6408 0130 BB6C     		ldr	r3, [r7, #72]
 6409 0132 0B33     		adds	r3, r3, #11
 6410 0134 0022     		movs	r2, #0
 6411 0136 1A70     		strb	r2, [r3]
2385:../fatfs/ff.c **** 				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 6412              		.loc 1 2385 0
 6413 0138 BB6C     		ldr	r3, [r7, #72]
 6414 013a 1C33     		adds	r3, r3, #28
 6415 013c 0022     		movs	r2, #0
 6416 013e 1A70     		strb	r2, [r3]
 6417 0140 BB6C     		ldr	r3, [r7, #72]
 6418 0142 1D33     		adds	r3, r3, #29
 6419 0144 0022     		movs	r2, #0
 6420 0146 1A70     		strb	r2, [r3]
 6421 0148 BB6C     		ldr	r3, [r7, #72]
 6422 014a 1E33     		adds	r3, r3, #30
 6423 014c 0022     		movs	r2, #0
 6424 014e 1A70     		strb	r2, [r3]
 6425 0150 BB6C     		ldr	r3, [r7, #72]
 6426 0152 1F33     		adds	r3, r3, #31
 6427 0154 0022     		movs	r2, #0
 6428 0156 1A70     		strb	r2, [r3]
2386:../fatfs/ff.c **** 				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
 6429              		.loc 1 2386 0
 6430 0158 FB69     		ldr	r3, [r7, #28]
 6431 015a 1846     		mov	r0, r3
 6432 015c B96C     		ldr	r1, [r7, #72]
 6433 015e FFF7FEFF 		bl	ld_clust
 6434 0162 3864     		str	r0, [r7, #64]
2387:../fatfs/ff.c **** 				st_clust(dir, 0);					/* cluster = 0 */
 6435              		.loc 1 2387 0
 6436 0164 B86C     		ldr	r0, [r7, #72]
 6437 0166 0021     		movs	r1, #0
 6438 0168 FFF7FEFF 		bl	st_clust
2388:../fatfs/ff.c **** 				dj.fs->wflag = 1;
 6439              		.loc 1 2388 0
 6440 016c FB69     		ldr	r3, [r7, #28]
 6441 016e 0122     		movs	r2, #1
 6442 0170 1A71     		strb	r2, [r3, #4]
2389:../fatfs/ff.c **** 				if (cl) {							/* Remove the cluster chain if exist */
 6443              		.loc 1 2389 0
 6444 0172 3B6C     		ldr	r3, [r7, #64]
 6445 0174 002B     		cmp	r3, #0
 6446 0176 1BD0     		beq	.L411
2390:../fatfs/ff.c **** 					dw = dj.fs->winsect;
 6447              		.loc 1 2390 0
 6448 0178 FB69     		ldr	r3, [r7, #28]
 6449 017a 5B6B     		ldr	r3, [r3, #52]
 6450 017c 7B64     		str	r3, [r7, #68]
2391:../fatfs/ff.c **** 					res = remove_chain(dj.fs, cl);
 6451              		.loc 1 2391 0
 6452 017e FB69     		ldr	r3, [r7, #28]
 6453 0180 1846     		mov	r0, r3
 6454 0182 396C     		ldr	r1, [r7, #64]
 6455 0184 FFF7FEFF 		bl	remove_chain
 6456 0188 0346     		mov	r3, r0
 6457 018a 87F84F30 		strb	r3, [r7, #79]
2392:../fatfs/ff.c **** 					if (res == FR_OK) {
 6458              		.loc 1 2392 0
 6459 018e 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 6460 0192 002B     		cmp	r3, #0
 6461 0194 0CD1     		bne	.L411
2393:../fatfs/ff.c **** 						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 6462              		.loc 1 2393 0
 6463 0196 FB69     		ldr	r3, [r7, #28]
 6464 0198 3A6C     		ldr	r2, [r7, #64]
 6465 019a 013A     		subs	r2, r2, #1
 6466 019c DA60     		str	r2, [r3, #12]
2394:../fatfs/ff.c **** 						res = move_window(dj.fs, dw);
 6467              		.loc 1 2394 0
 6468 019e FB69     		ldr	r3, [r7, #28]
 6469 01a0 1846     		mov	r0, r3
 6470 01a2 796C     		ldr	r1, [r7, #68]
 6471 01a4 FFF7FEFF 		bl	move_window
 6472 01a8 0346     		mov	r3, r0
 6473 01aa 87F84F30 		strb	r3, [r7, #79]
 6474              	.LBE4:
 6475 01ae 1EE0     		b	.L412
 6476              	.L411:
 6477 01b0 1DE0     		b	.L412
 6478              	.L406:
2395:../fatfs/ff.c **** 					}
2396:../fatfs/ff.c **** 				}
2397:../fatfs/ff.c **** 			}
2398:../fatfs/ff.c **** 		}
2399:../fatfs/ff.c **** 		else {	/* Open an existing file */
2400:../fatfs/ff.c **** 			if (res == FR_OK) {						/* Follow succeeded */
 6479              		.loc 1 2400 0
 6480 01b2 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 6481 01b6 002B     		cmp	r3, #0
 6482 01b8 19D1     		bne	.L412
2401:../fatfs/ff.c **** 				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 6483              		.loc 1 2401 0
 6484 01ba BB6C     		ldr	r3, [r7, #72]
 6485 01bc 0B33     		adds	r3, r3, #11
 6486 01be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6487 01c0 03F01003 		and	r3, r3, #16
 6488 01c4 002B     		cmp	r3, #0
 6489 01c6 03D0     		beq	.L413
2402:../fatfs/ff.c **** 					res = FR_NO_FILE;
 6490              		.loc 1 2402 0
 6491 01c8 0423     		movs	r3, #4
 6492 01ca 87F84F30 		strb	r3, [r7, #79]
 6493 01ce 0EE0     		b	.L412
 6494              	.L413:
2403:../fatfs/ff.c **** 				} else {
2404:../fatfs/ff.c **** 					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 6495              		.loc 1 2404 0
 6496 01d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6497 01d2 03F00203 		and	r3, r3, #2
 6498 01d6 002B     		cmp	r3, #0
 6499 01d8 09D0     		beq	.L412
 6500              		.loc 1 2404 0 is_stmt 0 discriminator 1
 6501 01da BB6C     		ldr	r3, [r7, #72]
 6502 01dc 0B33     		adds	r3, r3, #11
 6503 01de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6504 01e0 03F00103 		and	r3, r3, #1
 6505 01e4 002B     		cmp	r3, #0
 6506 01e6 02D0     		beq	.L412
2405:../fatfs/ff.c **** 						res = FR_DENIED;
 6507              		.loc 1 2405 0 is_stmt 1
 6508 01e8 0723     		movs	r3, #7
 6509 01ea 87F84F30 		strb	r3, [r7, #79]
 6510              	.L412:
2406:../fatfs/ff.c **** 				}
2407:../fatfs/ff.c **** 			}
2408:../fatfs/ff.c **** 		}
2409:../fatfs/ff.c **** 		if (res == FR_OK) {
 6511              		.loc 1 2409 0
 6512 01ee 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 6513 01f2 002B     		cmp	r3, #0
 6514 01f4 0FD1     		bne	.L414
2410:../fatfs/ff.c **** 			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 6515              		.loc 1 2410 0
 6516 01f6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6517 01f8 03F00803 		and	r3, r3, #8
 6518 01fc 002B     		cmp	r3, #0
 6519 01fe 03D0     		beq	.L415
2411:../fatfs/ff.c **** 				mode |= FA__WRITTEN;
 6520              		.loc 1 2411 0
 6521 0200 FB79     		ldrb	r3, [r7, #7]
 6522 0202 43F02003 		orr	r3, r3, #32
 6523 0206 FB71     		strb	r3, [r7, #7]
 6524              	.L415:
2412:../fatfs/ff.c **** 			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 6525              		.loc 1 2412 0
 6526 0208 FB69     		ldr	r3, [r7, #28]
 6527 020a 5A6B     		ldr	r2, [r3, #52]
 6528 020c FB68     		ldr	r3, [r7, #12]
 6529 020e DA61     		str	r2, [r3, #28]
2413:../fatfs/ff.c **** 			fp->dir_ptr = dir;
 6530              		.loc 1 2413 0
 6531 0210 FB68     		ldr	r3, [r7, #12]
 6532 0212 BA6C     		ldr	r2, [r7, #72]
 6533 0214 1A62     		str	r2, [r3, #32]
 6534              	.L414:
2414:../fatfs/ff.c **** #if _FS_LOCK
2415:../fatfs/ff.c **** 			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2416:../fatfs/ff.c **** 			if (!fp->lockid) res = FR_INT_ERR;
2417:../fatfs/ff.c **** #endif
2418:../fatfs/ff.c **** 		}
2419:../fatfs/ff.c **** 
2420:../fatfs/ff.c **** #else				/* R/O configuration */
2421:../fatfs/ff.c **** 		if (res == FR_OK) {					/* Follow succeeded */
2422:../fatfs/ff.c **** 			dir = dj.dir;
2423:../fatfs/ff.c **** 			if (!dir) {						/* Current dir itself */
2424:../fatfs/ff.c **** 				res = FR_INVALID_NAME;
2425:../fatfs/ff.c **** 			} else {
2426:../fatfs/ff.c **** 				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
2427:../fatfs/ff.c **** 					res = FR_NO_FILE;
2428:../fatfs/ff.c **** 			}
2429:../fatfs/ff.c **** 		}
2430:../fatfs/ff.c **** #endif
2431:../fatfs/ff.c **** 		FREE_BUF();
2432:../fatfs/ff.c **** 
2433:../fatfs/ff.c **** 		if (res == FR_OK) {
 6535              		.loc 1 2433 0
 6536 0216 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 6537 021a 002B     		cmp	r3, #0
 6538 021c 2BD1     		bne	.L404
2434:../fatfs/ff.c **** 			fp->flag = mode;					/* File access mode */
 6539              		.loc 1 2434 0
 6540 021e FB68     		ldr	r3, [r7, #12]
 6541 0220 FA79     		ldrb	r2, [r7, #7]
 6542 0222 9A71     		strb	r2, [r3, #6]
2435:../fatfs/ff.c **** 			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 6543              		.loc 1 2435 0
 6544 0224 FB69     		ldr	r3, [r7, #28]
 6545 0226 1846     		mov	r0, r3
 6546 0228 B96C     		ldr	r1, [r7, #72]
 6547 022a FFF7FEFF 		bl	ld_clust
 6548 022e 0246     		mov	r2, r0
 6549 0230 FB68     		ldr	r3, [r7, #12]
 6550 0232 1A61     		str	r2, [r3, #16]
2436:../fatfs/ff.c **** 			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 6551              		.loc 1 2436 0
 6552 0234 BB6C     		ldr	r3, [r7, #72]
 6553 0236 1F33     		adds	r3, r3, #31
 6554 0238 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6555 023a 1A06     		lsls	r2, r3, #24
 6556 023c BB6C     		ldr	r3, [r7, #72]
 6557 023e 1E33     		adds	r3, r3, #30
 6558 0240 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6559 0242 1B04     		lsls	r3, r3, #16
 6560 0244 1343     		orrs	r3, r3, r2
 6561 0246 BA6C     		ldr	r2, [r7, #72]
 6562 0248 1D32     		adds	r2, r2, #29
 6563 024a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 6564 024c 1202     		lsls	r2, r2, #8
 6565 024e 1343     		orrs	r3, r3, r2
 6566 0250 BA6C     		ldr	r2, [r7, #72]
 6567 0252 1C32     		adds	r2, r2, #28
 6568 0254 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 6569 0256 1A43     		orrs	r2, r2, r3
 6570 0258 FB68     		ldr	r3, [r7, #12]
 6571 025a DA60     		str	r2, [r3, #12]
2437:../fatfs/ff.c **** 			fp->fptr = 0;						/* File pointer */
 6572              		.loc 1 2437 0
 6573 025c FB68     		ldr	r3, [r7, #12]
 6574 025e 0022     		movs	r2, #0
 6575 0260 9A60     		str	r2, [r3, #8]
2438:../fatfs/ff.c **** 			fp->dsect = 0;
 6576              		.loc 1 2438 0
 6577 0262 FB68     		ldr	r3, [r7, #12]
 6578 0264 0022     		movs	r2, #0
 6579 0266 9A61     		str	r2, [r3, #24]
2439:../fatfs/ff.c **** #if _USE_FASTSEEK
2440:../fatfs/ff.c **** 			fp->cltbl = 0;						/* Normal seek mode */
2441:../fatfs/ff.c **** #endif
2442:../fatfs/ff.c **** 			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 6580              		.loc 1 2442 0
 6581 0268 FA69     		ldr	r2, [r7, #28]
 6582 026a FB68     		ldr	r3, [r7, #12]
 6583 026c 1A60     		str	r2, [r3]
 6584 026e FB69     		ldr	r3, [r7, #28]
 6585 0270 DA88     		ldrh	r2, [r3, #6]
 6586 0272 FB68     		ldr	r3, [r7, #12]
 6587 0274 9A80     		strh	r2, [r3, #4]	@ movhi
 6588              	.L404:
2443:../fatfs/ff.c **** 		}
2444:../fatfs/ff.c **** 	}
2445:../fatfs/ff.c **** 
2446:../fatfs/ff.c **** 	LEAVE_FF(dj.fatfs, res);
 6589              		.loc 1 2446 0
 6590 0276 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 6591              	.L416:
2447:../fatfs/ff.c **** }
 6592              		.loc 1 2447 0 discriminator 1
 6593 027a 1846     		mov	r0, r3
 6594 027c 5037     		adds	r7, r7, #80
 6595              		.cfi_def_cfa_offset 8
 6596 027e BD46     		mov	sp, r7
 6597              		.cfi_def_cfa_register 13
 6598              		@ sp needed
 6599 0280 80BD     		pop	{r7, pc}
 6600              	.L418:
 6601 0282 00BF     		.align	2
 6602              	.L417:
 6603 0284 00000000 		.word	LfnBuf
 6604              		.cfi_endproc
 6605              	.LFE34:
 6607              		.section	.text.f_read,"ax",%progbits
 6608              		.align	2
 6609              		.global	f_read
 6610              		.thumb
 6611              		.thumb_func
 6613              	f_read:
 6614              	.LFB35:
2448:../fatfs/ff.c **** 
2449:../fatfs/ff.c **** 
2450:../fatfs/ff.c **** 
2451:../fatfs/ff.c **** 
2452:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2453:../fatfs/ff.c **** /* Read File                                                             */
2454:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2455:../fatfs/ff.c **** 
2456:../fatfs/ff.c **** FRESULT f_read (
2457:../fatfs/ff.c **** 	FIL *fp, 		/* Pointer to the file object */
2458:../fatfs/ff.c **** 	void *buff,		/* Pointer to data buffer */
2459:../fatfs/ff.c **** 	UINT btr,		/* Number of bytes to read */
2460:../fatfs/ff.c **** 	UINT *br		/* Pointer to number of bytes read */
2461:../fatfs/ff.c **** )
2462:../fatfs/ff.c **** {
 6615              		.loc 1 2462 0
 6616              		.cfi_startproc
 6617              		@ args = 0, pretend = 0, frame = 48
 6618              		@ frame_needed = 1, uses_anonymous_args = 0
 6619 0000 80B5     		push	{r7, lr}
 6620              		.cfi_def_cfa_offset 8
 6621              		.cfi_offset 7, -8
 6622              		.cfi_offset 14, -4
 6623 0002 8CB0     		sub	sp, sp, #48
 6624              		.cfi_def_cfa_offset 56
 6625 0004 00AF     		add	r7, sp, #0
 6626              		.cfi_def_cfa_register 7
 6627 0006 F860     		str	r0, [r7, #12]
 6628 0008 B960     		str	r1, [r7, #8]
 6629 000a 7A60     		str	r2, [r7, #4]
 6630 000c 3B60     		str	r3, [r7]
2463:../fatfs/ff.c **** 	FRESULT res;
2464:../fatfs/ff.c **** 	DWORD clst, sect, remain;
2465:../fatfs/ff.c **** 	UINT rcnt, cc;
2466:../fatfs/ff.c **** 	BYTE csect, *rbuff = (BYTE*)buff;
 6631              		.loc 1 2466 0
 6632 000e BB68     		ldr	r3, [r7, #8]
 6633 0010 3B62     		str	r3, [r7, #32]
2467:../fatfs/ff.c **** 
2468:../fatfs/ff.c **** 
2469:../fatfs/ff.c **** 	*br = 0;	/* Clear read byte counter */
 6634              		.loc 1 2469 0
 6635 0012 3B68     		ldr	r3, [r7]
 6636 0014 0022     		movs	r2, #0
 6637 0016 1A60     		str	r2, [r3]
2470:../fatfs/ff.c **** 
2471:../fatfs/ff.c **** 	res = validate(fp);							/* Check validity */
 6638              		.loc 1 2471 0
 6639 0018 F868     		ldr	r0, [r7, #12]
 6640 001a FFF7FEFF 		bl	validate
 6641 001e 0346     		mov	r3, r0
 6642 0020 FB77     		strb	r3, [r7, #31]
2472:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fatfs, res);
 6643              		.loc 1 2472 0
 6644 0022 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6645 0024 002B     		cmp	r3, #0
 6646 0026 01D0     		beq	.L420
 6647              		.loc 1 2472 0 is_stmt 0 discriminator 1
 6648 0028 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6649 002a 3BE1     		b	.L421
 6650              	.L420:
2473:../fatfs/ff.c **** 	if (fp->flag & FA__ERROR)					/* Aborted file? */
 6651              		.loc 1 2473 0 is_stmt 1
 6652 002c FB68     		ldr	r3, [r7, #12]
 6653 002e 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 6654 0030 DBB2     		uxtb	r3, r3
 6655 0032 5BB2     		sxtb	r3, r3
 6656 0034 002B     		cmp	r3, #0
 6657 0036 01DA     		bge	.L422
2474:../fatfs/ff.c **** 		LEAVE_FF(fp->fatfs, FR_INT_ERR);
 6658              		.loc 1 2474 0
 6659 0038 0223     		movs	r3, #2
 6660 003a 33E1     		b	.L421
 6661              	.L422:
2475:../fatfs/ff.c **** 	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 6662              		.loc 1 2475 0
 6663 003c FB68     		ldr	r3, [r7, #12]
 6664 003e 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 6665 0040 03F00103 		and	r3, r3, #1
 6666 0044 002B     		cmp	r3, #0
 6667 0046 01D1     		bne	.L423
2476:../fatfs/ff.c **** 		LEAVE_FF(fp->fatfs, FR_DENIED);
 6668              		.loc 1 2476 0
 6669 0048 0723     		movs	r3, #7
 6670 004a 2BE1     		b	.L421
 6671              	.L423:
2477:../fatfs/ff.c **** 	remain = fp->fsize - fp->fptr;
 6672              		.loc 1 2477 0
 6673 004c FB68     		ldr	r3, [r7, #12]
 6674 004e DA68     		ldr	r2, [r3, #12]
 6675 0050 FB68     		ldr	r3, [r7, #12]
 6676 0052 9B68     		ldr	r3, [r3, #8]
 6677 0054 D31A     		subs	r3, r2, r3
 6678 0056 BB61     		str	r3, [r7, #24]
2478:../fatfs/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 6679              		.loc 1 2478 0
 6680 0058 7A68     		ldr	r2, [r7, #4]
 6681 005a BB69     		ldr	r3, [r7, #24]
 6682 005c 9A42     		cmp	r2, r3
 6683 005e 01D9     		bls	.L424
 6684              		.loc 1 2478 0 is_stmt 0 discriminator 1
 6685 0060 BB69     		ldr	r3, [r7, #24]
 6686 0062 7B60     		str	r3, [r7, #4]
 6687              	.L424:
2479:../fatfs/ff.c **** 
2480:../fatfs/ff.c **** 	for ( ;  btr;								/* Repeat until all data read */
 6688              		.loc 1 2480 0 is_stmt 1
 6689 0064 19E1     		b	.L425
 6690              	.L442:
2481:../fatfs/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2482:../fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fatfs)) == 0) {		/* On the sector boundary? */
 6691              		.loc 1 2482 0
 6692 0066 FB68     		ldr	r3, [r7, #12]
 6693 0068 9B68     		ldr	r3, [r3, #8]
 6694 006a C3F30803 		ubfx	r3, r3, #0, #9
 6695 006e 002B     		cmp	r3, #0
 6696 0070 40F0E580 		bne	.L426
2483:../fatfs/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fatfs) & (fp->fs->csize - 1));	/* Sector offset in the cluster 
 6697              		.loc 1 2483 0
 6698 0074 FB68     		ldr	r3, [r7, #12]
 6699 0076 9B68     		ldr	r3, [r3, #8]
 6700 0078 5B0A     		lsrs	r3, r3, #9
 6701 007a DAB2     		uxtb	r2, r3
 6702 007c FB68     		ldr	r3, [r7, #12]
 6703 007e 1B68     		ldr	r3, [r3]
 6704 0080 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 6705 0082 013B     		subs	r3, r3, #1
 6706 0084 DBB2     		uxtb	r3, r3
 6707 0086 1340     		ands	r3, r3, r2
 6708 0088 FB75     		strb	r3, [r7, #23]
2484:../fatfs/ff.c **** 			if (!csect) {						/* On the cluster boundary? */
 6709              		.loc 1 2484 0
 6710 008a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6711 008c 002B     		cmp	r3, #0
 6712 008e 2CD1     		bne	.L427
2485:../fatfs/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 6713              		.loc 1 2485 0
 6714 0090 FB68     		ldr	r3, [r7, #12]
 6715 0092 9B68     		ldr	r3, [r3, #8]
 6716 0094 002B     		cmp	r3, #0
 6717 0096 03D1     		bne	.L428
2486:../fatfs/ff.c **** 					clst = fp->sclust;			/* Follow from the origin */
 6718              		.loc 1 2486 0
 6719 0098 FB68     		ldr	r3, [r7, #12]
 6720 009a 1B69     		ldr	r3, [r3, #16]
 6721 009c FB62     		str	r3, [r7, #44]
 6722 009e 08E0     		b	.L429
 6723              	.L428:
2487:../fatfs/ff.c **** 				} else {						/* Middle or end of the file */
2488:../fatfs/ff.c **** #if _USE_FASTSEEK
2489:../fatfs/ff.c **** 					if (fp->cltbl)
2490:../fatfs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2491:../fatfs/ff.c **** 					else
2492:../fatfs/ff.c **** #endif
2493:../fatfs/ff.c **** 						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 6724              		.loc 1 2493 0
 6725 00a0 FB68     		ldr	r3, [r7, #12]
 6726 00a2 1A68     		ldr	r2, [r3]
 6727 00a4 FB68     		ldr	r3, [r7, #12]
 6728 00a6 5B69     		ldr	r3, [r3, #20]
 6729 00a8 1046     		mov	r0, r2
 6730 00aa 1946     		mov	r1, r3
 6731 00ac FFF7FEFF 		bl	get_fat
 6732 00b0 F862     		str	r0, [r7, #44]
 6733              	.L429:
2494:../fatfs/ff.c **** 				}
2495:../fatfs/ff.c **** 				if (clst < 2) ABORT(fp->fatfs, FR_INT_ERR);
 6734              		.loc 1 2495 0
 6735 00b2 FB6A     		ldr	r3, [r7, #44]
 6736 00b4 012B     		cmp	r3, #1
 6737 00b6 08D8     		bhi	.L430
 6738              		.loc 1 2495 0 is_stmt 0 discriminator 1
 6739 00b8 FB68     		ldr	r3, [r7, #12]
 6740 00ba 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 6741 00bc 63F07F03 		orn	r3, r3, #127
 6742 00c0 DAB2     		uxtb	r2, r3
 6743 00c2 FB68     		ldr	r3, [r7, #12]
 6744 00c4 9A71     		strb	r2, [r3, #6]
 6745 00c6 0223     		movs	r3, #2
 6746 00c8 ECE0     		b	.L421
 6747              	.L430:
2496:../fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fatfs, FR_DISK_ERR);
 6748              		.loc 1 2496 0 is_stmt 1
 6749 00ca FB6A     		ldr	r3, [r7, #44]
 6750 00cc B3F1FF3F 		cmp	r3, #-1
 6751 00d0 08D1     		bne	.L431
 6752              		.loc 1 2496 0 is_stmt 0 discriminator 1
 6753 00d2 FB68     		ldr	r3, [r7, #12]
 6754 00d4 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 6755 00d6 63F07F03 		orn	r3, r3, #127
 6756 00da DAB2     		uxtb	r2, r3
 6757 00dc FB68     		ldr	r3, [r7, #12]
 6758 00de 9A71     		strb	r2, [r3, #6]
 6759 00e0 0123     		movs	r3, #1
 6760 00e2 DFE0     		b	.L421
 6761              	.L431:
2497:../fatfs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 6762              		.loc 1 2497 0 is_stmt 1
 6763 00e4 FB68     		ldr	r3, [r7, #12]
 6764 00e6 FA6A     		ldr	r2, [r7, #44]
 6765 00e8 5A61     		str	r2, [r3, #20]
 6766              	.L427:
2498:../fatfs/ff.c **** 			}
2499:../fatfs/ff.c **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 6767              		.loc 1 2499 0
 6768 00ea FB68     		ldr	r3, [r7, #12]
 6769 00ec 1A68     		ldr	r2, [r3]
 6770 00ee FB68     		ldr	r3, [r7, #12]
 6771 00f0 5B69     		ldr	r3, [r3, #20]
 6772 00f2 1046     		mov	r0, r2
 6773 00f4 1946     		mov	r1, r3
 6774 00f6 FFF7FEFF 		bl	clust2sect
 6775 00fa 3861     		str	r0, [r7, #16]
2500:../fatfs/ff.c **** 			if (!sect) ABORT(fp->fatfs, FR_INT_ERR);
 6776              		.loc 1 2500 0
 6777 00fc 3B69     		ldr	r3, [r7, #16]
 6778 00fe 002B     		cmp	r3, #0
 6779 0100 08D1     		bne	.L432
 6780              		.loc 1 2500 0 is_stmt 0 discriminator 1
 6781 0102 FB68     		ldr	r3, [r7, #12]
 6782 0104 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 6783 0106 63F07F03 		orn	r3, r3, #127
 6784 010a DAB2     		uxtb	r2, r3
 6785 010c FB68     		ldr	r3, [r7, #12]
 6786 010e 9A71     		strb	r2, [r3, #6]
 6787 0110 0223     		movs	r3, #2
 6788 0112 C7E0     		b	.L421
 6789              	.L432:
2501:../fatfs/ff.c **** 			sect += csect;
 6790              		.loc 1 2501 0 is_stmt 1
 6791 0114 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6792 0116 3A69     		ldr	r2, [r7, #16]
 6793 0118 1344     		add	r3, r3, r2
 6794 011a 3B61     		str	r3, [r7, #16]
2502:../fatfs/ff.c **** 			cc = btr / SS(fp->fatfs);				/* When remaining bytes >= sector size, */
 6795              		.loc 1 2502 0
 6796 011c 7B68     		ldr	r3, [r7, #4]
 6797 011e 5B0A     		lsrs	r3, r3, #9
 6798 0120 7B62     		str	r3, [r7, #36]
2503:../fatfs/ff.c **** 			if (cc) {							/* Read maximum contiguous sectors directly */
 6799              		.loc 1 2503 0
 6800 0122 7B6A     		ldr	r3, [r7, #36]
 6801 0124 002B     		cmp	r3, #0
 6802 0126 44D0     		beq	.L433
2504:../fatfs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 6803              		.loc 1 2504 0
 6804 0128 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 6805 012a 7B6A     		ldr	r3, [r7, #36]
 6806 012c 1344     		add	r3, r3, r2
 6807 012e FA68     		ldr	r2, [r7, #12]
 6808 0130 1268     		ldr	r2, [r2]
 6809 0132 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 6810 0134 9342     		cmp	r3, r2
 6811 0136 06D9     		bls	.L434
2505:../fatfs/ff.c **** 					cc = fp->fs->csize - csect;
 6812              		.loc 1 2505 0
 6813 0138 FB68     		ldr	r3, [r7, #12]
 6814 013a 1B68     		ldr	r3, [r3]
 6815 013c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 6816 013e 1A46     		mov	r2, r3
 6817 0140 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6818 0142 D31A     		subs	r3, r2, r3
 6819 0144 7B62     		str	r3, [r7, #36]
 6820              	.L434:
2506:../fatfs/ff.c **** 				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 6821              		.loc 1 2506 0
 6822 0146 FB68     		ldr	r3, [r7, #12]
 6823 0148 1B68     		ldr	r3, [r3]
 6824 014a 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 6825 014c 7B6A     		ldr	r3, [r7, #36]
 6826 014e DBB2     		uxtb	r3, r3
 6827 0150 1046     		mov	r0, r2
 6828 0152 396A     		ldr	r1, [r7, #32]
 6829 0154 3A69     		ldr	r2, [r7, #16]
 6830 0156 FFF7FEFF 		bl	disk_read
 6831 015a 0346     		mov	r3, r0
 6832 015c 002B     		cmp	r3, #0
 6833 015e 08D0     		beq	.L435
2507:../fatfs/ff.c **** 					ABORT(fp->fatfs, FR_DISK_ERR);
 6834              		.loc 1 2507 0
 6835 0160 FB68     		ldr	r3, [r7, #12]
 6836 0162 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 6837 0164 63F07F03 		orn	r3, r3, #127
 6838 0168 DAB2     		uxtb	r2, r3
 6839 016a FB68     		ldr	r3, [r7, #12]
 6840 016c 9A71     		strb	r2, [r3, #6]
 6841 016e 0123     		movs	r3, #1
 6842 0170 98E0     		b	.L421
 6843              	.L435:
2508:../fatfs/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
2509:../fatfs/ff.c **** #if _FS_TINY
2510:../fatfs/ff.c **** 				if (fp->fatfs->wflag && fp->fatfs->winsect - sect < cc)
2511:../fatfs/ff.c **** 					mem_cpy(rbuff + ((fp->fatfs->winsect - sect) * SS(fp->fatfs)), fp->fatfs->win, SS(fp->fatfs));
2512:../fatfs/ff.c **** #else
2513:../fatfs/ff.c **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 6844              		.loc 1 2513 0
 6845 0172 FB68     		ldr	r3, [r7, #12]
 6846 0174 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 6847 0176 03F04003 		and	r3, r3, #64
 6848 017a 002B     		cmp	r3, #0
 6849 017c 15D0     		beq	.L436
 6850              		.loc 1 2513 0 is_stmt 0 discriminator 1
 6851 017e FB68     		ldr	r3, [r7, #12]
 6852 0180 9A69     		ldr	r2, [r3, #24]
 6853 0182 3B69     		ldr	r3, [r7, #16]
 6854 0184 D21A     		subs	r2, r2, r3
 6855 0186 7B6A     		ldr	r3, [r7, #36]
 6856 0188 9A42     		cmp	r2, r3
 6857 018a 0ED2     		bcs	.L436
2514:../fatfs/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fatfs)), fp->buf, SS(fp->fatfs));
 6858              		.loc 1 2514 0 is_stmt 1
 6859 018c FB68     		ldr	r3, [r7, #12]
 6860 018e 9A69     		ldr	r2, [r3, #24]
 6861 0190 3B69     		ldr	r3, [r7, #16]
 6862 0192 D31A     		subs	r3, r2, r3
 6863 0194 5B02     		lsls	r3, r3, #9
 6864 0196 3A6A     		ldr	r2, [r7, #32]
 6865 0198 1A44     		add	r2, r2, r3
 6866 019a FB68     		ldr	r3, [r7, #12]
 6867 019c 2433     		adds	r3, r3, #36
 6868 019e 1046     		mov	r0, r2
 6869 01a0 1946     		mov	r1, r3
 6870 01a2 4FF40072 		mov	r2, #512
 6871 01a6 FFF7FEFF 		bl	mem_cpy
 6872              	.L436:
2515:../fatfs/ff.c **** #endif
2516:../fatfs/ff.c **** #endif
2517:../fatfs/ff.c **** 				rcnt = SS(fp->fatfs) * cc;			/* Number of bytes transferred */
 6873              		.loc 1 2517 0
 6874 01aa 7B6A     		ldr	r3, [r7, #36]
 6875 01ac 5B02     		lsls	r3, r3, #9
 6876 01ae BB62     		str	r3, [r7, #40]
2518:../fatfs/ff.c **** 				continue;
 6877              		.loc 1 2518 0
 6878 01b0 5FE0     		b	.L437
 6879              	.L433:
2519:../fatfs/ff.c **** 			}
2520:../fatfs/ff.c **** #if !_FS_TINY
2521:../fatfs/ff.c **** 			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 6880              		.loc 1 2521 0
 6881 01b2 FB68     		ldr	r3, [r7, #12]
 6882 01b4 9A69     		ldr	r2, [r3, #24]
 6883 01b6 3B69     		ldr	r3, [r7, #16]
 6884 01b8 9A42     		cmp	r2, r3
 6885 01ba 3DD0     		beq	.L438
2522:../fatfs/ff.c **** #if !_FS_READONLY
2523:../fatfs/ff.c **** 				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 6886              		.loc 1 2523 0
 6887 01bc FB68     		ldr	r3, [r7, #12]
 6888 01be 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 6889 01c0 03F04003 		and	r3, r3, #64
 6890 01c4 002B     		cmp	r3, #0
 6891 01c6 20D0     		beq	.L439
2524:../fatfs/ff.c **** 					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 6892              		.loc 1 2524 0
 6893 01c8 FB68     		ldr	r3, [r7, #12]
 6894 01ca 1B68     		ldr	r3, [r3]
 6895 01cc 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 6896 01ce FB68     		ldr	r3, [r7, #12]
 6897 01d0 03F12402 		add	r2, r3, #36
 6898 01d4 FB68     		ldr	r3, [r7, #12]
 6899 01d6 9B69     		ldr	r3, [r3, #24]
 6900 01d8 0846     		mov	r0, r1
 6901 01da 1146     		mov	r1, r2
 6902 01dc 1A46     		mov	r2, r3
 6903 01de 0123     		movs	r3, #1
 6904 01e0 FFF7FEFF 		bl	disk_write
 6905 01e4 0346     		mov	r3, r0
 6906 01e6 002B     		cmp	r3, #0
 6907 01e8 08D0     		beq	.L440
2525:../fatfs/ff.c **** 						ABORT(fp->fatfs, FR_DISK_ERR);
 6908              		.loc 1 2525 0
 6909 01ea FB68     		ldr	r3, [r7, #12]
 6910 01ec 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 6911 01ee 63F07F03 		orn	r3, r3, #127
 6912 01f2 DAB2     		uxtb	r2, r3
 6913 01f4 FB68     		ldr	r3, [r7, #12]
 6914 01f6 9A71     		strb	r2, [r3, #6]
 6915 01f8 0123     		movs	r3, #1
 6916 01fa 53E0     		b	.L421
 6917              	.L440:
2526:../fatfs/ff.c **** 					fp->flag &= ~FA__DIRTY;
 6918              		.loc 1 2526 0
 6919 01fc FB68     		ldr	r3, [r7, #12]
 6920 01fe 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 6921 0200 23F04003 		bic	r3, r3, #64
 6922 0204 DAB2     		uxtb	r2, r3
 6923 0206 FB68     		ldr	r3, [r7, #12]
 6924 0208 9A71     		strb	r2, [r3, #6]
 6925              	.L439:
2527:../fatfs/ff.c **** 				}
2528:../fatfs/ff.c **** #endif
2529:../fatfs/ff.c **** 				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
 6926              		.loc 1 2529 0
 6927 020a FB68     		ldr	r3, [r7, #12]
 6928 020c 1B68     		ldr	r3, [r3]
 6929 020e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 6930 0210 FB68     		ldr	r3, [r7, #12]
 6931 0212 2433     		adds	r3, r3, #36
 6932 0214 1046     		mov	r0, r2
 6933 0216 1946     		mov	r1, r3
 6934 0218 3A69     		ldr	r2, [r7, #16]
 6935 021a 0123     		movs	r3, #1
 6936 021c FFF7FEFF 		bl	disk_read
 6937 0220 0346     		mov	r3, r0
 6938 0222 002B     		cmp	r3, #0
 6939 0224 08D0     		beq	.L438
2530:../fatfs/ff.c **** 					ABORT(fp->fatfs, FR_DISK_ERR);
 6940              		.loc 1 2530 0
 6941 0226 FB68     		ldr	r3, [r7, #12]
 6942 0228 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 6943 022a 63F07F03 		orn	r3, r3, #127
 6944 022e DAB2     		uxtb	r2, r3
 6945 0230 FB68     		ldr	r3, [r7, #12]
 6946 0232 9A71     		strb	r2, [r3, #6]
 6947 0234 0123     		movs	r3, #1
 6948 0236 35E0     		b	.L421
 6949              	.L438:
2531:../fatfs/ff.c **** 			}
2532:../fatfs/ff.c **** #endif
2533:../fatfs/ff.c **** 			fp->dsect = sect;
 6950              		.loc 1 2533 0
 6951 0238 FB68     		ldr	r3, [r7, #12]
 6952 023a 3A69     		ldr	r2, [r7, #16]
 6953 023c 9A61     		str	r2, [r3, #24]
 6954              	.L426:
2534:../fatfs/ff.c **** 		}
2535:../fatfs/ff.c **** 		rcnt = SS(fp->fatfs) - ((UINT)fp->fptr % SS(fp->fatfs));	/* Get partial sector data from sector b
 6955              		.loc 1 2535 0
 6956 023e FB68     		ldr	r3, [r7, #12]
 6957 0240 9B68     		ldr	r3, [r3, #8]
 6958 0242 C3F30803 		ubfx	r3, r3, #0, #9
 6959 0246 C3F50073 		rsb	r3, r3, #512
 6960 024a BB62     		str	r3, [r7, #40]
2536:../fatfs/ff.c **** 		if (rcnt > btr) rcnt = btr;
 6961              		.loc 1 2536 0
 6962 024c BA6A     		ldr	r2, [r7, #40]
 6963 024e 7B68     		ldr	r3, [r7, #4]
 6964 0250 9A42     		cmp	r2, r3
 6965 0252 01D9     		bls	.L441
 6966              		.loc 1 2536 0 is_stmt 0 discriminator 1
 6967 0254 7B68     		ldr	r3, [r7, #4]
 6968 0256 BB62     		str	r3, [r7, #40]
 6969              	.L441:
2537:../fatfs/ff.c **** #if _FS_TINY
2538:../fatfs/ff.c **** 		if (move_window(fp->fatfs, fp->dsect))		/* Move sector window */
2539:../fatfs/ff.c **** 			ABORT(fp->fatfs, FR_DISK_ERR);
2540:../fatfs/ff.c **** 		mem_cpy(rbuff, &fp->fatfs->win[fp->fptr % SS(fp->fatfs)], rcnt);	/* Pick partial sector */
2541:../fatfs/ff.c **** #else
2542:../fatfs/ff.c **** 		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fatfs)], rcnt);	/* Pick partial sector */
 6970              		.loc 1 2542 0 is_stmt 1
 6971 0258 FB68     		ldr	r3, [r7, #12]
 6972 025a 9B68     		ldr	r3, [r3, #8]
 6973 025c C3F30803 		ubfx	r3, r3, #0, #9
 6974 0260 2033     		adds	r3, r3, #32
 6975 0262 FA68     		ldr	r2, [r7, #12]
 6976 0264 1344     		add	r3, r3, r2
 6977 0266 0433     		adds	r3, r3, #4
 6978 0268 386A     		ldr	r0, [r7, #32]
 6979 026a 1946     		mov	r1, r3
 6980 026c BA6A     		ldr	r2, [r7, #40]
 6981 026e FFF7FEFF 		bl	mem_cpy
 6982              	.L437:
2481:../fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fatfs)) == 0) {		/* On the sector boundary? */
 6983              		.loc 1 2481 0
 6984 0272 3A6A     		ldr	r2, [r7, #32]
 6985 0274 BB6A     		ldr	r3, [r7, #40]
 6986 0276 1344     		add	r3, r3, r2
 6987 0278 3B62     		str	r3, [r7, #32]
 6988 027a FB68     		ldr	r3, [r7, #12]
 6989 027c 9A68     		ldr	r2, [r3, #8]
 6990 027e BB6A     		ldr	r3, [r7, #40]
 6991 0280 1A44     		add	r2, r2, r3
 6992 0282 FB68     		ldr	r3, [r7, #12]
 6993 0284 9A60     		str	r2, [r3, #8]
 6994 0286 3B68     		ldr	r3, [r7]
 6995 0288 1A68     		ldr	r2, [r3]
 6996 028a BB6A     		ldr	r3, [r7, #40]
 6997 028c 1A44     		add	r2, r2, r3
 6998 028e 3B68     		ldr	r3, [r7]
 6999 0290 1A60     		str	r2, [r3]
 7000 0292 7A68     		ldr	r2, [r7, #4]
 7001 0294 BB6A     		ldr	r3, [r7, #40]
 7002 0296 D31A     		subs	r3, r2, r3
 7003 0298 7B60     		str	r3, [r7, #4]
 7004              	.L425:
2480:../fatfs/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 7005              		.loc 1 2480 0
 7006 029a 7B68     		ldr	r3, [r7, #4]
 7007 029c 002B     		cmp	r3, #0
 7008 029e 7FF4E2AE 		bne	.L442
2543:../fatfs/ff.c **** #endif
2544:../fatfs/ff.c **** 	}
2545:../fatfs/ff.c **** 
2546:../fatfs/ff.c **** 	LEAVE_FF(fp->fatfs, FR_OK);
 7009              		.loc 1 2546 0
 7010 02a2 0023     		movs	r3, #0
 7011              	.L421:
2547:../fatfs/ff.c **** }
 7012              		.loc 1 2547 0
 7013 02a4 1846     		mov	r0, r3
 7014 02a6 3037     		adds	r7, r7, #48
 7015              		.cfi_def_cfa_offset 8
 7016 02a8 BD46     		mov	sp, r7
 7017              		.cfi_def_cfa_register 13
 7018              		@ sp needed
 7019 02aa 80BD     		pop	{r7, pc}
 7020              		.cfi_endproc
 7021              	.LFE35:
 7023              		.section	.text.f_write,"ax",%progbits
 7024              		.align	2
 7025              		.global	f_write
 7026              		.thumb
 7027              		.thumb_func
 7029              	f_write:
 7030              	.LFB36:
2548:../fatfs/ff.c **** 
2549:../fatfs/ff.c **** 
2550:../fatfs/ff.c **** 
2551:../fatfs/ff.c **** 
2552:../fatfs/ff.c **** #if !_FS_READONLY
2553:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2554:../fatfs/ff.c **** /* Write File                                                            */
2555:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2556:../fatfs/ff.c **** 
2557:../fatfs/ff.c **** FRESULT f_write (
2558:../fatfs/ff.c **** 	FIL *fp,			/* Pointer to the file object */
2559:../fatfs/ff.c **** 	const void *buff,	/* Pointer to the data to be written */
2560:../fatfs/ff.c **** 	UINT btw,			/* Number of bytes to write */
2561:../fatfs/ff.c **** 	UINT *bw			/* Pointer to number of bytes written */
2562:../fatfs/ff.c **** )
2563:../fatfs/ff.c **** {
 7031              		.loc 1 2563 0
 7032              		.cfi_startproc
 7033              		@ args = 0, pretend = 0, frame = 40
 7034              		@ frame_needed = 1, uses_anonymous_args = 0
 7035 0000 80B5     		push	{r7, lr}
 7036              		.cfi_def_cfa_offset 8
 7037              		.cfi_offset 7, -8
 7038              		.cfi_offset 14, -4
 7039 0002 8AB0     		sub	sp, sp, #40
 7040              		.cfi_def_cfa_offset 48
 7041 0004 00AF     		add	r7, sp, #0
 7042              		.cfi_def_cfa_register 7
 7043 0006 F860     		str	r0, [r7, #12]
 7044 0008 B960     		str	r1, [r7, #8]
 7045 000a 7A60     		str	r2, [r7, #4]
 7046 000c 3B60     		str	r3, [r7]
2564:../fatfs/ff.c **** 	FRESULT res;
2565:../fatfs/ff.c **** 	DWORD clst, sect;
2566:../fatfs/ff.c **** 	UINT wcnt, cc;
2567:../fatfs/ff.c **** 	const BYTE *wbuff = (const BYTE*)buff;
 7047              		.loc 1 2567 0
 7048 000e BB68     		ldr	r3, [r7, #8]
 7049 0010 BB61     		str	r3, [r7, #24]
2568:../fatfs/ff.c **** 	BYTE csect;
2569:../fatfs/ff.c **** 
2570:../fatfs/ff.c **** 
2571:../fatfs/ff.c **** 	*bw = 0;	/* Clear write byte counter */
 7050              		.loc 1 2571 0
 7051 0012 3B68     		ldr	r3, [r7]
 7052 0014 0022     		movs	r2, #0
 7053 0016 1A60     		str	r2, [r3]
2572:../fatfs/ff.c **** 
2573:../fatfs/ff.c **** 	res = validate(fp);						/* Check validity */
 7054              		.loc 1 2573 0
 7055 0018 F868     		ldr	r0, [r7, #12]
 7056 001a FFF7FEFF 		bl	validate
 7057 001e 0346     		mov	r3, r0
 7058 0020 FB75     		strb	r3, [r7, #23]
2574:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fatfs, res);
 7059              		.loc 1 2574 0
 7060 0022 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7061 0024 002B     		cmp	r3, #0
 7062 0026 01D0     		beq	.L444
 7063              		.loc 1 2574 0 is_stmt 0 discriminator 1
 7064 0028 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7065 002a 6AE1     		b	.L445
 7066              	.L444:
2575:../fatfs/ff.c **** 	if (fp->flag & FA__ERROR)				/* Aborted file? */
 7067              		.loc 1 2575 0 is_stmt 1
 7068 002c FB68     		ldr	r3, [r7, #12]
 7069 002e 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7070 0030 DBB2     		uxtb	r3, r3
 7071 0032 5BB2     		sxtb	r3, r3
 7072 0034 002B     		cmp	r3, #0
 7073 0036 01DA     		bge	.L446
2576:../fatfs/ff.c **** 		LEAVE_FF(fp->fatfs, FR_INT_ERR);
 7074              		.loc 1 2576 0
 7075 0038 0223     		movs	r3, #2
 7076 003a 62E1     		b	.L445
 7077              	.L446:
2577:../fatfs/ff.c **** 	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 7078              		.loc 1 2577 0
 7079 003c FB68     		ldr	r3, [r7, #12]
 7080 003e 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7081 0040 03F00203 		and	r3, r3, #2
 7082 0044 002B     		cmp	r3, #0
 7083 0046 01D1     		bne	.L447
2578:../fatfs/ff.c **** 		LEAVE_FF(fp->fatfs, FR_DENIED);
 7084              		.loc 1 2578 0
 7085 0048 0723     		movs	r3, #7
 7086 004a 5AE1     		b	.L445
 7087              	.L447:
2579:../fatfs/ff.c **** 	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
 7088              		.loc 1 2579 0
 7089 004c FB68     		ldr	r3, [r7, #12]
 7090 004e DA68     		ldr	r2, [r3, #12]
 7091 0050 7B68     		ldr	r3, [r7, #4]
 7092 0052 1A44     		add	r2, r2, r3
 7093 0054 FB68     		ldr	r3, [r7, #12]
 7094 0056 DB68     		ldr	r3, [r3, #12]
 7095 0058 9A42     		cmp	r2, r3
 7096 005a 01D2     		bcs	.L448
 7097              		.loc 1 2579 0 is_stmt 0 discriminator 1
 7098 005c 0023     		movs	r3, #0
 7099 005e 7B60     		str	r3, [r7, #4]
 7100              	.L448:
2580:../fatfs/ff.c **** 
2581:../fatfs/ff.c **** 	for ( ;  btw;							/* Repeat until all data written */
 7101              		.loc 1 2581 0 is_stmt 1
 7102 0060 39E1     		b	.L449
 7103              	.L469:
2582:../fatfs/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
2583:../fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fatfs)) == 0) {	/* On the sector boundary? */
 7104              		.loc 1 2583 0
 7105 0062 FB68     		ldr	r3, [r7, #12]
 7106 0064 9B68     		ldr	r3, [r3, #8]
 7107 0066 C3F30803 		ubfx	r3, r3, #0, #9
 7108 006a 002B     		cmp	r3, #0
 7109 006c 40F0FE80 		bne	.L450
2584:../fatfs/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fatfs) & (fp->fs->csize - 1));	/* Sector offset in the cluster 
 7110              		.loc 1 2584 0
 7111 0070 FB68     		ldr	r3, [r7, #12]
 7112 0072 9B68     		ldr	r3, [r3, #8]
 7113 0074 5B0A     		lsrs	r3, r3, #9
 7114 0076 DAB2     		uxtb	r2, r3
 7115 0078 FB68     		ldr	r3, [r7, #12]
 7116 007a 1B68     		ldr	r3, [r3]
 7117 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 7118 007e 013B     		subs	r3, r3, #1
 7119 0080 DBB2     		uxtb	r3, r3
 7120 0082 1340     		ands	r3, r3, r2
 7121 0084 BB75     		strb	r3, [r7, #22]
2585:../fatfs/ff.c **** 			if (!csect) {					/* On the cluster boundary? */
 7122              		.loc 1 2585 0
 7123 0086 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 7124 0088 002B     		cmp	r3, #0
 7125 008a 3DD1     		bne	.L451
2586:../fatfs/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 7126              		.loc 1 2586 0
 7127 008c FB68     		ldr	r3, [r7, #12]
 7128 008e 9B68     		ldr	r3, [r3, #8]
 7129 0090 002B     		cmp	r3, #0
 7130 0092 10D1     		bne	.L452
2587:../fatfs/ff.c **** 					clst = fp->sclust;		/* Follow from the origin */
 7131              		.loc 1 2587 0
 7132 0094 FB68     		ldr	r3, [r7, #12]
 7133 0096 1B69     		ldr	r3, [r3, #16]
 7134 0098 7B62     		str	r3, [r7, #36]
2588:../fatfs/ff.c **** 					if (clst == 0)			/* When no cluster is allocated, */
 7135              		.loc 1 2588 0
 7136 009a 7B6A     		ldr	r3, [r7, #36]
 7137 009c 002B     		cmp	r3, #0
 7138 009e 13D1     		bne	.L454
2589:../fatfs/ff.c **** 						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 7139              		.loc 1 2589 0
 7140 00a0 FB68     		ldr	r3, [r7, #12]
 7141 00a2 1B68     		ldr	r3, [r3]
 7142 00a4 1846     		mov	r0, r3
 7143 00a6 0021     		movs	r1, #0
 7144 00a8 FFF7FEFF 		bl	create_chain
 7145 00ac 7862     		str	r0, [r7, #36]
 7146 00ae FB68     		ldr	r3, [r7, #12]
 7147 00b0 7A6A     		ldr	r2, [r7, #36]
 7148 00b2 1A61     		str	r2, [r3, #16]
 7149 00b4 08E0     		b	.L454
 7150              	.L452:
2590:../fatfs/ff.c **** 				} else {					/* Middle or end of the file */
2591:../fatfs/ff.c **** #if _USE_FASTSEEK
2592:../fatfs/ff.c **** 					if (fp->cltbl)
2593:../fatfs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2594:../fatfs/ff.c **** 					else
2595:../fatfs/ff.c **** #endif
2596:../fatfs/ff.c **** 						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 7151              		.loc 1 2596 0
 7152 00b6 FB68     		ldr	r3, [r7, #12]
 7153 00b8 1A68     		ldr	r2, [r3]
 7154 00ba FB68     		ldr	r3, [r7, #12]
 7155 00bc 5B69     		ldr	r3, [r3, #20]
 7156 00be 1046     		mov	r0, r2
 7157 00c0 1946     		mov	r1, r3
 7158 00c2 FFF7FEFF 		bl	create_chain
 7159 00c6 7862     		str	r0, [r7, #36]
 7160              	.L454:
2597:../fatfs/ff.c **** 				}
2598:../fatfs/ff.c **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 7161              		.loc 1 2598 0
 7162 00c8 7B6A     		ldr	r3, [r7, #36]
 7163 00ca 002B     		cmp	r3, #0
 7164 00cc 00D1     		bne	.L455
 7165 00ce 06E1     		b	.L456
 7166              	.L455:
2599:../fatfs/ff.c **** 				if (clst == 1) ABORT(fp->fatfs, FR_INT_ERR);
 7167              		.loc 1 2599 0
 7168 00d0 7B6A     		ldr	r3, [r7, #36]
 7169 00d2 012B     		cmp	r3, #1
 7170 00d4 08D1     		bne	.L457
 7171              		.loc 1 2599 0 is_stmt 0 discriminator 1
 7172 00d6 FB68     		ldr	r3, [r7, #12]
 7173 00d8 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7174 00da 63F07F03 		orn	r3, r3, #127
 7175 00de DAB2     		uxtb	r2, r3
 7176 00e0 FB68     		ldr	r3, [r7, #12]
 7177 00e2 9A71     		strb	r2, [r3, #6]
 7178 00e4 0223     		movs	r3, #2
 7179 00e6 0CE1     		b	.L445
 7180              	.L457:
2600:../fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fatfs, FR_DISK_ERR);
 7181              		.loc 1 2600 0 is_stmt 1
 7182 00e8 7B6A     		ldr	r3, [r7, #36]
 7183 00ea B3F1FF3F 		cmp	r3, #-1
 7184 00ee 08D1     		bne	.L458
 7185              		.loc 1 2600 0 is_stmt 0 discriminator 1
 7186 00f0 FB68     		ldr	r3, [r7, #12]
 7187 00f2 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7188 00f4 63F07F03 		orn	r3, r3, #127
 7189 00f8 DAB2     		uxtb	r2, r3
 7190 00fa FB68     		ldr	r3, [r7, #12]
 7191 00fc 9A71     		strb	r2, [r3, #6]
 7192 00fe 0123     		movs	r3, #1
 7193 0100 FFE0     		b	.L445
 7194              	.L458:
2601:../fatfs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 7195              		.loc 1 2601 0 is_stmt 1
 7196 0102 FB68     		ldr	r3, [r7, #12]
 7197 0104 7A6A     		ldr	r2, [r7, #36]
 7198 0106 5A61     		str	r2, [r3, #20]
 7199              	.L451:
2602:../fatfs/ff.c **** 			}
2603:../fatfs/ff.c **** #if _FS_TINY
2604:../fatfs/ff.c **** 			if (fp->fatfs->winsect == fp->dsect && sync_window(fp->fatfs))	/* Write-back sector cache */
2605:../fatfs/ff.c **** 				ABORT(fp->fatfs, FR_DISK_ERR);
2606:../fatfs/ff.c **** #else
2607:../fatfs/ff.c **** 			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 7200              		.loc 1 2607 0
 7201 0108 FB68     		ldr	r3, [r7, #12]
 7202 010a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7203 010c 03F04003 		and	r3, r3, #64
 7204 0110 002B     		cmp	r3, #0
 7205 0112 20D0     		beq	.L459
2608:../fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 7206              		.loc 1 2608 0
 7207 0114 FB68     		ldr	r3, [r7, #12]
 7208 0116 1B68     		ldr	r3, [r3]
 7209 0118 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 7210 011a FB68     		ldr	r3, [r7, #12]
 7211 011c 03F12402 		add	r2, r3, #36
 7212 0120 FB68     		ldr	r3, [r7, #12]
 7213 0122 9B69     		ldr	r3, [r3, #24]
 7214 0124 0846     		mov	r0, r1
 7215 0126 1146     		mov	r1, r2
 7216 0128 1A46     		mov	r2, r3
 7217 012a 0123     		movs	r3, #1
 7218 012c FFF7FEFF 		bl	disk_write
 7219 0130 0346     		mov	r3, r0
 7220 0132 002B     		cmp	r3, #0
 7221 0134 08D0     		beq	.L460
2609:../fatfs/ff.c **** 					ABORT(fp->fatfs, FR_DISK_ERR);
 7222              		.loc 1 2609 0
 7223 0136 FB68     		ldr	r3, [r7, #12]
 7224 0138 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7225 013a 63F07F03 		orn	r3, r3, #127
 7226 013e DAB2     		uxtb	r2, r3
 7227 0140 FB68     		ldr	r3, [r7, #12]
 7228 0142 9A71     		strb	r2, [r3, #6]
 7229 0144 0123     		movs	r3, #1
 7230 0146 DCE0     		b	.L445
 7231              	.L460:
2610:../fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
 7232              		.loc 1 2610 0
 7233 0148 FB68     		ldr	r3, [r7, #12]
 7234 014a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7235 014c 23F04003 		bic	r3, r3, #64
 7236 0150 DAB2     		uxtb	r2, r3
 7237 0152 FB68     		ldr	r3, [r7, #12]
 7238 0154 9A71     		strb	r2, [r3, #6]
 7239              	.L459:
2611:../fatfs/ff.c **** 			}
2612:../fatfs/ff.c **** #endif
2613:../fatfs/ff.c **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 7240              		.loc 1 2613 0
 7241 0156 FB68     		ldr	r3, [r7, #12]
 7242 0158 1A68     		ldr	r2, [r3]
 7243 015a FB68     		ldr	r3, [r7, #12]
 7244 015c 5B69     		ldr	r3, [r3, #20]
 7245 015e 1046     		mov	r0, r2
 7246 0160 1946     		mov	r1, r3
 7247 0162 FFF7FEFF 		bl	clust2sect
 7248 0166 3861     		str	r0, [r7, #16]
2614:../fatfs/ff.c **** 			if (!sect) ABORT(fp->fatfs, FR_INT_ERR);
 7249              		.loc 1 2614 0
 7250 0168 3B69     		ldr	r3, [r7, #16]
 7251 016a 002B     		cmp	r3, #0
 7252 016c 08D1     		bne	.L461
 7253              		.loc 1 2614 0 is_stmt 0 discriminator 1
 7254 016e FB68     		ldr	r3, [r7, #12]
 7255 0170 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7256 0172 63F07F03 		orn	r3, r3, #127
 7257 0176 DAB2     		uxtb	r2, r3
 7258 0178 FB68     		ldr	r3, [r7, #12]
 7259 017a 9A71     		strb	r2, [r3, #6]
 7260 017c 0223     		movs	r3, #2
 7261 017e C0E0     		b	.L445
 7262              	.L461:
2615:../fatfs/ff.c **** 			sect += csect;
 7263              		.loc 1 2615 0 is_stmt 1
 7264 0180 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 7265 0182 3A69     		ldr	r2, [r7, #16]
 7266 0184 1344     		add	r3, r3, r2
 7267 0186 3B61     		str	r3, [r7, #16]
2616:../fatfs/ff.c **** 			cc = btw / SS(fp->fatfs);			/* When remaining bytes >= sector size, */
 7268              		.loc 1 2616 0
 7269 0188 7B68     		ldr	r3, [r7, #4]
 7270 018a 5B0A     		lsrs	r3, r3, #9
 7271 018c FB61     		str	r3, [r7, #28]
2617:../fatfs/ff.c **** 			if (cc) {						/* Write maximum contiguous sectors directly */
 7272              		.loc 1 2617 0
 7273 018e FB69     		ldr	r3, [r7, #28]
 7274 0190 002B     		cmp	r3, #0
 7275 0192 46D0     		beq	.L462
2618:../fatfs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 7276              		.loc 1 2618 0
 7277 0194 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 7278 0196 FB69     		ldr	r3, [r7, #28]
 7279 0198 1344     		add	r3, r3, r2
 7280 019a FA68     		ldr	r2, [r7, #12]
 7281 019c 1268     		ldr	r2, [r2]
 7282 019e 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 7283 01a0 9342     		cmp	r3, r2
 7284 01a2 06D9     		bls	.L463
2619:../fatfs/ff.c **** 					cc = fp->fs->csize - csect;
 7285              		.loc 1 2619 0
 7286 01a4 FB68     		ldr	r3, [r7, #12]
 7287 01a6 1B68     		ldr	r3, [r3]
 7288 01a8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 7289 01aa 1A46     		mov	r2, r3
 7290 01ac BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 7291 01ae D31A     		subs	r3, r2, r3
 7292 01b0 FB61     		str	r3, [r7, #28]
 7293              	.L463:
2620:../fatfs/ff.c **** 				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
 7294              		.loc 1 2620 0
 7295 01b2 FB68     		ldr	r3, [r7, #12]
 7296 01b4 1B68     		ldr	r3, [r3]
 7297 01b6 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 7298 01b8 FB69     		ldr	r3, [r7, #28]
 7299 01ba DBB2     		uxtb	r3, r3
 7300 01bc 1046     		mov	r0, r2
 7301 01be B969     		ldr	r1, [r7, #24]
 7302 01c0 3A69     		ldr	r2, [r7, #16]
 7303 01c2 FFF7FEFF 		bl	disk_write
 7304 01c6 0346     		mov	r3, r0
 7305 01c8 002B     		cmp	r3, #0
 7306 01ca 08D0     		beq	.L464
2621:../fatfs/ff.c **** 					ABORT(fp->fatfs, FR_DISK_ERR);
 7307              		.loc 1 2621 0
 7308 01cc FB68     		ldr	r3, [r7, #12]
 7309 01ce 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7310 01d0 63F07F03 		orn	r3, r3, #127
 7311 01d4 DAB2     		uxtb	r2, r3
 7312 01d6 FB68     		ldr	r3, [r7, #12]
 7313 01d8 9A71     		strb	r2, [r3, #6]
 7314 01da 0123     		movs	r3, #1
 7315 01dc 91E0     		b	.L445
 7316              	.L464:
2622:../fatfs/ff.c **** #if _FS_TINY
2623:../fatfs/ff.c **** 				if (fp->fatfs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the dire
2624:../fatfs/ff.c **** 					mem_cpy(fp->fatfs->win, wbuff + ((fp->fatfs->winsect - sect) * SS(fp->fatfs)), SS(fp->fatfs));
2625:../fatfs/ff.c **** 					fp->fatfs->wflag = 0;
2626:../fatfs/ff.c **** 				}
2627:../fatfs/ff.c **** #else
2628:../fatfs/ff.c **** 				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write 
 7317              		.loc 1 2628 0
 7318 01de FB68     		ldr	r3, [r7, #12]
 7319 01e0 9A69     		ldr	r2, [r3, #24]
 7320 01e2 3B69     		ldr	r3, [r7, #16]
 7321 01e4 D21A     		subs	r2, r2, r3
 7322 01e6 FB69     		ldr	r3, [r7, #28]
 7323 01e8 9A42     		cmp	r2, r3
 7324 01ea 16D2     		bcs	.L465
2629:../fatfs/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fatfs)), SS(fp->fatfs));
 7325              		.loc 1 2629 0
 7326 01ec FB68     		ldr	r3, [r7, #12]
 7327 01ee 03F12401 		add	r1, r3, #36
 7328 01f2 FB68     		ldr	r3, [r7, #12]
 7329 01f4 9A69     		ldr	r2, [r3, #24]
 7330 01f6 3B69     		ldr	r3, [r7, #16]
 7331 01f8 D31A     		subs	r3, r2, r3
 7332 01fa 5B02     		lsls	r3, r3, #9
 7333 01fc BA69     		ldr	r2, [r7, #24]
 7334 01fe 1344     		add	r3, r3, r2
 7335 0200 0846     		mov	r0, r1
 7336 0202 1946     		mov	r1, r3
 7337 0204 4FF40072 		mov	r2, #512
 7338 0208 FFF7FEFF 		bl	mem_cpy
2630:../fatfs/ff.c **** 					fp->flag &= ~FA__DIRTY;
 7339              		.loc 1 2630 0
 7340 020c FB68     		ldr	r3, [r7, #12]
 7341 020e 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7342 0210 23F04003 		bic	r3, r3, #64
 7343 0214 DAB2     		uxtb	r2, r3
 7344 0216 FB68     		ldr	r3, [r7, #12]
 7345 0218 9A71     		strb	r2, [r3, #6]
 7346              	.L465:
2631:../fatfs/ff.c **** 				}
2632:../fatfs/ff.c **** #endif
2633:../fatfs/ff.c **** 				wcnt = SS(fp->fatfs) * cc;		/* Number of bytes transferred */
 7347              		.loc 1 2633 0
 7348 021a FB69     		ldr	r3, [r7, #28]
 7349 021c 5B02     		lsls	r3, r3, #9
 7350 021e 3B62     		str	r3, [r7, #32]
2634:../fatfs/ff.c **** 				continue;
 7351              		.loc 1 2634 0
 7352 0220 45E0     		b	.L466
 7353              	.L462:
2635:../fatfs/ff.c **** 			}
2636:../fatfs/ff.c **** #if _FS_TINY
2637:../fatfs/ff.c **** 			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
2638:../fatfs/ff.c **** 				if (sync_window(fp->fatfs)) ABORT(fp->fatfs, FR_DISK_ERR);
2639:../fatfs/ff.c **** 				fp->fatfs->winsect = sect;
2640:../fatfs/ff.c **** 			}
2641:../fatfs/ff.c **** #else
2642:../fatfs/ff.c **** 			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 7354              		.loc 1 2642 0
 7355 0222 FB68     		ldr	r3, [r7, #12]
 7356 0224 9A69     		ldr	r2, [r3, #24]
 7357 0226 3B69     		ldr	r3, [r7, #16]
 7358 0228 9A42     		cmp	r2, r3
 7359 022a 1CD0     		beq	.L467
2643:../fatfs/ff.c **** 				if (fp->fptr < fp->fsize &&
 7360              		.loc 1 2643 0
 7361 022c FB68     		ldr	r3, [r7, #12]
 7362 022e 9A68     		ldr	r2, [r3, #8]
 7363 0230 FB68     		ldr	r3, [r7, #12]
 7364 0232 DB68     		ldr	r3, [r3, #12]
 7365 0234 9A42     		cmp	r2, r3
 7366 0236 16D2     		bcs	.L467
2644:../fatfs/ff.c **** 					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 7367              		.loc 1 2644 0 discriminator 1
 7368 0238 FB68     		ldr	r3, [r7, #12]
 7369 023a 1B68     		ldr	r3, [r3]
 7370 023c 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 7371 023e FB68     		ldr	r3, [r7, #12]
 7372 0240 2433     		adds	r3, r3, #36
 7373 0242 1046     		mov	r0, r2
 7374 0244 1946     		mov	r1, r3
 7375 0246 3A69     		ldr	r2, [r7, #16]
 7376 0248 0123     		movs	r3, #1
 7377 024a FFF7FEFF 		bl	disk_read
 7378 024e 0346     		mov	r3, r0
2643:../fatfs/ff.c **** 				if (fp->fptr < fp->fsize &&
 7379              		.loc 1 2643 0 discriminator 1
 7380 0250 002B     		cmp	r3, #0
 7381 0252 08D0     		beq	.L467
2645:../fatfs/ff.c **** 						ABORT(fp->fatfs, FR_DISK_ERR);
 7382              		.loc 1 2645 0
 7383 0254 FB68     		ldr	r3, [r7, #12]
 7384 0256 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7385 0258 63F07F03 		orn	r3, r3, #127
 7386 025c DAB2     		uxtb	r2, r3
 7387 025e FB68     		ldr	r3, [r7, #12]
 7388 0260 9A71     		strb	r2, [r3, #6]
 7389 0262 0123     		movs	r3, #1
 7390 0264 4DE0     		b	.L445
 7391              	.L467:
2646:../fatfs/ff.c **** 			}
2647:../fatfs/ff.c **** #endif
2648:../fatfs/ff.c **** 			fp->dsect = sect;
 7392              		.loc 1 2648 0
 7393 0266 FB68     		ldr	r3, [r7, #12]
 7394 0268 3A69     		ldr	r2, [r7, #16]
 7395 026a 9A61     		str	r2, [r3, #24]
 7396              	.L450:
2649:../fatfs/ff.c **** 		}
2650:../fatfs/ff.c **** 		wcnt = SS(fp->fatfs) - ((UINT)fp->fptr % SS(fp->fatfs));/* Put partial sector into file I/O buffe
 7397              		.loc 1 2650 0
 7398 026c FB68     		ldr	r3, [r7, #12]
 7399 026e 9B68     		ldr	r3, [r3, #8]
 7400 0270 C3F30803 		ubfx	r3, r3, #0, #9
 7401 0274 C3F50073 		rsb	r3, r3, #512
 7402 0278 3B62     		str	r3, [r7, #32]
2651:../fatfs/ff.c **** 		if (wcnt > btw) wcnt = btw;
 7403              		.loc 1 2651 0
 7404 027a 3A6A     		ldr	r2, [r7, #32]
 7405 027c 7B68     		ldr	r3, [r7, #4]
 7406 027e 9A42     		cmp	r2, r3
 7407 0280 01D9     		bls	.L468
 7408              		.loc 1 2651 0 is_stmt 0 discriminator 1
 7409 0282 7B68     		ldr	r3, [r7, #4]
 7410 0284 3B62     		str	r3, [r7, #32]
 7411              	.L468:
2652:../fatfs/ff.c **** #if _FS_TINY
2653:../fatfs/ff.c **** 		if (move_window(fp->fatfs, fp->dsect))	/* Move sector window */
2654:../fatfs/ff.c **** 			ABORT(fp->fatfs, FR_DISK_ERR);
2655:../fatfs/ff.c **** 		mem_cpy(&fp->fatfs->win[fp->fptr % SS(fp->fatfs)], wbuff, wcnt);	/* Fit partial sector */
2656:../fatfs/ff.c **** 		fp->fatfs->wflag = 1;
2657:../fatfs/ff.c **** #else
2658:../fatfs/ff.c **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fatfs)], wbuff, wcnt);	/* Fit partial sector */
 7412              		.loc 1 2658 0 is_stmt 1
 7413 0286 FB68     		ldr	r3, [r7, #12]
 7414 0288 9B68     		ldr	r3, [r3, #8]
 7415 028a C3F30803 		ubfx	r3, r3, #0, #9
 7416 028e 2033     		adds	r3, r3, #32
 7417 0290 FA68     		ldr	r2, [r7, #12]
 7418 0292 1344     		add	r3, r3, r2
 7419 0294 0433     		adds	r3, r3, #4
 7420 0296 1846     		mov	r0, r3
 7421 0298 B969     		ldr	r1, [r7, #24]
 7422 029a 3A6A     		ldr	r2, [r7, #32]
 7423 029c FFF7FEFF 		bl	mem_cpy
2659:../fatfs/ff.c **** 		fp->flag |= FA__DIRTY;
 7424              		.loc 1 2659 0
 7425 02a0 FB68     		ldr	r3, [r7, #12]
 7426 02a2 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7427 02a4 43F04003 		orr	r3, r3, #64
 7428 02a8 DAB2     		uxtb	r2, r3
 7429 02aa FB68     		ldr	r3, [r7, #12]
 7430 02ac 9A71     		strb	r2, [r3, #6]
 7431              	.L466:
2582:../fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fatfs)) == 0) {	/* On the sector boundary? */
 7432              		.loc 1 2582 0
 7433 02ae BA69     		ldr	r2, [r7, #24]
 7434 02b0 3B6A     		ldr	r3, [r7, #32]
 7435 02b2 1344     		add	r3, r3, r2
 7436 02b4 BB61     		str	r3, [r7, #24]
 7437 02b6 FB68     		ldr	r3, [r7, #12]
 7438 02b8 9A68     		ldr	r2, [r3, #8]
 7439 02ba 3B6A     		ldr	r3, [r7, #32]
 7440 02bc 1A44     		add	r2, r2, r3
 7441 02be FB68     		ldr	r3, [r7, #12]
 7442 02c0 9A60     		str	r2, [r3, #8]
 7443 02c2 3B68     		ldr	r3, [r7]
 7444 02c4 1A68     		ldr	r2, [r3]
 7445 02c6 3B6A     		ldr	r3, [r7, #32]
 7446 02c8 1A44     		add	r2, r2, r3
 7447 02ca 3B68     		ldr	r3, [r7]
 7448 02cc 1A60     		str	r2, [r3]
 7449 02ce 7A68     		ldr	r2, [r7, #4]
 7450 02d0 3B6A     		ldr	r3, [r7, #32]
 7451 02d2 D31A     		subs	r3, r2, r3
 7452 02d4 7B60     		str	r3, [r7, #4]
 7453              	.L449:
2581:../fatfs/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 7454              		.loc 1 2581 0
 7455 02d6 7B68     		ldr	r3, [r7, #4]
 7456 02d8 002B     		cmp	r3, #0
 7457 02da 7FF4C2AE 		bne	.L469
 7458              	.L456:
2660:../fatfs/ff.c **** #endif
2661:../fatfs/ff.c **** 	}
2662:../fatfs/ff.c **** 
2663:../fatfs/ff.c **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 7459              		.loc 1 2663 0
 7460 02de FB68     		ldr	r3, [r7, #12]
 7461 02e0 9A68     		ldr	r2, [r3, #8]
 7462 02e2 FB68     		ldr	r3, [r7, #12]
 7463 02e4 DB68     		ldr	r3, [r3, #12]
 7464 02e6 9A42     		cmp	r2, r3
 7465 02e8 03D9     		bls	.L470
 7466              		.loc 1 2663 0 is_stmt 0 discriminator 1
 7467 02ea FB68     		ldr	r3, [r7, #12]
 7468 02ec 9A68     		ldr	r2, [r3, #8]
 7469 02ee FB68     		ldr	r3, [r7, #12]
 7470 02f0 DA60     		str	r2, [r3, #12]
 7471              	.L470:
2664:../fatfs/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 7472              		.loc 1 2664 0 is_stmt 1
 7473 02f2 FB68     		ldr	r3, [r7, #12]
 7474 02f4 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7475 02f6 43F02003 		orr	r3, r3, #32
 7476 02fa DAB2     		uxtb	r2, r3
 7477 02fc FB68     		ldr	r3, [r7, #12]
 7478 02fe 9A71     		strb	r2, [r3, #6]
2665:../fatfs/ff.c **** 
2666:../fatfs/ff.c **** 	LEAVE_FF(fp->fatfs, FR_OK);
 7479              		.loc 1 2666 0
 7480 0300 0023     		movs	r3, #0
 7481              	.L445:
2667:../fatfs/ff.c **** }
 7482              		.loc 1 2667 0
 7483 0302 1846     		mov	r0, r3
 7484 0304 2837     		adds	r7, r7, #40
 7485              		.cfi_def_cfa_offset 8
 7486 0306 BD46     		mov	sp, r7
 7487              		.cfi_def_cfa_register 13
 7488              		@ sp needed
 7489 0308 80BD     		pop	{r7, pc}
 7490              		.cfi_endproc
 7491              	.LFE36:
 7493 030a 00BF     		.section	.text.f_sync,"ax",%progbits
 7494              		.align	2
 7495              		.global	f_sync
 7496              		.thumb
 7497              		.thumb_func
 7499              	f_sync:
 7500              	.LFB37:
2668:../fatfs/ff.c **** 
2669:../fatfs/ff.c **** 
2670:../fatfs/ff.c **** 
2671:../fatfs/ff.c **** 
2672:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2673:../fatfs/ff.c **** /* Synchronize the File Object                                           */
2674:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2675:../fatfs/ff.c **** 
2676:../fatfs/ff.c **** FRESULT f_sync (
2677:../fatfs/ff.c **** 	FIL *fp		/* Pointer to the file object */
2678:../fatfs/ff.c **** )
2679:../fatfs/ff.c **** {
 7501              		.loc 1 2679 0
 7502              		.cfi_startproc
 7503              		@ args = 0, pretend = 0, frame = 24
 7504              		@ frame_needed = 1, uses_anonymous_args = 0
 7505 0000 80B5     		push	{r7, lr}
 7506              		.cfi_def_cfa_offset 8
 7507              		.cfi_offset 7, -8
 7508              		.cfi_offset 14, -4
 7509 0002 86B0     		sub	sp, sp, #24
 7510              		.cfi_def_cfa_offset 32
 7511 0004 00AF     		add	r7, sp, #0
 7512              		.cfi_def_cfa_register 7
 7513 0006 7860     		str	r0, [r7, #4]
2680:../fatfs/ff.c **** 	FRESULT res;
2681:../fatfs/ff.c **** 	DWORD tm;
2682:../fatfs/ff.c **** 	BYTE *dir;
2683:../fatfs/ff.c **** 
2684:../fatfs/ff.c **** 
2685:../fatfs/ff.c **** 	res = validate(fp);					/* Check validity of the object */
 7514              		.loc 1 2685 0
 7515 0008 7868     		ldr	r0, [r7, #4]
 7516 000a FFF7FEFF 		bl	validate
 7517 000e 0346     		mov	r3, r0
 7518 0010 FB75     		strb	r3, [r7, #23]
2686:../fatfs/ff.c **** 	if (res == FR_OK) {
 7519              		.loc 1 2686 0
 7520 0012 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7521 0014 002B     		cmp	r3, #0
 7522 0016 40F09980 		bne	.L472
2687:../fatfs/ff.c **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 7523              		.loc 1 2687 0
 7524 001a 7B68     		ldr	r3, [r7, #4]
 7525 001c 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7526 001e 03F02003 		and	r3, r3, #32
 7527 0022 002B     		cmp	r3, #0
 7528 0024 00F09280 		beq	.L472
2688:../fatfs/ff.c **** #if !_FS_TINY	/* Write-back dirty buffer */
2689:../fatfs/ff.c **** 			if (fp->flag & FA__DIRTY) {
 7529              		.loc 1 2689 0
 7530 0028 7B68     		ldr	r3, [r7, #4]
 7531 002a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7532 002c 03F04003 		and	r3, r3, #64
 7533 0030 002B     		cmp	r3, #0
 7534 0032 19D0     		beq	.L473
2690:../fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 7535              		.loc 1 2690 0
 7536 0034 7B68     		ldr	r3, [r7, #4]
 7537 0036 1B68     		ldr	r3, [r3]
 7538 0038 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 7539 003a 7B68     		ldr	r3, [r7, #4]
 7540 003c 03F12402 		add	r2, r3, #36
 7541 0040 7B68     		ldr	r3, [r7, #4]
 7542 0042 9B69     		ldr	r3, [r3, #24]
 7543 0044 0846     		mov	r0, r1
 7544 0046 1146     		mov	r1, r2
 7545 0048 1A46     		mov	r2, r3
 7546 004a 0123     		movs	r3, #1
 7547 004c FFF7FEFF 		bl	disk_write
 7548 0050 0346     		mov	r3, r0
 7549 0052 002B     		cmp	r3, #0
 7550 0054 01D0     		beq	.L474
2691:../fatfs/ff.c **** 					LEAVE_FF(fp->fatfs, FR_DISK_ERR);
 7551              		.loc 1 2691 0
 7552 0056 0123     		movs	r3, #1
 7553 0058 79E0     		b	.L475
 7554              	.L474:
2692:../fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
 7555              		.loc 1 2692 0
 7556 005a 7B68     		ldr	r3, [r7, #4]
 7557 005c 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7558 005e 23F04003 		bic	r3, r3, #64
 7559 0062 DAB2     		uxtb	r2, r3
 7560 0064 7B68     		ldr	r3, [r7, #4]
 7561 0066 9A71     		strb	r2, [r3, #6]
 7562              	.L473:
2693:../fatfs/ff.c **** 			}
2694:../fatfs/ff.c **** #endif
2695:../fatfs/ff.c **** 			/* Update the directory entry */
2696:../fatfs/ff.c **** 			res = move_window(fp->fs, fp->dir_sect);
 7563              		.loc 1 2696 0
 7564 0068 7B68     		ldr	r3, [r7, #4]
 7565 006a 1A68     		ldr	r2, [r3]
 7566 006c 7B68     		ldr	r3, [r7, #4]
 7567 006e DB69     		ldr	r3, [r3, #28]
 7568 0070 1046     		mov	r0, r2
 7569 0072 1946     		mov	r1, r3
 7570 0074 FFF7FEFF 		bl	move_window
 7571 0078 0346     		mov	r3, r0
 7572 007a FB75     		strb	r3, [r7, #23]
2697:../fatfs/ff.c **** 			if (res == FR_OK) {
 7573              		.loc 1 2697 0
 7574 007c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7575 007e 002B     		cmp	r3, #0
 7576 0080 64D1     		bne	.L472
2698:../fatfs/ff.c **** 				dir = fp->dir_ptr;
 7577              		.loc 1 2698 0
 7578 0082 7B68     		ldr	r3, [r7, #4]
 7579 0084 1B6A     		ldr	r3, [r3, #32]
 7580 0086 3B61     		str	r3, [r7, #16]
2699:../fatfs/ff.c **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 7581              		.loc 1 2699 0
 7582 0088 3B69     		ldr	r3, [r7, #16]
 7583 008a 0B33     		adds	r3, r3, #11
 7584 008c 3A69     		ldr	r2, [r7, #16]
 7585 008e 0B32     		adds	r2, r2, #11
 7586 0090 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7587 0092 42F02002 		orr	r2, r2, #32
 7588 0096 D2B2     		uxtb	r2, r2
 7589 0098 1A70     		strb	r2, [r3]
2700:../fatfs/ff.c **** 				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 7590              		.loc 1 2700 0
 7591 009a 3B69     		ldr	r3, [r7, #16]
 7592 009c 1C33     		adds	r3, r3, #28
 7593 009e 7A68     		ldr	r2, [r7, #4]
 7594 00a0 D268     		ldr	r2, [r2, #12]
 7595 00a2 D2B2     		uxtb	r2, r2
 7596 00a4 1A70     		strb	r2, [r3]
 7597 00a6 3B69     		ldr	r3, [r7, #16]
 7598 00a8 1D33     		adds	r3, r3, #29
 7599 00aa 7A68     		ldr	r2, [r7, #4]
 7600 00ac D268     		ldr	r2, [r2, #12]
 7601 00ae 92B2     		uxth	r2, r2
 7602 00b0 120A     		lsrs	r2, r2, #8
 7603 00b2 92B2     		uxth	r2, r2
 7604 00b4 D2B2     		uxtb	r2, r2
 7605 00b6 1A70     		strb	r2, [r3]
 7606 00b8 3B69     		ldr	r3, [r7, #16]
 7607 00ba 1E33     		adds	r3, r3, #30
 7608 00bc 7A68     		ldr	r2, [r7, #4]
 7609 00be D268     		ldr	r2, [r2, #12]
 7610 00c0 120C     		lsrs	r2, r2, #16
 7611 00c2 D2B2     		uxtb	r2, r2
 7612 00c4 1A70     		strb	r2, [r3]
 7613 00c6 3B69     		ldr	r3, [r7, #16]
 7614 00c8 1F33     		adds	r3, r3, #31
 7615 00ca 7A68     		ldr	r2, [r7, #4]
 7616 00cc D268     		ldr	r2, [r2, #12]
 7617 00ce 120E     		lsrs	r2, r2, #24
 7618 00d0 D2B2     		uxtb	r2, r2
 7619 00d2 1A70     		strb	r2, [r3]
2701:../fatfs/ff.c **** 				st_clust(dir, fp->sclust);					/* Update start cluster */
 7620              		.loc 1 2701 0
 7621 00d4 7B68     		ldr	r3, [r7, #4]
 7622 00d6 1B69     		ldr	r3, [r3, #16]
 7623 00d8 3869     		ldr	r0, [r7, #16]
 7624 00da 1946     		mov	r1, r3
 7625 00dc FFF7FEFF 		bl	st_clust
2702:../fatfs/ff.c **** 				tm = get_fattime();							/* Update updated time */
 7626              		.loc 1 2702 0
 7627 00e0 FFF7FEFF 		bl	get_fattime
 7628 00e4 F860     		str	r0, [r7, #12]
2703:../fatfs/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tm);
 7629              		.loc 1 2703 0
 7630 00e6 3B69     		ldr	r3, [r7, #16]
 7631 00e8 1633     		adds	r3, r3, #22
 7632 00ea FA68     		ldr	r2, [r7, #12]
 7633 00ec D2B2     		uxtb	r2, r2
 7634 00ee 1A70     		strb	r2, [r3]
 7635 00f0 3B69     		ldr	r3, [r7, #16]
 7636 00f2 1733     		adds	r3, r3, #23
 7637 00f4 FA68     		ldr	r2, [r7, #12]
 7638 00f6 92B2     		uxth	r2, r2
 7639 00f8 120A     		lsrs	r2, r2, #8
 7640 00fa 92B2     		uxth	r2, r2
 7641 00fc D2B2     		uxtb	r2, r2
 7642 00fe 1A70     		strb	r2, [r3]
 7643 0100 3B69     		ldr	r3, [r7, #16]
 7644 0102 1833     		adds	r3, r3, #24
 7645 0104 FA68     		ldr	r2, [r7, #12]
 7646 0106 120C     		lsrs	r2, r2, #16
 7647 0108 D2B2     		uxtb	r2, r2
 7648 010a 1A70     		strb	r2, [r3]
 7649 010c 3B69     		ldr	r3, [r7, #16]
 7650 010e 1933     		adds	r3, r3, #25
 7651 0110 FA68     		ldr	r2, [r7, #12]
 7652 0112 120E     		lsrs	r2, r2, #24
 7653 0114 D2B2     		uxtb	r2, r2
 7654 0116 1A70     		strb	r2, [r3]
2704:../fatfs/ff.c **** 				ST_WORD(dir+DIR_LstAccDate, 0);
 7655              		.loc 1 2704 0
 7656 0118 3B69     		ldr	r3, [r7, #16]
 7657 011a 1233     		adds	r3, r3, #18
 7658 011c 0022     		movs	r2, #0
 7659 011e 1A70     		strb	r2, [r3]
 7660 0120 3B69     		ldr	r3, [r7, #16]
 7661 0122 1333     		adds	r3, r3, #19
 7662 0124 0022     		movs	r2, #0
 7663 0126 1A70     		strb	r2, [r3]
2705:../fatfs/ff.c **** 				fp->flag &= ~FA__WRITTEN;
 7664              		.loc 1 2705 0
 7665 0128 7B68     		ldr	r3, [r7, #4]
 7666 012a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7667 012c 23F02003 		bic	r3, r3, #32
 7668 0130 DAB2     		uxtb	r2, r3
 7669 0132 7B68     		ldr	r3, [r7, #4]
 7670 0134 9A71     		strb	r2, [r3, #6]
2706:../fatfs/ff.c **** 				fp->fs->wflag = 1;
 7671              		.loc 1 2706 0
 7672 0136 7B68     		ldr	r3, [r7, #4]
 7673 0138 1B68     		ldr	r3, [r3]
 7674 013a 0122     		movs	r2, #1
 7675 013c 1A71     		strb	r2, [r3, #4]
2707:../fatfs/ff.c **** 				res = sync_fs(fp->fs);
 7676              		.loc 1 2707 0
 7677 013e 7B68     		ldr	r3, [r7, #4]
 7678 0140 1B68     		ldr	r3, [r3]
 7679 0142 1846     		mov	r0, r3
 7680 0144 FFF7FEFF 		bl	sync_fs
 7681 0148 0346     		mov	r3, r0
 7682 014a FB75     		strb	r3, [r7, #23]
 7683              	.L472:
2708:../fatfs/ff.c **** 			}
2709:../fatfs/ff.c **** 		}
2710:../fatfs/ff.c **** 	}
2711:../fatfs/ff.c **** 
2712:../fatfs/ff.c **** 	LEAVE_FF(fp->fatfs, res);
 7684              		.loc 1 2712 0
 7685 014c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7686              	.L475:
2713:../fatfs/ff.c **** }
 7687              		.loc 1 2713 0
 7688 014e 1846     		mov	r0, r3
 7689 0150 1837     		adds	r7, r7, #24
 7690              		.cfi_def_cfa_offset 8
 7691 0152 BD46     		mov	sp, r7
 7692              		.cfi_def_cfa_register 13
 7693              		@ sp needed
 7694 0154 80BD     		pop	{r7, pc}
 7695              		.cfi_endproc
 7696              	.LFE37:
 7698 0156 00BF     		.section	.text.f_close,"ax",%progbits
 7699              		.align	2
 7700              		.global	f_close
 7701              		.thumb
 7702              		.thumb_func
 7704              	f_close:
 7705              	.LFB38:
2714:../fatfs/ff.c **** 
2715:../fatfs/ff.c **** #endif /* !_FS_READONLY */
2716:../fatfs/ff.c **** 
2717:../fatfs/ff.c **** 
2718:../fatfs/ff.c **** 
2719:../fatfs/ff.c **** 
2720:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2721:../fatfs/ff.c **** /* Close File                                                            */
2722:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2723:../fatfs/ff.c **** 
2724:../fatfs/ff.c **** FRESULT f_close (
2725:../fatfs/ff.c **** 	FIL *fp		/* Pointer to the file object to be closed */
2726:../fatfs/ff.c **** )
2727:../fatfs/ff.c **** {
 7706              		.loc 1 2727 0
 7707              		.cfi_startproc
 7708              		@ args = 0, pretend = 0, frame = 16
 7709              		@ frame_needed = 1, uses_anonymous_args = 0
 7710 0000 80B5     		push	{r7, lr}
 7711              		.cfi_def_cfa_offset 8
 7712              		.cfi_offset 7, -8
 7713              		.cfi_offset 14, -4
 7714 0002 84B0     		sub	sp, sp, #16
 7715              		.cfi_def_cfa_offset 24
 7716 0004 00AF     		add	r7, sp, #0
 7717              		.cfi_def_cfa_register 7
 7718 0006 7860     		str	r0, [r7, #4]
2728:../fatfs/ff.c **** 	FRESULT res;
2729:../fatfs/ff.c **** 
2730:../fatfs/ff.c **** 
2731:../fatfs/ff.c **** #if _FS_READONLY
2732:../fatfs/ff.c **** 	res = validate(fp);
2733:../fatfs/ff.c **** 	{
2734:../fatfs/ff.c **** #if _FS_REENTRANT
2735:../fatfs/ff.c **** 		FATFS *fatfs = fp->fatfs;
2736:../fatfs/ff.c **** #endif
2737:../fatfs/ff.c **** 		if (res == FR_OK) fp->fatfs = 0;	/* Discard file object */
2738:../fatfs/ff.c **** 		LEAVE_FF(fatfs, res);
2739:../fatfs/ff.c **** 	}
2740:../fatfs/ff.c **** #else
2741:../fatfs/ff.c **** 	res = f_sync(fp);		/* Flush cached data */
 7719              		.loc 1 2741 0
 7720 0008 7868     		ldr	r0, [r7, #4]
 7721 000a FFF7FEFF 		bl	f_sync
 7722 000e 0346     		mov	r3, r0
 7723 0010 FB73     		strb	r3, [r7, #15]
2742:../fatfs/ff.c **** #if _FS_LOCK
2743:../fatfs/ff.c **** 	if (res == FR_OK) {		/* Decrement open counter */
2744:../fatfs/ff.c **** #if _FS_REENTRANT
2745:../fatfs/ff.c **** 		FATFS *fatfs = fp->fatfs;;
2746:../fatfs/ff.c **** 		res = validate(fp);
2747:../fatfs/ff.c **** 		if (res == FR_OK) {
2748:../fatfs/ff.c **** 			res = dec_lock(fp->lockid);	
2749:../fatfs/ff.c **** 			unlock_fs(fatfs, FR_OK);
2750:../fatfs/ff.c **** 		}
2751:../fatfs/ff.c **** #else
2752:../fatfs/ff.c **** 		res = dec_lock(fp->lockid);
2753:../fatfs/ff.c **** #endif
2754:../fatfs/ff.c **** 	}
2755:../fatfs/ff.c **** #endif
2756:../fatfs/ff.c **** 	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 7724              		.loc 1 2756 0
 7725 0012 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 7726 0014 002B     		cmp	r3, #0
 7727 0016 02D1     		bne	.L477
 7728              		.loc 1 2756 0 is_stmt 0 discriminator 1
 7729 0018 7B68     		ldr	r3, [r7, #4]
 7730 001a 0022     		movs	r2, #0
 7731 001c 1A60     		str	r2, [r3]
 7732              	.L477:
2757:../fatfs/ff.c **** 	return res;
 7733              		.loc 1 2757 0 is_stmt 1
 7734 001e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2758:../fatfs/ff.c **** #endif
2759:../fatfs/ff.c **** }
 7735              		.loc 1 2759 0
 7736 0020 1846     		mov	r0, r3
 7737 0022 1037     		adds	r7, r7, #16
 7738              		.cfi_def_cfa_offset 8
 7739 0024 BD46     		mov	sp, r7
 7740              		.cfi_def_cfa_register 13
 7741              		@ sp needed
 7742 0026 80BD     		pop	{r7, pc}
 7743              		.cfi_endproc
 7744              	.LFE38:
 7746              		.section	.text.f_chdrive,"ax",%progbits
 7747              		.align	2
 7748              		.global	f_chdrive
 7749              		.thumb
 7750              		.thumb_func
 7752              	f_chdrive:
 7753              	.LFB39:
2760:../fatfs/ff.c **** 
2761:../fatfs/ff.c **** 
2762:../fatfs/ff.c **** 
2763:../fatfs/ff.c **** 
2764:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2765:../fatfs/ff.c **** /* Current Drive/Directory Handlings                                     */
2766:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2767:../fatfs/ff.c **** 
2768:../fatfs/ff.c **** #if _FS_RPATH >= 1
2769:../fatfs/ff.c **** 
2770:../fatfs/ff.c **** FRESULT f_chdrive (
2771:../fatfs/ff.c **** 	BYTE drv		/* Drive number */
2772:../fatfs/ff.c **** )
2773:../fatfs/ff.c **** {
 7754              		.loc 1 2773 0
 7755              		.cfi_startproc
 7756              		@ args = 0, pretend = 0, frame = 8
 7757              		@ frame_needed = 1, uses_anonymous_args = 0
 7758              		@ link register save eliminated.
 7759 0000 80B4     		push	{r7}
 7760              		.cfi_def_cfa_offset 4
 7761              		.cfi_offset 7, -4
 7762 0002 83B0     		sub	sp, sp, #12
 7763              		.cfi_def_cfa_offset 16
 7764 0004 00AF     		add	r7, sp, #0
 7765              		.cfi_def_cfa_register 7
 7766 0006 0346     		mov	r3, r0
 7767 0008 FB71     		strb	r3, [r7, #7]
2774:../fatfs/ff.c **** 	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
 7768              		.loc 1 2774 0
 7769 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7770 000c 012B     		cmp	r3, #1
 7771 000e 01D9     		bls	.L480
 7772              		.loc 1 2774 0 is_stmt 0 discriminator 1
 7773 0010 0B23     		movs	r3, #11
 7774 0012 03E0     		b	.L481
 7775              	.L480:
2775:../fatfs/ff.c **** 
2776:../fatfs/ff.c **** 	CurrVol = drv;
 7776              		.loc 1 2776 0 is_stmt 1
 7777 0014 044A     		ldr	r2, .L482
 7778 0016 FB79     		ldrb	r3, [r7, #7]
 7779 0018 1370     		strb	r3, [r2]
2777:../fatfs/ff.c **** 
2778:../fatfs/ff.c **** 	return FR_OK;
 7780              		.loc 1 2778 0
 7781 001a 0023     		movs	r3, #0
 7782              	.L481:
2779:../fatfs/ff.c **** }
 7783              		.loc 1 2779 0
 7784 001c 1846     		mov	r0, r3
 7785 001e 0C37     		adds	r7, r7, #12
 7786              		.cfi_def_cfa_offset 4
 7787 0020 BD46     		mov	sp, r7
 7788              		.cfi_def_cfa_register 13
 7789              		@ sp needed
 7790 0022 5DF8047B 		ldr	r7, [sp], #4
 7791              		.cfi_restore 7
 7792              		.cfi_def_cfa_offset 0
 7793 0026 7047     		bx	lr
 7794              	.L483:
 7795              		.align	2
 7796              	.L482:
 7797 0028 00000000 		.word	CurrVol
 7798              		.cfi_endproc
 7799              	.LFE39:
 7801              		.section	.text.f_chdir,"ax",%progbits
 7802              		.align	2
 7803              		.global	f_chdir
 7804              		.thumb
 7805              		.thumb_func
 7807              	f_chdir:
 7808              	.LFB40:
2780:../fatfs/ff.c **** 
2781:../fatfs/ff.c **** 
2782:../fatfs/ff.c **** 
2783:../fatfs/ff.c **** FRESULT f_chdir (
2784:../fatfs/ff.c **** 	const TCHAR *path	/* Pointer to the directory path */
2785:../fatfs/ff.c **** )
2786:../fatfs/ff.c **** {
 7809              		.loc 1 2786 0
 7810              		.cfi_startproc
 7811              		@ args = 0, pretend = 0, frame = 64
 7812              		@ frame_needed = 1, uses_anonymous_args = 0
 7813 0000 90B5     		push	{r4, r7, lr}
 7814              		.cfi_def_cfa_offset 12
 7815              		.cfi_offset 4, -12
 7816              		.cfi_offset 7, -8
 7817              		.cfi_offset 14, -4
 7818 0002 91B0     		sub	sp, sp, #68
 7819              		.cfi_def_cfa_offset 80
 7820 0004 00AF     		add	r7, sp, #0
 7821              		.cfi_def_cfa_register 7
 7822 0006 7860     		str	r0, [r7, #4]
2787:../fatfs/ff.c **** 	FRESULT res;
2788:../fatfs/ff.c **** 	DIR dj;
2789:../fatfs/ff.c **** 	DEF_NAMEBUF;
2790:../fatfs/ff.c **** 
2791:../fatfs/ff.c **** 
2792:../fatfs/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
 7823              		.loc 1 2792 0
 7824 0008 3A1D     		adds	r2, r7, #4
 7825 000a 07F11803 		add	r3, r7, #24
 7826 000e 1046     		mov	r0, r2
 7827 0010 1946     		mov	r1, r3
 7828 0012 0022     		movs	r2, #0
 7829 0014 FFF7FEFF 		bl	chk_mounted
 7830 0018 0346     		mov	r3, r0
 7831 001a 87F83F30 		strb	r3, [r7, #63]
2793:../fatfs/ff.c **** 	if (res == FR_OK) {
 7832              		.loc 1 2793 0
 7833 001e 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 7834 0022 002B     		cmp	r3, #0
 7835 0024 34D1     		bne	.L485
2794:../fatfs/ff.c **** 		INIT_BUF(dj);
 7836              		.loc 1 2794 0
 7837 0026 07F10C03 		add	r3, r7, #12
 7838 002a 3B63     		str	r3, [r7, #48]
 7839 002c 1B4B     		ldr	r3, .L490
 7840 002e 7B63     		str	r3, [r7, #52]
2795:../fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
 7841              		.loc 1 2795 0
 7842 0030 7B68     		ldr	r3, [r7, #4]
 7843 0032 07F11802 		add	r2, r7, #24
 7844 0036 1046     		mov	r0, r2
 7845 0038 1946     		mov	r1, r3
 7846 003a FFF7FEFF 		bl	follow_path
 7847 003e 0346     		mov	r3, r0
 7848 0040 87F83F30 		strb	r3, [r7, #63]
2796:../fatfs/ff.c **** 		FREE_BUF();
2797:../fatfs/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
 7849              		.loc 1 2797 0
 7850 0044 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 7851 0048 002B     		cmp	r3, #0
 7852 004a 1AD1     		bne	.L486
2798:../fatfs/ff.c **** 			if (!dj.dir) {
 7853              		.loc 1 2798 0
 7854 004c FB6A     		ldr	r3, [r7, #44]
 7855 004e 002B     		cmp	r3, #0
 7856 0050 03D1     		bne	.L487
2799:../fatfs/ff.c **** 				dj.fs->cdir = dj.sclust;	/* Start directory itself */
 7857              		.loc 1 2799 0
 7858 0052 BB69     		ldr	r3, [r7, #24]
 7859 0054 3A6A     		ldr	r2, [r7, #32]
 7860 0056 9A61     		str	r2, [r3, #24]
 7861 0058 13E0     		b	.L486
 7862              	.L487:
2800:../fatfs/ff.c **** 			} else {
2801:../fatfs/ff.c **** 				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
 7863              		.loc 1 2801 0
 7864 005a FB6A     		ldr	r3, [r7, #44]
 7865 005c 0B33     		adds	r3, r3, #11
 7866 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7867 0060 03F01003 		and	r3, r3, #16
 7868 0064 002B     		cmp	r3, #0
 7869 0066 09D0     		beq	.L488
2802:../fatfs/ff.c **** 					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
 7870              		.loc 1 2802 0
 7871 0068 BC69     		ldr	r4, [r7, #24]
 7872 006a BA69     		ldr	r2, [r7, #24]
 7873 006c FB6A     		ldr	r3, [r7, #44]
 7874 006e 1046     		mov	r0, r2
 7875 0070 1946     		mov	r1, r3
 7876 0072 FFF7FEFF 		bl	ld_clust
 7877 0076 0346     		mov	r3, r0
 7878 0078 A361     		str	r3, [r4, #24]
 7879 007a 02E0     		b	.L486
 7880              	.L488:
2803:../fatfs/ff.c **** 				else
2804:../fatfs/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
 7881              		.loc 1 2804 0
 7882 007c 0523     		movs	r3, #5
 7883 007e 87F83F30 		strb	r3, [r7, #63]
 7884              	.L486:
2805:../fatfs/ff.c **** 			}
2806:../fatfs/ff.c **** 		}
2807:../fatfs/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 7885              		.loc 1 2807 0
 7886 0082 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 7887 0086 042B     		cmp	r3, #4
 7888 0088 02D1     		bne	.L485
 7889              		.loc 1 2807 0 is_stmt 0 discriminator 1
 7890 008a 0523     		movs	r3, #5
 7891 008c 87F83F30 		strb	r3, [r7, #63]
 7892              	.L485:
2808:../fatfs/ff.c **** 	}
2809:../fatfs/ff.c **** 
2810:../fatfs/ff.c **** 	LEAVE_FF(dj.fatfs, res);
 7893              		.loc 1 2810 0 is_stmt 1
 7894 0090 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
2811:../fatfs/ff.c **** }
 7895              		.loc 1 2811 0
 7896 0094 1846     		mov	r0, r3
 7897 0096 4437     		adds	r7, r7, #68
 7898              		.cfi_def_cfa_offset 12
 7899 0098 BD46     		mov	sp, r7
 7900              		.cfi_def_cfa_register 13
 7901              		@ sp needed
 7902 009a 90BD     		pop	{r4, r7, pc}
 7903              	.L491:
 7904              		.align	2
 7905              	.L490:
 7906 009c 00000000 		.word	LfnBuf
 7907              		.cfi_endproc
 7908              	.LFE40:
 7910              		.section	.text.f_lseek,"ax",%progbits
 7911              		.align	2
 7912              		.global	f_lseek
 7913              		.thumb
 7914              		.thumb_func
 7916              	f_lseek:
 7917              	.LFB41:
2812:../fatfs/ff.c **** 
2813:../fatfs/ff.c **** 
2814:../fatfs/ff.c **** #if _FS_RPATH >= 2
2815:../fatfs/ff.c **** FRESULT f_getcwd (
2816:../fatfs/ff.c **** 	TCHAR *buff,	/* Pointer to the directory path */
2817:../fatfs/ff.c **** 	UINT len		/* Size of path */
2818:../fatfs/ff.c **** )
2819:../fatfs/ff.c **** {
2820:../fatfs/ff.c **** 	FRESULT res;
2821:../fatfs/ff.c **** 	DIR dj;
2822:../fatfs/ff.c **** 	UINT i, n;
2823:../fatfs/ff.c **** 	DWORD ccl;
2824:../fatfs/ff.c **** 	TCHAR *tp;
2825:../fatfs/ff.c **** 	FILINFO fno;
2826:../fatfs/ff.c **** 	DEF_NAMEBUF;
2827:../fatfs/ff.c **** 
2828:../fatfs/ff.c **** 
2829:../fatfs/ff.c **** 	*buff = 0;
2830:../fatfs/ff.c **** 	res = chk_mounted((const TCHAR**)&buff, &dj.fatfs, 0);	/* Get current volume */
2831:../fatfs/ff.c **** 	if (res == FR_OK) {
2832:../fatfs/ff.c **** 		INIT_BUF(dj);
2833:../fatfs/ff.c **** 		i = len;			/* Bottom of buffer (dir stack base) */
2834:../fatfs/ff.c **** 		dj.sclust = dj.fatfs->cdir;			/* Start to follow upper dir from current dir */
2835:../fatfs/ff.c **** 		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
2836:../fatfs/ff.c **** 			res = dir_sdi(&dj, 1);			/* Get parent dir */
2837:../fatfs/ff.c **** 			if (res != FR_OK) break;
2838:../fatfs/ff.c **** 			res = dir_read(&dj, 0);
2839:../fatfs/ff.c **** 			if (res != FR_OK) break;
2840:../fatfs/ff.c **** 			dj.sclust = ld_clust(dj.fatfs, dj.dir);	/* Goto parent dir */
2841:../fatfs/ff.c **** 			res = dir_sdi(&dj, 0);
2842:../fatfs/ff.c **** 			if (res != FR_OK) break;
2843:../fatfs/ff.c **** 			do {							/* Find the entry links to the child dir */
2844:../fatfs/ff.c **** 				res = dir_read(&dj, 0);
2845:../fatfs/ff.c **** 				if (res != FR_OK) break;
2846:../fatfs/ff.c **** 				if (ccl == ld_clust(dj.fatfs, dj.dir)) break;	/* Found the entry */
2847:../fatfs/ff.c **** 				res = dir_next(&dj, 0);	
2848:../fatfs/ff.c **** 			} while (res == FR_OK);
2849:../fatfs/ff.c **** 			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
2850:../fatfs/ff.c **** 			if (res != FR_OK) break;
2851:../fatfs/ff.c **** #if _USE_LFN
2852:../fatfs/ff.c **** 			fno.lfname = buff;
2853:../fatfs/ff.c **** 			fno.lfsize = i;
2854:../fatfs/ff.c **** #endif
2855:../fatfs/ff.c **** 			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
2856:../fatfs/ff.c **** 			tp = fno.fname;
2857:../fatfs/ff.c **** 			if (_USE_LFN && *buff) tp = buff;
2858:../fatfs/ff.c **** 			for (n = 0; tp[n]; n++) ;
2859:../fatfs/ff.c **** 			if (i < n + 3) {
2860:../fatfs/ff.c **** 				res = FR_NOT_ENOUGH_CORE; break;
2861:../fatfs/ff.c **** 			}
2862:../fatfs/ff.c **** 			while (n) buff[--i] = tp[--n];
2863:../fatfs/ff.c **** 			buff[--i] = '/';
2864:../fatfs/ff.c **** 		}
2865:../fatfs/ff.c **** 		tp = buff;
2866:../fatfs/ff.c **** 		if (res == FR_OK) {
2867:../fatfs/ff.c **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
2868:../fatfs/ff.c **** 			*tp++ = ':';
2869:../fatfs/ff.c **** 			if (i == len) {					/* Root-dir */
2870:../fatfs/ff.c **** 				*tp++ = '/';
2871:../fatfs/ff.c **** 			} else {						/* Sub-dir */
2872:../fatfs/ff.c **** 				do		/* Add stacked path str */
2873:../fatfs/ff.c **** 					*tp++ = buff[i++];
2874:../fatfs/ff.c **** 				while (i < len);
2875:../fatfs/ff.c **** 			}
2876:../fatfs/ff.c **** 		}
2877:../fatfs/ff.c **** 		*tp = 0;
2878:../fatfs/ff.c **** 		FREE_BUF();
2879:../fatfs/ff.c **** 	}
2880:../fatfs/ff.c **** 
2881:../fatfs/ff.c **** 	LEAVE_FF(dj.fatfs, res);
2882:../fatfs/ff.c **** }
2883:../fatfs/ff.c **** #endif /* _FS_RPATH >= 2 */
2884:../fatfs/ff.c **** #endif /* _FS_RPATH >= 1 */
2885:../fatfs/ff.c **** 
2886:../fatfs/ff.c **** 
2887:../fatfs/ff.c **** 
2888:../fatfs/ff.c **** #if _FS_MINIMIZE <= 2
2889:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2890:../fatfs/ff.c **** /* Seek File R/W Pointer                                                 */
2891:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2892:../fatfs/ff.c **** 
2893:../fatfs/ff.c **** FRESULT f_lseek (
2894:../fatfs/ff.c **** 	FIL *fp,		/* Pointer to the file object */
2895:../fatfs/ff.c **** 	DWORD ofs		/* File pointer from top of file */
2896:../fatfs/ff.c **** )
2897:../fatfs/ff.c **** {
 7918              		.loc 1 2897 0
 7919              		.cfi_startproc
 7920              		@ args = 0, pretend = 0, frame = 32
 7921              		@ frame_needed = 1, uses_anonymous_args = 0
 7922 0000 80B5     		push	{r7, lr}
 7923              		.cfi_def_cfa_offset 8
 7924              		.cfi_offset 7, -8
 7925              		.cfi_offset 14, -4
 7926 0002 88B0     		sub	sp, sp, #32
 7927              		.cfi_def_cfa_offset 40
 7928 0004 00AF     		add	r7, sp, #0
 7929              		.cfi_def_cfa_register 7
 7930 0006 7860     		str	r0, [r7, #4]
 7931 0008 3960     		str	r1, [r7]
2898:../fatfs/ff.c **** 	FRESULT res;
2899:../fatfs/ff.c **** 
2900:../fatfs/ff.c **** 
2901:../fatfs/ff.c **** 	res = validate(fp);					/* Check validity of the object */
 7932              		.loc 1 2901 0
 7933 000a 7868     		ldr	r0, [r7, #4]
 7934 000c FFF7FEFF 		bl	validate
 7935 0010 0346     		mov	r3, r0
 7936 0012 FB75     		strb	r3, [r7, #23]
2902:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fatfs, res);
 7937              		.loc 1 2902 0
 7938 0014 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7939 0016 002B     		cmp	r3, #0
 7940 0018 01D0     		beq	.L493
 7941              		.loc 1 2902 0 is_stmt 0 discriminator 1
 7942 001a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7943 001c 40E1     		b	.L494
 7944              	.L493:
2903:../fatfs/ff.c **** 	if (fp->flag & FA__ERROR)			/* Check abort flag */
 7945              		.loc 1 2903 0 is_stmt 1
 7946 001e 7B68     		ldr	r3, [r7, #4]
 7947 0020 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7948 0022 DBB2     		uxtb	r3, r3
 7949 0024 5BB2     		sxtb	r3, r3
 7950 0026 002B     		cmp	r3, #0
 7951 0028 01DA     		bge	.L495
2904:../fatfs/ff.c **** 		LEAVE_FF(fp->fatfs, FR_INT_ERR);
 7952              		.loc 1 2904 0
 7953 002a 0223     		movs	r3, #2
 7954 002c 38E1     		b	.L494
 7955              	.L495:
 7956              	.LBB5:
2905:../fatfs/ff.c **** 
2906:../fatfs/ff.c **** #if _USE_FASTSEEK
2907:../fatfs/ff.c **** 	if (fp->cltbl) {	/* Fast seek */
2908:../fatfs/ff.c **** 		DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
2909:../fatfs/ff.c **** 
2910:../fatfs/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
2911:../fatfs/ff.c **** 			tbl = fp->cltbl;
2912:../fatfs/ff.c **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
2913:../fatfs/ff.c **** 			cl = fp->sclust;			/* Top of the chain */
2914:../fatfs/ff.c **** 			if (cl) {
2915:../fatfs/ff.c **** 				do {
2916:../fatfs/ff.c **** 					/* Get a fragment */
2917:../fatfs/ff.c **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
2918:../fatfs/ff.c **** 					do {
2919:../fatfs/ff.c **** 						pcl = cl; ncl++;
2920:../fatfs/ff.c **** 						cl = get_fat(fp->fatfs, cl);
2921:../fatfs/ff.c **** 						if (cl <= 1) ABORT(fp->fatfs, FR_INT_ERR);
2922:../fatfs/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fatfs, FR_DISK_ERR);
2923:../fatfs/ff.c **** 					} while (cl == pcl + 1);
2924:../fatfs/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
2925:../fatfs/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
2926:../fatfs/ff.c **** 					}
2927:../fatfs/ff.c **** 				} while (cl < fp->fatfs->n_fatent);	/* Repeat until end of chain */
2928:../fatfs/ff.c **** 			}
2929:../fatfs/ff.c **** 			*fp->cltbl = ulen;	/* Number of items used */
2930:../fatfs/ff.c **** 			if (ulen <= tlen)
2931:../fatfs/ff.c **** 				*tbl = 0;		/* Terminate table */
2932:../fatfs/ff.c **** 			else
2933:../fatfs/ff.c **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
2934:../fatfs/ff.c **** 
2935:../fatfs/ff.c **** 		} else {						/* Fast seek */
2936:../fatfs/ff.c **** 			if (ofs > fp->fsize)		/* Clip offset at the file size */
2937:../fatfs/ff.c **** 				ofs = fp->fsize;
2938:../fatfs/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
2939:../fatfs/ff.c **** 			if (ofs) {
2940:../fatfs/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
2941:../fatfs/ff.c **** 				dsc = clust2sect(fp->fatfs, fp->clust);
2942:../fatfs/ff.c **** 				if (!dsc) ABORT(fp->fatfs, FR_INT_ERR);
2943:../fatfs/ff.c **** 				dsc += (ofs - 1) / SS(fp->fatfs) & (fp->fatfs->csize - 1);
2944:../fatfs/ff.c **** 				if (fp->fptr % SS(fp->fatfs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
2945:../fatfs/ff.c **** #if !_FS_TINY
2946:../fatfs/ff.c **** #if !_FS_READONLY
2947:../fatfs/ff.c **** 					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
2948:../fatfs/ff.c **** 						if (disk_write(fp->fatfs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2949:../fatfs/ff.c **** 							ABORT(fp->fatfs, FR_DISK_ERR);
2950:../fatfs/ff.c **** 						fp->flag &= ~FA__DIRTY;
2951:../fatfs/ff.c **** 					}
2952:../fatfs/ff.c **** #endif
2953:../fatfs/ff.c **** 					if (disk_read(fp->fatfs->drv, fp->buf, dsc, 1) != RES_OK)	/* Load current sector */
2954:../fatfs/ff.c **** 						ABORT(fp->fatfs, FR_DISK_ERR);
2955:../fatfs/ff.c **** #endif
2956:../fatfs/ff.c **** 					fp->dsect = dsc;
2957:../fatfs/ff.c **** 				}
2958:../fatfs/ff.c **** 			}
2959:../fatfs/ff.c **** 		}
2960:../fatfs/ff.c **** 	} else
2961:../fatfs/ff.c **** #endif
2962:../fatfs/ff.c **** 
2963:../fatfs/ff.c **** 	/* Normal Seek */
2964:../fatfs/ff.c **** 	{
2965:../fatfs/ff.c **** 		DWORD clst, bcs, nsect, ifptr;
2966:../fatfs/ff.c **** 
2967:../fatfs/ff.c **** 		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 7957              		.loc 1 2967 0
 7958 002e 7B68     		ldr	r3, [r7, #4]
 7959 0030 DA68     		ldr	r2, [r3, #12]
 7960 0032 3B68     		ldr	r3, [r7]
 7961 0034 9A42     		cmp	r2, r3
 7962 0036 08D2     		bcs	.L496
2968:../fatfs/ff.c **** #if !_FS_READONLY
2969:../fatfs/ff.c **** 			 && !(fp->flag & FA_WRITE)
 7963              		.loc 1 2969 0
 7964 0038 7B68     		ldr	r3, [r7, #4]
 7965 003a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7966 003c 03F00203 		and	r3, r3, #2
 7967 0040 002B     		cmp	r3, #0
 7968 0042 02D1     		bne	.L496
2970:../fatfs/ff.c **** #endif
2971:../fatfs/ff.c **** 			) ofs = fp->fsize;
 7969              		.loc 1 2971 0
 7970 0044 7B68     		ldr	r3, [r7, #4]
 7971 0046 DB68     		ldr	r3, [r3, #12]
 7972 0048 3B60     		str	r3, [r7]
 7973              	.L496:
2972:../fatfs/ff.c **** 
2973:../fatfs/ff.c **** 		ifptr = fp->fptr;
 7974              		.loc 1 2973 0
 7975 004a 7B68     		ldr	r3, [r7, #4]
 7976 004c 9B68     		ldr	r3, [r3, #8]
 7977 004e 3B61     		str	r3, [r7, #16]
2974:../fatfs/ff.c **** 		fp->fptr = nsect = 0;
 7978              		.loc 1 2974 0
 7979 0050 0023     		movs	r3, #0
 7980 0052 BB61     		str	r3, [r7, #24]
 7981 0054 7B68     		ldr	r3, [r7, #4]
 7982 0056 BA69     		ldr	r2, [r7, #24]
 7983 0058 9A60     		str	r2, [r3, #8]
2975:../fatfs/ff.c **** 		if (ofs) {
 7984              		.loc 1 2975 0
 7985 005a 3B68     		ldr	r3, [r7]
 7986 005c 002B     		cmp	r3, #0
 7987 005e 00F0C180 		beq	.L497
2976:../fatfs/ff.c **** 			bcs = (DWORD)fp->fs->csize * SS(fp->fatfs);	/* Cluster size (byte) */
 7988              		.loc 1 2976 0
 7989 0062 7B68     		ldr	r3, [r7, #4]
 7990 0064 1B68     		ldr	r3, [r3]
 7991 0066 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 7992 0068 5B02     		lsls	r3, r3, #9
 7993 006a FB60     		str	r3, [r7, #12]
2977:../fatfs/ff.c **** 			if (ifptr > 0 &&
 7994              		.loc 1 2977 0
 7995 006c 3B69     		ldr	r3, [r7, #16]
 7996 006e 002B     		cmp	r3, #0
 7997 0070 1BD0     		beq	.L498
2978:../fatfs/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 7998              		.loc 1 2978 0 discriminator 1
 7999 0072 3B68     		ldr	r3, [r7]
 8000 0074 5A1E     		subs	r2, r3, #1
 8001 0076 FB68     		ldr	r3, [r7, #12]
 8002 0078 B2FBF3F2 		udiv	r2, r2, r3
 8003 007c 3B69     		ldr	r3, [r7, #16]
 8004 007e 591E     		subs	r1, r3, #1
 8005 0080 FB68     		ldr	r3, [r7, #12]
 8006 0082 B1FBF3F3 		udiv	r3, r1, r3
2977:../fatfs/ff.c **** 			if (ifptr > 0 &&
 8007              		.loc 1 2977 0 discriminator 1
 8008 0086 9A42     		cmp	r2, r3
 8009 0088 0FD3     		bcc	.L498
2979:../fatfs/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8010              		.loc 1 2979 0
 8011 008a 3B69     		ldr	r3, [r7, #16]
 8012 008c 5A1E     		subs	r2, r3, #1
 8013 008e FB68     		ldr	r3, [r7, #12]
 8014 0090 5B42     		negs	r3, r3
 8015 0092 1A40     		ands	r2, r2, r3
 8016 0094 7B68     		ldr	r3, [r7, #4]
 8017 0096 9A60     		str	r2, [r3, #8]
2980:../fatfs/ff.c **** 				ofs -= fp->fptr;
 8018              		.loc 1 2980 0
 8019 0098 7B68     		ldr	r3, [r7, #4]
 8020 009a 9B68     		ldr	r3, [r3, #8]
 8021 009c 3A68     		ldr	r2, [r7]
 8022 009e D31A     		subs	r3, r2, r3
 8023 00a0 3B60     		str	r3, [r7]
2981:../fatfs/ff.c **** 				clst = fp->clust;
 8024              		.loc 1 2981 0
 8025 00a2 7B68     		ldr	r3, [r7, #4]
 8026 00a4 5B69     		ldr	r3, [r3, #20]
 8027 00a6 FB61     		str	r3, [r7, #28]
 8028 00a8 2BE0     		b	.L499
 8029              	.L498:
2982:../fatfs/ff.c **** 			} else {									/* When seek to back cluster, */
2983:../fatfs/ff.c **** 				clst = fp->sclust;						/* start from the first cluster */
 8030              		.loc 1 2983 0
 8031 00aa 7B68     		ldr	r3, [r7, #4]
 8032 00ac 1B69     		ldr	r3, [r3, #16]
 8033 00ae FB61     		str	r3, [r7, #28]
2984:../fatfs/ff.c **** #if !_FS_READONLY
2985:../fatfs/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8034              		.loc 1 2985 0
 8035 00b0 FB69     		ldr	r3, [r7, #28]
 8036 00b2 002B     		cmp	r3, #0
 8037 00b4 22D1     		bne	.L500
2986:../fatfs/ff.c **** 					clst = create_chain(fp->fs, 0);
 8038              		.loc 1 2986 0
 8039 00b6 7B68     		ldr	r3, [r7, #4]
 8040 00b8 1B68     		ldr	r3, [r3]
 8041 00ba 1846     		mov	r0, r3
 8042 00bc 0021     		movs	r1, #0
 8043 00be FFF7FEFF 		bl	create_chain
 8044 00c2 F861     		str	r0, [r7, #28]
2987:../fatfs/ff.c **** 					if (clst == 1) ABORT(fp->fatfs, FR_INT_ERR);
 8045              		.loc 1 2987 0
 8046 00c4 FB69     		ldr	r3, [r7, #28]
 8047 00c6 012B     		cmp	r3, #1
 8048 00c8 08D1     		bne	.L501
 8049              		.loc 1 2987 0 is_stmt 0 discriminator 1
 8050 00ca 7B68     		ldr	r3, [r7, #4]
 8051 00cc 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 8052 00ce 63F07F03 		orn	r3, r3, #127
 8053 00d2 DAB2     		uxtb	r2, r3
 8054 00d4 7B68     		ldr	r3, [r7, #4]
 8055 00d6 9A71     		strb	r2, [r3, #6]
 8056 00d8 0223     		movs	r3, #2
 8057 00da E1E0     		b	.L494
 8058              	.L501:
2988:../fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fatfs, FR_DISK_ERR);
 8059              		.loc 1 2988 0 is_stmt 1
 8060 00dc FB69     		ldr	r3, [r7, #28]
 8061 00de B3F1FF3F 		cmp	r3, #-1
 8062 00e2 08D1     		bne	.L502
 8063              		.loc 1 2988 0 is_stmt 0 discriminator 1
 8064 00e4 7B68     		ldr	r3, [r7, #4]
 8065 00e6 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 8066 00e8 63F07F03 		orn	r3, r3, #127
 8067 00ec DAB2     		uxtb	r2, r3
 8068 00ee 7B68     		ldr	r3, [r7, #4]
 8069 00f0 9A71     		strb	r2, [r3, #6]
 8070 00f2 0123     		movs	r3, #1
 8071 00f4 D4E0     		b	.L494
 8072              	.L502:
2989:../fatfs/ff.c **** 					fp->sclust = clst;
 8073              		.loc 1 2989 0 is_stmt 1
 8074 00f6 7B68     		ldr	r3, [r7, #4]
 8075 00f8 FA69     		ldr	r2, [r7, #28]
 8076 00fa 1A61     		str	r2, [r3, #16]
 8077              	.L500:
2990:../fatfs/ff.c **** 				}
2991:../fatfs/ff.c **** #endif
2992:../fatfs/ff.c **** 				fp->clust = clst;
 8078              		.loc 1 2992 0
 8079 00fc 7B68     		ldr	r3, [r7, #4]
 8080 00fe FA69     		ldr	r2, [r7, #28]
 8081 0100 5A61     		str	r2, [r3, #20]
 8082              	.L499:
2993:../fatfs/ff.c **** 			}
2994:../fatfs/ff.c **** 			if (clst != 0) {
 8083              		.loc 1 2994 0
 8084 0102 FB69     		ldr	r3, [r7, #28]
 8085 0104 002B     		cmp	r3, #0
 8086 0106 6DD0     		beq	.L497
2995:../fatfs/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 8087              		.loc 1 2995 0
 8088 0108 45E0     		b	.L503
 8089              	.L510:
2996:../fatfs/ff.c **** #if !_FS_READONLY
2997:../fatfs/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8090              		.loc 1 2997 0
 8091 010a 7B68     		ldr	r3, [r7, #4]
 8092 010c 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 8093 010e 03F00203 		and	r3, r3, #2
 8094 0112 002B     		cmp	r3, #0
 8095 0114 0CD0     		beq	.L504
2998:../fatfs/ff.c **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8096              		.loc 1 2998 0
 8097 0116 7B68     		ldr	r3, [r7, #4]
 8098 0118 1B68     		ldr	r3, [r3]
 8099 011a 1846     		mov	r0, r3
 8100 011c F969     		ldr	r1, [r7, #28]
 8101 011e FFF7FEFF 		bl	create_chain
 8102 0122 F861     		str	r0, [r7, #28]
2999:../fatfs/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
 8103              		.loc 1 2999 0
 8104 0124 FB69     		ldr	r3, [r7, #28]
 8105 0126 002B     		cmp	r3, #0
 8106 0128 09D1     		bne	.L505
3000:../fatfs/ff.c **** 							ofs = bcs; break;
 8107              		.loc 1 3000 0
 8108 012a FB68     		ldr	r3, [r7, #12]
 8109 012c 3B60     		str	r3, [r7]
 8110 012e 36E0     		b	.L506
 8111              	.L504:
3001:../fatfs/ff.c **** 						}
3002:../fatfs/ff.c **** 					} else
3003:../fatfs/ff.c **** #endif
3004:../fatfs/ff.c **** 						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8112              		.loc 1 3004 0
 8113 0130 7B68     		ldr	r3, [r7, #4]
 8114 0132 1B68     		ldr	r3, [r3]
 8115 0134 1846     		mov	r0, r3
 8116 0136 F969     		ldr	r1, [r7, #28]
 8117 0138 FFF7FEFF 		bl	get_fat
 8118 013c F861     		str	r0, [r7, #28]
 8119              	.L505:
3005:../fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fatfs, FR_DISK_ERR);
 8120              		.loc 1 3005 0
 8121 013e FB69     		ldr	r3, [r7, #28]
 8122 0140 B3F1FF3F 		cmp	r3, #-1
 8123 0144 08D1     		bne	.L507
 8124              		.loc 1 3005 0 is_stmt 0 discriminator 1
 8125 0146 7B68     		ldr	r3, [r7, #4]
 8126 0148 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 8127 014a 63F07F03 		orn	r3, r3, #127
 8128 014e DAB2     		uxtb	r2, r3
 8129 0150 7B68     		ldr	r3, [r7, #4]
 8130 0152 9A71     		strb	r2, [r3, #6]
 8131 0154 0123     		movs	r3, #1
 8132 0156 A3E0     		b	.L494
 8133              	.L507:
3006:../fatfs/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fatfs, FR_INT_ERR);
 8134              		.loc 1 3006 0 is_stmt 1
 8135 0158 FB69     		ldr	r3, [r7, #28]
 8136 015a 012B     		cmp	r3, #1
 8137 015c 05D9     		bls	.L508
 8138              		.loc 1 3006 0 is_stmt 0 discriminator 2
 8139 015e 7B68     		ldr	r3, [r7, #4]
 8140 0160 1B68     		ldr	r3, [r3]
 8141 0162 DA69     		ldr	r2, [r3, #28]
 8142 0164 FB69     		ldr	r3, [r7, #28]
 8143 0166 9A42     		cmp	r2, r3
 8144 0168 08D8     		bhi	.L509
 8145              	.L508:
 8146              		.loc 1 3006 0 discriminator 3
 8147 016a 7B68     		ldr	r3, [r7, #4]
 8148 016c 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 8149 016e 63F07F03 		orn	r3, r3, #127
 8150 0172 DAB2     		uxtb	r2, r3
 8151 0174 7B68     		ldr	r3, [r7, #4]
 8152 0176 9A71     		strb	r2, [r3, #6]
 8153 0178 0223     		movs	r3, #2
 8154 017a 91E0     		b	.L494
 8155              	.L509:
3007:../fatfs/ff.c **** 					fp->clust = clst;
 8156              		.loc 1 3007 0 is_stmt 1
 8157 017c 7B68     		ldr	r3, [r7, #4]
 8158 017e FA69     		ldr	r2, [r7, #28]
 8159 0180 5A61     		str	r2, [r3, #20]
3008:../fatfs/ff.c **** 					fp->fptr += bcs;
 8160              		.loc 1 3008 0
 8161 0182 7B68     		ldr	r3, [r7, #4]
 8162 0184 9A68     		ldr	r2, [r3, #8]
 8163 0186 FB68     		ldr	r3, [r7, #12]
 8164 0188 1A44     		add	r2, r2, r3
 8165 018a 7B68     		ldr	r3, [r7, #4]
 8166 018c 9A60     		str	r2, [r3, #8]
3009:../fatfs/ff.c **** 					ofs -= bcs;
 8167              		.loc 1 3009 0
 8168 018e 3A68     		ldr	r2, [r7]
 8169 0190 FB68     		ldr	r3, [r7, #12]
 8170 0192 D31A     		subs	r3, r2, r3
 8171 0194 3B60     		str	r3, [r7]
 8172              	.L503:
2995:../fatfs/ff.c **** #if !_FS_READONLY
 8173              		.loc 1 2995 0
 8174 0196 3A68     		ldr	r2, [r7]
 8175 0198 FB68     		ldr	r3, [r7, #12]
 8176 019a 9A42     		cmp	r2, r3
 8177 019c B5D8     		bhi	.L510
 8178              	.L506:
3010:../fatfs/ff.c **** 				}
3011:../fatfs/ff.c **** 				fp->fptr += ofs;
 8179              		.loc 1 3011 0
 8180 019e 7B68     		ldr	r3, [r7, #4]
 8181 01a0 9A68     		ldr	r2, [r3, #8]
 8182 01a2 3B68     		ldr	r3, [r7]
 8183 01a4 1A44     		add	r2, r2, r3
 8184 01a6 7B68     		ldr	r3, [r7, #4]
 8185 01a8 9A60     		str	r2, [r3, #8]
3012:../fatfs/ff.c **** 				if (ofs % SS(fp->fatfs)) {
 8186              		.loc 1 3012 0
 8187 01aa 3B68     		ldr	r3, [r7]
 8188 01ac C3F30803 		ubfx	r3, r3, #0, #9
 8189 01b0 002B     		cmp	r3, #0
 8190 01b2 17D0     		beq	.L497
3013:../fatfs/ff.c **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8191              		.loc 1 3013 0
 8192 01b4 7B68     		ldr	r3, [r7, #4]
 8193 01b6 1B68     		ldr	r3, [r3]
 8194 01b8 1846     		mov	r0, r3
 8195 01ba F969     		ldr	r1, [r7, #28]
 8196 01bc FFF7FEFF 		bl	clust2sect
 8197 01c0 B861     		str	r0, [r7, #24]
3014:../fatfs/ff.c **** 					if (!nsect) ABORT(fp->fatfs, FR_INT_ERR);
 8198              		.loc 1 3014 0
 8199 01c2 BB69     		ldr	r3, [r7, #24]
 8200 01c4 002B     		cmp	r3, #0
 8201 01c6 08D1     		bne	.L511
 8202              		.loc 1 3014 0 is_stmt 0 discriminator 1
 8203 01c8 7B68     		ldr	r3, [r7, #4]
 8204 01ca 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 8205 01cc 63F07F03 		orn	r3, r3, #127
 8206 01d0 DAB2     		uxtb	r2, r3
 8207 01d2 7B68     		ldr	r3, [r7, #4]
 8208 01d4 9A71     		strb	r2, [r3, #6]
 8209 01d6 0223     		movs	r3, #2
 8210 01d8 62E0     		b	.L494
 8211              	.L511:
3015:../fatfs/ff.c **** 					nsect += ofs / SS(fp->fatfs);
 8212              		.loc 1 3015 0 is_stmt 1
 8213 01da 3B68     		ldr	r3, [r7]
 8214 01dc 5B0A     		lsrs	r3, r3, #9
 8215 01de BA69     		ldr	r2, [r7, #24]
 8216 01e0 1344     		add	r3, r3, r2
 8217 01e2 BB61     		str	r3, [r7, #24]
 8218              	.L497:
3016:../fatfs/ff.c **** 				}
3017:../fatfs/ff.c **** 			}
3018:../fatfs/ff.c **** 		}
3019:../fatfs/ff.c **** 		if (fp->fptr % SS(fp->fatfs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8219              		.loc 1 3019 0
 8220 01e4 7B68     		ldr	r3, [r7, #4]
 8221 01e6 9B68     		ldr	r3, [r3, #8]
 8222 01e8 C3F30803 		ubfx	r3, r3, #0, #9
 8223 01ec 002B     		cmp	r3, #0
 8224 01ee 45D0     		beq	.L512
 8225              		.loc 1 3019 0 is_stmt 0 discriminator 1
 8226 01f0 7B68     		ldr	r3, [r7, #4]
 8227 01f2 9A69     		ldr	r2, [r3, #24]
 8228 01f4 BB69     		ldr	r3, [r7, #24]
 8229 01f6 9A42     		cmp	r2, r3
 8230 01f8 40D0     		beq	.L512
3020:../fatfs/ff.c **** #if !_FS_TINY
3021:../fatfs/ff.c **** #if !_FS_READONLY
3022:../fatfs/ff.c **** 			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8231              		.loc 1 3022 0 is_stmt 1
 8232 01fa 7B68     		ldr	r3, [r7, #4]
 8233 01fc 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 8234 01fe 03F04003 		and	r3, r3, #64
 8235 0202 002B     		cmp	r3, #0
 8236 0204 20D0     		beq	.L513
3023:../fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8237              		.loc 1 3023 0
 8238 0206 7B68     		ldr	r3, [r7, #4]
 8239 0208 1B68     		ldr	r3, [r3]
 8240 020a 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 8241 020c 7B68     		ldr	r3, [r7, #4]
 8242 020e 03F12402 		add	r2, r3, #36
 8243 0212 7B68     		ldr	r3, [r7, #4]
 8244 0214 9B69     		ldr	r3, [r3, #24]
 8245 0216 0846     		mov	r0, r1
 8246 0218 1146     		mov	r1, r2
 8247 021a 1A46     		mov	r2, r3
 8248 021c 0123     		movs	r3, #1
 8249 021e FFF7FEFF 		bl	disk_write
 8250 0222 0346     		mov	r3, r0
 8251 0224 002B     		cmp	r3, #0
 8252 0226 08D0     		beq	.L514
3024:../fatfs/ff.c **** 					ABORT(fp->fatfs, FR_DISK_ERR);
 8253              		.loc 1 3024 0
 8254 0228 7B68     		ldr	r3, [r7, #4]
 8255 022a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 8256 022c 63F07F03 		orn	r3, r3, #127
 8257 0230 DAB2     		uxtb	r2, r3
 8258 0232 7B68     		ldr	r3, [r7, #4]
 8259 0234 9A71     		strb	r2, [r3, #6]
 8260 0236 0123     		movs	r3, #1
 8261 0238 32E0     		b	.L494
 8262              	.L514:
3025:../fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
 8263              		.loc 1 3025 0
 8264 023a 7B68     		ldr	r3, [r7, #4]
 8265 023c 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 8266 023e 23F04003 		bic	r3, r3, #64
 8267 0242 DAB2     		uxtb	r2, r3
 8268 0244 7B68     		ldr	r3, [r7, #4]
 8269 0246 9A71     		strb	r2, [r3, #6]
 8270              	.L513:
3026:../fatfs/ff.c **** 			}
3027:../fatfs/ff.c **** #endif
3028:../fatfs/ff.c **** 			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
 8271              		.loc 1 3028 0
 8272 0248 7B68     		ldr	r3, [r7, #4]
 8273 024a 1B68     		ldr	r3, [r3]
 8274 024c 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 8275 024e 7B68     		ldr	r3, [r7, #4]
 8276 0250 2433     		adds	r3, r3, #36
 8277 0252 1046     		mov	r0, r2
 8278 0254 1946     		mov	r1, r3
 8279 0256 BA69     		ldr	r2, [r7, #24]
 8280 0258 0123     		movs	r3, #1
 8281 025a FFF7FEFF 		bl	disk_read
 8282 025e 0346     		mov	r3, r0
 8283 0260 002B     		cmp	r3, #0
 8284 0262 08D0     		beq	.L515
3029:../fatfs/ff.c **** 				ABORT(fp->fatfs, FR_DISK_ERR);
 8285              		.loc 1 3029 0
 8286 0264 7B68     		ldr	r3, [r7, #4]
 8287 0266 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 8288 0268 63F07F03 		orn	r3, r3, #127
 8289 026c DAB2     		uxtb	r2, r3
 8290 026e 7B68     		ldr	r3, [r7, #4]
 8291 0270 9A71     		strb	r2, [r3, #6]
 8292 0272 0123     		movs	r3, #1
 8293 0274 14E0     		b	.L494
 8294              	.L515:
3030:../fatfs/ff.c **** #endif
3031:../fatfs/ff.c **** 			fp->dsect = nsect;
 8295              		.loc 1 3031 0
 8296 0276 7B68     		ldr	r3, [r7, #4]
 8297 0278 BA69     		ldr	r2, [r7, #24]
 8298 027a 9A61     		str	r2, [r3, #24]
 8299              	.L512:
3032:../fatfs/ff.c **** 		}
3033:../fatfs/ff.c **** #if !_FS_READONLY
3034:../fatfs/ff.c **** 		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8300              		.loc 1 3034 0
 8301 027c 7B68     		ldr	r3, [r7, #4]
 8302 027e 9A68     		ldr	r2, [r3, #8]
 8303 0280 7B68     		ldr	r3, [r7, #4]
 8304 0282 DB68     		ldr	r3, [r3, #12]
 8305 0284 9A42     		cmp	r2, r3
 8306 0286 0AD9     		bls	.L516
3035:../fatfs/ff.c **** 			fp->fsize = fp->fptr;
 8307              		.loc 1 3035 0
 8308 0288 7B68     		ldr	r3, [r7, #4]
 8309 028a 9A68     		ldr	r2, [r3, #8]
 8310 028c 7B68     		ldr	r3, [r7, #4]
 8311 028e DA60     		str	r2, [r3, #12]
3036:../fatfs/ff.c **** 			fp->flag |= FA__WRITTEN;
 8312              		.loc 1 3036 0
 8313 0290 7B68     		ldr	r3, [r7, #4]
 8314 0292 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 8315 0294 43F02003 		orr	r3, r3, #32
 8316 0298 DAB2     		uxtb	r2, r3
 8317 029a 7B68     		ldr	r3, [r7, #4]
 8318 029c 9A71     		strb	r2, [r3, #6]
 8319              	.L516:
 8320              	.LBE5:
3037:../fatfs/ff.c **** 		}
3038:../fatfs/ff.c **** #endif
3039:../fatfs/ff.c **** 	}
3040:../fatfs/ff.c **** 
3041:../fatfs/ff.c **** 	LEAVE_FF(fp->fatfs, res);
 8321              		.loc 1 3041 0
 8322 029e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8323              	.L494:
3042:../fatfs/ff.c **** }
 8324              		.loc 1 3042 0
 8325 02a0 1846     		mov	r0, r3
 8326 02a2 2037     		adds	r7, r7, #32
 8327              		.cfi_def_cfa_offset 8
 8328 02a4 BD46     		mov	sp, r7
 8329              		.cfi_def_cfa_register 13
 8330              		@ sp needed
 8331 02a6 80BD     		pop	{r7, pc}
 8332              		.cfi_endproc
 8333              	.LFE41:
 8335              		.section	.text.f_opendir,"ax",%progbits
 8336              		.align	2
 8337              		.global	f_opendir
 8338              		.thumb
 8339              		.thumb_func
 8341              	f_opendir:
 8342              	.LFB42:
3043:../fatfs/ff.c **** 
3044:../fatfs/ff.c **** 
3045:../fatfs/ff.c **** 
3046:../fatfs/ff.c **** #if _FS_MINIMIZE <= 1
3047:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3048:../fatfs/ff.c **** /* Create a Directory Object                                             */
3049:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3050:../fatfs/ff.c **** 
3051:../fatfs/ff.c **** FRESULT f_opendir (
3052:../fatfs/ff.c **** 	DIR *dj,			/* Pointer to directory object to create */
3053:../fatfs/ff.c **** 	const TCHAR *path	/* Pointer to the directory path */
3054:../fatfs/ff.c **** )
3055:../fatfs/ff.c **** {
 8343              		.loc 1 3055 0
 8344              		.cfi_startproc
 8345              		@ args = 0, pretend = 0, frame = 32
 8346              		@ frame_needed = 1, uses_anonymous_args = 0
 8347 0000 80B5     		push	{r7, lr}
 8348              		.cfi_def_cfa_offset 8
 8349              		.cfi_offset 7, -8
 8350              		.cfi_offset 14, -4
 8351 0002 88B0     		sub	sp, sp, #32
 8352              		.cfi_def_cfa_offset 40
 8353 0004 00AF     		add	r7, sp, #0
 8354              		.cfi_def_cfa_register 7
 8355 0006 7860     		str	r0, [r7, #4]
 8356 0008 3960     		str	r1, [r7]
3056:../fatfs/ff.c **** 	FRESULT res;
3057:../fatfs/ff.c **** 	FATFS *fs;
3058:../fatfs/ff.c **** 	DEF_NAMEBUF;
3059:../fatfs/ff.c **** 
3060:../fatfs/ff.c **** 
3061:../fatfs/ff.c **** 	if (!dj) return FR_INVALID_OBJECT;
 8357              		.loc 1 3061 0
 8358 000a 7B68     		ldr	r3, [r7, #4]
 8359 000c 002B     		cmp	r3, #0
 8360 000e 01D1     		bne	.L518
 8361              		.loc 1 3061 0 is_stmt 0 discriminator 1
 8362 0010 0923     		movs	r3, #9
 8363 0012 54E0     		b	.L527
 8364              	.L518:
3062:../fatfs/ff.c **** 
3063:../fatfs/ff.c **** 	res = chk_mounted(&path, &dj->fs, 0);
 8365              		.loc 1 3063 0 is_stmt 1
 8366 0014 7B68     		ldr	r3, [r7, #4]
 8367 0016 3A46     		mov	r2, r7
 8368 0018 1046     		mov	r0, r2
 8369 001a 1946     		mov	r1, r3
 8370 001c 0022     		movs	r2, #0
 8371 001e FFF7FEFF 		bl	chk_mounted
 8372 0022 0346     		mov	r3, r0
 8373 0024 FB77     		strb	r3, [r7, #31]
3064:../fatfs/ff.c **** 	fs = dj->fs;
 8374              		.loc 1 3064 0
 8375 0026 7B68     		ldr	r3, [r7, #4]
 8376 0028 1B68     		ldr	r3, [r3]
 8377 002a BB61     		str	r3, [r7, #24]
3065:../fatfs/ff.c **** 	if (res == FR_OK) {
 8378              		.loc 1 3065 0
 8379 002c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 8380 002e 002B     		cmp	r3, #0
 8381 0030 41D1     		bne	.L520
3066:../fatfs/ff.c **** 		INIT_BUF(*dj);
 8382              		.loc 1 3066 0
 8383 0032 7B68     		ldr	r3, [r7, #4]
 8384 0034 07F10C02 		add	r2, r7, #12
 8385 0038 9A61     		str	r2, [r3, #24]
 8386 003a 7B68     		ldr	r3, [r7, #4]
 8387 003c 224A     		ldr	r2, .L528
 8388 003e DA61     		str	r2, [r3, #28]
3067:../fatfs/ff.c **** 		res = follow_path(dj, path);			/* Follow the path to the directory */
 8389              		.loc 1 3067 0
 8390 0040 3B68     		ldr	r3, [r7]
 8391 0042 7868     		ldr	r0, [r7, #4]
 8392 0044 1946     		mov	r1, r3
 8393 0046 FFF7FEFF 		bl	follow_path
 8394 004a 0346     		mov	r3, r0
 8395 004c FB77     		strb	r3, [r7, #31]
3068:../fatfs/ff.c **** 		FREE_BUF();
3069:../fatfs/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
 8396              		.loc 1 3069 0
 8397 004e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 8398 0050 002B     		cmp	r3, #0
 8399 0052 24D1     		bne	.L521
3070:../fatfs/ff.c **** 			if (dj->dir) {						/* It is not the root dir */
 8400              		.loc 1 3070 0
 8401 0054 7B68     		ldr	r3, [r7, #4]
 8402 0056 5B69     		ldr	r3, [r3, #20]
 8403 0058 002B     		cmp	r3, #0
 8404 005a 13D0     		beq	.L522
3071:../fatfs/ff.c **** 				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
 8405              		.loc 1 3071 0
 8406 005c 7B68     		ldr	r3, [r7, #4]
 8407 005e 5B69     		ldr	r3, [r3, #20]
 8408 0060 0B33     		adds	r3, r3, #11
 8409 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8410 0064 03F01003 		and	r3, r3, #16
 8411 0068 002B     		cmp	r3, #0
 8412 006a 09D0     		beq	.L523
3072:../fatfs/ff.c **** 					dj->sclust = ld_clust(fs, dj->dir);
 8413              		.loc 1 3072 0
 8414 006c 7B68     		ldr	r3, [r7, #4]
 8415 006e 5B69     		ldr	r3, [r3, #20]
 8416 0070 B869     		ldr	r0, [r7, #24]
 8417 0072 1946     		mov	r1, r3
 8418 0074 FFF7FEFF 		bl	ld_clust
 8419 0078 0246     		mov	r2, r0
 8420 007a 7B68     		ldr	r3, [r7, #4]
 8421 007c 9A60     		str	r2, [r3, #8]
 8422 007e 01E0     		b	.L522
 8423              	.L523:
3073:../fatfs/ff.c **** 				} else {						/* The object is not a directory */
3074:../fatfs/ff.c **** 					res = FR_NO_PATH;
 8424              		.loc 1 3074 0
 8425 0080 0523     		movs	r3, #5
 8426 0082 FB77     		strb	r3, [r7, #31]
 8427              	.L522:
3075:../fatfs/ff.c **** 				}
3076:../fatfs/ff.c **** 			}
3077:../fatfs/ff.c **** 			if (res == FR_OK) {
 8428              		.loc 1 3077 0
 8429 0084 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 8430 0086 002B     		cmp	r3, #0
 8431 0088 09D1     		bne	.L521
3078:../fatfs/ff.c **** 				dj->id = fs->id;
 8432              		.loc 1 3078 0
 8433 008a BB69     		ldr	r3, [r7, #24]
 8434 008c DA88     		ldrh	r2, [r3, #6]
 8435 008e 7B68     		ldr	r3, [r7, #4]
 8436 0090 9A80     		strh	r2, [r3, #4]	@ movhi
3079:../fatfs/ff.c **** 				res = dir_sdi(dj, 0);			/* Rewind dir */
 8437              		.loc 1 3079 0
 8438 0092 7868     		ldr	r0, [r7, #4]
 8439 0094 0021     		movs	r1, #0
 8440 0096 FFF7FEFF 		bl	dir_sdi
 8441 009a 0346     		mov	r3, r0
 8442 009c FB77     		strb	r3, [r7, #31]
 8443              	.L521:
3080:../fatfs/ff.c **** 			}
3081:../fatfs/ff.c **** 		}
3082:../fatfs/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8444              		.loc 1 3082 0
 8445 009e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 8446 00a0 042B     		cmp	r3, #4
 8447 00a2 01D1     		bne	.L524
 8448              		.loc 1 3082 0 is_stmt 0 discriminator 1
 8449 00a4 0523     		movs	r3, #5
 8450 00a6 FB77     		strb	r3, [r7, #31]
 8451              	.L524:
3083:../fatfs/ff.c **** 		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
 8452              		.loc 1 3083 0 is_stmt 1
 8453 00a8 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 8454 00aa 002B     		cmp	r3, #0
 8455 00ac 06D0     		beq	.L526
 8456              		.loc 1 3083 0 is_stmt 0 discriminator 1
 8457 00ae 7B68     		ldr	r3, [r7, #4]
 8458 00b0 0022     		movs	r2, #0
 8459 00b2 1A60     		str	r2, [r3]
 8460 00b4 02E0     		b	.L526
 8461              	.L520:
3084:../fatfs/ff.c **** 	} else {
3085:../fatfs/ff.c **** 		dj->fs = 0;
 8462              		.loc 1 3085 0 is_stmt 1
 8463 00b6 7B68     		ldr	r3, [r7, #4]
 8464 00b8 0022     		movs	r2, #0
 8465 00ba 1A60     		str	r2, [r3]
 8466              	.L526:
3086:../fatfs/ff.c **** 	}
3087:../fatfs/ff.c **** 
3088:../fatfs/ff.c **** 	LEAVE_FF(fatfs, res);
 8467              		.loc 1 3088 0
 8468 00bc FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 8469              	.L527:
3089:../fatfs/ff.c **** }
 8470              		.loc 1 3089 0 discriminator 1
 8471 00be 1846     		mov	r0, r3
 8472 00c0 2037     		adds	r7, r7, #32
 8473              		.cfi_def_cfa_offset 8
 8474 00c2 BD46     		mov	sp, r7
 8475              		.cfi_def_cfa_register 13
 8476              		@ sp needed
 8477 00c4 80BD     		pop	{r7, pc}
 8478              	.L529:
 8479 00c6 00BF     		.align	2
 8480              	.L528:
 8481 00c8 00000000 		.word	LfnBuf
 8482              		.cfi_endproc
 8483              	.LFE42:
 8485              		.section	.text.f_readdir,"ax",%progbits
 8486              		.align	2
 8487              		.global	f_readdir
 8488              		.thumb
 8489              		.thumb_func
 8491              	f_readdir:
 8492              	.LFB43:
3090:../fatfs/ff.c **** 
3091:../fatfs/ff.c **** 
3092:../fatfs/ff.c **** 
3093:../fatfs/ff.c **** 
3094:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3095:../fatfs/ff.c **** /* Read Directory Entry in Sequence                                      */
3096:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3097:../fatfs/ff.c **** 
3098:../fatfs/ff.c **** FRESULT f_readdir (
3099:../fatfs/ff.c **** 	DIR *dj,			/* Pointer to the open directory object */
3100:../fatfs/ff.c **** 	FILINFO *fno		/* Pointer to file information to return */
3101:../fatfs/ff.c **** )
3102:../fatfs/ff.c **** {
 8493              		.loc 1 3102 0
 8494              		.cfi_startproc
 8495              		@ args = 0, pretend = 0, frame = 24
 8496              		@ frame_needed = 1, uses_anonymous_args = 0
 8497 0000 80B5     		push	{r7, lr}
 8498              		.cfi_def_cfa_offset 8
 8499              		.cfi_offset 7, -8
 8500              		.cfi_offset 14, -4
 8501 0002 86B0     		sub	sp, sp, #24
 8502              		.cfi_def_cfa_offset 32
 8503 0004 00AF     		add	r7, sp, #0
 8504              		.cfi_def_cfa_register 7
 8505 0006 7860     		str	r0, [r7, #4]
 8506 0008 3960     		str	r1, [r7]
3103:../fatfs/ff.c **** 	FRESULT res;
3104:../fatfs/ff.c **** 	DEF_NAMEBUF;
3105:../fatfs/ff.c **** 
3106:../fatfs/ff.c **** 
3107:../fatfs/ff.c **** 	res = validate(dj);						/* Check validity of the object */
 8507              		.loc 1 3107 0
 8508 000a 7868     		ldr	r0, [r7, #4]
 8509 000c FFF7FEFF 		bl	validate
 8510 0010 0346     		mov	r3, r0
 8511 0012 FB75     		strb	r3, [r7, #23]
3108:../fatfs/ff.c **** 	if (res == FR_OK) {
 8512              		.loc 1 3108 0
 8513 0014 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8514 0016 002B     		cmp	r3, #0
 8515 0018 33D1     		bne	.L531
3109:../fatfs/ff.c **** 		if (!fno) {
 8516              		.loc 1 3109 0
 8517 001a 3B68     		ldr	r3, [r7]
 8518 001c 002B     		cmp	r3, #0
 8519 001e 06D1     		bne	.L532
3110:../fatfs/ff.c **** 			res = dir_sdi(dj, 0);			/* Rewind the directory object */
 8520              		.loc 1 3110 0
 8521 0020 7868     		ldr	r0, [r7, #4]
 8522 0022 0021     		movs	r1, #0
 8523 0024 FFF7FEFF 		bl	dir_sdi
 8524 0028 0346     		mov	r3, r0
 8525 002a FB75     		strb	r3, [r7, #23]
 8526 002c 29E0     		b	.L531
 8527              	.L532:
3111:../fatfs/ff.c **** 		} else {
3112:../fatfs/ff.c **** 			INIT_BUF(*dj);
 8528              		.loc 1 3112 0
 8529 002e 7B68     		ldr	r3, [r7, #4]
 8530 0030 07F10802 		add	r2, r7, #8
 8531 0034 9A61     		str	r2, [r3, #24]
 8532 0036 7B68     		ldr	r3, [r7, #4]
 8533 0038 144A     		ldr	r2, .L535
 8534 003a DA61     		str	r2, [r3, #28]
3113:../fatfs/ff.c **** 			res = dir_read(dj, 0);			/* Read an item */
 8535              		.loc 1 3113 0
 8536 003c 7868     		ldr	r0, [r7, #4]
 8537 003e 0021     		movs	r1, #0
 8538 0040 FFF7FEFF 		bl	dir_read
 8539 0044 0346     		mov	r3, r0
 8540 0046 FB75     		strb	r3, [r7, #23]
3114:../fatfs/ff.c **** 			if (res == FR_NO_FILE) {		/* Reached end of dir */
 8541              		.loc 1 3114 0
 8542 0048 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8543 004a 042B     		cmp	r3, #4
 8544 004c 04D1     		bne	.L533
3115:../fatfs/ff.c **** 				dj->sect = 0;
 8545              		.loc 1 3115 0
 8546 004e 7B68     		ldr	r3, [r7, #4]
 8547 0050 0022     		movs	r2, #0
 8548 0052 1A61     		str	r2, [r3, #16]
3116:../fatfs/ff.c **** 				res = FR_OK;
 8549              		.loc 1 3116 0
 8550 0054 0023     		movs	r3, #0
 8551 0056 FB75     		strb	r3, [r7, #23]
 8552              	.L533:
3117:../fatfs/ff.c **** 			}
3118:../fatfs/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
 8553              		.loc 1 3118 0
 8554 0058 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8555 005a 002B     		cmp	r3, #0
 8556 005c 11D1     		bne	.L531
3119:../fatfs/ff.c **** 				get_fileinfo(dj, fno);		/* Get the object information */
 8557              		.loc 1 3119 0
 8558 005e 7868     		ldr	r0, [r7, #4]
 8559 0060 3968     		ldr	r1, [r7]
 8560 0062 FFF7FEFF 		bl	get_fileinfo
3120:../fatfs/ff.c **** 				res = dir_next(dj, 0);		/* Increment index for next */
 8561              		.loc 1 3120 0
 8562 0066 7868     		ldr	r0, [r7, #4]
 8563 0068 0021     		movs	r1, #0
 8564 006a FFF7FEFF 		bl	dir_next
 8565 006e 0346     		mov	r3, r0
 8566 0070 FB75     		strb	r3, [r7, #23]
3121:../fatfs/ff.c **** 				if (res == FR_NO_FILE) {
 8567              		.loc 1 3121 0
 8568 0072 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8569 0074 042B     		cmp	r3, #4
 8570 0076 04D1     		bne	.L531
3122:../fatfs/ff.c **** 					dj->sect = 0;
 8571              		.loc 1 3122 0
 8572 0078 7B68     		ldr	r3, [r7, #4]
 8573 007a 0022     		movs	r2, #0
 8574 007c 1A61     		str	r2, [r3, #16]
3123:../fatfs/ff.c **** 					res = FR_OK;
 8575              		.loc 1 3123 0
 8576 007e 0023     		movs	r3, #0
 8577 0080 FB75     		strb	r3, [r7, #23]
 8578              	.L531:
3124:../fatfs/ff.c **** 				}
3125:../fatfs/ff.c **** 			}
3126:../fatfs/ff.c **** 			FREE_BUF();
3127:../fatfs/ff.c **** 		}
3128:../fatfs/ff.c **** 	}
3129:../fatfs/ff.c **** 
3130:../fatfs/ff.c **** 	LEAVE_FF(dj->fatfs, res);
 8579              		.loc 1 3130 0
 8580 0082 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
3131:../fatfs/ff.c **** }
 8581              		.loc 1 3131 0
 8582 0084 1846     		mov	r0, r3
 8583 0086 1837     		adds	r7, r7, #24
 8584              		.cfi_def_cfa_offset 8
 8585 0088 BD46     		mov	sp, r7
 8586              		.cfi_def_cfa_register 13
 8587              		@ sp needed
 8588 008a 80BD     		pop	{r7, pc}
 8589              	.L536:
 8590              		.align	2
 8591              	.L535:
 8592 008c 00000000 		.word	LfnBuf
 8593              		.cfi_endproc
 8594              	.LFE43:
 8596              		.section	.text.f_stat,"ax",%progbits
 8597              		.align	2
 8598              		.global	f_stat
 8599              		.thumb
 8600              		.thumb_func
 8602              	f_stat:
 8603              	.LFB44:
3132:../fatfs/ff.c **** 
3133:../fatfs/ff.c **** 
3134:../fatfs/ff.c **** 
3135:../fatfs/ff.c **** #if _FS_MINIMIZE == 0
3136:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3137:../fatfs/ff.c **** /* Get File Status                                                       */
3138:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3139:../fatfs/ff.c **** 
3140:../fatfs/ff.c **** FRESULT f_stat (
3141:../fatfs/ff.c **** 	const TCHAR *path,	/* Pointer to the file path */
3142:../fatfs/ff.c **** 	FILINFO *fno		/* Pointer to file information to return */
3143:../fatfs/ff.c **** )
3144:../fatfs/ff.c **** {
 8604              		.loc 1 3144 0
 8605              		.cfi_startproc
 8606              		@ args = 0, pretend = 0, frame = 64
 8607              		@ frame_needed = 1, uses_anonymous_args = 0
 8608 0000 80B5     		push	{r7, lr}
 8609              		.cfi_def_cfa_offset 8
 8610              		.cfi_offset 7, -8
 8611              		.cfi_offset 14, -4
 8612 0002 90B0     		sub	sp, sp, #64
 8613              		.cfi_def_cfa_offset 72
 8614 0004 00AF     		add	r7, sp, #0
 8615              		.cfi_def_cfa_register 7
 8616 0006 7860     		str	r0, [r7, #4]
 8617 0008 3960     		str	r1, [r7]
3145:../fatfs/ff.c **** 	FRESULT res;
3146:../fatfs/ff.c **** 	DIR dj;
3147:../fatfs/ff.c **** 	DEF_NAMEBUF;
3148:../fatfs/ff.c **** 
3149:../fatfs/ff.c **** 
3150:../fatfs/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
 8618              		.loc 1 3150 0
 8619 000a 3A1D     		adds	r2, r7, #4
 8620 000c 07F11803 		add	r3, r7, #24
 8621 0010 1046     		mov	r0, r2
 8622 0012 1946     		mov	r1, r3
 8623 0014 0022     		movs	r2, #0
 8624 0016 FFF7FEFF 		bl	chk_mounted
 8625 001a 0346     		mov	r3, r0
 8626 001c 87F83F30 		strb	r3, [r7, #63]
3151:../fatfs/ff.c **** 	if (res == FR_OK) {
 8627              		.loc 1 3151 0
 8628 0020 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 8629 0024 002B     		cmp	r3, #0
 8630 0026 1FD1     		bne	.L538
3152:../fatfs/ff.c **** 		INIT_BUF(dj);
 8631              		.loc 1 3152 0
 8632 0028 07F10C03 		add	r3, r7, #12
 8633 002c 3B63     		str	r3, [r7, #48]
 8634 002e 114B     		ldr	r3, .L541
 8635 0030 7B63     		str	r3, [r7, #52]
3153:../fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8636              		.loc 1 3153 0
 8637 0032 7B68     		ldr	r3, [r7, #4]
 8638 0034 07F11802 		add	r2, r7, #24
 8639 0038 1046     		mov	r0, r2
 8640 003a 1946     		mov	r1, r3
 8641 003c FFF7FEFF 		bl	follow_path
 8642 0040 0346     		mov	r3, r0
 8643 0042 87F83F30 		strb	r3, [r7, #63]
3154:../fatfs/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 8644              		.loc 1 3154 0
 8645 0046 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 8646 004a 002B     		cmp	r3, #0
 8647 004c 0CD1     		bne	.L538
3155:../fatfs/ff.c **** 			if (dj.dir)		/* Found an object */
 8648              		.loc 1 3155 0
 8649 004e FB6A     		ldr	r3, [r7, #44]
 8650 0050 002B     		cmp	r3, #0
 8651 0052 06D0     		beq	.L539
3156:../fatfs/ff.c **** 				get_fileinfo(&dj, fno);
 8652              		.loc 1 3156 0
 8653 0054 07F11803 		add	r3, r7, #24
 8654 0058 1846     		mov	r0, r3
 8655 005a 3968     		ldr	r1, [r7]
 8656 005c FFF7FEFF 		bl	get_fileinfo
 8657 0060 02E0     		b	.L538
 8658              	.L539:
3157:../fatfs/ff.c **** 			else			/* It is root dir */
3158:../fatfs/ff.c **** 				res = FR_INVALID_NAME;
 8659              		.loc 1 3158 0
 8660 0062 0623     		movs	r3, #6
 8661 0064 87F83F30 		strb	r3, [r7, #63]
 8662              	.L538:
3159:../fatfs/ff.c **** 		}
3160:../fatfs/ff.c **** 		FREE_BUF();
3161:../fatfs/ff.c **** 	}
3162:../fatfs/ff.c **** 
3163:../fatfs/ff.c **** 	LEAVE_FF(dj.fatfs, res);
 8663              		.loc 1 3163 0
 8664 0068 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
3164:../fatfs/ff.c **** }
 8665              		.loc 1 3164 0
 8666 006c 1846     		mov	r0, r3
 8667 006e 4037     		adds	r7, r7, #64
 8668              		.cfi_def_cfa_offset 8
 8669 0070 BD46     		mov	sp, r7
 8670              		.cfi_def_cfa_register 13
 8671              		@ sp needed
 8672 0072 80BD     		pop	{r7, pc}
 8673              	.L542:
 8674              		.align	2
 8675              	.L541:
 8676 0074 00000000 		.word	LfnBuf
 8677              		.cfi_endproc
 8678              	.LFE44:
 8680              		.section	.text.f_getfree,"ax",%progbits
 8681              		.align	2
 8682              		.global	f_getfree
 8683              		.thumb
 8684              		.thumb_func
 8686              	f_getfree:
 8687              	.LFB45:
3165:../fatfs/ff.c **** 
3166:../fatfs/ff.c **** 
3167:../fatfs/ff.c **** 
3168:../fatfs/ff.c **** #if !_FS_READONLY
3169:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3170:../fatfs/ff.c **** /* Get Number of Free Clusters                                           */
3171:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3172:../fatfs/ff.c **** 
3173:../fatfs/ff.c **** FRESULT f_getfree (
3174:../fatfs/ff.c **** 	const TCHAR *path,	/* Path name of the logical drive number */
3175:../fatfs/ff.c **** 	DWORD *nclst,		/* Pointer to a variable to return number of free clusters */
3176:../fatfs/ff.c **** 	FATFS **fatfs		/* Pointer to return pointer to corresponding file system object */
3177:../fatfs/ff.c **** )
3178:../fatfs/ff.c **** {
 8688              		.loc 1 3178 0
 8689              		.cfi_startproc
 8690              		@ args = 0, pretend = 0, frame = 56
 8691              		@ frame_needed = 1, uses_anonymous_args = 0
 8692 0000 80B5     		push	{r7, lr}
 8693              		.cfi_def_cfa_offset 8
 8694              		.cfi_offset 7, -8
 8695              		.cfi_offset 14, -4
 8696 0002 8EB0     		sub	sp, sp, #56
 8697              		.cfi_def_cfa_offset 64
 8698 0004 00AF     		add	r7, sp, #0
 8699              		.cfi_def_cfa_register 7
 8700 0006 F860     		str	r0, [r7, #12]
 8701 0008 B960     		str	r1, [r7, #8]
 8702 000a 7A60     		str	r2, [r7, #4]
3179:../fatfs/ff.c **** 	FRESULT res;
3180:../fatfs/ff.c **** 	FATFS *fs;
3181:../fatfs/ff.c **** 	DWORD n, clst, sect, stat;
3182:../fatfs/ff.c **** 	UINT i;
3183:../fatfs/ff.c **** 	BYTE fat, *p;
3184:../fatfs/ff.c **** 
3185:../fatfs/ff.c **** 
3186:../fatfs/ff.c **** 	/* Get drive number */
3187:../fatfs/ff.c **** 	res = chk_mounted(&path, fatfs, 0);
 8703              		.loc 1 3187 0
 8704 000c 07F10C03 		add	r3, r7, #12
 8705 0010 1846     		mov	r0, r3
 8706 0012 7968     		ldr	r1, [r7, #4]
 8707 0014 0022     		movs	r2, #0
 8708 0016 FFF7FEFF 		bl	chk_mounted
 8709 001a 0346     		mov	r3, r0
 8710 001c 87F83730 		strb	r3, [r7, #55]
3188:../fatfs/ff.c **** 	fs = *fatfs;
 8711              		.loc 1 3188 0
 8712 0020 7B68     		ldr	r3, [r7, #4]
 8713 0022 1B68     		ldr	r3, [r3]
 8714 0024 FB61     		str	r3, [r7, #28]
3189:../fatfs/ff.c **** 	if (res == FR_OK) {
 8715              		.loc 1 3189 0
 8716 0026 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 8717 002a 002B     		cmp	r3, #0
 8718 002c 40F0A580 		bne	.L544
3190:../fatfs/ff.c **** 		/* If free_clust is valid, return it without full cluster scan */
3191:../fatfs/ff.c **** 		if (fs->free_clust <= fs->n_fatent - 2) {
 8719              		.loc 1 3191 0
 8720 0030 FB69     		ldr	r3, [r7, #28]
 8721 0032 1A69     		ldr	r2, [r3, #16]
 8722 0034 FB69     		ldr	r3, [r7, #28]
 8723 0036 DB69     		ldr	r3, [r3, #28]
 8724 0038 023B     		subs	r3, r3, #2
 8725 003a 9A42     		cmp	r2, r3
 8726 003c 04D8     		bhi	.L545
3192:../fatfs/ff.c **** 			*nclst = fs->free_clust;
 8727              		.loc 1 3192 0
 8728 003e FB69     		ldr	r3, [r7, #28]
 8729 0040 1A69     		ldr	r2, [r3, #16]
 8730 0042 BB68     		ldr	r3, [r7, #8]
 8731 0044 1A60     		str	r2, [r3]
 8732 0046 98E0     		b	.L544
 8733              	.L545:
3193:../fatfs/ff.c **** 		} else {
3194:../fatfs/ff.c **** 			/* Get number of free clusters */
3195:../fatfs/ff.c **** 			fat = fs->fs_type;
 8734              		.loc 1 3195 0
 8735 0048 FB69     		ldr	r3, [r7, #28]
 8736 004a 1B78     		ldrb	r3, [r3]
 8737 004c FB76     		strb	r3, [r7, #27]
3196:../fatfs/ff.c **** 			n = 0;
 8738              		.loc 1 3196 0
 8739 004e 0023     		movs	r3, #0
 8740 0050 3B63     		str	r3, [r7, #48]
3197:../fatfs/ff.c **** 			if (fat == FS_FAT12) {
 8741              		.loc 1 3197 0
 8742 0052 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 8743 0054 012B     		cmp	r3, #1
 8744 0056 25D1     		bne	.L546
3198:../fatfs/ff.c **** 				clst = 2;
 8745              		.loc 1 3198 0
 8746 0058 0223     		movs	r3, #2
 8747 005a FB62     		str	r3, [r7, #44]
 8748              	.L551:
3199:../fatfs/ff.c **** 				do {
3200:../fatfs/ff.c **** 					stat = get_fat(fs, clst);
 8749              		.loc 1 3200 0
 8750 005c F869     		ldr	r0, [r7, #28]
 8751 005e F96A     		ldr	r1, [r7, #44]
 8752 0060 FFF7FEFF 		bl	get_fat
 8753 0064 7861     		str	r0, [r7, #20]
3201:../fatfs/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8754              		.loc 1 3201 0
 8755 0066 7B69     		ldr	r3, [r7, #20]
 8756 0068 B3F1FF3F 		cmp	r3, #-1
 8757 006c 03D1     		bne	.L547
 8758              		.loc 1 3201 0 is_stmt 0 discriminator 1
 8759 006e 0123     		movs	r3, #1
 8760 0070 87F83730 		strb	r3, [r7, #55]
 8761 0074 15E0     		b	.L548
 8762              	.L547:
3202:../fatfs/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 8763              		.loc 1 3202 0 is_stmt 1
 8764 0076 7B69     		ldr	r3, [r7, #20]
 8765 0078 012B     		cmp	r3, #1
 8766 007a 03D1     		bne	.L549
 8767              		.loc 1 3202 0 is_stmt 0 discriminator 1
 8768 007c 0223     		movs	r3, #2
 8769 007e 87F83730 		strb	r3, [r7, #55]
 8770 0082 0EE0     		b	.L548
 8771              	.L549:
3203:../fatfs/ff.c **** 					if (stat == 0) n++;
 8772              		.loc 1 3203 0 is_stmt 1
 8773 0084 7B69     		ldr	r3, [r7, #20]
 8774 0086 002B     		cmp	r3, #0
 8775 0088 02D1     		bne	.L550
 8776              		.loc 1 3203 0 is_stmt 0 discriminator 1
 8777 008a 3B6B     		ldr	r3, [r7, #48]
 8778 008c 0133     		adds	r3, r3, #1
 8779 008e 3B63     		str	r3, [r7, #48]
 8780              	.L550:
3204:../fatfs/ff.c **** 				} while (++clst < fs->n_fatent);
 8781              		.loc 1 3204 0 is_stmt 1
 8782 0090 FB6A     		ldr	r3, [r7, #44]
 8783 0092 0133     		adds	r3, r3, #1
 8784 0094 FB62     		str	r3, [r7, #44]
 8785 0096 FB69     		ldr	r3, [r7, #28]
 8786 0098 DB69     		ldr	r3, [r3, #28]
 8787 009a FA6A     		ldr	r2, [r7, #44]
 8788 009c 9A42     		cmp	r2, r3
 8789 009e DDD3     		bcc	.L551
 8790 00a0 5FE0     		b	.L552
 8791              	.L548:
 8792 00a2 5EE0     		b	.L552
 8793              	.L546:
3205:../fatfs/ff.c **** 			} else {
3206:../fatfs/ff.c **** 				clst = fs->n_fatent;
 8794              		.loc 1 3206 0
 8795 00a4 FB69     		ldr	r3, [r7, #28]
 8796 00a6 DB69     		ldr	r3, [r3, #28]
 8797 00a8 FB62     		str	r3, [r7, #44]
3207:../fatfs/ff.c **** 				sect = fs->fatbase;
 8798              		.loc 1 3207 0
 8799 00aa FB69     		ldr	r3, [r7, #28]
 8800 00ac 9B6A     		ldr	r3, [r3, #40]
 8801 00ae BB62     		str	r3, [r7, #40]
3208:../fatfs/ff.c **** 				i = 0; p = 0;
 8802              		.loc 1 3208 0
 8803 00b0 0023     		movs	r3, #0
 8804 00b2 7B62     		str	r3, [r7, #36]
 8805 00b4 0023     		movs	r3, #0
 8806 00b6 3B62     		str	r3, [r7, #32]
 8807              	.L559:
3209:../fatfs/ff.c **** 				do {
3210:../fatfs/ff.c **** 					if (!i) {
 8808              		.loc 1 3210 0
 8809 00b8 7B6A     		ldr	r3, [r7, #36]
 8810 00ba 002B     		cmp	r3, #0
 8811 00bc 14D1     		bne	.L553
3211:../fatfs/ff.c **** 						res = move_window(fs, sect++);
 8812              		.loc 1 3211 0
 8813 00be BB6A     		ldr	r3, [r7, #40]
 8814 00c0 5A1C     		adds	r2, r3, #1
 8815 00c2 BA62     		str	r2, [r7, #40]
 8816 00c4 F869     		ldr	r0, [r7, #28]
 8817 00c6 1946     		mov	r1, r3
 8818 00c8 FFF7FEFF 		bl	move_window
 8819 00cc 0346     		mov	r3, r0
 8820 00ce 87F83730 		strb	r3, [r7, #55]
3212:../fatfs/ff.c **** 						if (res != FR_OK) break;
 8821              		.loc 1 3212 0
 8822 00d2 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 8823 00d6 002B     		cmp	r3, #0
 8824 00d8 00D0     		beq	.L554
 8825 00da 42E0     		b	.L552
 8826              	.L554:
3213:../fatfs/ff.c **** 						p = fs->win;
 8827              		.loc 1 3213 0
 8828 00dc FB69     		ldr	r3, [r7, #28]
 8829 00de 3833     		adds	r3, r3, #56
 8830 00e0 3B62     		str	r3, [r7, #32]
3214:../fatfs/ff.c **** 						i = SS(fatfs);
 8831              		.loc 1 3214 0
 8832 00e2 4FF40073 		mov	r3, #512
 8833 00e6 7B62     		str	r3, [r7, #36]
 8834              	.L553:
3215:../fatfs/ff.c **** 					}
3216:../fatfs/ff.c **** 					if (fat == FS_FAT16) {
 8835              		.loc 1 3216 0
 8836 00e8 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 8837 00ea 022B     		cmp	r3, #2
 8838 00ec 15D1     		bne	.L555
3217:../fatfs/ff.c **** 						if (LD_WORD(p) == 0) n++;
 8839              		.loc 1 3217 0
 8840 00ee 3B6A     		ldr	r3, [r7, #32]
 8841 00f0 0133     		adds	r3, r3, #1
 8842 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8843 00f4 1B02     		lsls	r3, r3, #8
 8844 00f6 9AB2     		uxth	r2, r3
 8845 00f8 3B6A     		ldr	r3, [r7, #32]
 8846 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8847 00fc 9BB2     		uxth	r3, r3
 8848 00fe 1343     		orrs	r3, r3, r2
 8849 0100 9BB2     		uxth	r3, r3
 8850 0102 002B     		cmp	r3, #0
 8851 0104 02D1     		bne	.L556
 8852              		.loc 1 3217 0 is_stmt 0 discriminator 1
 8853 0106 3B6B     		ldr	r3, [r7, #48]
 8854 0108 0133     		adds	r3, r3, #1
 8855 010a 3B63     		str	r3, [r7, #48]
 8856              	.L556:
3218:../fatfs/ff.c **** 						p += 2; i -= 2;
 8857              		.loc 1 3218 0 is_stmt 1
 8858 010c 3B6A     		ldr	r3, [r7, #32]
 8859 010e 0233     		adds	r3, r3, #2
 8860 0110 3B62     		str	r3, [r7, #32]
 8861 0112 7B6A     		ldr	r3, [r7, #36]
 8862 0114 023B     		subs	r3, r3, #2
 8863 0116 7B62     		str	r3, [r7, #36]
 8864 0118 1DE0     		b	.L557
 8865              	.L555:
3219:../fatfs/ff.c **** 					} else {
3220:../fatfs/ff.c **** 						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8866              		.loc 1 3220 0
 8867 011a 3B6A     		ldr	r3, [r7, #32]
 8868 011c 0333     		adds	r3, r3, #3
 8869 011e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8870 0120 1A06     		lsls	r2, r3, #24
 8871 0122 3B6A     		ldr	r3, [r7, #32]
 8872 0124 0233     		adds	r3, r3, #2
 8873 0126 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8874 0128 1B04     		lsls	r3, r3, #16
 8875 012a 1343     		orrs	r3, r3, r2
 8876 012c 3A6A     		ldr	r2, [r7, #32]
 8877 012e 0132     		adds	r2, r2, #1
 8878 0130 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 8879 0132 1202     		lsls	r2, r2, #8
 8880 0134 1343     		orrs	r3, r3, r2
 8881 0136 3A6A     		ldr	r2, [r7, #32]
 8882 0138 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 8883 013a 1343     		orrs	r3, r3, r2
 8884 013c 23F07043 		bic	r3, r3, #-268435456
 8885 0140 002B     		cmp	r3, #0
 8886 0142 02D1     		bne	.L558
 8887              		.loc 1 3220 0 is_stmt 0 discriminator 1
 8888 0144 3B6B     		ldr	r3, [r7, #48]
 8889 0146 0133     		adds	r3, r3, #1
 8890 0148 3B63     		str	r3, [r7, #48]
 8891              	.L558:
3221:../fatfs/ff.c **** 						p += 4; i -= 4;
 8892              		.loc 1 3221 0 is_stmt 1
 8893 014a 3B6A     		ldr	r3, [r7, #32]
 8894 014c 0433     		adds	r3, r3, #4
 8895 014e 3B62     		str	r3, [r7, #32]
 8896 0150 7B6A     		ldr	r3, [r7, #36]
 8897 0152 043B     		subs	r3, r3, #4
 8898 0154 7B62     		str	r3, [r7, #36]
 8899              	.L557:
3222:../fatfs/ff.c **** 					}
3223:../fatfs/ff.c **** 				} while (--clst);
 8900              		.loc 1 3223 0
 8901 0156 FB6A     		ldr	r3, [r7, #44]
 8902 0158 013B     		subs	r3, r3, #1
 8903 015a FB62     		str	r3, [r7, #44]
 8904 015c FB6A     		ldr	r3, [r7, #44]
 8905 015e 002B     		cmp	r3, #0
 8906 0160 AAD1     		bne	.L559
 8907              	.L552:
3224:../fatfs/ff.c **** 			}
3225:../fatfs/ff.c **** 			fs->free_clust = n;
 8908              		.loc 1 3225 0
 8909 0162 FB69     		ldr	r3, [r7, #28]
 8910 0164 3A6B     		ldr	r2, [r7, #48]
 8911 0166 1A61     		str	r2, [r3, #16]
3226:../fatfs/ff.c **** 			if (fat == FS_FAT32) fs->fsi_flag = 1;
 8912              		.loc 1 3226 0
 8913 0168 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 8914 016a 032B     		cmp	r3, #3
 8915 016c 02D1     		bne	.L560
 8916              		.loc 1 3226 0 is_stmt 0 discriminator 1
 8917 016e FB69     		ldr	r3, [r7, #28]
 8918 0170 0122     		movs	r2, #1
 8919 0172 5A71     		strb	r2, [r3, #5]
 8920              	.L560:
3227:../fatfs/ff.c **** 			*nclst = n;
 8921              		.loc 1 3227 0 is_stmt 1
 8922 0174 BB68     		ldr	r3, [r7, #8]
 8923 0176 3A6B     		ldr	r2, [r7, #48]
 8924 0178 1A60     		str	r2, [r3]
 8925              	.L544:
3228:../fatfs/ff.c **** 		}
3229:../fatfs/ff.c **** 	}
3230:../fatfs/ff.c **** 	LEAVE_FF(fatfs, res);
 8926              		.loc 1 3230 0
 8927 017a 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
3231:../fatfs/ff.c **** }
 8928              		.loc 1 3231 0
 8929 017e 1846     		mov	r0, r3
 8930 0180 3837     		adds	r7, r7, #56
 8931              		.cfi_def_cfa_offset 8
 8932 0182 BD46     		mov	sp, r7
 8933              		.cfi_def_cfa_register 13
 8934              		@ sp needed
 8935 0184 80BD     		pop	{r7, pc}
 8936              		.cfi_endproc
 8937              	.LFE45:
 8939 0186 00BF     		.section	.text.f_truncate,"ax",%progbits
 8940              		.align	2
 8941              		.global	f_truncate
 8942              		.thumb
 8943              		.thumb_func
 8945              	f_truncate:
 8946              	.LFB46:
3232:../fatfs/ff.c **** 
3233:../fatfs/ff.c **** 
3234:../fatfs/ff.c **** 
3235:../fatfs/ff.c **** 
3236:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3237:../fatfs/ff.c **** /* Truncate File                                                         */
3238:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3239:../fatfs/ff.c **** 
3240:../fatfs/ff.c **** FRESULT f_truncate (
3241:../fatfs/ff.c **** 	FIL *fp		/* Pointer to the file object */
3242:../fatfs/ff.c **** )
3243:../fatfs/ff.c **** {
 8947              		.loc 1 3243 0
 8948              		.cfi_startproc
 8949              		@ args = 0, pretend = 0, frame = 16
 8950              		@ frame_needed = 1, uses_anonymous_args = 0
 8951 0000 80B5     		push	{r7, lr}
 8952              		.cfi_def_cfa_offset 8
 8953              		.cfi_offset 7, -8
 8954              		.cfi_offset 14, -4
 8955 0002 84B0     		sub	sp, sp, #16
 8956              		.cfi_def_cfa_offset 24
 8957 0004 00AF     		add	r7, sp, #0
 8958              		.cfi_def_cfa_register 7
 8959 0006 7860     		str	r0, [r7, #4]
3244:../fatfs/ff.c **** 	FRESULT res;
3245:../fatfs/ff.c **** 	DWORD ncl;
3246:../fatfs/ff.c **** 
3247:../fatfs/ff.c **** 
3248:../fatfs/ff.c **** 	res = validate(fp);						/* Check validity of the object */
 8960              		.loc 1 3248 0
 8961 0008 7868     		ldr	r0, [r7, #4]
 8962 000a FFF7FEFF 		bl	validate
 8963 000e 0346     		mov	r3, r0
 8964 0010 FB73     		strb	r3, [r7, #15]
3249:../fatfs/ff.c **** 	if (res == FR_OK) {
 8965              		.loc 1 3249 0
 8966 0012 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 8967 0014 002B     		cmp	r3, #0
 8968 0016 10D1     		bne	.L563
3250:../fatfs/ff.c **** 		if (fp->flag & FA__ERROR) {			/* Check abort flag */
 8969              		.loc 1 3250 0
 8970 0018 7B68     		ldr	r3, [r7, #4]
 8971 001a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 8972 001c DBB2     		uxtb	r3, r3
 8973 001e 5BB2     		sxtb	r3, r3
 8974 0020 002B     		cmp	r3, #0
 8975 0022 02DA     		bge	.L564
3251:../fatfs/ff.c **** 			res = FR_INT_ERR;
 8976              		.loc 1 3251 0
 8977 0024 0223     		movs	r3, #2
 8978 0026 FB73     		strb	r3, [r7, #15]
 8979 0028 07E0     		b	.L563
 8980              	.L564:
3252:../fatfs/ff.c **** 		} else {
3253:../fatfs/ff.c **** 			if (!(fp->flag & FA_WRITE))		/* Check access mode */
 8981              		.loc 1 3253 0
 8982 002a 7B68     		ldr	r3, [r7, #4]
 8983 002c 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 8984 002e 03F00203 		and	r3, r3, #2
 8985 0032 002B     		cmp	r3, #0
 8986 0034 01D1     		bne	.L563
3254:../fatfs/ff.c **** 				res = FR_DENIED;
 8987              		.loc 1 3254 0
 8988 0036 0723     		movs	r3, #7
 8989 0038 FB73     		strb	r3, [r7, #15]
 8990              	.L563:
3255:../fatfs/ff.c **** 		}
3256:../fatfs/ff.c **** 	}
3257:../fatfs/ff.c **** 	if (res == FR_OK) {
 8991              		.loc 1 3257 0
 8992 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 8993 003c 002B     		cmp	r3, #0
 8994 003e 62D1     		bne	.L565
3258:../fatfs/ff.c **** 		if (fp->fsize > fp->fptr) {
 8995              		.loc 1 3258 0
 8996 0040 7B68     		ldr	r3, [r7, #4]
 8997 0042 DA68     		ldr	r2, [r3, #12]
 8998 0044 7B68     		ldr	r3, [r7, #4]
 8999 0046 9B68     		ldr	r3, [r3, #8]
 9000 0048 9A42     		cmp	r2, r3
 9001 004a 52D9     		bls	.L566
3259:../fatfs/ff.c **** 			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 9002              		.loc 1 3259 0
 9003 004c 7B68     		ldr	r3, [r7, #4]
 9004 004e 9A68     		ldr	r2, [r3, #8]
 9005 0050 7B68     		ldr	r3, [r7, #4]
 9006 0052 DA60     		str	r2, [r3, #12]
3260:../fatfs/ff.c **** 			fp->flag |= FA__WRITTEN;
 9007              		.loc 1 3260 0
 9008 0054 7B68     		ldr	r3, [r7, #4]
 9009 0056 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 9010 0058 43F02003 		orr	r3, r3, #32
 9011 005c DAB2     		uxtb	r2, r3
 9012 005e 7B68     		ldr	r3, [r7, #4]
 9013 0060 9A71     		strb	r2, [r3, #6]
3261:../fatfs/ff.c **** 			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 9014              		.loc 1 3261 0
 9015 0062 7B68     		ldr	r3, [r7, #4]
 9016 0064 9B68     		ldr	r3, [r3, #8]
 9017 0066 002B     		cmp	r3, #0
 9018 0068 0DD1     		bne	.L567
3262:../fatfs/ff.c **** 				res = remove_chain(fp->fs, fp->sclust);
 9019              		.loc 1 3262 0
 9020 006a 7B68     		ldr	r3, [r7, #4]
 9021 006c 1A68     		ldr	r2, [r3]
 9022 006e 7B68     		ldr	r3, [r7, #4]
 9023 0070 1B69     		ldr	r3, [r3, #16]
 9024 0072 1046     		mov	r0, r2
 9025 0074 1946     		mov	r1, r3
 9026 0076 FFF7FEFF 		bl	remove_chain
 9027 007a 0346     		mov	r3, r0
 9028 007c FB73     		strb	r3, [r7, #15]
3263:../fatfs/ff.c **** 				fp->sclust = 0;
 9029              		.loc 1 3263 0
 9030 007e 7B68     		ldr	r3, [r7, #4]
 9031 0080 0022     		movs	r2, #0
 9032 0082 1A61     		str	r2, [r3, #16]
 9033 0084 35E0     		b	.L566
 9034              	.L567:
3264:../fatfs/ff.c **** 			} else {				/* When truncate a part of the file, remove remaining clusters */
3265:../fatfs/ff.c **** 				ncl = get_fat(fp->fs, fp->clust);
 9035              		.loc 1 3265 0
 9036 0086 7B68     		ldr	r3, [r7, #4]
 9037 0088 1A68     		ldr	r2, [r3]
 9038 008a 7B68     		ldr	r3, [r7, #4]
 9039 008c 5B69     		ldr	r3, [r3, #20]
 9040 008e 1046     		mov	r0, r2
 9041 0090 1946     		mov	r1, r3
 9042 0092 FFF7FEFF 		bl	get_fat
 9043 0096 B860     		str	r0, [r7, #8]
3266:../fatfs/ff.c **** 				res = FR_OK;
 9044              		.loc 1 3266 0
 9045 0098 0023     		movs	r3, #0
 9046 009a FB73     		strb	r3, [r7, #15]
3267:../fatfs/ff.c **** 				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 9047              		.loc 1 3267 0
 9048 009c BB68     		ldr	r3, [r7, #8]
 9049 009e B3F1FF3F 		cmp	r3, #-1
 9050 00a2 01D1     		bne	.L568
 9051              		.loc 1 3267 0 is_stmt 0 discriminator 1
 9052 00a4 0123     		movs	r3, #1
 9053 00a6 FB73     		strb	r3, [r7, #15]
 9054              	.L568:
3268:../fatfs/ff.c **** 				if (ncl == 1) res = FR_INT_ERR;
 9055              		.loc 1 3268 0 is_stmt 1
 9056 00a8 BB68     		ldr	r3, [r7, #8]
 9057 00aa 012B     		cmp	r3, #1
 9058 00ac 01D1     		bne	.L569
 9059              		.loc 1 3268 0 is_stmt 0 discriminator 1
 9060 00ae 0223     		movs	r3, #2
 9061 00b0 FB73     		strb	r3, [r7, #15]
 9062              	.L569:
3269:../fatfs/ff.c **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 9063              		.loc 1 3269 0 is_stmt 1
 9064 00b2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 9065 00b4 002B     		cmp	r3, #0
 9066 00b6 1CD1     		bne	.L566
 9067              		.loc 1 3269 0 is_stmt 0 discriminator 1
 9068 00b8 7B68     		ldr	r3, [r7, #4]
 9069 00ba 1B68     		ldr	r3, [r3]
 9070 00bc DA69     		ldr	r2, [r3, #28]
 9071 00be BB68     		ldr	r3, [r7, #8]
 9072 00c0 9A42     		cmp	r2, r3
 9073 00c2 16D9     		bls	.L566
3270:../fatfs/ff.c **** 					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 9074              		.loc 1 3270 0 is_stmt 1
 9075 00c4 7B68     		ldr	r3, [r7, #4]
 9076 00c6 1A68     		ldr	r2, [r3]
 9077 00c8 7B68     		ldr	r3, [r7, #4]
 9078 00ca 5B69     		ldr	r3, [r3, #20]
 9079 00cc 1046     		mov	r0, r2
 9080 00ce 1946     		mov	r1, r3
 9081 00d0 6FF07042 		mvn	r2, #-268435456
 9082 00d4 FFF7FEFF 		bl	put_fat
 9083 00d8 0346     		mov	r3, r0
 9084 00da FB73     		strb	r3, [r7, #15]
3271:../fatfs/ff.c **** 					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 9085              		.loc 1 3271 0
 9086 00dc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 9087 00de 002B     		cmp	r3, #0
 9088 00e0 07D1     		bne	.L566
 9089              		.loc 1 3271 0 is_stmt 0 discriminator 1
 9090 00e2 7B68     		ldr	r3, [r7, #4]
 9091 00e4 1B68     		ldr	r3, [r3]
 9092 00e6 1846     		mov	r0, r3
 9093 00e8 B968     		ldr	r1, [r7, #8]
 9094 00ea FFF7FEFF 		bl	remove_chain
 9095 00ee 0346     		mov	r3, r0
 9096 00f0 FB73     		strb	r3, [r7, #15]
 9097              	.L566:
3272:../fatfs/ff.c **** 				}
3273:../fatfs/ff.c **** 			}
3274:../fatfs/ff.c **** 		}
3275:../fatfs/ff.c **** 		if (res != FR_OK) fp->flag |= FA__ERROR;
 9098              		.loc 1 3275 0 is_stmt 1
 9099 00f2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 9100 00f4 002B     		cmp	r3, #0
 9101 00f6 06D0     		beq	.L565
 9102              		.loc 1 3275 0 is_stmt 0 discriminator 1
 9103 00f8 7B68     		ldr	r3, [r7, #4]
 9104 00fa 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 9105 00fc 63F07F03 		orn	r3, r3, #127
 9106 0100 DAB2     		uxtb	r2, r3
 9107 0102 7B68     		ldr	r3, [r7, #4]
 9108 0104 9A71     		strb	r2, [r3, #6]
 9109              	.L565:
3276:../fatfs/ff.c **** 	}
3277:../fatfs/ff.c **** 
3278:../fatfs/ff.c **** 	LEAVE_FF(fp->fatfs, res);
 9110              		.loc 1 3278 0 is_stmt 1
 9111 0106 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
3279:../fatfs/ff.c **** }
 9112              		.loc 1 3279 0
 9113 0108 1846     		mov	r0, r3
 9114 010a 1037     		adds	r7, r7, #16
 9115              		.cfi_def_cfa_offset 8
 9116 010c BD46     		mov	sp, r7
 9117              		.cfi_def_cfa_register 13
 9118              		@ sp needed
 9119 010e 80BD     		pop	{r7, pc}
 9120              		.cfi_endproc
 9121              	.LFE46:
 9123              		.section	.text.f_unlink,"ax",%progbits
 9124              		.align	2
 9125              		.global	f_unlink
 9126              		.thumb
 9127              		.thumb_func
 9129              	f_unlink:
 9130              	.LFB47:
3280:../fatfs/ff.c **** 
3281:../fatfs/ff.c **** 
3282:../fatfs/ff.c **** 
3283:../fatfs/ff.c **** 
3284:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3285:../fatfs/ff.c **** /* Delete a File or Directory                                            */
3286:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3287:../fatfs/ff.c **** 
3288:../fatfs/ff.c **** FRESULT f_unlink (
3289:../fatfs/ff.c **** 	const TCHAR *path		/* Pointer to the file or directory path */
3290:../fatfs/ff.c **** )
3291:../fatfs/ff.c **** {
 9131              		.loc 1 3291 0
 9132              		.cfi_startproc
 9133              		@ args = 0, pretend = 0, frame = 104
 9134              		@ frame_needed = 1, uses_anonymous_args = 0
 9135 0000 80B5     		push	{r7, lr}
 9136              		.cfi_def_cfa_offset 8
 9137              		.cfi_offset 7, -8
 9138              		.cfi_offset 14, -4
 9139 0002 9AB0     		sub	sp, sp, #104
 9140              		.cfi_def_cfa_offset 112
 9141 0004 00AF     		add	r7, sp, #0
 9142              		.cfi_def_cfa_register 7
 9143 0006 7860     		str	r0, [r7, #4]
3292:../fatfs/ff.c **** 	FRESULT res;
3293:../fatfs/ff.c **** 	DIR dj, sdj;
3294:../fatfs/ff.c **** 	BYTE *dir;
3295:../fatfs/ff.c **** 	DWORD dclst;
3296:../fatfs/ff.c **** 	DEF_NAMEBUF;
3297:../fatfs/ff.c **** 
3298:../fatfs/ff.c **** 
3299:../fatfs/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
 9144              		.loc 1 3299 0
 9145 0008 3A1D     		adds	r2, r7, #4
 9146 000a 07F13803 		add	r3, r7, #56
 9147 000e 1046     		mov	r0, r2
 9148 0010 1946     		mov	r1, r3
 9149 0012 0122     		movs	r2, #1
 9150 0014 FFF7FEFF 		bl	chk_mounted
 9151 0018 0346     		mov	r3, r0
 9152 001a 87F86730 		strb	r3, [r7, #103]
3300:../fatfs/ff.c **** 	if (res == FR_OK) {
 9153              		.loc 1 3300 0
 9154 001e 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 9155 0022 002B     		cmp	r3, #0
 9156 0024 40F0A780 		bne	.L572
3301:../fatfs/ff.c **** 		INIT_BUF(dj);
 9157              		.loc 1 3301 0
 9158 0028 07F10803 		add	r3, r7, #8
 9159 002c 3B65     		str	r3, [r7, #80]
 9160 002e 554B     		ldr	r3, .L582
 9161 0030 7B65     		str	r3, [r7, #84]
3302:../fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9162              		.loc 1 3302 0
 9163 0032 7B68     		ldr	r3, [r7, #4]
 9164 0034 07F13802 		add	r2, r7, #56
 9165 0038 1046     		mov	r0, r2
 9166 003a 1946     		mov	r1, r3
 9167 003c FFF7FEFF 		bl	follow_path
 9168 0040 0346     		mov	r3, r0
 9169 0042 87F86730 		strb	r3, [r7, #103]
3303:../fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
 9170              		.loc 1 3303 0
 9171 0046 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 9172 004a 002B     		cmp	r3, #0
 9173 004c 09D1     		bne	.L573
 9174              		.loc 1 3303 0 is_stmt 0 discriminator 1
 9175 004e 3B6D     		ldr	r3, [r7, #80]
 9176 0050 0B33     		adds	r3, r3, #11
 9177 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9178 0054 03F02003 		and	r3, r3, #32
 9179 0058 002B     		cmp	r3, #0
 9180 005a 02D0     		beq	.L573
3304:../fatfs/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 9181              		.loc 1 3304 0 is_stmt 1
 9182 005c 0623     		movs	r3, #6
 9183 005e 87F86730 		strb	r3, [r7, #103]
 9184              	.L573:
3305:../fatfs/ff.c **** #if _FS_LOCK
3306:../fatfs/ff.c **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
3307:../fatfs/ff.c **** #endif
3308:../fatfs/ff.c **** 		if (res == FR_OK) {					/* The object is accessible */
 9185              		.loc 1 3308 0
 9186 0062 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 9187 0066 002B     		cmp	r3, #0
 9188 0068 40F08580 		bne	.L572
3309:../fatfs/ff.c **** 			dir = dj.dir;
 9189              		.loc 1 3309 0
 9190 006c FB6C     		ldr	r3, [r7, #76]
 9191 006e 3B66     		str	r3, [r7, #96]
3310:../fatfs/ff.c **** 			if (!dir) {
 9192              		.loc 1 3310 0
 9193 0070 3B6E     		ldr	r3, [r7, #96]
 9194 0072 002B     		cmp	r3, #0
 9195 0074 03D1     		bne	.L574
3311:../fatfs/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
 9196              		.loc 1 3311 0
 9197 0076 0623     		movs	r3, #6
 9198 0078 87F86730 		strb	r3, [r7, #103]
 9199 007c 09E0     		b	.L575
 9200              	.L574:
3312:../fatfs/ff.c **** 			} else {
3313:../fatfs/ff.c **** 				if (dir[DIR_Attr] & AM_RDO)
 9201              		.loc 1 3313 0
 9202 007e 3B6E     		ldr	r3, [r7, #96]
 9203 0080 0B33     		adds	r3, r3, #11
 9204 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9205 0084 03F00103 		and	r3, r3, #1
 9206 0088 002B     		cmp	r3, #0
 9207 008a 02D0     		beq	.L575
3314:../fatfs/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 9208              		.loc 1 3314 0
 9209 008c 0723     		movs	r3, #7
 9210 008e 87F86730 		strb	r3, [r7, #103]
 9211              	.L575:
3315:../fatfs/ff.c **** 			}
3316:../fatfs/ff.c **** 			dclst = ld_clust(dj.fs, dir);
 9212              		.loc 1 3316 0
 9213 0092 BB6B     		ldr	r3, [r7, #56]
 9214 0094 1846     		mov	r0, r3
 9215 0096 396E     		ldr	r1, [r7, #96]
 9216 0098 FFF7FEFF 		bl	ld_clust
 9217 009c F865     		str	r0, [r7, #92]
3317:../fatfs/ff.c **** 			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
 9218              		.loc 1 3317 0
 9219 009e 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 9220 00a2 002B     		cmp	r3, #0
 9221 00a4 41D1     		bne	.L576
 9222              		.loc 1 3317 0 is_stmt 0 discriminator 1
 9223 00a6 3B6E     		ldr	r3, [r7, #96]
 9224 00a8 0B33     		adds	r3, r3, #11
 9225 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9226 00ac 03F01003 		and	r3, r3, #16
 9227 00b0 002B     		cmp	r3, #0
 9228 00b2 3AD0     		beq	.L576
3318:../fatfs/ff.c **** 				if (dclst < 2) {
 9229              		.loc 1 3318 0 is_stmt 1
 9230 00b4 FB6D     		ldr	r3, [r7, #92]
 9231 00b6 012B     		cmp	r3, #1
 9232 00b8 03D8     		bhi	.L577
3319:../fatfs/ff.c **** 					res = FR_INT_ERR;
 9233              		.loc 1 3319 0
 9234 00ba 0223     		movs	r3, #2
 9235 00bc 87F86730 		strb	r3, [r7, #103]
 9236 00c0 33E0     		b	.L576
 9237              	.L577:
3320:../fatfs/ff.c **** 				} else {
3321:../fatfs/ff.c **** 					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-dir is empty or not */
 9238              		.loc 1 3321 0
 9239 00c2 07F11402 		add	r2, r7, #20
 9240 00c6 07F13803 		add	r3, r7, #56
 9241 00ca 1046     		mov	r0, r2
 9242 00cc 1946     		mov	r1, r3
 9243 00ce 2422     		movs	r2, #36
 9244 00d0 FFF7FEFF 		bl	mem_cpy
3322:../fatfs/ff.c **** 					sdj.sclust = dclst;
 9245              		.loc 1 3322 0
 9246 00d4 FB6D     		ldr	r3, [r7, #92]
 9247 00d6 FB61     		str	r3, [r7, #28]
3323:../fatfs/ff.c **** 					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
 9248              		.loc 1 3323 0
 9249 00d8 07F11403 		add	r3, r7, #20
 9250 00dc 1846     		mov	r0, r3
 9251 00de 0221     		movs	r1, #2
 9252 00e0 FFF7FEFF 		bl	dir_sdi
 9253 00e4 0346     		mov	r3, r0
 9254 00e6 87F86730 		strb	r3, [r7, #103]
3324:../fatfs/ff.c **** 					if (res == FR_OK) {
 9255              		.loc 1 3324 0
 9256 00ea 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 9257 00ee 002B     		cmp	r3, #0
 9258 00f0 1BD1     		bne	.L576
3325:../fatfs/ff.c **** 						res = dir_read(&sdj, 0);	/* Read an item */
 9259              		.loc 1 3325 0
 9260 00f2 07F11403 		add	r3, r7, #20
 9261 00f6 1846     		mov	r0, r3
 9262 00f8 0021     		movs	r1, #0
 9263 00fa FFF7FEFF 		bl	dir_read
 9264 00fe 0346     		mov	r3, r0
 9265 0100 87F86730 		strb	r3, [r7, #103]
3326:../fatfs/ff.c **** 						if (res == FR_OK		/* Not empty dir */
 9266              		.loc 1 3326 0
 9267 0104 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 9268 0108 002B     		cmp	r3, #0
 9269 010a 04D0     		beq	.L578
3327:../fatfs/ff.c **** #if _FS_RPATH
3328:../fatfs/ff.c **** 						|| dclst == dj.fs->cdir	/* Current dir */
 9270              		.loc 1 3328 0
 9271 010c BB6B     		ldr	r3, [r7, #56]
 9272 010e 9A69     		ldr	r2, [r3, #24]
 9273 0110 FB6D     		ldr	r3, [r7, #92]
 9274 0112 9A42     		cmp	r2, r3
 9275 0114 02D1     		bne	.L579
 9276              	.L578:
3329:../fatfs/ff.c **** #endif
3330:../fatfs/ff.c **** 						) res = FR_DENIED;
 9277              		.loc 1 3330 0
 9278 0116 0723     		movs	r3, #7
 9279 0118 87F86730 		strb	r3, [r7, #103]
 9280              	.L579:
3331:../fatfs/ff.c **** 						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
 9281              		.loc 1 3331 0
 9282 011c 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 9283 0120 042B     		cmp	r3, #4
 9284 0122 02D1     		bne	.L576
 9285              		.loc 1 3331 0 is_stmt 0 discriminator 1
 9286 0124 0023     		movs	r3, #0
 9287 0126 87F86730 		strb	r3, [r7, #103]
 9288              	.L576:
3332:../fatfs/ff.c **** 					}
3333:../fatfs/ff.c **** 				}
3334:../fatfs/ff.c **** 			}
3335:../fatfs/ff.c **** 			if (res == FR_OK) {
 9289              		.loc 1 3335 0 is_stmt 1
 9290 012a 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 9291 012e 002B     		cmp	r3, #0
 9292 0130 21D1     		bne	.L572
3336:../fatfs/ff.c **** 				res = dir_remove(&dj);		/* Remove the directory entry */
 9293              		.loc 1 3336 0
 9294 0132 07F13803 		add	r3, r7, #56
 9295 0136 1846     		mov	r0, r3
 9296 0138 FFF7FEFF 		bl	dir_remove
 9297 013c 0346     		mov	r3, r0
 9298 013e 87F86730 		strb	r3, [r7, #103]
3337:../fatfs/ff.c **** 				if (res == FR_OK) {
 9299              		.loc 1 3337 0
 9300 0142 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 9301 0146 002B     		cmp	r3, #0
 9302 0148 15D1     		bne	.L572
3338:../fatfs/ff.c **** 					if (dclst)				/* Remove the cluster chain if exist */
 9303              		.loc 1 3338 0
 9304 014a FB6D     		ldr	r3, [r7, #92]
 9305 014c 002B     		cmp	r3, #0
 9306 014e 07D0     		beq	.L580
3339:../fatfs/ff.c **** 						res = remove_chain(dj.fs, dclst);
 9307              		.loc 1 3339 0
 9308 0150 BB6B     		ldr	r3, [r7, #56]
 9309 0152 1846     		mov	r0, r3
 9310 0154 F96D     		ldr	r1, [r7, #92]
 9311 0156 FFF7FEFF 		bl	remove_chain
 9312 015a 0346     		mov	r3, r0
 9313 015c 87F86730 		strb	r3, [r7, #103]
 9314              	.L580:
3340:../fatfs/ff.c **** 					if (res == FR_OK) res = sync_fs(dj.fs);
 9315              		.loc 1 3340 0
 9316 0160 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 9317 0164 002B     		cmp	r3, #0
 9318 0166 06D1     		bne	.L572
 9319              		.loc 1 3340 0 is_stmt 0 discriminator 1
 9320 0168 BB6B     		ldr	r3, [r7, #56]
 9321 016a 1846     		mov	r0, r3
 9322 016c FFF7FEFF 		bl	sync_fs
 9323 0170 0346     		mov	r3, r0
 9324 0172 87F86730 		strb	r3, [r7, #103]
 9325              	.L572:
3341:../fatfs/ff.c **** 				}
3342:../fatfs/ff.c **** 			}
3343:../fatfs/ff.c **** 		}
3344:../fatfs/ff.c **** 		FREE_BUF();
3345:../fatfs/ff.c **** 	}
3346:../fatfs/ff.c **** 
3347:../fatfs/ff.c **** 	LEAVE_FF(dj.fatfs, res);
 9326              		.loc 1 3347 0 is_stmt 1
 9327 0176 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
3348:../fatfs/ff.c **** }
 9328              		.loc 1 3348 0
 9329 017a 1846     		mov	r0, r3
 9330 017c 6837     		adds	r7, r7, #104
 9331              		.cfi_def_cfa_offset 8
 9332 017e BD46     		mov	sp, r7
 9333              		.cfi_def_cfa_register 13
 9334              		@ sp needed
 9335 0180 80BD     		pop	{r7, pc}
 9336              	.L583:
 9337 0182 00BF     		.align	2
 9338              	.L582:
 9339 0184 00000000 		.word	LfnBuf
 9340              		.cfi_endproc
 9341              	.LFE47:
 9343              		.section	.text.f_mkdir,"ax",%progbits
 9344              		.align	2
 9345              		.global	f_mkdir
 9346              		.thumb
 9347              		.thumb_func
 9349              	f_mkdir:
 9350              	.LFB48:
3349:../fatfs/ff.c **** 
3350:../fatfs/ff.c **** 
3351:../fatfs/ff.c **** 
3352:../fatfs/ff.c **** 
3353:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3354:../fatfs/ff.c **** /* Create a Directory                                                    */
3355:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3356:../fatfs/ff.c **** 
3357:../fatfs/ff.c **** FRESULT f_mkdir (
3358:../fatfs/ff.c **** 	const TCHAR *path		/* Pointer to the directory path */
3359:../fatfs/ff.c **** )
3360:../fatfs/ff.c **** {
 9351              		.loc 1 3360 0
 9352              		.cfi_startproc
 9353              		@ args = 0, pretend = 0, frame = 80
 9354              		@ frame_needed = 1, uses_anonymous_args = 0
 9355 0000 80B5     		push	{r7, lr}
 9356              		.cfi_def_cfa_offset 8
 9357              		.cfi_offset 7, -8
 9358              		.cfi_offset 14, -4
 9359 0002 94B0     		sub	sp, sp, #80
 9360              		.cfi_def_cfa_offset 88
 9361 0004 00AF     		add	r7, sp, #0
 9362              		.cfi_def_cfa_register 7
 9363 0006 7860     		str	r0, [r7, #4]
3361:../fatfs/ff.c **** 	FRESULT res;
3362:../fatfs/ff.c **** 	DIR dj;
3363:../fatfs/ff.c **** 	BYTE *dir, n;
3364:../fatfs/ff.c **** 	DWORD dsc, dcl, pcl, tm = get_fattime();
 9364              		.loc 1 3364 0
 9365 0008 FFF7FEFF 		bl	get_fattime
 9366 000c 3864     		str	r0, [r7, #64]
3365:../fatfs/ff.c **** 	DEF_NAMEBUF;
3366:../fatfs/ff.c **** 
3367:../fatfs/ff.c **** 
3368:../fatfs/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
 9367              		.loc 1 3368 0
 9368 000e 3A1D     		adds	r2, r7, #4
 9369 0010 07F11403 		add	r3, r7, #20
 9370 0014 1046     		mov	r0, r2
 9371 0016 1946     		mov	r1, r3
 9372 0018 0122     		movs	r2, #1
 9373 001a FFF7FEFF 		bl	chk_mounted
 9374 001e 0346     		mov	r3, r0
 9375 0020 87F84F30 		strb	r3, [r7, #79]
3369:../fatfs/ff.c **** 	if (res == FR_OK) {
 9376              		.loc 1 3369 0
 9377 0024 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 9378 0028 002B     		cmp	r3, #0
 9379 002a 40F01581 		bne	.L585
3370:../fatfs/ff.c **** 		INIT_BUF(dj);
 9380              		.loc 1 3370 0
 9381 002e 07F10803 		add	r3, r7, #8
 9382 0032 FB62     		str	r3, [r7, #44]
 9383 0034 8B4B     		ldr	r3, .L600
 9384 0036 3B63     		str	r3, [r7, #48]
3371:../fatfs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9385              		.loc 1 3371 0
 9386 0038 7B68     		ldr	r3, [r7, #4]
 9387 003a 07F11402 		add	r2, r7, #20
 9388 003e 1046     		mov	r0, r2
 9389 0040 1946     		mov	r1, r3
 9390 0042 FFF7FEFF 		bl	follow_path
 9391 0046 0346     		mov	r3, r0
 9392 0048 87F84F30 		strb	r3, [r7, #79]
3372:../fatfs/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 9393              		.loc 1 3372 0
 9394 004c 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 9395 0050 002B     		cmp	r3, #0
 9396 0052 02D1     		bne	.L586
 9397              		.loc 1 3372 0 is_stmt 0 discriminator 1
 9398 0054 0823     		movs	r3, #8
 9399 0056 87F84F30 		strb	r3, [r7, #79]
 9400              	.L586:
3373:../fatfs/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
 9401              		.loc 1 3373 0 is_stmt 1
 9402 005a 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 9403 005e 042B     		cmp	r3, #4
 9404 0060 09D1     		bne	.L587
 9405              		.loc 1 3373 0 is_stmt 0 discriminator 1
 9406 0062 FB6A     		ldr	r3, [r7, #44]
 9407 0064 0B33     		adds	r3, r3, #11
 9408 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9409 0068 03F02003 		and	r3, r3, #32
 9410 006c 002B     		cmp	r3, #0
 9411 006e 02D0     		beq	.L587
3374:../fatfs/ff.c **** 			res = FR_INVALID_NAME;
 9412              		.loc 1 3374 0 is_stmt 1
 9413 0070 0623     		movs	r3, #6
 9414 0072 87F84F30 		strb	r3, [r7, #79]
 9415              	.L587:
3375:../fatfs/ff.c **** 		if (res == FR_NO_FILE) {				/* Can create a new directory */
 9416              		.loc 1 3375 0
 9417 0076 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 9418 007a 042B     		cmp	r3, #4
 9419 007c 40F0EC80 		bne	.L585
3376:../fatfs/ff.c **** 			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
 9420              		.loc 1 3376 0
 9421 0080 7B69     		ldr	r3, [r7, #20]
 9422 0082 1846     		mov	r0, r3
 9423 0084 0021     		movs	r1, #0
 9424 0086 FFF7FEFF 		bl	create_chain
 9425 008a F863     		str	r0, [r7, #60]
3377:../fatfs/ff.c **** 			res = FR_OK;
 9426              		.loc 1 3377 0
 9427 008c 0023     		movs	r3, #0
 9428 008e 87F84F30 		strb	r3, [r7, #79]
3378:../fatfs/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 9429              		.loc 1 3378 0
 9430 0092 FB6B     		ldr	r3, [r7, #60]
 9431 0094 002B     		cmp	r3, #0
 9432 0096 02D1     		bne	.L588
 9433              		.loc 1 3378 0 is_stmt 0 discriminator 1
 9434 0098 0723     		movs	r3, #7
 9435 009a 87F84F30 		strb	r3, [r7, #79]
 9436              	.L588:
3379:../fatfs/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
 9437              		.loc 1 3379 0 is_stmt 1
 9438 009e FB6B     		ldr	r3, [r7, #60]
 9439 00a0 012B     		cmp	r3, #1
 9440 00a2 02D1     		bne	.L589
 9441              		.loc 1 3379 0 is_stmt 0 discriminator 1
 9442 00a4 0223     		movs	r3, #2
 9443 00a6 87F84F30 		strb	r3, [r7, #79]
 9444              	.L589:
3380:../fatfs/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 9445              		.loc 1 3380 0 is_stmt 1
 9446 00aa FB6B     		ldr	r3, [r7, #60]
 9447 00ac B3F1FF3F 		cmp	r3, #-1
 9448 00b0 02D1     		bne	.L590
 9449              		.loc 1 3380 0 is_stmt 0 discriminator 1
 9450 00b2 0123     		movs	r3, #1
 9451 00b4 87F84F30 		strb	r3, [r7, #79]
 9452              	.L590:
3381:../fatfs/ff.c **** 			if (res == FR_OK)					/* Flush FAT */
 9453              		.loc 1 3381 0 is_stmt 1
 9454 00b8 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 9455 00bc 002B     		cmp	r3, #0
 9456 00be 06D1     		bne	.L591
3382:../fatfs/ff.c **** 				res = sync_window(dj.fs);
 9457              		.loc 1 3382 0
 9458 00c0 7B69     		ldr	r3, [r7, #20]
 9459 00c2 1846     		mov	r0, r3
 9460 00c4 FFF7FEFF 		bl	sync_window
 9461 00c8 0346     		mov	r3, r0
 9462 00ca 87F84F30 		strb	r3, [r7, #79]
 9463              	.L591:
3383:../fatfs/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
 9464              		.loc 1 3383 0
 9465 00ce 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 9466 00d2 002B     		cmp	r3, #0
 9467 00d4 7DD1     		bne	.L592
3384:../fatfs/ff.c **** 				dsc = clust2sect(dj.fs, dcl);
 9468              		.loc 1 3384 0
 9469 00d6 7B69     		ldr	r3, [r7, #20]
 9470 00d8 1846     		mov	r0, r3
 9471 00da F96B     		ldr	r1, [r7, #60]
 9472 00dc FFF7FEFF 		bl	clust2sect
 9473 00e0 B864     		str	r0, [r7, #72]
3385:../fatfs/ff.c **** 				dir = dj.fs->win;
 9474              		.loc 1 3385 0
 9475 00e2 7B69     		ldr	r3, [r7, #20]
 9476 00e4 3833     		adds	r3, r3, #56
 9477 00e6 BB63     		str	r3, [r7, #56]
3386:../fatfs/ff.c **** 				mem_set(dir, 0, SS(dj.fatfs));
 9478              		.loc 1 3386 0
 9479 00e8 B86B     		ldr	r0, [r7, #56]
 9480 00ea 0021     		movs	r1, #0
 9481 00ec 4FF40072 		mov	r2, #512
 9482 00f0 FFF7FEFF 		bl	mem_set
3387:../fatfs/ff.c **** 				mem_set(dir+DIR_Name, ' ', 11);	/* Create "." entry */
 9483              		.loc 1 3387 0
 9484 00f4 B86B     		ldr	r0, [r7, #56]
 9485 00f6 2021     		movs	r1, #32
 9486 00f8 0B22     		movs	r2, #11
 9487 00fa FFF7FEFF 		bl	mem_set
3388:../fatfs/ff.c **** 				dir[DIR_Name] = '.';
 9488              		.loc 1 3388 0
 9489 00fe BB6B     		ldr	r3, [r7, #56]
 9490 0100 2E22     		movs	r2, #46
 9491 0102 1A70     		strb	r2, [r3]
3389:../fatfs/ff.c **** 				dir[DIR_Attr] = AM_DIR;
 9492              		.loc 1 3389 0
 9493 0104 BB6B     		ldr	r3, [r7, #56]
 9494 0106 0B33     		adds	r3, r3, #11
 9495 0108 1022     		movs	r2, #16
 9496 010a 1A70     		strb	r2, [r3]
3390:../fatfs/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tm);
 9497              		.loc 1 3390 0
 9498 010c BB6B     		ldr	r3, [r7, #56]
 9499 010e 1633     		adds	r3, r3, #22
 9500 0110 3A6C     		ldr	r2, [r7, #64]
 9501 0112 D2B2     		uxtb	r2, r2
 9502 0114 1A70     		strb	r2, [r3]
 9503 0116 BB6B     		ldr	r3, [r7, #56]
 9504 0118 1733     		adds	r3, r3, #23
 9505 011a 3A6C     		ldr	r2, [r7, #64]
 9506 011c 92B2     		uxth	r2, r2
 9507 011e 120A     		lsrs	r2, r2, #8
 9508 0120 92B2     		uxth	r2, r2
 9509 0122 D2B2     		uxtb	r2, r2
 9510 0124 1A70     		strb	r2, [r3]
 9511 0126 BB6B     		ldr	r3, [r7, #56]
 9512 0128 1833     		adds	r3, r3, #24
 9513 012a 3A6C     		ldr	r2, [r7, #64]
 9514 012c 120C     		lsrs	r2, r2, #16
 9515 012e D2B2     		uxtb	r2, r2
 9516 0130 1A70     		strb	r2, [r3]
 9517 0132 BB6B     		ldr	r3, [r7, #56]
 9518 0134 1933     		adds	r3, r3, #25
 9519 0136 3A6C     		ldr	r2, [r7, #64]
 9520 0138 120E     		lsrs	r2, r2, #24
 9521 013a D2B2     		uxtb	r2, r2
 9522 013c 1A70     		strb	r2, [r3]
3391:../fatfs/ff.c **** 				st_clust(dir, dcl);
 9523              		.loc 1 3391 0
 9524 013e B86B     		ldr	r0, [r7, #56]
 9525 0140 F96B     		ldr	r1, [r7, #60]
 9526 0142 FFF7FEFF 		bl	st_clust
3392:../fatfs/ff.c **** 				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
 9527              		.loc 1 3392 0
 9528 0146 BB6B     		ldr	r3, [r7, #56]
 9529 0148 2033     		adds	r3, r3, #32
 9530 014a 1846     		mov	r0, r3
 9531 014c B96B     		ldr	r1, [r7, #56]
 9532 014e 2022     		movs	r2, #32
 9533 0150 FFF7FEFF 		bl	mem_cpy
3393:../fatfs/ff.c **** 				dir[33] = '.'; pcl = dj.sclust;
 9534              		.loc 1 3393 0
 9535 0154 BB6B     		ldr	r3, [r7, #56]
 9536 0156 2133     		adds	r3, r3, #33
 9537 0158 2E22     		movs	r2, #46
 9538 015a 1A70     		strb	r2, [r3]
 9539 015c FB69     		ldr	r3, [r7, #28]
 9540 015e 7B64     		str	r3, [r7, #68]
3394:../fatfs/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 9541              		.loc 1 3394 0
 9542 0160 7B69     		ldr	r3, [r7, #20]
 9543 0162 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9544 0164 032B     		cmp	r3, #3
 9545 0166 06D1     		bne	.L593
 9546              		.loc 1 3394 0 is_stmt 0 discriminator 1
 9547 0168 7B69     		ldr	r3, [r7, #20]
 9548 016a DA6A     		ldr	r2, [r3, #44]
 9549 016c 7B6C     		ldr	r3, [r7, #68]
 9550 016e 9A42     		cmp	r2, r3
 9551 0170 01D1     		bne	.L593
3395:../fatfs/ff.c **** 					pcl = 0;
 9552              		.loc 1 3395 0 is_stmt 1
 9553 0172 0023     		movs	r3, #0
 9554 0174 7B64     		str	r3, [r7, #68]
 9555              	.L593:
3396:../fatfs/ff.c **** 				st_clust(dir+SZ_DIR, pcl);
 9556              		.loc 1 3396 0
 9557 0176 BB6B     		ldr	r3, [r7, #56]
 9558 0178 2033     		adds	r3, r3, #32
 9559 017a 1846     		mov	r0, r3
 9560 017c 796C     		ldr	r1, [r7, #68]
 9561 017e FFF7FEFF 		bl	st_clust
3397:../fatfs/ff.c **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 9562              		.loc 1 3397 0
 9563 0182 7B69     		ldr	r3, [r7, #20]
 9564 0184 9B78     		ldrb	r3, [r3, #2]
 9565 0186 87F84E30 		strb	r3, [r7, #78]
 9566 018a 1EE0     		b	.L594
 9567              	.L596:
3398:../fatfs/ff.c **** 					dj.fs->winsect = dsc++;
 9568              		.loc 1 3398 0
 9569 018c 7A69     		ldr	r2, [r7, #20]
 9570 018e BB6C     		ldr	r3, [r7, #72]
 9571 0190 591C     		adds	r1, r3, #1
 9572 0192 B964     		str	r1, [r7, #72]
 9573 0194 5363     		str	r3, [r2, #52]
3399:../fatfs/ff.c **** 					dj.fs->wflag = 1;
 9574              		.loc 1 3399 0
 9575 0196 7B69     		ldr	r3, [r7, #20]
 9576 0198 0122     		movs	r2, #1
 9577 019a 1A71     		strb	r2, [r3, #4]
3400:../fatfs/ff.c **** 					res = sync_window(dj.fs);
 9578              		.loc 1 3400 0
 9579 019c 7B69     		ldr	r3, [r7, #20]
 9580 019e 1846     		mov	r0, r3
 9581 01a0 FFF7FEFF 		bl	sync_window
 9582 01a4 0346     		mov	r3, r0
 9583 01a6 87F84F30 		strb	r3, [r7, #79]
3401:../fatfs/ff.c **** 					if (res != FR_OK) break;
 9584              		.loc 1 3401 0
 9585 01aa 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 9586 01ae 002B     		cmp	r3, #0
 9587 01b0 00D0     		beq	.L595
 9588 01b2 0EE0     		b	.L592
 9589              	.L595:
3402:../fatfs/ff.c **** 					mem_set(dir, 0, SS(dj.fatfs));
 9590              		.loc 1 3402 0 discriminator 2
 9591 01b4 B86B     		ldr	r0, [r7, #56]
 9592 01b6 0021     		movs	r1, #0
 9593 01b8 4FF40072 		mov	r2, #512
 9594 01bc FFF7FEFF 		bl	mem_set
3397:../fatfs/ff.c **** 					dj.fs->winsect = dsc++;
 9595              		.loc 1 3397 0 discriminator 2
 9596 01c0 97F84E30 		ldrb	r3, [r7, #78]	@ zero_extendqisi2
 9597 01c4 013B     		subs	r3, r3, #1
 9598 01c6 87F84E30 		strb	r3, [r7, #78]
 9599              	.L594:
3397:../fatfs/ff.c **** 					dj.fs->winsect = dsc++;
 9600              		.loc 1 3397 0 is_stmt 0 discriminator 1
 9601 01ca 97F84E30 		ldrb	r3, [r7, #78]	@ zero_extendqisi2
 9602 01ce 002B     		cmp	r3, #0
 9603 01d0 DCD1     		bne	.L596
 9604              	.L592:
3403:../fatfs/ff.c **** 				}
3404:../fatfs/ff.c **** 			}
3405:../fatfs/ff.c **** 			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
 9605              		.loc 1 3405 0 is_stmt 1
 9606 01d2 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 9607 01d6 002B     		cmp	r3, #0
 9608 01d8 07D1     		bne	.L597
 9609              		.loc 1 3405 0 is_stmt 0 discriminator 1
 9610 01da 07F11403 		add	r3, r7, #20
 9611 01de 1846     		mov	r0, r3
 9612 01e0 FFF7FEFF 		bl	dir_register
 9613 01e4 0346     		mov	r3, r0
 9614 01e6 87F84F30 		strb	r3, [r7, #79]
 9615              	.L597:
3406:../fatfs/ff.c **** 			if (res != FR_OK) {
 9616              		.loc 1 3406 0 is_stmt 1
 9617 01ea 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 9618 01ee 002B     		cmp	r3, #0
 9619 01f0 05D0     		beq	.L598
3407:../fatfs/ff.c **** 				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
 9620              		.loc 1 3407 0
 9621 01f2 7B69     		ldr	r3, [r7, #20]
 9622 01f4 1846     		mov	r0, r3
 9623 01f6 F96B     		ldr	r1, [r7, #60]
 9624 01f8 FFF7FEFF 		bl	remove_chain
 9625 01fc 2CE0     		b	.L585
 9626              	.L598:
3408:../fatfs/ff.c **** 			} else {
3409:../fatfs/ff.c **** 				dir = dj.dir;
 9627              		.loc 1 3409 0
 9628 01fe BB6A     		ldr	r3, [r7, #40]
 9629 0200 BB63     		str	r3, [r7, #56]
3410:../fatfs/ff.c **** 				dir[DIR_Attr] = AM_DIR;				/* Attribute */
 9630              		.loc 1 3410 0
 9631 0202 BB6B     		ldr	r3, [r7, #56]
 9632 0204 0B33     		adds	r3, r3, #11
 9633 0206 1022     		movs	r2, #16
 9634 0208 1A70     		strb	r2, [r3]
3411:../fatfs/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tm);		/* Created time */
 9635              		.loc 1 3411 0
 9636 020a BB6B     		ldr	r3, [r7, #56]
 9637 020c 1633     		adds	r3, r3, #22
 9638 020e 3A6C     		ldr	r2, [r7, #64]
 9639 0210 D2B2     		uxtb	r2, r2
 9640 0212 1A70     		strb	r2, [r3]
 9641 0214 BB6B     		ldr	r3, [r7, #56]
 9642 0216 1733     		adds	r3, r3, #23
 9643 0218 3A6C     		ldr	r2, [r7, #64]
 9644 021a 92B2     		uxth	r2, r2
 9645 021c 120A     		lsrs	r2, r2, #8
 9646 021e 92B2     		uxth	r2, r2
 9647 0220 D2B2     		uxtb	r2, r2
 9648 0222 1A70     		strb	r2, [r3]
 9649 0224 BB6B     		ldr	r3, [r7, #56]
 9650 0226 1833     		adds	r3, r3, #24
 9651 0228 3A6C     		ldr	r2, [r7, #64]
 9652 022a 120C     		lsrs	r2, r2, #16
 9653 022c D2B2     		uxtb	r2, r2
 9654 022e 1A70     		strb	r2, [r3]
 9655 0230 BB6B     		ldr	r3, [r7, #56]
 9656 0232 1933     		adds	r3, r3, #25
 9657 0234 3A6C     		ldr	r2, [r7, #64]
 9658 0236 120E     		lsrs	r2, r2, #24
 9659 0238 D2B2     		uxtb	r2, r2
 9660 023a 1A70     		strb	r2, [r3]
3412:../fatfs/ff.c **** 				st_clust(dir, dcl);					/* Table start cluster */
 9661              		.loc 1 3412 0
 9662 023c B86B     		ldr	r0, [r7, #56]
 9663 023e F96B     		ldr	r1, [r7, #60]
 9664 0240 FFF7FEFF 		bl	st_clust
3413:../fatfs/ff.c **** 				dj.fs->wflag = 1;
 9665              		.loc 1 3413 0
 9666 0244 7B69     		ldr	r3, [r7, #20]
 9667 0246 0122     		movs	r2, #1
 9668 0248 1A71     		strb	r2, [r3, #4]
3414:../fatfs/ff.c **** 				res = sync_fs(dj.fs);
 9669              		.loc 1 3414 0
 9670 024a 7B69     		ldr	r3, [r7, #20]
 9671 024c 1846     		mov	r0, r3
 9672 024e FFF7FEFF 		bl	sync_fs
 9673 0252 0346     		mov	r3, r0
 9674 0254 87F84F30 		strb	r3, [r7, #79]
 9675              	.L585:
3415:../fatfs/ff.c **** 			}
3416:../fatfs/ff.c **** 		}
3417:../fatfs/ff.c **** 		FREE_BUF();
3418:../fatfs/ff.c **** 	}
3419:../fatfs/ff.c **** 
3420:../fatfs/ff.c **** 	LEAVE_FF(dj.fatfs, res);
 9676              		.loc 1 3420 0
 9677 0258 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
3421:../fatfs/ff.c **** }
 9678              		.loc 1 3421 0
 9679 025c 1846     		mov	r0, r3
 9680 025e 5037     		adds	r7, r7, #80
 9681              		.cfi_def_cfa_offset 8
 9682 0260 BD46     		mov	sp, r7
 9683              		.cfi_def_cfa_register 13
 9684              		@ sp needed
 9685 0262 80BD     		pop	{r7, pc}
 9686              	.L601:
 9687              		.align	2
 9688              	.L600:
 9689 0264 00000000 		.word	LfnBuf
 9690              		.cfi_endproc
 9691              	.LFE48:
 9693              		.section	.text.f_chmod,"ax",%progbits
 9694              		.align	2
 9695              		.global	f_chmod
 9696              		.thumb
 9697              		.thumb_func
 9699              	f_chmod:
 9700              	.LFB49:
3422:../fatfs/ff.c **** 
3423:../fatfs/ff.c **** 
3424:../fatfs/ff.c **** 
3425:../fatfs/ff.c **** 
3426:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3427:../fatfs/ff.c **** /* Change Attribute                                                      */
3428:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3429:../fatfs/ff.c **** 
3430:../fatfs/ff.c **** FRESULT f_chmod (
3431:../fatfs/ff.c **** 	const TCHAR *path,	/* Pointer to the file path */
3432:../fatfs/ff.c **** 	BYTE value,			/* Attribute bits */
3433:../fatfs/ff.c **** 	BYTE mask			/* Attribute mask to change */
3434:../fatfs/ff.c **** )
3435:../fatfs/ff.c **** {
 9701              		.loc 1 3435 0
 9702              		.cfi_startproc
 9703              		@ args = 0, pretend = 0, frame = 64
 9704              		@ frame_needed = 1, uses_anonymous_args = 0
 9705 0000 80B5     		push	{r7, lr}
 9706              		.cfi_def_cfa_offset 8
 9707              		.cfi_offset 7, -8
 9708              		.cfi_offset 14, -4
 9709 0002 90B0     		sub	sp, sp, #64
 9710              		.cfi_def_cfa_offset 72
 9711 0004 00AF     		add	r7, sp, #0
 9712              		.cfi_def_cfa_register 7
 9713 0006 7860     		str	r0, [r7, #4]
 9714 0008 0B46     		mov	r3, r1
 9715 000a FB70     		strb	r3, [r7, #3]
 9716 000c 1346     		mov	r3, r2
 9717 000e BB70     		strb	r3, [r7, #2]
3436:../fatfs/ff.c **** 	FRESULT res;
3437:../fatfs/ff.c **** 	DIR dj;
3438:../fatfs/ff.c **** 	BYTE *dir;
3439:../fatfs/ff.c **** 	DEF_NAMEBUF;
3440:../fatfs/ff.c **** 
3441:../fatfs/ff.c **** 
3442:../fatfs/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
 9718              		.loc 1 3442 0
 9719 0010 3A1D     		adds	r2, r7, #4
 9720 0012 07F11403 		add	r3, r7, #20
 9721 0016 1046     		mov	r0, r2
 9722 0018 1946     		mov	r1, r3
 9723 001a 0122     		movs	r2, #1
 9724 001c FFF7FEFF 		bl	chk_mounted
 9725 0020 0346     		mov	r3, r0
 9726 0022 87F83F30 		strb	r3, [r7, #63]
3443:../fatfs/ff.c **** 	if (res == FR_OK) {
 9727              		.loc 1 3443 0
 9728 0026 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 9729 002a 002B     		cmp	r3, #0
 9730 002c 48D1     		bne	.L603
3444:../fatfs/ff.c **** 		INIT_BUF(dj);
 9731              		.loc 1 3444 0
 9732 002e 07F10803 		add	r3, r7, #8
 9733 0032 FB62     		str	r3, [r7, #44]
 9734 0034 254B     		ldr	r3, .L607
 9735 0036 3B63     		str	r3, [r7, #48]
3445:../fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9736              		.loc 1 3445 0
 9737 0038 7B68     		ldr	r3, [r7, #4]
 9738 003a 07F11402 		add	r2, r7, #20
 9739 003e 1046     		mov	r0, r2
 9740 0040 1946     		mov	r1, r3
 9741 0042 FFF7FEFF 		bl	follow_path
 9742 0046 0346     		mov	r3, r0
 9743 0048 87F83F30 		strb	r3, [r7, #63]
3446:../fatfs/ff.c **** 		FREE_BUF();
3447:../fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
 9744              		.loc 1 3447 0
 9745 004c 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 9746 0050 002B     		cmp	r3, #0
 9747 0052 09D1     		bne	.L604
 9748              		.loc 1 3447 0 is_stmt 0 discriminator 1
 9749 0054 FB6A     		ldr	r3, [r7, #44]
 9750 0056 0B33     		adds	r3, r3, #11
 9751 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9752 005a 03F02003 		and	r3, r3, #32
 9753 005e 002B     		cmp	r3, #0
 9754 0060 02D0     		beq	.L604
3448:../fatfs/ff.c **** 			res = FR_INVALID_NAME;
 9755              		.loc 1 3448 0 is_stmt 1
 9756 0062 0623     		movs	r3, #6
 9757 0064 87F83F30 		strb	r3, [r7, #63]
 9758              	.L604:
3449:../fatfs/ff.c **** 		if (res == FR_OK) {
 9759              		.loc 1 3449 0
 9760 0068 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 9761 006c 002B     		cmp	r3, #0
 9762 006e 27D1     		bne	.L603
3450:../fatfs/ff.c **** 			dir = dj.dir;
 9763              		.loc 1 3450 0
 9764 0070 BB6A     		ldr	r3, [r7, #40]
 9765 0072 BB63     		str	r3, [r7, #56]
3451:../fatfs/ff.c **** 			if (!dir) {						/* Is it a root directory? */
 9766              		.loc 1 3451 0
 9767 0074 BB6B     		ldr	r3, [r7, #56]
 9768 0076 002B     		cmp	r3, #0
 9769 0078 03D1     		bne	.L605
3452:../fatfs/ff.c **** 				res = FR_INVALID_NAME;
 9770              		.loc 1 3452 0
 9771 007a 0623     		movs	r3, #6
 9772 007c 87F83F30 		strb	r3, [r7, #63]
 9773 0080 1EE0     		b	.L603
 9774              	.L605:
3453:../fatfs/ff.c **** 			} else {						/* File or sub directory */
3454:../fatfs/ff.c **** 				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
 9775              		.loc 1 3454 0
 9776 0082 BB78     		ldrb	r3, [r7, #2]
 9777 0084 03F02703 		and	r3, r3, #39
 9778 0088 BB70     		strb	r3, [r7, #2]
3455:../fatfs/ff.c **** 				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 9779              		.loc 1 3455 0
 9780 008a BB6B     		ldr	r3, [r7, #56]
 9781 008c 0B33     		adds	r3, r3, #11
 9782 008e F978     		ldrb	r1, [r7, #3]
 9783 0090 BA78     		ldrb	r2, [r7, #2]
 9784 0092 0A40     		ands	r2, r2, r1
 9785 0094 D1B2     		uxtb	r1, r2
 9786 0096 BA6B     		ldr	r2, [r7, #56]
 9787 0098 0B32     		adds	r2, r2, #11
 9788 009a 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 9789 009c BA78     		ldrb	r2, [r7, #2]
 9790 009e D243     		mvns	r2, r2
 9791 00a0 D2B2     		uxtb	r2, r2
 9792 00a2 0240     		ands	r2, r2, r0
 9793 00a4 D2B2     		uxtb	r2, r2
 9794 00a6 0A43     		orrs	r2, r2, r1
 9795 00a8 D2B2     		uxtb	r2, r2
 9796 00aa 1A70     		strb	r2, [r3]
3456:../fatfs/ff.c **** 				dj.fs->wflag = 1;
 9797              		.loc 1 3456 0
 9798 00ac 7B69     		ldr	r3, [r7, #20]
 9799 00ae 0122     		movs	r2, #1
 9800 00b0 1A71     		strb	r2, [r3, #4]
3457:../fatfs/ff.c **** 				res = sync_fs(dj.fs);
 9801              		.loc 1 3457 0
 9802 00b2 7B69     		ldr	r3, [r7, #20]
 9803 00b4 1846     		mov	r0, r3
 9804 00b6 FFF7FEFF 		bl	sync_fs
 9805 00ba 0346     		mov	r3, r0
 9806 00bc 87F83F30 		strb	r3, [r7, #63]
 9807              	.L603:
3458:../fatfs/ff.c **** 			}
3459:../fatfs/ff.c **** 		}
3460:../fatfs/ff.c **** 	}
3461:../fatfs/ff.c **** 
3462:../fatfs/ff.c **** 	LEAVE_FF(dj.fatfs, res);
 9808              		.loc 1 3462 0
 9809 00c0 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
3463:../fatfs/ff.c **** }
 9810              		.loc 1 3463 0
 9811 00c4 1846     		mov	r0, r3
 9812 00c6 4037     		adds	r7, r7, #64
 9813              		.cfi_def_cfa_offset 8
 9814 00c8 BD46     		mov	sp, r7
 9815              		.cfi_def_cfa_register 13
 9816              		@ sp needed
 9817 00ca 80BD     		pop	{r7, pc}
 9818              	.L608:
 9819              		.align	2
 9820              	.L607:
 9821 00cc 00000000 		.word	LfnBuf
 9822              		.cfi_endproc
 9823              	.LFE49:
 9825              		.section	.text.f_utime,"ax",%progbits
 9826              		.align	2
 9827              		.global	f_utime
 9828              		.thumb
 9829              		.thumb_func
 9831              	f_utime:
 9832              	.LFB50:
3464:../fatfs/ff.c **** 
3465:../fatfs/ff.c **** 
3466:../fatfs/ff.c **** 
3467:../fatfs/ff.c **** 
3468:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3469:../fatfs/ff.c **** /* Change Timestamp                                                      */
3470:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3471:../fatfs/ff.c **** 
3472:../fatfs/ff.c **** FRESULT f_utime (
3473:../fatfs/ff.c **** 	const TCHAR *path,	/* Pointer to the file/directory name */
3474:../fatfs/ff.c **** 	const FILINFO *fno	/* Pointer to the time stamp to be set */
3475:../fatfs/ff.c **** )
3476:../fatfs/ff.c **** {
 9833              		.loc 1 3476 0
 9834              		.cfi_startproc
 9835              		@ args = 0, pretend = 0, frame = 64
 9836              		@ frame_needed = 1, uses_anonymous_args = 0
 9837 0000 80B5     		push	{r7, lr}
 9838              		.cfi_def_cfa_offset 8
 9839              		.cfi_offset 7, -8
 9840              		.cfi_offset 14, -4
 9841 0002 90B0     		sub	sp, sp, #64
 9842              		.cfi_def_cfa_offset 72
 9843 0004 00AF     		add	r7, sp, #0
 9844              		.cfi_def_cfa_register 7
 9845 0006 7860     		str	r0, [r7, #4]
 9846 0008 3960     		str	r1, [r7]
3477:../fatfs/ff.c **** 	FRESULT res;
3478:../fatfs/ff.c **** 	DIR dj;
3479:../fatfs/ff.c **** 	BYTE *dir;
3480:../fatfs/ff.c **** 	DEF_NAMEBUF;
3481:../fatfs/ff.c **** 
3482:../fatfs/ff.c **** 
3483:../fatfs/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
 9847              		.loc 1 3483 0
 9848 000a 3A1D     		adds	r2, r7, #4
 9849 000c 07F11403 		add	r3, r7, #20
 9850 0010 1046     		mov	r0, r2
 9851 0012 1946     		mov	r1, r3
 9852 0014 0122     		movs	r2, #1
 9853 0016 FFF7FEFF 		bl	chk_mounted
 9854 001a 0346     		mov	r3, r0
 9855 001c 87F83F30 		strb	r3, [r7, #63]
3484:../fatfs/ff.c **** 	if (res == FR_OK) {
 9856              		.loc 1 3484 0
 9857 0020 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 9858 0024 002B     		cmp	r3, #0
 9859 0026 4FD1     		bne	.L610
3485:../fatfs/ff.c **** 		INIT_BUF(dj);
 9860              		.loc 1 3485 0
 9861 0028 07F10803 		add	r3, r7, #8
 9862 002c FB62     		str	r3, [r7, #44]
 9863 002e 294B     		ldr	r3, .L614
 9864 0030 3B63     		str	r3, [r7, #48]
3486:../fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 9865              		.loc 1 3486 0
 9866 0032 7B68     		ldr	r3, [r7, #4]
 9867 0034 07F11402 		add	r2, r7, #20
 9868 0038 1046     		mov	r0, r2
 9869 003a 1946     		mov	r1, r3
 9870 003c FFF7FEFF 		bl	follow_path
 9871 0040 0346     		mov	r3, r0
 9872 0042 87F83F30 		strb	r3, [r7, #63]
3487:../fatfs/ff.c **** 		FREE_BUF();
3488:../fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
 9873              		.loc 1 3488 0
 9874 0046 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 9875 004a 002B     		cmp	r3, #0
 9876 004c 09D1     		bne	.L611
 9877              		.loc 1 3488 0 is_stmt 0 discriminator 1
 9878 004e FB6A     		ldr	r3, [r7, #44]
 9879 0050 0B33     		adds	r3, r3, #11
 9880 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9881 0054 03F02003 		and	r3, r3, #32
 9882 0058 002B     		cmp	r3, #0
 9883 005a 02D0     		beq	.L611
3489:../fatfs/ff.c **** 			res = FR_INVALID_NAME;
 9884              		.loc 1 3489 0 is_stmt 1
 9885 005c 0623     		movs	r3, #6
 9886 005e 87F83F30 		strb	r3, [r7, #63]
 9887              	.L611:
3490:../fatfs/ff.c **** 		if (res == FR_OK) {
 9888              		.loc 1 3490 0
 9889 0062 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 9890 0066 002B     		cmp	r3, #0
 9891 0068 2ED1     		bne	.L610
3491:../fatfs/ff.c **** 			dir = dj.dir;
 9892              		.loc 1 3491 0
 9893 006a BB6A     		ldr	r3, [r7, #40]
 9894 006c BB63     		str	r3, [r7, #56]
3492:../fatfs/ff.c **** 			if (!dir) {					/* Root directory */
 9895              		.loc 1 3492 0
 9896 006e BB6B     		ldr	r3, [r7, #56]
 9897 0070 002B     		cmp	r3, #0
 9898 0072 03D1     		bne	.L612
3493:../fatfs/ff.c **** 				res = FR_INVALID_NAME;
 9899              		.loc 1 3493 0
 9900 0074 0623     		movs	r3, #6
 9901 0076 87F83F30 		strb	r3, [r7, #63]
 9902 007a 25E0     		b	.L610
 9903              	.L612:
3494:../fatfs/ff.c **** 			} else {					/* File or sub-directory */
3495:../fatfs/ff.c **** 				ST_WORD(dir+DIR_WrtTime, fno->ftime);
 9904              		.loc 1 3495 0
 9905 007c BB6B     		ldr	r3, [r7, #56]
 9906 007e 1633     		adds	r3, r3, #22
 9907 0080 3A68     		ldr	r2, [r7]
 9908 0082 D288     		ldrh	r2, [r2, #6]
 9909 0084 D2B2     		uxtb	r2, r2
 9910 0086 1A70     		strb	r2, [r3]
 9911 0088 BB6B     		ldr	r3, [r7, #56]
 9912 008a 1733     		adds	r3, r3, #23
 9913 008c 3A68     		ldr	r2, [r7]
 9914 008e D288     		ldrh	r2, [r2, #6]
 9915 0090 120A     		lsrs	r2, r2, #8
 9916 0092 92B2     		uxth	r2, r2
 9917 0094 D2B2     		uxtb	r2, r2
 9918 0096 1A70     		strb	r2, [r3]
3496:../fatfs/ff.c **** 				ST_WORD(dir+DIR_WrtDate, fno->fdate);
 9919              		.loc 1 3496 0
 9920 0098 BB6B     		ldr	r3, [r7, #56]
 9921 009a 1833     		adds	r3, r3, #24
 9922 009c 3A68     		ldr	r2, [r7]
 9923 009e 9288     		ldrh	r2, [r2, #4]
 9924 00a0 D2B2     		uxtb	r2, r2
 9925 00a2 1A70     		strb	r2, [r3]
 9926 00a4 BB6B     		ldr	r3, [r7, #56]
 9927 00a6 1933     		adds	r3, r3, #25
 9928 00a8 3A68     		ldr	r2, [r7]
 9929 00aa 9288     		ldrh	r2, [r2, #4]
 9930 00ac 120A     		lsrs	r2, r2, #8
 9931 00ae 92B2     		uxth	r2, r2
 9932 00b0 D2B2     		uxtb	r2, r2
 9933 00b2 1A70     		strb	r2, [r3]
3497:../fatfs/ff.c **** 				dj.fs->wflag = 1;
 9934              		.loc 1 3497 0
 9935 00b4 7B69     		ldr	r3, [r7, #20]
 9936 00b6 0122     		movs	r2, #1
 9937 00b8 1A71     		strb	r2, [r3, #4]
3498:../fatfs/ff.c **** 				res = sync_fs(dj.fs);
 9938              		.loc 1 3498 0
 9939 00ba 7B69     		ldr	r3, [r7, #20]
 9940 00bc 1846     		mov	r0, r3
 9941 00be FFF7FEFF 		bl	sync_fs
 9942 00c2 0346     		mov	r3, r0
 9943 00c4 87F83F30 		strb	r3, [r7, #63]
 9944              	.L610:
3499:../fatfs/ff.c **** 			}
3500:../fatfs/ff.c **** 		}
3501:../fatfs/ff.c **** 	}
3502:../fatfs/ff.c **** 
3503:../fatfs/ff.c **** 	LEAVE_FF(dj.fatfs, res);
 9945              		.loc 1 3503 0
 9946 00c8 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
3504:../fatfs/ff.c **** }
 9947              		.loc 1 3504 0
 9948 00cc 1846     		mov	r0, r3
 9949 00ce 4037     		adds	r7, r7, #64
 9950              		.cfi_def_cfa_offset 8
 9951 00d0 BD46     		mov	sp, r7
 9952              		.cfi_def_cfa_register 13
 9953              		@ sp needed
 9954 00d2 80BD     		pop	{r7, pc}
 9955              	.L615:
 9956              		.align	2
 9957              	.L614:
 9958 00d4 00000000 		.word	LfnBuf
 9959              		.cfi_endproc
 9960              	.LFE50:
 9962              		.section	.text.f_rename,"ax",%progbits
 9963              		.align	2
 9964              		.global	f_rename
 9965              		.thumb
 9966              		.thumb_func
 9968              	f_rename:
 9969              	.LFB51:
3505:../fatfs/ff.c **** 
3506:../fatfs/ff.c **** 
3507:../fatfs/ff.c **** 
3508:../fatfs/ff.c **** 
3509:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3510:../fatfs/ff.c **** /* Rename File/Directory                                                 */
3511:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3512:../fatfs/ff.c **** 
3513:../fatfs/ff.c **** FRESULT f_rename (
3514:../fatfs/ff.c **** 	const TCHAR *path_old,	/* Pointer to the old name */
3515:../fatfs/ff.c **** 	const TCHAR *path_new	/* Pointer to the new name */
3516:../fatfs/ff.c **** )
3517:../fatfs/ff.c **** {
 9970              		.loc 1 3517 0
 9971              		.cfi_startproc
 9972              		@ args = 0, pretend = 0, frame = 128
 9973              		@ frame_needed = 1, uses_anonymous_args = 0
 9974 0000 90B5     		push	{r4, r7, lr}
 9975              		.cfi_def_cfa_offset 12
 9976              		.cfi_offset 4, -12
 9977              		.cfi_offset 7, -8
 9978              		.cfi_offset 14, -4
 9979 0002 A1B0     		sub	sp, sp, #132
 9980              		.cfi_def_cfa_offset 144
 9981 0004 00AF     		add	r7, sp, #0
 9982              		.cfi_def_cfa_register 7
 9983 0006 7860     		str	r0, [r7, #4]
 9984 0008 3960     		str	r1, [r7]
3518:../fatfs/ff.c **** 	FRESULT res;
3519:../fatfs/ff.c **** 	DIR djo, djn;
3520:../fatfs/ff.c **** 	BYTE buf[21], *dir;
3521:../fatfs/ff.c **** 	DWORD dw;
3522:../fatfs/ff.c **** 	DEF_NAMEBUF;
3523:../fatfs/ff.c **** 
3524:../fatfs/ff.c **** 
3525:../fatfs/ff.c **** 	res = chk_mounted(&path_old, &djo.fs, 1);
 9985              		.loc 1 3525 0
 9986 000a 3A1D     		adds	r2, r7, #4
 9987 000c 07F15003 		add	r3, r7, #80
 9988 0010 1046     		mov	r0, r2
 9989 0012 1946     		mov	r1, r3
 9990 0014 0122     		movs	r2, #1
 9991 0016 FFF7FEFF 		bl	chk_mounted
 9992 001a 0346     		mov	r3, r0
 9993 001c 87F87F30 		strb	r3, [r7, #127]
3526:../fatfs/ff.c **** 	if (res == FR_OK) {
 9994              		.loc 1 3526 0
 9995 0020 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 9996 0024 002B     		cmp	r3, #0
 9997 0026 40F0D180 		bne	.L617
3527:../fatfs/ff.c **** 		djn.fs = djo.fs;
 9998              		.loc 1 3527 0
 9999 002a 3B6D     		ldr	r3, [r7, #80]
 10000 002c FB62     		str	r3, [r7, #44]
3528:../fatfs/ff.c **** 		INIT_BUF(djo);
 10001              		.loc 1 3528 0
 10002 002e 07F10803 		add	r3, r7, #8
 10003 0032 BB66     		str	r3, [r7, #104]
 10004 0034 684B     		ldr	r3, .L627
 10005 0036 FB66     		str	r3, [r7, #108]
3529:../fatfs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 10006              		.loc 1 3529 0
 10007 0038 7B68     		ldr	r3, [r7, #4]
 10008 003a 07F15002 		add	r2, r7, #80
 10009 003e 1046     		mov	r0, r2
 10010 0040 1946     		mov	r1, r3
 10011 0042 FFF7FEFF 		bl	follow_path
 10012 0046 0346     		mov	r3, r0
 10013 0048 87F87F30 		strb	r3, [r7, #127]
3530:../fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
 10014              		.loc 1 3530 0
 10015 004c 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 10016 0050 002B     		cmp	r3, #0
 10017 0052 09D1     		bne	.L618
 10018              		.loc 1 3530 0 is_stmt 0 discriminator 1
 10019 0054 BB6E     		ldr	r3, [r7, #104]
 10020 0056 0B33     		adds	r3, r3, #11
 10021 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10022 005a 03F02003 		and	r3, r3, #32
 10023 005e 002B     		cmp	r3, #0
 10024 0060 02D0     		beq	.L618
3531:../fatfs/ff.c **** 			res = FR_INVALID_NAME;
 10025              		.loc 1 3531 0 is_stmt 1
 10026 0062 0623     		movs	r3, #6
 10027 0064 87F87F30 		strb	r3, [r7, #127]
 10028              	.L618:
3532:../fatfs/ff.c **** #if _FS_LOCK
3533:../fatfs/ff.c **** 		if (res == FR_OK) res = chk_lock(&djo, 2);
3534:../fatfs/ff.c **** #endif
3535:../fatfs/ff.c **** 		if (res == FR_OK) {						/* Old object is found */
 10029              		.loc 1 3535 0
 10030 0068 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 10031 006c 002B     		cmp	r3, #0
 10032 006e 40F0AD80 		bne	.L617
3536:../fatfs/ff.c **** 			if (!djo.dir) {						/* Is root dir? */
 10033              		.loc 1 3536 0
 10034 0072 7B6E     		ldr	r3, [r7, #100]
 10035 0074 002B     		cmp	r3, #0
 10036 0076 03D1     		bne	.L619
3537:../fatfs/ff.c **** 				res = FR_NO_FILE;
 10037              		.loc 1 3537 0
 10038 0078 0423     		movs	r3, #4
 10039 007a 87F87F30 		strb	r3, [r7, #127]
 10040 007e A5E0     		b	.L617
 10041              	.L619:
3538:../fatfs/ff.c **** 			} else {
3539:../fatfs/ff.c **** 				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
 10042              		.loc 1 3539 0
 10043 0080 7B6E     		ldr	r3, [r7, #100]
 10044 0082 0B33     		adds	r3, r3, #11
 10045 0084 07F11402 		add	r2, r7, #20
 10046 0088 1046     		mov	r0, r2
 10047 008a 1946     		mov	r1, r3
 10048 008c 1522     		movs	r2, #21
 10049 008e FFF7FEFF 		bl	mem_cpy
3540:../fatfs/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Check new object */
 10050              		.loc 1 3540 0
 10051 0092 07F12C02 		add	r2, r7, #44
 10052 0096 07F15003 		add	r3, r7, #80
 10053 009a 1046     		mov	r0, r2
 10054 009c 1946     		mov	r1, r3
 10055 009e 2422     		movs	r2, #36
 10056 00a0 FFF7FEFF 		bl	mem_cpy
3541:../fatfs/ff.c **** 				res = follow_path(&djn, path_new);
 10057              		.loc 1 3541 0
 10058 00a4 07F12C03 		add	r3, r7, #44
 10059 00a8 1846     		mov	r0, r3
 10060 00aa 3968     		ldr	r1, [r7]
 10061 00ac FFF7FEFF 		bl	follow_path
 10062 00b0 0346     		mov	r3, r0
 10063 00b2 87F87F30 		strb	r3, [r7, #127]
3542:../fatfs/ff.c **** 				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
 10064              		.loc 1 3542 0
 10065 00b6 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 10066 00ba 002B     		cmp	r3, #0
 10067 00bc 02D1     		bne	.L620
 10068              		.loc 1 3542 0 is_stmt 0 discriminator 1
 10069 00be 0823     		movs	r3, #8
 10070 00c0 87F87F30 		strb	r3, [r7, #127]
 10071              	.L620:
3543:../fatfs/ff.c **** 				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
 10072              		.loc 1 3543 0 is_stmt 1
 10073 00c4 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 10074 00c8 042B     		cmp	r3, #4
 10075 00ca 7FD1     		bne	.L617
3544:../fatfs/ff.c **** /* Start critical section that any interruption can cause a cross-link */
3545:../fatfs/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
 10076              		.loc 1 3545 0
 10077 00cc 07F12C03 		add	r3, r7, #44
 10078 00d0 1846     		mov	r0, r3
 10079 00d2 FFF7FEFF 		bl	dir_register
 10080 00d6 0346     		mov	r3, r0
 10081 00d8 87F87F30 		strb	r3, [r7, #127]
3546:../fatfs/ff.c **** 					if (res == FR_OK) {
 10082              		.loc 1 3546 0
 10083 00dc 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 10084 00e0 002B     		cmp	r3, #0
 10085 00e2 73D1     		bne	.L617
3547:../fatfs/ff.c **** 						dir = djn.dir;					/* Copy object information except for name */
 10086              		.loc 1 3547 0
 10087 00e4 3B6C     		ldr	r3, [r7, #64]
 10088 00e6 BB67     		str	r3, [r7, #120]
3548:../fatfs/ff.c **** 						mem_cpy(dir+13, buf+2, 19);
 10089              		.loc 1 3548 0
 10090 00e8 BB6F     		ldr	r3, [r7, #120]
 10091 00ea 03F10D02 		add	r2, r3, #13
 10092 00ee 07F11403 		add	r3, r7, #20
 10093 00f2 0233     		adds	r3, r3, #2
 10094 00f4 1046     		mov	r0, r2
 10095 00f6 1946     		mov	r1, r3
 10096 00f8 1322     		movs	r2, #19
 10097 00fa FFF7FEFF 		bl	mem_cpy
3549:../fatfs/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
 10098              		.loc 1 3549 0
 10099 00fe BB6F     		ldr	r3, [r7, #120]
 10100 0100 0B33     		adds	r3, r3, #11
 10101 0102 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10102 0104 42F02002 		orr	r2, r2, #32
 10103 0108 D2B2     		uxtb	r2, r2
 10104 010a 1A70     		strb	r2, [r3]
3550:../fatfs/ff.c **** 						djo.fs->wflag = 1;
 10105              		.loc 1 3550 0
 10106 010c 3B6D     		ldr	r3, [r7, #80]
 10107 010e 0122     		movs	r2, #1
 10108 0110 1A71     		strb	r2, [r3, #4]
3551:../fatfs/ff.c **** 						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the direct
 10109              		.loc 1 3551 0
 10110 0112 BA6D     		ldr	r2, [r7, #88]
 10111 0114 7B6B     		ldr	r3, [r7, #52]
 10112 0116 9A42     		cmp	r2, r3
 10113 0118 41D0     		beq	.L621
 10114              		.loc 1 3551 0 is_stmt 0 discriminator 1
 10115 011a BB6F     		ldr	r3, [r7, #120]
 10116 011c 0B33     		adds	r3, r3, #11
 10117 011e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10118 0120 03F01003 		and	r3, r3, #16
 10119 0124 002B     		cmp	r3, #0
 10120 0126 3AD0     		beq	.L621
3552:../fatfs/ff.c **** 							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
 10121              		.loc 1 3552 0 is_stmt 1
 10122 0128 3C6D     		ldr	r4, [r7, #80]
 10123 012a 3B6D     		ldr	r3, [r7, #80]
 10124 012c 1846     		mov	r0, r3
 10125 012e B96F     		ldr	r1, [r7, #120]
 10126 0130 FFF7FEFF 		bl	ld_clust
 10127 0134 0346     		mov	r3, r0
 10128 0136 2046     		mov	r0, r4
 10129 0138 1946     		mov	r1, r3
 10130 013a FFF7FEFF 		bl	clust2sect
 10131 013e 7867     		str	r0, [r7, #116]
3553:../fatfs/ff.c **** 							if (!dw) {
 10132              		.loc 1 3553 0
 10133 0140 7B6F     		ldr	r3, [r7, #116]
 10134 0142 002B     		cmp	r3, #0
 10135 0144 03D1     		bne	.L622
3554:../fatfs/ff.c **** 								res = FR_INT_ERR;
 10136              		.loc 1 3554 0
 10137 0146 0223     		movs	r3, #2
 10138 0148 87F87F30 		strb	r3, [r7, #127]
 10139 014c 27E0     		b	.L621
 10140              	.L622:
3555:../fatfs/ff.c **** 							} else {
3556:../fatfs/ff.c **** 								res = move_window(djo.fs, dw);
 10141              		.loc 1 3556 0
 10142 014e 3B6D     		ldr	r3, [r7, #80]
 10143 0150 1846     		mov	r0, r3
 10144 0152 796F     		ldr	r1, [r7, #116]
 10145 0154 FFF7FEFF 		bl	move_window
 10146 0158 0346     		mov	r3, r0
 10147 015a 87F87F30 		strb	r3, [r7, #127]
3557:../fatfs/ff.c **** 								dir = djo.fs->win+SZ_DIR;	/* .. entry */
 10148              		.loc 1 3557 0
 10149 015e 3B6D     		ldr	r3, [r7, #80]
 10150 0160 5833     		adds	r3, r3, #88
 10151 0162 BB67     		str	r3, [r7, #120]
3558:../fatfs/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
 10152              		.loc 1 3558 0
 10153 0164 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 10154 0168 002B     		cmp	r3, #0
 10155 016a 18D1     		bne	.L621
 10156              		.loc 1 3558 0 is_stmt 0 discriminator 1
 10157 016c BB6F     		ldr	r3, [r7, #120]
 10158 016e 0133     		adds	r3, r3, #1
 10159 0170 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10160 0172 2E2B     		cmp	r3, #46
 10161 0174 13D1     		bne	.L621
3559:../fatfs/ff.c **** 									dw = (djo.fs->fs_type == FS_FAT32 && djn.sclust == djo.fs->dirbase) ? 0 : djn.sclust;
 10162              		.loc 1 3559 0 is_stmt 1
 10163 0176 3B6D     		ldr	r3, [r7, #80]
 10164 0178 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10165 017a 032B     		cmp	r3, #3
 10166 017c 04D1     		bne	.L623
 10167              		.loc 1 3559 0 is_stmt 0 discriminator 2
 10168 017e 7A6B     		ldr	r2, [r7, #52]
 10169 0180 3B6D     		ldr	r3, [r7, #80]
 10170 0182 DB6A     		ldr	r3, [r3, #44]
 10171 0184 9A42     		cmp	r2, r3
 10172 0186 01D0     		beq	.L624
 10173              	.L623:
 10174              		.loc 1 3559 0 discriminator 3
 10175 0188 7B6B     		ldr	r3, [r7, #52]
 10176 018a 00E0     		b	.L625
 10177              	.L624:
 10178              		.loc 1 3559 0 discriminator 4
 10179 018c 0023     		movs	r3, #0
 10180              	.L625:
 10181              		.loc 1 3559 0 discriminator 6
 10182 018e 7B67     		str	r3, [r7, #116]
3560:../fatfs/ff.c **** 									st_clust(dir, dw);
 10183              		.loc 1 3560 0 is_stmt 1 discriminator 6
 10184 0190 B86F     		ldr	r0, [r7, #120]
 10185 0192 796F     		ldr	r1, [r7, #116]
 10186 0194 FFF7FEFF 		bl	st_clust
3561:../fatfs/ff.c **** 									djo.fs->wflag = 1;
 10187              		.loc 1 3561 0 discriminator 6
 10188 0198 3B6D     		ldr	r3, [r7, #80]
 10189 019a 0122     		movs	r2, #1
 10190 019c 1A71     		strb	r2, [r3, #4]
 10191              	.L621:
3562:../fatfs/ff.c **** 								}
3563:../fatfs/ff.c **** 							}
3564:../fatfs/ff.c **** 						}
3565:../fatfs/ff.c **** 						if (res == FR_OK) {
 10192              		.loc 1 3565 0
 10193 019e 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 10194 01a2 002B     		cmp	r3, #0
 10195 01a4 12D1     		bne	.L617
3566:../fatfs/ff.c **** 							res = dir_remove(&djo);		/* Remove old entry */
 10196              		.loc 1 3566 0
 10197 01a6 07F15003 		add	r3, r7, #80
 10198 01aa 1846     		mov	r0, r3
 10199 01ac FFF7FEFF 		bl	dir_remove
 10200 01b0 0346     		mov	r3, r0
 10201 01b2 87F87F30 		strb	r3, [r7, #127]
3567:../fatfs/ff.c **** 							if (res == FR_OK)
 10202              		.loc 1 3567 0
 10203 01b6 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 10204 01ba 002B     		cmp	r3, #0
 10205 01bc 06D1     		bne	.L617
3568:../fatfs/ff.c **** 								res = sync_fs(djo.fs);
 10206              		.loc 1 3568 0
 10207 01be 3B6D     		ldr	r3, [r7, #80]
 10208 01c0 1846     		mov	r0, r3
 10209 01c2 FFF7FEFF 		bl	sync_fs
 10210 01c6 0346     		mov	r3, r0
 10211 01c8 87F87F30 		strb	r3, [r7, #127]
 10212              	.L617:
3569:../fatfs/ff.c **** 						}
3570:../fatfs/ff.c **** 					}
3571:../fatfs/ff.c **** /* End critical section */
3572:../fatfs/ff.c **** 				}
3573:../fatfs/ff.c **** 			}
3574:../fatfs/ff.c **** 		}
3575:../fatfs/ff.c **** 		FREE_BUF();
3576:../fatfs/ff.c **** 	}
3577:../fatfs/ff.c **** 
3578:../fatfs/ff.c **** 	LEAVE_FF(djo.fatfs, res);
 10213              		.loc 1 3578 0
 10214 01cc 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
3579:../fatfs/ff.c **** }
 10215              		.loc 1 3579 0
 10216 01d0 1846     		mov	r0, r3
 10217 01d2 8437     		adds	r7, r7, #132
 10218              		.cfi_def_cfa_offset 12
 10219 01d4 BD46     		mov	sp, r7
 10220              		.cfi_def_cfa_register 13
 10221              		@ sp needed
 10222 01d6 90BD     		pop	{r4, r7, pc}
 10223              	.L628:
 10224              		.align	2
 10225              	.L627:
 10226 01d8 00000000 		.word	LfnBuf
 10227              		.cfi_endproc
 10228              	.LFE51:
 10230              		.section	.text.f_getlabel,"ax",%progbits
 10231              		.align	2
 10232              		.global	f_getlabel
 10233              		.thumb
 10234              		.thumb_func
 10236              	f_getlabel:
 10237              	.LFB52:
3580:../fatfs/ff.c **** 
3581:../fatfs/ff.c **** #endif /* !_FS_READONLY */
3582:../fatfs/ff.c **** #endif /* _FS_MINIMIZE == 0 */
3583:../fatfs/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
3584:../fatfs/ff.c **** #endif /* _FS_MINIMIZE <= 2 */
3585:../fatfs/ff.c **** 
3586:../fatfs/ff.c **** 
3587:../fatfs/ff.c **** 
3588:../fatfs/ff.c **** #if _USE_LABEL
3589:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3590:../fatfs/ff.c **** /* Get volume label                                                      */
3591:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3592:../fatfs/ff.c **** 
3593:../fatfs/ff.c **** FRESULT f_getlabel (
3594:../fatfs/ff.c **** 	const TCHAR* path,	/* Path name of the logical drive number */
3595:../fatfs/ff.c **** 	TCHAR* label,		/* Pointer to a buffer to return the volume label */
3596:../fatfs/ff.c **** 	DWORD* sn			/* Pointer to a variable to return the volume serial number */
3597:../fatfs/ff.c **** )
3598:../fatfs/ff.c **** {
 10238              		.loc 1 3598 0
 10239              		.cfi_startproc
 10240              		@ args = 0, pretend = 0, frame = 64
 10241              		@ frame_needed = 1, uses_anonymous_args = 0
 10242 0000 80B5     		push	{r7, lr}
 10243              		.cfi_def_cfa_offset 8
 10244              		.cfi_offset 7, -8
 10245              		.cfi_offset 14, -4
 10246 0002 90B0     		sub	sp, sp, #64
 10247              		.cfi_def_cfa_offset 72
 10248 0004 00AF     		add	r7, sp, #0
 10249              		.cfi_def_cfa_register 7
 10250 0006 F860     		str	r0, [r7, #12]
 10251 0008 B960     		str	r1, [r7, #8]
 10252 000a 7A60     		str	r2, [r7, #4]
3599:../fatfs/ff.c **** 	FRESULT res;
3600:../fatfs/ff.c **** 	DIR dj;
3601:../fatfs/ff.c **** 	UINT i, j;
3602:../fatfs/ff.c **** 
3603:../fatfs/ff.c **** 
3604:../fatfs/ff.c **** 	/* Get logical drive */
3605:../fatfs/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
 10253              		.loc 1 3605 0
 10254 000c 07F10C02 		add	r2, r7, #12
 10255 0010 07F11003 		add	r3, r7, #16
 10256 0014 1046     		mov	r0, r2
 10257 0016 1946     		mov	r1, r3
 10258 0018 0022     		movs	r2, #0
 10259 001a FFF7FEFF 		bl	chk_mounted
 10260 001e 0346     		mov	r3, r0
 10261 0020 87F83F30 		strb	r3, [r7, #63]
3606:../fatfs/ff.c **** 
3607:../fatfs/ff.c **** 	/* Get volume label */
3608:../fatfs/ff.c **** 	if (res == FR_OK && label) {
 10262              		.loc 1 3608 0
 10263 0024 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 10264 0028 002B     		cmp	r3, #0
 10265 002a 42D1     		bne	.L630
 10266              		.loc 1 3608 0 is_stmt 0 discriminator 1
 10267 002c BB68     		ldr	r3, [r7, #8]
 10268 002e 002B     		cmp	r3, #0
 10269 0030 3FD0     		beq	.L630
3609:../fatfs/ff.c **** 		dj.sclust = 0;					/* Open root dir */
 10270              		.loc 1 3609 0 is_stmt 1
 10271 0032 0023     		movs	r3, #0
 10272 0034 BB61     		str	r3, [r7, #24]
3610:../fatfs/ff.c **** 		res = dir_sdi(&dj, 0);
 10273              		.loc 1 3610 0
 10274 0036 07F11003 		add	r3, r7, #16
 10275 003a 1846     		mov	r0, r3
 10276 003c 0021     		movs	r1, #0
 10277 003e FFF7FEFF 		bl	dir_sdi
 10278 0042 0346     		mov	r3, r0
 10279 0044 87F83F30 		strb	r3, [r7, #63]
3611:../fatfs/ff.c **** 		if (res == FR_OK) {
 10280              		.loc 1 3611 0
 10281 0048 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 10282 004c 002B     		cmp	r3, #0
 10283 004e 30D1     		bne	.L630
3612:../fatfs/ff.c **** 			res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
 10284              		.loc 1 3612 0
 10285 0050 07F11003 		add	r3, r7, #16
 10286 0054 1846     		mov	r0, r3
 10287 0056 0121     		movs	r1, #1
 10288 0058 FFF7FEFF 		bl	dir_read
 10289 005c 0346     		mov	r3, r0
 10290 005e 87F83F30 		strb	r3, [r7, #63]
3613:../fatfs/ff.c **** 			if (res == FR_OK) {			/* A volume label is exist */
 10291              		.loc 1 3613 0
 10292 0062 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 10293 0066 002B     		cmp	r3, #0
 10294 0068 19D1     		bne	.L631
3614:../fatfs/ff.c **** #if _LFN_UNICODE
3615:../fatfs/ff.c **** 				WCHAR w;
3616:../fatfs/ff.c **** 				i = j = 0;
3617:../fatfs/ff.c **** 				do {
3618:../fatfs/ff.c **** 					w = (i < 11) ? dj.dir[i++] : ' ';
3619:../fatfs/ff.c **** 					if (IsDBCS1(w) && i < 11 && IsDBCS2(dj.dir[i]))
3620:../fatfs/ff.c **** 						w = (w << 8) | dj.dir[i++];
3621:../fatfs/ff.c **** 					label[j++] = ff_convert(w, 1);
3622:../fatfs/ff.c **** 				} while (j < 11);
3623:../fatfs/ff.c **** #else
3624:../fatfs/ff.c **** 				mem_cpy(label, dj.dir, 11);
 10295              		.loc 1 3624 0
 10296 006a 7B6A     		ldr	r3, [r7, #36]
 10297 006c B868     		ldr	r0, [r7, #8]
 10298 006e 1946     		mov	r1, r3
 10299 0070 0B22     		movs	r2, #11
 10300 0072 FFF7FEFF 		bl	mem_cpy
3625:../fatfs/ff.c **** #endif
3626:../fatfs/ff.c **** 				j = 11;
 10301              		.loc 1 3626 0
 10302 0076 0B23     		movs	r3, #11
 10303 0078 BB63     		str	r3, [r7, #56]
 10304              	.L633:
3627:../fatfs/ff.c **** 				do {
3628:../fatfs/ff.c **** 					label[j] = 0;
 10305              		.loc 1 3628 0
 10306 007a BA68     		ldr	r2, [r7, #8]
 10307 007c BB6B     		ldr	r3, [r7, #56]
 10308 007e 1344     		add	r3, r3, r2
 10309 0080 0022     		movs	r2, #0
 10310 0082 1A70     		strb	r2, [r3]
3629:../fatfs/ff.c **** 					if (!j) break;
 10311              		.loc 1 3629 0
 10312 0084 BB6B     		ldr	r3, [r7, #56]
 10313 0086 002B     		cmp	r3, #0
 10314 0088 00D1     		bne	.L632
 10315 008a 08E0     		b	.L631
 10316              	.L632:
3630:../fatfs/ff.c **** 				} while (label[--j] == ' ');
 10317              		.loc 1 3630 0
 10318 008c BB6B     		ldr	r3, [r7, #56]
 10319 008e 013B     		subs	r3, r3, #1
 10320 0090 BB63     		str	r3, [r7, #56]
 10321 0092 BA68     		ldr	r2, [r7, #8]
 10322 0094 BB6B     		ldr	r3, [r7, #56]
 10323 0096 1344     		add	r3, r3, r2
 10324 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10325 009a 202B     		cmp	r3, #32
 10326 009c EDD0     		beq	.L633
 10327              	.L631:
3631:../fatfs/ff.c **** 			}
3632:../fatfs/ff.c **** 			if (res == FR_NO_FILE) {	/* No label, return nul string */
 10328              		.loc 1 3632 0
 10329 009e 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 10330 00a2 042B     		cmp	r3, #4
 10331 00a4 05D1     		bne	.L630
3633:../fatfs/ff.c **** 				label[0] = 0;
 10332              		.loc 1 3633 0
 10333 00a6 BB68     		ldr	r3, [r7, #8]
 10334 00a8 0022     		movs	r2, #0
 10335 00aa 1A70     		strb	r2, [r3]
3634:../fatfs/ff.c **** 				res = FR_OK;
 10336              		.loc 1 3634 0
 10337 00ac 0023     		movs	r3, #0
 10338 00ae 87F83F30 		strb	r3, [r7, #63]
 10339              	.L630:
3635:../fatfs/ff.c **** 			}
3636:../fatfs/ff.c **** 		}
3637:../fatfs/ff.c **** 	}
3638:../fatfs/ff.c **** 
3639:../fatfs/ff.c **** 	/* Get volume serial number */
3640:../fatfs/ff.c **** 	if (res == FR_OK && sn) {
 10340              		.loc 1 3640 0
 10341 00b2 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 10342 00b6 002B     		cmp	r3, #0
 10343 00b8 37D1     		bne	.L634
 10344              		.loc 1 3640 0 is_stmt 0 discriminator 1
 10345 00ba 7B68     		ldr	r3, [r7, #4]
 10346 00bc 002B     		cmp	r3, #0
 10347 00be 34D0     		beq	.L634
3641:../fatfs/ff.c **** 		res = move_window(dj.fs, dj.fs->volbase);
 10348              		.loc 1 3641 0 is_stmt 1
 10349 00c0 3A69     		ldr	r2, [r7, #16]
 10350 00c2 3B69     		ldr	r3, [r7, #16]
 10351 00c4 5B6A     		ldr	r3, [r3, #36]
 10352 00c6 1046     		mov	r0, r2
 10353 00c8 1946     		mov	r1, r3
 10354 00ca FFF7FEFF 		bl	move_window
 10355 00ce 0346     		mov	r3, r0
 10356 00d0 87F83F30 		strb	r3, [r7, #63]
3642:../fatfs/ff.c **** 		if (res == FR_OK) {
 10357              		.loc 1 3642 0
 10358 00d4 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 10359 00d8 002B     		cmp	r3, #0
 10360 00da 26D1     		bne	.L634
3643:../fatfs/ff.c **** 			i = dj.fs->fs_type == FS_FAT32 ? BS_VolID32 : BS_VolID;
 10361              		.loc 1 3643 0
 10362 00dc 3B69     		ldr	r3, [r7, #16]
 10363 00de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10364 00e0 032B     		cmp	r3, #3
 10365 00e2 01D1     		bne	.L635
 10366              		.loc 1 3643 0 is_stmt 0 discriminator 1
 10367 00e4 4323     		movs	r3, #67
 10368 00e6 00E0     		b	.L636
 10369              	.L635:
 10370              		.loc 1 3643 0 discriminator 2
 10371 00e8 2723     		movs	r3, #39
 10372              	.L636:
 10373              		.loc 1 3643 0 discriminator 4
 10374 00ea 7B63     		str	r3, [r7, #52]
3644:../fatfs/ff.c **** 			*sn = LD_DWORD(&dj.fs->win[i]);
 10375              		.loc 1 3644 0 is_stmt 1 discriminator 4
 10376 00ec 3A69     		ldr	r2, [r7, #16]
 10377 00ee 7B6B     		ldr	r3, [r7, #52]
 10378 00f0 0333     		adds	r3, r3, #3
 10379 00f2 1344     		add	r3, r3, r2
 10380 00f4 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 10381 00f8 1A06     		lsls	r2, r3, #24
 10382 00fa 3969     		ldr	r1, [r7, #16]
 10383 00fc 7B6B     		ldr	r3, [r7, #52]
 10384 00fe 0233     		adds	r3, r3, #2
 10385 0100 0B44     		add	r3, r3, r1
 10386 0102 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 10387 0106 1B04     		lsls	r3, r3, #16
 10388 0108 1343     		orrs	r3, r3, r2
 10389 010a 3969     		ldr	r1, [r7, #16]
 10390 010c 7A6B     		ldr	r2, [r7, #52]
 10391 010e 0132     		adds	r2, r2, #1
 10392 0110 0A44     		add	r2, r2, r1
 10393 0112 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
 10394 0116 1202     		lsls	r2, r2, #8
 10395 0118 1343     		orrs	r3, r3, r2
 10396 011a 3969     		ldr	r1, [r7, #16]
 10397 011c 7A6B     		ldr	r2, [r7, #52]
 10398 011e 0A44     		add	r2, r2, r1
 10399 0120 3832     		adds	r2, r2, #56
 10400 0122 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 10401 0124 1A43     		orrs	r2, r2, r3
 10402 0126 7B68     		ldr	r3, [r7, #4]
 10403 0128 1A60     		str	r2, [r3]
 10404              	.L634:
3645:../fatfs/ff.c **** 		}
3646:../fatfs/ff.c **** 	}
3647:../fatfs/ff.c **** 
3648:../fatfs/ff.c **** 	LEAVE_FF(dj.fatfs, res);
 10405              		.loc 1 3648 0
 10406 012a 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
3649:../fatfs/ff.c **** }
 10407              		.loc 1 3649 0
 10408 012e 1846     		mov	r0, r3
 10409 0130 4037     		adds	r7, r7, #64
 10410              		.cfi_def_cfa_offset 8
 10411 0132 BD46     		mov	sp, r7
 10412              		.cfi_def_cfa_register 13
 10413              		@ sp needed
 10414 0134 80BD     		pop	{r7, pc}
 10415              		.cfi_endproc
 10416              	.LFE52:
 10418 0136 00BF     		.section	.rodata
 10419 0013 00       		.align	2
 10420              	.LC2:
 10421 0014 222A2B2C 		.ascii	"\"*+,.:;<=>?[]|\177\000"
 10421      2E3A3B3C 
 10421      3D3E3F5B 
 10421      5D7C7F00 
 10422              		.section	.text.f_setlabel,"ax",%progbits
 10423              		.align	2
 10424              		.global	f_setlabel
 10425              		.thumb
 10426              		.thumb_func
 10428              	f_setlabel:
 10429              	.LFB53:
3650:../fatfs/ff.c **** 
3651:../fatfs/ff.c **** 
3652:../fatfs/ff.c **** 
3653:../fatfs/ff.c **** #if !_FS_READONLY
3654:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3655:../fatfs/ff.c **** /* Set volume label                                                      */
3656:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3657:../fatfs/ff.c **** 
3658:../fatfs/ff.c **** FRESULT f_setlabel (
3659:../fatfs/ff.c **** 	const TCHAR* label	/* Pointer to the volume label to set */
3660:../fatfs/ff.c **** )
3661:../fatfs/ff.c **** {
 10430              		.loc 1 3661 0
 10431              		.cfi_startproc
 10432              		@ args = 0, pretend = 0, frame = 80
 10433              		@ frame_needed = 1, uses_anonymous_args = 0
 10434 0000 80B5     		push	{r7, lr}
 10435              		.cfi_def_cfa_offset 8
 10436              		.cfi_offset 7, -8
 10437              		.cfi_offset 14, -4
 10438 0002 94B0     		sub	sp, sp, #80
 10439              		.cfi_def_cfa_offset 88
 10440 0004 00AF     		add	r7, sp, #0
 10441              		.cfi_def_cfa_register 7
 10442 0006 7860     		str	r0, [r7, #4]
3662:../fatfs/ff.c **** 	FRESULT res;
3663:../fatfs/ff.c **** 	DIR dj;
3664:../fatfs/ff.c **** 	BYTE vn[11];
3665:../fatfs/ff.c **** 	UINT i, j, sl;
3666:../fatfs/ff.c **** 	WCHAR w;
3667:../fatfs/ff.c **** 	DWORD tm;
3668:../fatfs/ff.c **** 
3669:../fatfs/ff.c **** 
3670:../fatfs/ff.c **** 	/* Get logical drive */
3671:../fatfs/ff.c **** 	res = chk_mounted(&label, &dj.fs, 1);
 10443              		.loc 1 3671 0
 10444 0008 3A1D     		adds	r2, r7, #4
 10445 000a 07F11403 		add	r3, r7, #20
 10446 000e 1046     		mov	r0, r2
 10447 0010 1946     		mov	r1, r3
 10448 0012 0122     		movs	r2, #1
 10449 0014 FFF7FEFF 		bl	chk_mounted
 10450 0018 0346     		mov	r3, r0
 10451 001a 87F84F30 		strb	r3, [r7, #79]
3672:../fatfs/ff.c **** 	if (res) LEAVE_FF(dj.fatfs, res);
 10452              		.loc 1 3672 0
 10453 001e 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 10454 0022 002B     		cmp	r3, #0
 10455 0024 02D0     		beq	.L639
 10456              		.loc 1 3672 0 is_stmt 0 discriminator 1
 10457 0026 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 10458 002a 1DE1     		b	.L659
 10459              	.L639:
3673:../fatfs/ff.c **** 
3674:../fatfs/ff.c **** 	/* Create a volume label in directory form */
3675:../fatfs/ff.c **** 	vn[0] = 0;
 10460              		.loc 1 3675 0 is_stmt 1
 10461 002c 0023     		movs	r3, #0
 10462 002e 3B72     		strb	r3, [r7, #8]
3676:../fatfs/ff.c **** 	for (sl = 0; label[sl]; sl++) ;				/* Get name length */
 10463              		.loc 1 3676 0
 10464 0030 0023     		movs	r3, #0
 10465 0032 3B64     		str	r3, [r7, #64]
 10466 0034 02E0     		b	.L641
 10467              	.L642:
 10468              		.loc 1 3676 0 is_stmt 0 discriminator 3
 10469 0036 3B6C     		ldr	r3, [r7, #64]
 10470 0038 0133     		adds	r3, r3, #1
 10471 003a 3B64     		str	r3, [r7, #64]
 10472              	.L641:
 10473              		.loc 1 3676 0 discriminator 1
 10474 003c 7A68     		ldr	r2, [r7, #4]
 10475 003e 3B6C     		ldr	r3, [r7, #64]
 10476 0040 1344     		add	r3, r3, r2
 10477 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10478 0044 002B     		cmp	r3, #0
 10479 0046 F6D1     		bne	.L642
3677:../fatfs/ff.c **** 	for ( ; sl && label[sl-1] == ' '; sl--) ;	/* Remove trailing spaces */
 10480              		.loc 1 3677 0 is_stmt 1
 10481 0048 02E0     		b	.L643
 10482              	.L645:
 10483              		.loc 1 3677 0 is_stmt 0 discriminator 3
 10484 004a 3B6C     		ldr	r3, [r7, #64]
 10485 004c 013B     		subs	r3, r3, #1
 10486 004e 3B64     		str	r3, [r7, #64]
 10487              	.L643:
 10488              		.loc 1 3677 0 discriminator 1
 10489 0050 3B6C     		ldr	r3, [r7, #64]
 10490 0052 002B     		cmp	r3, #0
 10491 0054 06D0     		beq	.L644
 10492              		.loc 1 3677 0 discriminator 2
 10493 0056 7A68     		ldr	r2, [r7, #4]
 10494 0058 3B6C     		ldr	r3, [r7, #64]
 10495 005a 013B     		subs	r3, r3, #1
 10496 005c 1344     		add	r3, r3, r2
 10497 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10498 0060 202B     		cmp	r3, #32
 10499 0062 F2D0     		beq	.L645
 10500              	.L644:
3678:../fatfs/ff.c **** 	if (sl) {	/* Create volume label in directory form */
 10501              		.loc 1 3678 0 is_stmt 1
 10502 0064 3B6C     		ldr	r3, [r7, #64]
 10503 0066 002B     		cmp	r3, #0
 10504 0068 5AD0     		beq	.L646
3679:../fatfs/ff.c **** 		i = j = 0;
 10505              		.loc 1 3679 0
 10506 006a 0023     		movs	r3, #0
 10507 006c 7B64     		str	r3, [r7, #68]
 10508 006e 7B6C     		ldr	r3, [r7, #68]
 10509 0070 BB64     		str	r3, [r7, #72]
 10510              	.L652:
3680:../fatfs/ff.c **** 		do {
3681:../fatfs/ff.c **** #if _LFN_UNICODE
3682:../fatfs/ff.c **** 			w = ff_convert(ff_wtoupper(label[i++]), 0);
3683:../fatfs/ff.c **** #else
3684:../fatfs/ff.c **** 			w = (BYTE)label[i++];
 10511              		.loc 1 3684 0
 10512 0072 7A68     		ldr	r2, [r7, #4]
 10513 0074 BB6C     		ldr	r3, [r7, #72]
 10514 0076 591C     		adds	r1, r3, #1
 10515 0078 B964     		str	r1, [r7, #72]
 10516 007a 1344     		add	r3, r3, r2
 10517 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10518 007e FB87     		strh	r3, [r7, #62]	@ movhi
3685:../fatfs/ff.c **** 			if (IsDBCS1(w))
3686:../fatfs/ff.c **** 				w = (j < 10 && i < sl && IsDBCS2(label[i])) ? (w << 8) | (BYTE)label[i++] : 0;
3687:../fatfs/ff.c **** #if _USE_LFN
3688:../fatfs/ff.c **** 			w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
 10519              		.loc 1 3688 0
 10520 0080 FB8F     		ldrh	r3, [r7, #62]
 10521 0082 1846     		mov	r0, r3
 10522 0084 0121     		movs	r1, #1
 10523 0086 FFF7FEFF 		bl	ff_convert
 10524 008a 0346     		mov	r3, r0
 10525 008c 1846     		mov	r0, r3
 10526 008e FFF7FEFF 		bl	ff_wtoupper
 10527 0092 0346     		mov	r3, r0
 10528 0094 1846     		mov	r0, r3
 10529 0096 0021     		movs	r1, #0
 10530 0098 FFF7FEFF 		bl	ff_convert
 10531 009c 0346     		mov	r3, r0
 10532 009e FB87     		strh	r3, [r7, #62]	@ movhi
3689:../fatfs/ff.c **** #else
3690:../fatfs/ff.c **** 			if (IsLower(w)) w -= 0x20;			/* To upper ASCII chars */
3691:../fatfs/ff.c **** #ifdef _EXCVT
3692:../fatfs/ff.c **** 			if (w >= 0x80) w = ExCvt[w - 0x80];	/* To upper extended chars (SBCS cfg) */
3693:../fatfs/ff.c **** #else
3694:../fatfs/ff.c **** 			if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended chars (ASCII cfg) */
3695:../fatfs/ff.c **** #endif
3696:../fatfs/ff.c **** #endif
3697:../fatfs/ff.c **** #endif
3698:../fatfs/ff.c **** 			if (!w || chk_chr("\"*+,.:;<=>\?[]|\x7F", w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) /* Reject i
 10533              		.loc 1 3698 0
 10534 00a0 FB8F     		ldrh	r3, [r7, #62]
 10535 00a2 002B     		cmp	r3, #0
 10536 00a4 10D0     		beq	.L647
 10537              		.loc 1 3698 0 is_stmt 0 discriminator 1
 10538 00a6 FB8F     		ldrh	r3, [r7, #62]
 10539 00a8 7148     		ldr	r0, .L660
 10540 00aa 1946     		mov	r1, r3
 10541 00ac FFF7FEFF 		bl	chk_chr
 10542 00b0 0346     		mov	r3, r0
 10543 00b2 002B     		cmp	r3, #0
 10544 00b4 08D1     		bne	.L647
 10545              		.loc 1 3698 0 discriminator 2
 10546 00b6 FB8F     		ldrh	r3, [r7, #62]
 10547 00b8 FF2B     		cmp	r3, #255
 10548 00ba 01D9     		bls	.L648
 10549              		.loc 1 3698 0 discriminator 3
 10550 00bc 0A22     		movs	r2, #10
 10551 00be 00E0     		b	.L649
 10552              	.L648:
 10553              		.loc 1 3698 0 discriminator 4
 10554 00c0 0B22     		movs	r2, #11
 10555              	.L649:
 10556              		.loc 1 3698 0 discriminator 6
 10557 00c2 7B6C     		ldr	r3, [r7, #68]
 10558 00c4 9A42     		cmp	r2, r3
 10559 00c6 01D8     		bhi	.L650
 10560              	.L647:
3699:../fatfs/ff.c **** 				LEAVE_FF(dj.fatfs, FR_INVALID_NAME);
 10561              		.loc 1 3699 0 is_stmt 1
 10562 00c8 0623     		movs	r3, #6
 10563 00ca CDE0     		b	.L659
 10564              	.L650:
3700:../fatfs/ff.c **** 			if (w >= 0x100) vn[j++] = (BYTE)(w >> 8);
 10565              		.loc 1 3700 0
 10566 00cc FB8F     		ldrh	r3, [r7, #62]
 10567 00ce FF2B     		cmp	r3, #255
 10568 00d0 0BD9     		bls	.L651
 10569              		.loc 1 3700 0 is_stmt 0 discriminator 1
 10570 00d2 7B6C     		ldr	r3, [r7, #68]
 10571 00d4 5A1C     		adds	r2, r3, #1
 10572 00d6 7A64     		str	r2, [r7, #68]
 10573 00d8 FA8F     		ldrh	r2, [r7, #62]
 10574 00da 120A     		lsrs	r2, r2, #8
 10575 00dc 92B2     		uxth	r2, r2
 10576 00de D2B2     		uxtb	r2, r2
 10577 00e0 07F15001 		add	r1, r7, #80
 10578 00e4 0B44     		add	r3, r3, r1
 10579 00e6 03F8482C 		strb	r2, [r3, #-72]
 10580              	.L651:
3701:../fatfs/ff.c **** 			vn[j++] = (BYTE)w;
 10581              		.loc 1 3701 0 is_stmt 1
 10582 00ea 7B6C     		ldr	r3, [r7, #68]
 10583 00ec 5A1C     		adds	r2, r3, #1
 10584 00ee 7A64     		str	r2, [r7, #68]
 10585 00f0 FA8F     		ldrh	r2, [r7, #62]	@ movhi
 10586 00f2 D2B2     		uxtb	r2, r2
 10587 00f4 07F15001 		add	r1, r7, #80
 10588 00f8 0B44     		add	r3, r3, r1
 10589 00fa 03F8482C 		strb	r2, [r3, #-72]
3702:../fatfs/ff.c **** 		} while (i < sl);
 10590              		.loc 1 3702 0
 10591 00fe BA6C     		ldr	r2, [r7, #72]
 10592 0100 3B6C     		ldr	r3, [r7, #64]
 10593 0102 9A42     		cmp	r2, r3
 10594 0104 B5D3     		bcc	.L652
3703:../fatfs/ff.c **** 		while (j < 11) vn[j++] = ' ';
 10595              		.loc 1 3703 0
 10596 0106 08E0     		b	.L653
 10597              	.L654:
 10598              		.loc 1 3703 0 is_stmt 0 discriminator 2
 10599 0108 7B6C     		ldr	r3, [r7, #68]
 10600 010a 5A1C     		adds	r2, r3, #1
 10601 010c 7A64     		str	r2, [r7, #68]
 10602 010e 07F15002 		add	r2, r7, #80
 10603 0112 1344     		add	r3, r3, r2
 10604 0114 2022     		movs	r2, #32
 10605 0116 03F8482C 		strb	r2, [r3, #-72]
 10606              	.L653:
 10607              		.loc 1 3703 0 discriminator 1
 10608 011a 7B6C     		ldr	r3, [r7, #68]
 10609 011c 0A2B     		cmp	r3, #10
 10610 011e F3D9     		bls	.L654
 10611              	.L646:
3704:../fatfs/ff.c **** 	}
3705:../fatfs/ff.c **** 
3706:../fatfs/ff.c **** 	/* Set volume label */
3707:../fatfs/ff.c **** 	dj.sclust = 0;					/* Open root dir */
 10612              		.loc 1 3707 0 is_stmt 1
 10613 0120 0023     		movs	r3, #0
 10614 0122 FB61     		str	r3, [r7, #28]
3708:../fatfs/ff.c **** 	res = dir_sdi(&dj, 0);
 10615              		.loc 1 3708 0
 10616 0124 07F11403 		add	r3, r7, #20
 10617 0128 1846     		mov	r0, r3
 10618 012a 0021     		movs	r1, #0
 10619 012c FFF7FEFF 		bl	dir_sdi
 10620 0130 0346     		mov	r3, r0
 10621 0132 87F84F30 		strb	r3, [r7, #79]
3709:../fatfs/ff.c **** 	if (res == FR_OK) {
 10622              		.loc 1 3709 0
 10623 0136 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 10624 013a 002B     		cmp	r3, #0
 10625 013c 40F09280 		bne	.L655
3710:../fatfs/ff.c **** 		res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
 10626              		.loc 1 3710 0
 10627 0140 07F11403 		add	r3, r7, #20
 10628 0144 1846     		mov	r0, r3
 10629 0146 0121     		movs	r1, #1
 10630 0148 FFF7FEFF 		bl	dir_read
 10631 014c 0346     		mov	r3, r0
 10632 014e 87F84F30 		strb	r3, [r7, #79]
3711:../fatfs/ff.c **** 		if (res == FR_OK) {			/* A volume label is found */
 10633              		.loc 1 3711 0
 10634 0152 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 10635 0156 002B     		cmp	r3, #0
 10636 0158 35D1     		bne	.L656
3712:../fatfs/ff.c **** 			if (vn[0]) {
 10637              		.loc 1 3712 0
 10638 015a 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 10639 015c 002B     		cmp	r3, #0
 10640 015e 24D0     		beq	.L657
3713:../fatfs/ff.c **** 				mem_cpy(dj.dir, vn, 11);	/* Change the volume label name */
 10641              		.loc 1 3713 0
 10642 0160 BA6A     		ldr	r2, [r7, #40]
 10643 0162 07F10803 		add	r3, r7, #8
 10644 0166 1046     		mov	r0, r2
 10645 0168 1946     		mov	r1, r3
 10646 016a 0B22     		movs	r2, #11
 10647 016c FFF7FEFF 		bl	mem_cpy
3714:../fatfs/ff.c **** 				tm = get_fattime();
 10648              		.loc 1 3714 0
 10649 0170 FFF7FEFF 		bl	get_fattime
 10650 0174 B863     		str	r0, [r7, #56]
3715:../fatfs/ff.c **** 				ST_DWORD(dj.dir+DIR_WrtTime, tm);
 10651              		.loc 1 3715 0
 10652 0176 BB6A     		ldr	r3, [r7, #40]
 10653 0178 1633     		adds	r3, r3, #22
 10654 017a BA6B     		ldr	r2, [r7, #56]
 10655 017c D2B2     		uxtb	r2, r2
 10656 017e 1A70     		strb	r2, [r3]
 10657 0180 BB6A     		ldr	r3, [r7, #40]
 10658 0182 1733     		adds	r3, r3, #23
 10659 0184 BA6B     		ldr	r2, [r7, #56]
 10660 0186 92B2     		uxth	r2, r2
 10661 0188 120A     		lsrs	r2, r2, #8
 10662 018a 92B2     		uxth	r2, r2
 10663 018c D2B2     		uxtb	r2, r2
 10664 018e 1A70     		strb	r2, [r3]
 10665 0190 BB6A     		ldr	r3, [r7, #40]
 10666 0192 1833     		adds	r3, r3, #24
 10667 0194 BA6B     		ldr	r2, [r7, #56]
 10668 0196 120C     		lsrs	r2, r2, #16
 10669 0198 D2B2     		uxtb	r2, r2
 10670 019a 1A70     		strb	r2, [r3]
 10671 019c BB6A     		ldr	r3, [r7, #40]
 10672 019e 1933     		adds	r3, r3, #25
 10673 01a0 BA6B     		ldr	r2, [r7, #56]
 10674 01a2 120E     		lsrs	r2, r2, #24
 10675 01a4 D2B2     		uxtb	r2, r2
 10676 01a6 1A70     		strb	r2, [r3]
 10677 01a8 02E0     		b	.L658
 10678              	.L657:
3716:../fatfs/ff.c **** 			} else {
3717:../fatfs/ff.c **** 				dj.dir[0] = DDE;			/* Remove the volume label */
 10679              		.loc 1 3717 0
 10680 01aa BB6A     		ldr	r3, [r7, #40]
 10681 01ac E522     		movs	r2, #229
 10682 01ae 1A70     		strb	r2, [r3]
 10683              	.L658:
3718:../fatfs/ff.c **** 			}
3719:../fatfs/ff.c **** 			dj.fs->wflag = 1;
 10684              		.loc 1 3719 0
 10685 01b0 7B69     		ldr	r3, [r7, #20]
 10686 01b2 0122     		movs	r2, #1
 10687 01b4 1A71     		strb	r2, [r3, #4]
3720:../fatfs/ff.c **** 			res = sync_fs(dj.fs);
 10688              		.loc 1 3720 0
 10689 01b6 7B69     		ldr	r3, [r7, #20]
 10690 01b8 1846     		mov	r0, r3
 10691 01ba FFF7FEFF 		bl	sync_fs
 10692 01be 0346     		mov	r3, r0
 10693 01c0 87F84F30 		strb	r3, [r7, #79]
 10694 01c4 4EE0     		b	.L655
 10695              	.L656:
3721:../fatfs/ff.c **** 		} else {					/* No volume label is found or error */
3722:../fatfs/ff.c **** 			if (res == FR_NO_FILE) {
 10696              		.loc 1 3722 0
 10697 01c6 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 10698 01ca 042B     		cmp	r3, #4
 10699 01cc 4AD1     		bne	.L655
3723:../fatfs/ff.c **** 				res = FR_OK;
 10700              		.loc 1 3723 0
 10701 01ce 0023     		movs	r3, #0
 10702 01d0 87F84F30 		strb	r3, [r7, #79]
3724:../fatfs/ff.c **** 				if (vn[0]) {				/* Create volume label as new */
 10703              		.loc 1 3724 0
 10704 01d4 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 10705 01d6 002B     		cmp	r3, #0
 10706 01d8 44D0     		beq	.L655
3725:../fatfs/ff.c **** 					res = dir_alloc(&dj, 1);	/* Allocate an entry for volume label */
 10707              		.loc 1 3725 0
 10708 01da 07F11403 		add	r3, r7, #20
 10709 01de 1846     		mov	r0, r3
 10710 01e0 0121     		movs	r1, #1
 10711 01e2 FFF7FEFF 		bl	dir_alloc
 10712 01e6 0346     		mov	r3, r0
 10713 01e8 87F84F30 		strb	r3, [r7, #79]
3726:../fatfs/ff.c **** 					if (res == FR_OK) {
 10714              		.loc 1 3726 0
 10715 01ec 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 10716 01f0 002B     		cmp	r3, #0
 10717 01f2 37D1     		bne	.L655
3727:../fatfs/ff.c **** 						mem_set(dj.dir, 0, SZ_DIR);	/* Set volume label */
 10718              		.loc 1 3727 0
 10719 01f4 BB6A     		ldr	r3, [r7, #40]
 10720 01f6 1846     		mov	r0, r3
 10721 01f8 0021     		movs	r1, #0
 10722 01fa 2022     		movs	r2, #32
 10723 01fc FFF7FEFF 		bl	mem_set
3728:../fatfs/ff.c **** 						mem_cpy(dj.dir, vn, 11);
 10724              		.loc 1 3728 0
 10725 0200 BA6A     		ldr	r2, [r7, #40]
 10726 0202 07F10803 		add	r3, r7, #8
 10727 0206 1046     		mov	r0, r2
 10728 0208 1946     		mov	r1, r3
 10729 020a 0B22     		movs	r2, #11
 10730 020c FFF7FEFF 		bl	mem_cpy
3729:../fatfs/ff.c **** 						dj.dir[DIR_Attr] = AM_VOL;
 10731              		.loc 1 3729 0
 10732 0210 BB6A     		ldr	r3, [r7, #40]
 10733 0212 0B33     		adds	r3, r3, #11
 10734 0214 0822     		movs	r2, #8
 10735 0216 1A70     		strb	r2, [r3]
3730:../fatfs/ff.c **** 						tm = get_fattime();
 10736              		.loc 1 3730 0
 10737 0218 FFF7FEFF 		bl	get_fattime
 10738 021c B863     		str	r0, [r7, #56]
3731:../fatfs/ff.c **** 						ST_DWORD(dj.dir+DIR_WrtTime, tm);
 10739              		.loc 1 3731 0
 10740 021e BB6A     		ldr	r3, [r7, #40]
 10741 0220 1633     		adds	r3, r3, #22
 10742 0222 BA6B     		ldr	r2, [r7, #56]
 10743 0224 D2B2     		uxtb	r2, r2
 10744 0226 1A70     		strb	r2, [r3]
 10745 0228 BB6A     		ldr	r3, [r7, #40]
 10746 022a 1733     		adds	r3, r3, #23
 10747 022c BA6B     		ldr	r2, [r7, #56]
 10748 022e 92B2     		uxth	r2, r2
 10749 0230 120A     		lsrs	r2, r2, #8
 10750 0232 92B2     		uxth	r2, r2
 10751 0234 D2B2     		uxtb	r2, r2
 10752 0236 1A70     		strb	r2, [r3]
 10753 0238 BB6A     		ldr	r3, [r7, #40]
 10754 023a 1833     		adds	r3, r3, #24
 10755 023c BA6B     		ldr	r2, [r7, #56]
 10756 023e 120C     		lsrs	r2, r2, #16
 10757 0240 D2B2     		uxtb	r2, r2
 10758 0242 1A70     		strb	r2, [r3]
 10759 0244 BB6A     		ldr	r3, [r7, #40]
 10760 0246 1933     		adds	r3, r3, #25
 10761 0248 BA6B     		ldr	r2, [r7, #56]
 10762 024a 120E     		lsrs	r2, r2, #24
 10763 024c D2B2     		uxtb	r2, r2
 10764 024e 1A70     		strb	r2, [r3]
3732:../fatfs/ff.c **** 						dj.fs->wflag = 1;
 10765              		.loc 1 3732 0
 10766 0250 7B69     		ldr	r3, [r7, #20]
 10767 0252 0122     		movs	r2, #1
 10768 0254 1A71     		strb	r2, [r3, #4]
3733:../fatfs/ff.c **** 						res = sync_fs(dj.fs);
 10769              		.loc 1 3733 0
 10770 0256 7B69     		ldr	r3, [r7, #20]
 10771 0258 1846     		mov	r0, r3
 10772 025a FFF7FEFF 		bl	sync_fs
 10773 025e 0346     		mov	r3, r0
 10774 0260 87F84F30 		strb	r3, [r7, #79]
 10775              	.L655:
3734:../fatfs/ff.c **** 					}
3735:../fatfs/ff.c **** 				}
3736:../fatfs/ff.c **** 			}
3737:../fatfs/ff.c **** 		}
3738:../fatfs/ff.c **** 	}
3739:../fatfs/ff.c **** 
3740:../fatfs/ff.c **** 	LEAVE_FF(dj.fatfs, res);
 10776              		.loc 1 3740 0
 10777 0264 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 10778              	.L659:
3741:../fatfs/ff.c **** }
 10779              		.loc 1 3741 0 discriminator 1
 10780 0268 1846     		mov	r0, r3
 10781 026a 5037     		adds	r7, r7, #80
 10782              		.cfi_def_cfa_offset 8
 10783 026c BD46     		mov	sp, r7
 10784              		.cfi_def_cfa_register 13
 10785              		@ sp needed
 10786 026e 80BD     		pop	{r7, pc}
 10787              	.L661:
 10788              		.align	2
 10789              	.L660:
 10790 0270 14000000 		.word	.LC2
 10791              		.cfi_endproc
 10792              	.LFE53:
 10794              		.section	.rodata
 10795              		.align	2
 10796              	.LC3:
 10797 0024 EBFE904D 		.ascii	"\353\376\220MSDOS5.0\000"
 10797      53444F53 
 10797      352E3000 
 10798              		.align	2
 10799              	.LC4:
 10800 0030 4E4F204E 		.ascii	"NO NAME    FAT32   \000"
 10800      414D4520 
 10800      20202046 
 10800      41543332 
 10800      20202000 
 10801              		.align	2
 10802              	.LC5:
 10803 0044 4E4F204E 		.ascii	"NO NAME    FAT     \000"
 10803      414D4520 
 10803      20202046 
 10803      41542020 
 10803      20202000 
 10804              		.section	.text.f_mkfs,"ax",%progbits
 10805              		.align	2
 10806              		.global	f_mkfs
 10807              		.thumb
 10808              		.thumb_func
 10810              	f_mkfs:
 10811              	.LFB54:
3742:../fatfs/ff.c **** 
3743:../fatfs/ff.c **** #endif /* !_FS_READONLY */
3744:../fatfs/ff.c **** #endif /* _USE_LABEL */
3745:../fatfs/ff.c **** 
3746:../fatfs/ff.c **** 
3747:../fatfs/ff.c **** 
3748:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3749:../fatfs/ff.c **** /* Forward data to the stream directly (available on only tiny cfg)      */
3750:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3751:../fatfs/ff.c **** #if _USE_FORWARD && _FS_TINY
3752:../fatfs/ff.c **** 
3753:../fatfs/ff.c **** FRESULT f_forward (
3754:../fatfs/ff.c **** 	FIL *fp, 						/* Pointer to the file object */
3755:../fatfs/ff.c **** 	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
3756:../fatfs/ff.c **** 	UINT btf,						/* Number of bytes to forward */
3757:../fatfs/ff.c **** 	UINT *bf						/* Pointer to number of bytes forwarded */
3758:../fatfs/ff.c **** )
3759:../fatfs/ff.c **** {
3760:../fatfs/ff.c **** 	FRESULT res;
3761:../fatfs/ff.c **** 	DWORD remain, clst, sect;
3762:../fatfs/ff.c **** 	UINT rcnt;
3763:../fatfs/ff.c **** 	BYTE csect;
3764:../fatfs/ff.c **** 
3765:../fatfs/ff.c **** 
3766:../fatfs/ff.c **** 	*bf = 0;	/* Clear transfer byte counter */
3767:../fatfs/ff.c **** 
3768:../fatfs/ff.c **** 	res = validate(fp);								/* Check validity of the object */
3769:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fatfs, res);
3770:../fatfs/ff.c **** 	if (fp->flag & FA__ERROR)						/* Check error flag */
3771:../fatfs/ff.c **** 		LEAVE_FF(fp->fatfs, FR_INT_ERR);
3772:../fatfs/ff.c **** 	if (!(fp->flag & FA_READ))						/* Check access mode */
3773:../fatfs/ff.c **** 		LEAVE_FF(fp->fatfs, FR_DENIED);
3774:../fatfs/ff.c **** 
3775:../fatfs/ff.c **** 	remain = fp->fsize - fp->fptr;
3776:../fatfs/ff.c **** 	if (btf > remain) btf = (UINT)remain;			/* Truncate btf by remaining bytes */
3777:../fatfs/ff.c **** 
3778:../fatfs/ff.c **** 	for ( ;  btf && (*func)(0, 0);					/* Repeat until all data transferred or stream becomes busy */
3779:../fatfs/ff.c **** 		fp->fptr += rcnt, *bf += rcnt, btf -= rcnt) {
3780:../fatfs/ff.c **** 		csect = (BYTE)(fp->fptr / SS(fp->fatfs) & (fp->fatfs->csize - 1));	/* Sector offset in the cluste
3781:../fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fatfs)) == 0) {			/* On the sector boundary? */
3782:../fatfs/ff.c **** 			if (!csect) {							/* On the cluster boundary? */
3783:../fatfs/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
3784:../fatfs/ff.c **** 					fp->sclust : get_fat(fp->fatfs, fp->clust);
3785:../fatfs/ff.c **** 				if (clst <= 1) ABORT(fp->fatfs, FR_INT_ERR);
3786:../fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fatfs, FR_DISK_ERR);
3787:../fatfs/ff.c **** 				fp->clust = clst;					/* Update current cluster */
3788:../fatfs/ff.c **** 			}
3789:../fatfs/ff.c **** 		}
3790:../fatfs/ff.c **** 		sect = clust2sect(fp->fatfs, fp->clust);		/* Get current data sector */
3791:../fatfs/ff.c **** 		if (!sect) ABORT(fp->fatfs, FR_INT_ERR);
3792:../fatfs/ff.c **** 		sect += csect;
3793:../fatfs/ff.c **** 		if (move_window(fp->fatfs, sect))				/* Move sector window */
3794:../fatfs/ff.c **** 			ABORT(fp->fatfs, FR_DISK_ERR);
3795:../fatfs/ff.c **** 		fp->dsect = sect;
3796:../fatfs/ff.c **** 		rcnt = SS(fp->fatfs) - (WORD)(fp->fptr % SS(fp->fatfs));	/* Forward data from sector window */
3797:../fatfs/ff.c **** 		if (rcnt > btf) rcnt = btf;
3798:../fatfs/ff.c **** 		rcnt = (*func)(&fp->fatfs->win[(WORD)fp->fptr % SS(fp->fatfs)], rcnt);
3799:../fatfs/ff.c **** 		if (!rcnt) ABORT(fp->fatfs, FR_INT_ERR);
3800:../fatfs/ff.c **** 	}
3801:../fatfs/ff.c **** 
3802:../fatfs/ff.c **** 	LEAVE_FF(fp->fatfs, FR_OK);
3803:../fatfs/ff.c **** }
3804:../fatfs/ff.c **** #endif /* _USE_FORWARD */
3805:../fatfs/ff.c **** 
3806:../fatfs/ff.c **** 
3807:../fatfs/ff.c **** 
3808:../fatfs/ff.c **** #if _USE_MKFS && !_FS_READONLY
3809:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3810:../fatfs/ff.c **** /* Create File System on the Drive                                       */
3811:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3812:../fatfs/ff.c **** #define N_ROOTDIR	512		/* Number of root dir entries for FAT12/16 */
3813:../fatfs/ff.c **** #define N_FATS		1		/* Number of FAT copies (1 or 2) */
3814:../fatfs/ff.c **** 
3815:../fatfs/ff.c **** 
3816:../fatfs/ff.c **** FRESULT f_mkfs (
3817:../fatfs/ff.c **** 	BYTE vol,		/* Logical drive number */
3818:../fatfs/ff.c **** 	BYTE sfd,		/* Partitioning rule 0:FDISK, 1:SFD */
3819:../fatfs/ff.c **** 	UINT au			/* Allocation unit size [bytes] */
3820:../fatfs/ff.c **** )
3821:../fatfs/ff.c **** {
 10812              		.loc 1 3821 0
 10813              		.cfi_startproc
 10814              		@ args = 0, pretend = 0, frame = 80
 10815              		@ frame_needed = 1, uses_anonymous_args = 0
 10816 0000 80B5     		push	{r7, lr}
 10817              		.cfi_def_cfa_offset 8
 10818              		.cfi_offset 7, -8
 10819              		.cfi_offset 14, -4
 10820 0002 94B0     		sub	sp, sp, #80
 10821              		.cfi_def_cfa_offset 88
 10822 0004 00AF     		add	r7, sp, #0
 10823              		.cfi_def_cfa_register 7
 10824 0006 0346     		mov	r3, r0
 10825 0008 3A60     		str	r2, [r7]
 10826 000a FB71     		strb	r3, [r7, #7]
 10827 000c 0B46     		mov	r3, r1
 10828 000e BB71     		strb	r3, [r7, #6]
3822:../fatfs/ff.c **** 	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
3823:../fatfs/ff.c **** 	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
3824:../fatfs/ff.c **** 	BYTE fmt, md, sys, *tbl, pdrv, part;
3825:../fatfs/ff.c **** 	DWORD n_clst, vs, n, wsect;
3826:../fatfs/ff.c **** 	UINT i;
3827:../fatfs/ff.c **** 	DWORD b_vol, b_fat, b_dir, b_data;	/* LBA */
3828:../fatfs/ff.c **** 	DWORD n_vol, n_rsv, n_fat, n_dir;	/* Size */
3829:../fatfs/ff.c **** 	FATFS *fs;
3830:../fatfs/ff.c **** 	DSTATUS stat;
3831:../fatfs/ff.c **** 
3832:../fatfs/ff.c **** 
3833:../fatfs/ff.c **** 	/* Check mounted drive and clear work area */
3834:../fatfs/ff.c **** 	if (vol >= _VOLUMES) return FR_INVALID_DRIVE;
 10829              		.loc 1 3834 0
 10830 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10831 0012 012B     		cmp	r3, #1
 10832 0014 02D9     		bls	.L663
 10833              		.loc 1 3834 0 is_stmt 0 discriminator 1
 10834 0016 0B23     		movs	r3, #11
 10835 0018 00F021BD 		b	.L732
 10836              	.L663:
3835:../fatfs/ff.c **** 	if (sfd > 1) return FR_INVALID_PARAMETER;
 10837              		.loc 1 3835 0 is_stmt 1
 10838 001c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 10839 001e 012B     		cmp	r3, #1
 10840 0020 02D9     		bls	.L665
 10841              		.loc 1 3835 0 is_stmt 0 discriminator 1
 10842 0022 1323     		movs	r3, #19
 10843 0024 00F01BBD 		b	.L732
 10844              	.L665:
3836:../fatfs/ff.c **** 	if (au & (au - 1)) return FR_INVALID_PARAMETER;
 10845              		.loc 1 3836 0 is_stmt 1
 10846 0028 3B68     		ldr	r3, [r7]
 10847 002a 5A1E     		subs	r2, r3, #1
 10848 002c 3B68     		ldr	r3, [r7]
 10849 002e 1340     		ands	r3, r3, r2
 10850 0030 002B     		cmp	r3, #0
 10851 0032 02D0     		beq	.L666
 10852              		.loc 1 3836 0 is_stmt 0 discriminator 1
 10853 0034 1323     		movs	r3, #19
 10854 0036 00F012BD 		b	.L732
 10855              	.L666:
3837:../fatfs/ff.c **** 	fs = FatFs[vol];
 10856              		.loc 1 3837 0 is_stmt 1
 10857 003a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10858 003c AE4A     		ldr	r2, .L734
 10859 003e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 10860 0042 FB62     		str	r3, [r7, #44]
3838:../fatfs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;
 10861              		.loc 1 3838 0
 10862 0044 FB6A     		ldr	r3, [r7, #44]
 10863 0046 002B     		cmp	r3, #0
 10864 0048 02D1     		bne	.L667
 10865              		.loc 1 3838 0 is_stmt 0 discriminator 1
 10866 004a 0C23     		movs	r3, #12
 10867 004c 00F007BD 		b	.L732
 10868              	.L667:
3839:../fatfs/ff.c **** 	fs->fs_type = 0;
 10869              		.loc 1 3839 0 is_stmt 1
 10870 0050 FB6A     		ldr	r3, [r7, #44]
 10871 0052 0022     		movs	r2, #0
 10872 0054 1A70     		strb	r2, [r3]
3840:../fatfs/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
 10873              		.loc 1 3840 0
 10874 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10875 0058 A84A     		ldr	r2, .L734+4
 10876 005a 12F81330 		ldrb	r3, [r2, r3, lsl #1]
 10877 005e 87F82B30 		strb	r3, [r7, #43]
3841:../fatfs/ff.c **** 	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
 10878              		.loc 1 3841 0
 10879 0062 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10880 0064 A54A     		ldr	r2, .L734+4
 10881 0066 5B00     		lsls	r3, r3, #1
 10882 0068 1344     		add	r3, r3, r2
 10883 006a 5B78     		ldrb	r3, [r3, #1]
 10884 006c 87F82A30 		strb	r3, [r7, #42]
3842:../fatfs/ff.c **** 
3843:../fatfs/ff.c **** 	/* Get disk statics */
3844:../fatfs/ff.c **** 	stat = disk_initialize(pdrv);
 10885              		.loc 1 3844 0
 10886 0070 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 10887 0074 1846     		mov	r0, r3
 10888 0076 FFF7FEFF 		bl	disk_initialize
 10889 007a 0346     		mov	r3, r0
 10890 007c 87F82930 		strb	r3, [r7, #41]
3845:../fatfs/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
 10891              		.loc 1 3845 0
 10892 0080 97F82930 		ldrb	r3, [r7, #41]	@ zero_extendqisi2
 10893 0084 03F00103 		and	r3, r3, #1
 10894 0088 002B     		cmp	r3, #0
 10895 008a 02D0     		beq	.L668
 10896              		.loc 1 3845 0 is_stmt 0 discriminator 1
 10897 008c 0323     		movs	r3, #3
 10898 008e 00F0E6BC 		b	.L732
 10899              	.L668:
3846:../fatfs/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 10900              		.loc 1 3846 0 is_stmt 1
 10901 0092 97F82930 		ldrb	r3, [r7, #41]	@ zero_extendqisi2
 10902 0096 03F00403 		and	r3, r3, #4
 10903 009a 002B     		cmp	r3, #0
 10904 009c 02D0     		beq	.L669
 10905              		.loc 1 3846 0 is_stmt 0 discriminator 1
 10906 009e 0A23     		movs	r3, #10
 10907 00a0 00F0DDBC 		b	.L732
 10908              	.L669:
3847:../fatfs/ff.c **** #if _MAX_SS != 512					/* Get disk sector size */
3848:../fatfs/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &SS(fatfs)) != RES_OK || SS(fatfs) > _MAX_SS)
3849:../fatfs/ff.c **** 		return FR_DISK_ERR;
3850:../fatfs/ff.c **** #endif
3851:../fatfs/ff.c **** 	if (_MULTI_PARTITION && part) {
 10909              		.loc 1 3851 0 is_stmt 1
 10910 00a4 97F82A30 		ldrb	r3, [r7, #42]	@ zero_extendqisi2
 10911 00a8 002B     		cmp	r3, #0
 10912 00aa 5AD0     		beq	.L670
3852:../fatfs/ff.c **** 		/* Get partition information from partition table in the MBR */
3853:../fatfs/ff.c **** 		if (disk_read(pdrv, fs->win, 0, 1) != RES_OK) return FR_DISK_ERR;
 10913              		.loc 1 3853 0
 10914 00ac FB6A     		ldr	r3, [r7, #44]
 10915 00ae 3833     		adds	r3, r3, #56
 10916 00b0 97F82B20 		ldrb	r2, [r7, #43]	@ zero_extendqisi2
 10917 00b4 1046     		mov	r0, r2
 10918 00b6 1946     		mov	r1, r3
 10919 00b8 0022     		movs	r2, #0
 10920 00ba 0123     		movs	r3, #1
 10921 00bc FFF7FEFF 		bl	disk_read
 10922 00c0 0346     		mov	r3, r0
 10923 00c2 002B     		cmp	r3, #0
 10924 00c4 02D0     		beq	.L671
 10925              		.loc 1 3853 0 is_stmt 0 discriminator 1
 10926 00c6 0123     		movs	r3, #1
 10927 00c8 00F0C9BC 		b	.L732
 10928              	.L671:
3854:../fatfs/ff.c **** 		if (LD_WORD(fs->win+BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;
 10929              		.loc 1 3854 0 is_stmt 1
 10930 00cc FB6A     		ldr	r3, [r7, #44]
 10931 00ce 93F83732 		ldrb	r3, [r3, #567]	@ zero_extendqisi2
 10932 00d2 1B02     		lsls	r3, r3, #8
 10933 00d4 9AB2     		uxth	r2, r3
 10934 00d6 FB6A     		ldr	r3, [r7, #44]
 10935 00d8 93F83632 		ldrb	r3, [r3, #566]	@ zero_extendqisi2
 10936 00dc 9BB2     		uxth	r3, r3
 10937 00de 1343     		orrs	r3, r3, r2
 10938 00e0 9BB2     		uxth	r3, r3
 10939 00e2 1BB2     		sxth	r3, r3
 10940 00e4 864A     		ldr	r2, .L734+8
 10941 00e6 9342     		cmp	r3, r2
 10942 00e8 02D0     		beq	.L672
 10943              		.loc 1 3854 0 is_stmt 0 discriminator 1
 10944 00ea 0E23     		movs	r3, #14
 10945 00ec 00F0B7BC 		b	.L732
 10946              	.L672:
3855:../fatfs/ff.c **** 		tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
 10947              		.loc 1 3855 0 is_stmt 1
 10948 00f0 97F82A30 		ldrb	r3, [r7, #42]	@ zero_extendqisi2
 10949 00f4 013B     		subs	r3, r3, #1
 10950 00f6 1B01     		lsls	r3, r3, #4
 10951 00f8 03F5DF73 		add	r3, r3, #446
 10952 00fc 3833     		adds	r3, r3, #56
 10953 00fe FA6A     		ldr	r2, [r7, #44]
 10954 0100 1344     		add	r3, r3, r2
 10955 0102 7B62     		str	r3, [r7, #36]
3856:../fatfs/ff.c **** 		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
 10956              		.loc 1 3856 0
 10957 0104 7B6A     		ldr	r3, [r7, #36]
 10958 0106 0433     		adds	r3, r3, #4
 10959 0108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10960 010a 002B     		cmp	r3, #0
 10961 010c 02D1     		bne	.L673
 10962              		.loc 1 3856 0 is_stmt 0 discriminator 1
 10963 010e 0E23     		movs	r3, #14
 10964 0110 00F0A5BC 		b	.L732
 10965              	.L673:
3857:../fatfs/ff.c **** 		b_vol = LD_DWORD(tbl+8);	/* Volume start sector */
 10966              		.loc 1 3857 0 is_stmt 1
 10967 0114 7B6A     		ldr	r3, [r7, #36]
 10968 0116 0B33     		adds	r3, r3, #11
 10969 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10970 011a 1A06     		lsls	r2, r3, #24
 10971 011c 7B6A     		ldr	r3, [r7, #36]
 10972 011e 0A33     		adds	r3, r3, #10
 10973 0120 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10974 0122 1B04     		lsls	r3, r3, #16
 10975 0124 1343     		orrs	r3, r3, r2
 10976 0126 7A6A     		ldr	r2, [r7, #36]
 10977 0128 0932     		adds	r2, r2, #9
 10978 012a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 10979 012c 1202     		lsls	r2, r2, #8
 10980 012e 1343     		orrs	r3, r3, r2
 10981 0130 7A6A     		ldr	r2, [r7, #36]
 10982 0132 0832     		adds	r2, r2, #8
 10983 0134 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 10984 0136 1343     		orrs	r3, r3, r2
 10985 0138 3B64     		str	r3, [r7, #64]
3858:../fatfs/ff.c **** 		n_vol = LD_DWORD(tbl+12);	/* Volume size */
 10986              		.loc 1 3858 0
 10987 013a 7B6A     		ldr	r3, [r7, #36]
 10988 013c 0F33     		adds	r3, r3, #15
 10989 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10990 0140 1A06     		lsls	r2, r3, #24
 10991 0142 7B6A     		ldr	r3, [r7, #36]
 10992 0144 0E33     		adds	r3, r3, #14
 10993 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10994 0148 1B04     		lsls	r3, r3, #16
 10995 014a 1343     		orrs	r3, r3, r2
 10996 014c 7A6A     		ldr	r2, [r7, #36]
 10997 014e 0D32     		adds	r2, r2, #13
 10998 0150 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 10999 0152 1202     		lsls	r2, r2, #8
 11000 0154 1343     		orrs	r3, r3, r2
 11001 0156 7A6A     		ldr	r2, [r7, #36]
 11002 0158 0C32     		adds	r2, r2, #12
 11003 015a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 11004 015c 1343     		orrs	r3, r3, r2
 11005 015e FB60     		str	r3, [r7, #12]
 11006 0160 1CE0     		b	.L674
 11007              	.L670:
3859:../fatfs/ff.c **** 	} else {
3860:../fatfs/ff.c **** 		/* Create a partition in this function */
3861:../fatfs/ff.c **** 		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
 11008              		.loc 1 3861 0
 11009 0162 97F82B20 		ldrb	r2, [r7, #43]	@ zero_extendqisi2
 11010 0166 07F10C03 		add	r3, r7, #12
 11011 016a 1046     		mov	r0, r2
 11012 016c 0121     		movs	r1, #1
 11013 016e 1A46     		mov	r2, r3
 11014 0170 FFF7FEFF 		bl	disk_ioctl
 11015 0174 0346     		mov	r3, r0
 11016 0176 002B     		cmp	r3, #0
 11017 0178 02D1     		bne	.L675
 11018              		.loc 1 3861 0 is_stmt 0 discriminator 1
 11019 017a FB68     		ldr	r3, [r7, #12]
 11020 017c 7F2B     		cmp	r3, #127
 11021 017e 02D8     		bhi	.L676
 11022              	.L675:
3862:../fatfs/ff.c **** 			return FR_DISK_ERR;
 11023              		.loc 1 3862 0 is_stmt 1
 11024 0180 0123     		movs	r3, #1
 11025 0182 00F06CBC 		b	.L732
 11026              	.L676:
3863:../fatfs/ff.c **** 		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
 11027              		.loc 1 3863 0
 11028 0186 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 11029 0188 002B     		cmp	r3, #0
 11030 018a 01D0     		beq	.L677
 11031              		.loc 1 3863 0 is_stmt 0 discriminator 1
 11032 018c 0023     		movs	r3, #0
 11033 018e 00E0     		b	.L678
 11034              	.L677:
 11035              		.loc 1 3863 0 discriminator 2
 11036 0190 3F23     		movs	r3, #63
 11037              	.L678:
 11038              		.loc 1 3863 0 discriminator 4
 11039 0192 3B64     		str	r3, [r7, #64]
3864:../fatfs/ff.c **** 		n_vol -= b_vol;				/* Volume size */
 11040              		.loc 1 3864 0 is_stmt 1 discriminator 4
 11041 0194 FA68     		ldr	r2, [r7, #12]
 11042 0196 3B6C     		ldr	r3, [r7, #64]
 11043 0198 D31A     		subs	r3, r2, r3
 11044 019a FB60     		str	r3, [r7, #12]
 11045              	.L674:
3865:../fatfs/ff.c **** 	}
3866:../fatfs/ff.c **** 
3867:../fatfs/ff.c **** 	if (!au) {				/* AU auto selection */
 11046              		.loc 1 3867 0
 11047 019c 3B68     		ldr	r3, [r7]
 11048 019e 002B     		cmp	r3, #0
 11049 01a0 18D1     		bne	.L679
3868:../fatfs/ff.c **** 		vs = n_vol / (2000 / (SS(fatfs) / 512));
 11050              		.loc 1 3868 0
 11051 01a2 FB68     		ldr	r3, [r7, #12]
 11052 01a4 574A     		ldr	r2, .L734+12
 11053 01a6 A2FB0323 		umull	r2, r3, r2, r3
 11054 01aa DB09     		lsrs	r3, r3, #7
 11055 01ac 3B62     		str	r3, [r7, #32]
3869:../fatfs/ff.c **** 		for (i = 0; vs < vst[i]; i++) ;
 11056              		.loc 1 3869 0
 11057 01ae 0023     		movs	r3, #0
 11058 01b0 7B64     		str	r3, [r7, #68]
 11059 01b2 02E0     		b	.L680
 11060              	.L681:
 11061              		.loc 1 3869 0 is_stmt 0 discriminator 3
 11062 01b4 7B6C     		ldr	r3, [r7, #68]
 11063 01b6 0133     		adds	r3, r3, #1
 11064 01b8 7B64     		str	r3, [r7, #68]
 11065              	.L680:
 11066              		.loc 1 3869 0 discriminator 1
 11067 01ba 534A     		ldr	r2, .L734+16
 11068 01bc 7B6C     		ldr	r3, [r7, #68]
 11069 01be 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 11070 01c2 1A46     		mov	r2, r3
 11071 01c4 3B6A     		ldr	r3, [r7, #32]
 11072 01c6 9A42     		cmp	r2, r3
 11073 01c8 F4D8     		bhi	.L681
3870:../fatfs/ff.c **** 		au = cst[i];
 11074              		.loc 1 3870 0 is_stmt 1
 11075 01ca 504A     		ldr	r2, .L734+20
 11076 01cc 7B6C     		ldr	r3, [r7, #68]
 11077 01ce 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 11078 01d2 3B60     		str	r3, [r7]
 11079              	.L679:
3871:../fatfs/ff.c **** 	}
3872:../fatfs/ff.c **** 	au /= SS(fatfs);		/* Number of sectors per cluster */
 11080              		.loc 1 3872 0
 11081 01d4 3B68     		ldr	r3, [r7]
 11082 01d6 5B0A     		lsrs	r3, r3, #9
 11083 01d8 3B60     		str	r3, [r7]
3873:../fatfs/ff.c **** 	if (au == 0) au = 1;
 11084              		.loc 1 3873 0
 11085 01da 3B68     		ldr	r3, [r7]
 11086 01dc 002B     		cmp	r3, #0
 11087 01de 01D1     		bne	.L682
 11088              		.loc 1 3873 0 is_stmt 0 discriminator 1
 11089 01e0 0123     		movs	r3, #1
 11090 01e2 3B60     		str	r3, [r7]
 11091              	.L682:
3874:../fatfs/ff.c **** 	if (au > 128) au = 128;
 11092              		.loc 1 3874 0 is_stmt 1
 11093 01e4 3B68     		ldr	r3, [r7]
 11094 01e6 802B     		cmp	r3, #128
 11095 01e8 01D9     		bls	.L683
 11096              		.loc 1 3874 0 is_stmt 0 discriminator 1
 11097 01ea 8023     		movs	r3, #128
 11098 01ec 3B60     		str	r3, [r7]
 11099              	.L683:
3875:../fatfs/ff.c **** 
3876:../fatfs/ff.c **** 	/* Pre-compute number of clusters and FAT sub-type */
3877:../fatfs/ff.c **** 	n_clst = n_vol / au;
 11100              		.loc 1 3877 0 is_stmt 1
 11101 01ee FA68     		ldr	r2, [r7, #12]
 11102 01f0 3B68     		ldr	r3, [r7]
 11103 01f2 B2FBF3F3 		udiv	r3, r2, r3
 11104 01f6 FB61     		str	r3, [r7, #28]
3878:../fatfs/ff.c **** 	fmt = FS_FAT12;
 11105              		.loc 1 3878 0
 11106 01f8 0123     		movs	r3, #1
 11107 01fa 87F84F30 		strb	r3, [r7, #79]
3879:../fatfs/ff.c **** 	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
 11108              		.loc 1 3879 0
 11109 01fe FB69     		ldr	r3, [r7, #28]
 11110 0200 40F6F572 		movw	r2, #4085
 11111 0204 9342     		cmp	r3, r2
 11112 0206 02D9     		bls	.L684
 11113              		.loc 1 3879 0 is_stmt 0 discriminator 1
 11114 0208 0223     		movs	r3, #2
 11115 020a 87F84F30 		strb	r3, [r7, #79]
 11116              	.L684:
3880:../fatfs/ff.c **** 	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 11117              		.loc 1 3880 0 is_stmt 1
 11118 020e FB69     		ldr	r3, [r7, #28]
 11119 0210 4FF6F572 		movw	r2, #65525
 11120 0214 9342     		cmp	r3, r2
 11121 0216 02D9     		bls	.L685
 11122              		.loc 1 3880 0 is_stmt 0 discriminator 1
 11123 0218 0323     		movs	r3, #3
 11124 021a 87F84F30 		strb	r3, [r7, #79]
 11125              	.L685:
3881:../fatfs/ff.c **** 
3882:../fatfs/ff.c **** 	/* Determine offset and size of FAT structure */
3883:../fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 11126              		.loc 1 3883 0 is_stmt 1
 11127 021e 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11128 0222 032B     		cmp	r3, #3
 11129 0224 0AD1     		bne	.L686
3884:../fatfs/ff.c **** 		n_fat = ((n_clst * 4) + 8 + SS(fatfs) - 1) / SS(fatfs);
 11130              		.loc 1 3884 0
 11131 0226 FB69     		ldr	r3, [r7, #28]
 11132 0228 8233     		adds	r3, r3, #130
 11133 022a 9B00     		lsls	r3, r3, #2
 11134 022c 013B     		subs	r3, r3, #1
 11135 022e 5B0A     		lsrs	r3, r3, #9
 11136 0230 7B63     		str	r3, [r7, #52]
3885:../fatfs/ff.c **** 		n_rsv = 32;
 11137              		.loc 1 3885 0
 11138 0232 2023     		movs	r3, #32
 11139 0234 BB63     		str	r3, [r7, #56]
3886:../fatfs/ff.c **** 		n_dir = 0;
 11140              		.loc 1 3886 0
 11141 0236 0023     		movs	r3, #0
 11142 0238 3B63     		str	r3, [r7, #48]
 11143 023a 18E0     		b	.L687
 11144              	.L686:
3887:../fatfs/ff.c **** 	} else {
3888:../fatfs/ff.c **** 		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
 11145              		.loc 1 3888 0
 11146 023c 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11147 0240 012B     		cmp	r3, #1
 11148 0242 07D1     		bne	.L688
 11149              		.loc 1 3888 0 is_stmt 0 discriminator 1
 11150 0244 FA69     		ldr	r2, [r7, #28]
 11151 0246 1346     		mov	r3, r2
 11152 0248 5B00     		lsls	r3, r3, #1
 11153 024a 1344     		add	r3, r3, r2
 11154 024c 0133     		adds	r3, r3, #1
 11155 024e 5B08     		lsrs	r3, r3, #1
 11156 0250 0333     		adds	r3, r3, #3
 11157 0252 02E0     		b	.L689
 11158              	.L688:
 11159              		.loc 1 3888 0 discriminator 2
 11160 0254 FB69     		ldr	r3, [r7, #28]
 11161 0256 0233     		adds	r3, r3, #2
 11162 0258 5B00     		lsls	r3, r3, #1
 11163              	.L689:
 11164              		.loc 1 3888 0 discriminator 4
 11165 025a 7B63     		str	r3, [r7, #52]
3889:../fatfs/ff.c **** 		n_fat = (n_fat + SS(fatfs) - 1) / SS(fatfs);
 11166              		.loc 1 3889 0 is_stmt 1 discriminator 4
 11167 025c 7B6B     		ldr	r3, [r7, #52]
 11168 025e 03F2FF13 		addw	r3, r3, #511
 11169 0262 5B0A     		lsrs	r3, r3, #9
 11170 0264 7B63     		str	r3, [r7, #52]
3890:../fatfs/ff.c **** 		n_rsv = 1;
 11171              		.loc 1 3890 0 discriminator 4
 11172 0266 0123     		movs	r3, #1
 11173 0268 BB63     		str	r3, [r7, #56]
3891:../fatfs/ff.c **** 		n_dir = (DWORD)N_ROOTDIR * SZ_DIR / SS(fatfs);
 11174              		.loc 1 3891 0 discriminator 4
 11175 026a 2023     		movs	r3, #32
 11176 026c 3B63     		str	r3, [r7, #48]
 11177              	.L687:
3892:../fatfs/ff.c **** 	}
3893:../fatfs/ff.c **** 	b_fat = b_vol + n_rsv;				/* FAT area start sector */
 11178              		.loc 1 3893 0
 11179 026e 3A6C     		ldr	r2, [r7, #64]
 11180 0270 BB6B     		ldr	r3, [r7, #56]
 11181 0272 1344     		add	r3, r3, r2
 11182 0274 FB63     		str	r3, [r7, #60]
3894:../fatfs/ff.c **** 	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
 11183              		.loc 1 3894 0
 11184 0276 FA6B     		ldr	r2, [r7, #60]
 11185 0278 7B6B     		ldr	r3, [r7, #52]
 11186 027a 1344     		add	r3, r3, r2
 11187 027c BB61     		str	r3, [r7, #24]
3895:../fatfs/ff.c **** 	b_data = b_dir + n_dir;				/* Data area start sector */
 11188              		.loc 1 3895 0
 11189 027e BA69     		ldr	r2, [r7, #24]
 11190 0280 3B6B     		ldr	r3, [r7, #48]
 11191 0282 1344     		add	r3, r3, r2
 11192 0284 7B61     		str	r3, [r7, #20]
3896:../fatfs/ff.c **** 	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 11193              		.loc 1 3896 0
 11194 0286 7A69     		ldr	r2, [r7, #20]
 11195 0288 3B68     		ldr	r3, [r7]
 11196 028a 1A44     		add	r2, r2, r3
 11197 028c 3B6C     		ldr	r3, [r7, #64]
 11198 028e D21A     		subs	r2, r2, r3
 11199 0290 FB68     		ldr	r3, [r7, #12]
 11200 0292 9A42     		cmp	r2, r3
 11201 0294 01D9     		bls	.L690
 11202              		.loc 1 3896 0 is_stmt 0 discriminator 1
 11203 0296 0E23     		movs	r3, #14
 11204 0298 E1E3     		b	.L732
 11205              	.L690:
3897:../fatfs/ff.c **** 
3898:../fatfs/ff.c **** 	/* Align data start sector to erase block boundary (for flash memory media) */
3899:../fatfs/ff.c **** 	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
 11206              		.loc 1 3899 0 is_stmt 1
 11207 029a 97F82B20 		ldrb	r2, [r7, #43]	@ zero_extendqisi2
 11208 029e 07F11003 		add	r3, r7, #16
 11209 02a2 1046     		mov	r0, r2
 11210 02a4 0321     		movs	r1, #3
 11211 02a6 1A46     		mov	r2, r3
 11212 02a8 FFF7FEFF 		bl	disk_ioctl
 11213 02ac 0346     		mov	r3, r0
 11214 02ae 002B     		cmp	r3, #0
 11215 02b0 06D1     		bne	.L691
 11216              		.loc 1 3899 0 is_stmt 0 discriminator 2
 11217 02b2 3B69     		ldr	r3, [r7, #16]
 11218 02b4 002B     		cmp	r3, #0
 11219 02b6 03D0     		beq	.L691
 11220              		.loc 1 3899 0 discriminator 4
 11221 02b8 3B69     		ldr	r3, [r7, #16]
 11222 02ba B3F5004F 		cmp	r3, #32768
 11223 02be 01D9     		bls	.L692
 11224              	.L691:
 11225              		.loc 1 3899 0 discriminator 5
 11226 02c0 0123     		movs	r3, #1
 11227 02c2 3B61     		str	r3, [r7, #16]
 11228              	.L692:
3900:../fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 11229              		.loc 1 3900 0 is_stmt 1
 11230 02c4 3A69     		ldr	r2, [r7, #16]
 11231 02c6 7B69     		ldr	r3, [r7, #20]
 11232 02c8 1344     		add	r3, r3, r2
 11233 02ca 5A1E     		subs	r2, r3, #1
 11234 02cc 3B69     		ldr	r3, [r7, #16]
 11235 02ce 5B42     		negs	r3, r3
 11236 02d0 1340     		ands	r3, r3, r2
 11237 02d2 3B61     		str	r3, [r7, #16]
3901:../fatfs/ff.c **** 	n = (n - b_data) / N_FATS;
 11238              		.loc 1 3901 0
 11239 02d4 3A69     		ldr	r2, [r7, #16]
 11240 02d6 7B69     		ldr	r3, [r7, #20]
 11241 02d8 D31A     		subs	r3, r2, r3
 11242 02da 3B61     		str	r3, [r7, #16]
3902:../fatfs/ff.c **** 	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
 11243              		.loc 1 3902 0
 11244 02dc 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11245 02e0 032B     		cmp	r3, #3
 11246 02e2 15D1     		bne	.L693
3903:../fatfs/ff.c **** 		n_rsv += n;
 11247              		.loc 1 3903 0
 11248 02e4 3B69     		ldr	r3, [r7, #16]
 11249 02e6 BA6B     		ldr	r2, [r7, #56]
 11250 02e8 1344     		add	r3, r3, r2
 11251 02ea BB63     		str	r3, [r7, #56]
3904:../fatfs/ff.c **** 		b_fat += n;
 11252              		.loc 1 3904 0
 11253 02ec 3B69     		ldr	r3, [r7, #16]
 11254 02ee FA6B     		ldr	r2, [r7, #60]
 11255 02f0 1344     		add	r3, r3, r2
 11256 02f2 FB63     		str	r3, [r7, #60]
 11257 02f4 10E0     		b	.L694
 11258              	.L735:
 11259 02f6 00BF     		.align	2
 11260              	.L734:
 11261 02f8 00000000 		.word	FatFs
 11262 02fc 00000000 		.word	VolToPart
 11263 0300 55AAFFFF 		.word	-21931
 11264 0304 D34D6210 		.word	274877907
 11265 0308 00000000 		.word	vst.4734
 11266 030c 00000000 		.word	cst.4735
 11267              	.L693:
3905:../fatfs/ff.c **** 	} else {					/* FAT12/16: Expand FAT size */
3906:../fatfs/ff.c **** 		n_fat += n;
 11268              		.loc 1 3906 0
 11269 0310 3B69     		ldr	r3, [r7, #16]
 11270 0312 7A6B     		ldr	r2, [r7, #52]
 11271 0314 1344     		add	r3, r3, r2
 11272 0316 7B63     		str	r3, [r7, #52]
 11273              	.L694:
3907:../fatfs/ff.c **** 	}
3908:../fatfs/ff.c **** 
3909:../fatfs/ff.c **** 	/* Determine number of clusters and final check of validity of the FAT sub-type */
3910:../fatfs/ff.c **** 	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
 11274              		.loc 1 3910 0
 11275 0318 FA68     		ldr	r2, [r7, #12]
 11276 031a BB6B     		ldr	r3, [r7, #56]
 11277 031c D21A     		subs	r2, r2, r3
 11278 031e 7B6B     		ldr	r3, [r7, #52]
 11279 0320 D21A     		subs	r2, r2, r3
 11280 0322 3B6B     		ldr	r3, [r7, #48]
 11281 0324 D21A     		subs	r2, r2, r3
 11282 0326 3B68     		ldr	r3, [r7]
 11283 0328 B2FBF3F3 		udiv	r3, r2, r3
 11284 032c FB61     		str	r3, [r7, #28]
3911:../fatfs/ff.c **** 	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 11285              		.loc 1 3911 0
 11286 032e 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11287 0332 022B     		cmp	r3, #2
 11288 0334 04D1     		bne	.L695
 11289              		.loc 1 3911 0 is_stmt 0 discriminator 1
 11290 0336 FB69     		ldr	r3, [r7, #28]
 11291 0338 40F6F572 		movw	r2, #4085
 11292 033c 9342     		cmp	r3, r2
 11293 033e 08D9     		bls	.L696
 11294              	.L695:
3912:../fatfs/ff.c **** 		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 11295              		.loc 1 3912 0 is_stmt 1
 11296 0340 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11297 0344 032B     		cmp	r3, #3
 11298 0346 06D1     		bne	.L697
 11299              		.loc 1 3912 0 is_stmt 0 discriminator 1
 11300 0348 FB69     		ldr	r3, [r7, #28]
 11301 034a 4FF6F572 		movw	r2, #65525
 11302 034e 9342     		cmp	r3, r2
 11303 0350 01D8     		bhi	.L697
 11304              	.L696:
3913:../fatfs/ff.c **** 		return FR_MKFS_ABORTED;
 11305              		.loc 1 3913 0 is_stmt 1
 11306 0352 0E23     		movs	r3, #14
 11307 0354 83E3     		b	.L732
 11308              	.L697:
3914:../fatfs/ff.c **** 
3915:../fatfs/ff.c **** 	switch (fmt) {	/* Determine system ID for partition table */
 11309              		.loc 1 3915 0
 11310 0356 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11311 035a 012B     		cmp	r3, #1
 11312 035c 02D0     		beq	.L699
 11313 035e 022B     		cmp	r3, #2
 11314 0360 04D0     		beq	.L700
 11315 0362 0DE0     		b	.L733
 11316              	.L699:
3916:../fatfs/ff.c **** 	case FS_FAT12:	sys = 0x01; break;
 11317              		.loc 1 3916 0
 11318 0364 0123     		movs	r3, #1
 11319 0366 87F84D30 		strb	r3, [r7, #77]
 11320 036a 0CE0     		b	.L701
 11321              	.L700:
3917:../fatfs/ff.c **** 	case FS_FAT16:	sys = (n_vol < 0x10000) ? 0x04 : 0x06; break;
 11322              		.loc 1 3917 0
 11323 036c FB68     		ldr	r3, [r7, #12]
 11324 036e B3F5803F 		cmp	r3, #65536
 11325 0372 01D2     		bcs	.L702
 11326              		.loc 1 3917 0 is_stmt 0 discriminator 1
 11327 0374 0423     		movs	r3, #4
 11328 0376 00E0     		b	.L703
 11329              	.L702:
 11330              		.loc 1 3917 0 discriminator 2
 11331 0378 0623     		movs	r3, #6
 11332              	.L703:
 11333              		.loc 1 3917 0 discriminator 4
 11334 037a 87F84D30 		strb	r3, [r7, #77]
 11335 037e 02E0     		b	.L701
 11336              	.L733:
3918:../fatfs/ff.c **** 	default: 		sys = 0x0C;
 11337              		.loc 1 3918 0 is_stmt 1
 11338 0380 0C23     		movs	r3, #12
 11339 0382 87F84D30 		strb	r3, [r7, #77]
 11340              	.L701:
3919:../fatfs/ff.c **** 	}
3920:../fatfs/ff.c **** 
3921:../fatfs/ff.c **** 	if (_MULTI_PARTITION && part) {
 11341              		.loc 1 3921 0
 11342 0386 97F82A30 		ldrb	r3, [r7, #42]	@ zero_extendqisi2
 11343 038a 002B     		cmp	r3, #0
 11344 038c 21D0     		beq	.L704
3922:../fatfs/ff.c **** 		/* Update system ID in the partition table */
3923:../fatfs/ff.c **** 		tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
 11345              		.loc 1 3923 0
 11346 038e 97F82A30 		ldrb	r3, [r7, #42]	@ zero_extendqisi2
 11347 0392 013B     		subs	r3, r3, #1
 11348 0394 1B01     		lsls	r3, r3, #4
 11349 0396 03F5DF73 		add	r3, r3, #446
 11350 039a 3833     		adds	r3, r3, #56
 11351 039c FA6A     		ldr	r2, [r7, #44]
 11352 039e 1344     		add	r3, r3, r2
 11353 03a0 7B62     		str	r3, [r7, #36]
3924:../fatfs/ff.c **** 		tbl[4] = sys;
 11354              		.loc 1 3924 0
 11355 03a2 7B6A     		ldr	r3, [r7, #36]
 11356 03a4 0433     		adds	r3, r3, #4
 11357 03a6 97F84D20 		ldrb	r2, [r7, #77]
 11358 03aa 1A70     		strb	r2, [r3]
3925:../fatfs/ff.c **** 		if (disk_write(pdrv, fs->win, 0, 1) != RES_OK) return FR_DISK_ERR;
 11359              		.loc 1 3925 0
 11360 03ac FB6A     		ldr	r3, [r7, #44]
 11361 03ae 3833     		adds	r3, r3, #56
 11362 03b0 97F82B20 		ldrb	r2, [r7, #43]	@ zero_extendqisi2
 11363 03b4 1046     		mov	r0, r2
 11364 03b6 1946     		mov	r1, r3
 11365 03b8 0022     		movs	r2, #0
 11366 03ba 0123     		movs	r3, #1
 11367 03bc FFF7FEFF 		bl	disk_write
 11368 03c0 0346     		mov	r3, r0
 11369 03c2 002B     		cmp	r3, #0
 11370 03c4 01D0     		beq	.L705
 11371              		.loc 1 3925 0 is_stmt 0 discriminator 1
 11372 03c6 0123     		movs	r3, #1
 11373 03c8 49E3     		b	.L732
 11374              	.L705:
3926:../fatfs/ff.c **** 		md = 0xF8;
 11375              		.loc 1 3926 0 is_stmt 1
 11376 03ca F823     		movs	r3, #248
 11377 03cc 87F84E30 		strb	r3, [r7, #78]
 11378 03d0 83E0     		b	.L706
 11379              	.L704:
3927:../fatfs/ff.c **** 	} else {
3928:../fatfs/ff.c **** 		if (sfd) {	/* No partition table (SFD) */
 11380              		.loc 1 3928 0
 11381 03d2 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 11382 03d4 002B     		cmp	r3, #0
 11383 03d6 03D0     		beq	.L707
3929:../fatfs/ff.c **** 			md = 0xF0;
 11384              		.loc 1 3929 0
 11385 03d8 F023     		movs	r3, #240
 11386 03da 87F84E30 		strb	r3, [r7, #78]
 11387 03de 7CE0     		b	.L706
 11388              	.L707:
3930:../fatfs/ff.c **** 		} else {	/* Create partition table (FDISK) */
3931:../fatfs/ff.c **** 			mem_set(fs->win, 0, SS(fatfs));
 11389              		.loc 1 3931 0
 11390 03e0 FB6A     		ldr	r3, [r7, #44]
 11391 03e2 3833     		adds	r3, r3, #56
 11392 03e4 1846     		mov	r0, r3
 11393 03e6 0021     		movs	r1, #0
 11394 03e8 4FF40072 		mov	r2, #512
 11395 03ec FFF7FEFF 		bl	mem_set
3932:../fatfs/ff.c **** 			tbl = fs->win+MBR_Table;	/* Create partition table for single partition in the drive */
 11396              		.loc 1 3932 0
 11397 03f0 FB6A     		ldr	r3, [r7, #44]
 11398 03f2 03F5FB73 		add	r3, r3, #502
 11399 03f6 7B62     		str	r3, [r7, #36]
3933:../fatfs/ff.c **** 			tbl[1] = 1;						/* Partition start head */
 11400              		.loc 1 3933 0
 11401 03f8 7B6A     		ldr	r3, [r7, #36]
 11402 03fa 0133     		adds	r3, r3, #1
 11403 03fc 0122     		movs	r2, #1
 11404 03fe 1A70     		strb	r2, [r3]
3934:../fatfs/ff.c **** 			tbl[2] = 1;						/* Partition start sector */
 11405              		.loc 1 3934 0
 11406 0400 7B6A     		ldr	r3, [r7, #36]
 11407 0402 0233     		adds	r3, r3, #2
 11408 0404 0122     		movs	r2, #1
 11409 0406 1A70     		strb	r2, [r3]
3935:../fatfs/ff.c **** 			tbl[3] = 0;						/* Partition start cylinder */
 11410              		.loc 1 3935 0
 11411 0408 7B6A     		ldr	r3, [r7, #36]
 11412 040a 0333     		adds	r3, r3, #3
 11413 040c 0022     		movs	r2, #0
 11414 040e 1A70     		strb	r2, [r3]
3936:../fatfs/ff.c **** 			tbl[4] = sys;					/* System type */
 11415              		.loc 1 3936 0
 11416 0410 7B6A     		ldr	r3, [r7, #36]
 11417 0412 0433     		adds	r3, r3, #4
 11418 0414 97F84D20 		ldrb	r2, [r7, #77]
 11419 0418 1A70     		strb	r2, [r3]
3937:../fatfs/ff.c **** 			tbl[5] = 254;					/* Partition end head */
 11420              		.loc 1 3937 0
 11421 041a 7B6A     		ldr	r3, [r7, #36]
 11422 041c 0533     		adds	r3, r3, #5
 11423 041e FE22     		movs	r2, #254
 11424 0420 1A70     		strb	r2, [r3]
3938:../fatfs/ff.c **** 			n = (b_vol + n_vol) / 63 / 255;
 11425              		.loc 1 3938 0
 11426 0422 FA68     		ldr	r2, [r7, #12]
 11427 0424 3B6C     		ldr	r3, [r7, #64]
 11428 0426 1A44     		add	r2, r2, r3
 11429 0428 5A4B     		ldr	r3, .L736
 11430 042a A3FB0213 		umull	r1, r3, r3, r2
 11431 042e D21A     		subs	r2, r2, r3
 11432 0430 5208     		lsrs	r2, r2, #1
 11433 0432 1344     		add	r3, r3, r2
 11434 0434 5B0B     		lsrs	r3, r3, #13
 11435 0436 3B61     		str	r3, [r7, #16]
3939:../fatfs/ff.c **** 			tbl[6] = (BYTE)((n >> 2) | 63);	/* Partition end sector */
 11436              		.loc 1 3939 0
 11437 0438 7B6A     		ldr	r3, [r7, #36]
 11438 043a 0633     		adds	r3, r3, #6
 11439 043c 3A69     		ldr	r2, [r7, #16]
 11440 043e 9208     		lsrs	r2, r2, #2
 11441 0440 D2B2     		uxtb	r2, r2
 11442 0442 42F03F02 		orr	r2, r2, #63
 11443 0446 D2B2     		uxtb	r2, r2
 11444 0448 1A70     		strb	r2, [r3]
3940:../fatfs/ff.c **** 			tbl[7] = (BYTE)n;				/* End cylinder */
 11445              		.loc 1 3940 0
 11446 044a 7B6A     		ldr	r3, [r7, #36]
 11447 044c 0733     		adds	r3, r3, #7
 11448 044e 3A69     		ldr	r2, [r7, #16]
 11449 0450 D2B2     		uxtb	r2, r2
 11450 0452 1A70     		strb	r2, [r3]
3941:../fatfs/ff.c **** 			ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
 11451              		.loc 1 3941 0
 11452 0454 7B6A     		ldr	r3, [r7, #36]
 11453 0456 0833     		adds	r3, r3, #8
 11454 0458 3F22     		movs	r2, #63
 11455 045a 1A70     		strb	r2, [r3]
 11456 045c 7B6A     		ldr	r3, [r7, #36]
 11457 045e 0933     		adds	r3, r3, #9
 11458 0460 0022     		movs	r2, #0
 11459 0462 1A70     		strb	r2, [r3]
 11460 0464 7B6A     		ldr	r3, [r7, #36]
 11461 0466 0A33     		adds	r3, r3, #10
 11462 0468 0022     		movs	r2, #0
 11463 046a 1A70     		strb	r2, [r3]
 11464 046c 7B6A     		ldr	r3, [r7, #36]
 11465 046e 0B33     		adds	r3, r3, #11
 11466 0470 0022     		movs	r2, #0
 11467 0472 1A70     		strb	r2, [r3]
3942:../fatfs/ff.c **** 			ST_DWORD(tbl+12, n_vol);		/* Partition size in LBA */
 11468              		.loc 1 3942 0
 11469 0474 7B6A     		ldr	r3, [r7, #36]
 11470 0476 0C33     		adds	r3, r3, #12
 11471 0478 FA68     		ldr	r2, [r7, #12]
 11472 047a D2B2     		uxtb	r2, r2
 11473 047c 1A70     		strb	r2, [r3]
 11474 047e 7B6A     		ldr	r3, [r7, #36]
 11475 0480 0D33     		adds	r3, r3, #13
 11476 0482 FA68     		ldr	r2, [r7, #12]
 11477 0484 92B2     		uxth	r2, r2
 11478 0486 120A     		lsrs	r2, r2, #8
 11479 0488 92B2     		uxth	r2, r2
 11480 048a D2B2     		uxtb	r2, r2
 11481 048c 1A70     		strb	r2, [r3]
 11482 048e 7B6A     		ldr	r3, [r7, #36]
 11483 0490 0E33     		adds	r3, r3, #14
 11484 0492 FA68     		ldr	r2, [r7, #12]
 11485 0494 120C     		lsrs	r2, r2, #16
 11486 0496 D2B2     		uxtb	r2, r2
 11487 0498 1A70     		strb	r2, [r3]
 11488 049a 7B6A     		ldr	r3, [r7, #36]
 11489 049c 0F33     		adds	r3, r3, #15
 11490 049e FA68     		ldr	r2, [r7, #12]
 11491 04a0 120E     		lsrs	r2, r2, #24
 11492 04a2 D2B2     		uxtb	r2, r2
 11493 04a4 1A70     		strb	r2, [r3]
3943:../fatfs/ff.c **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);	/* MBR signature */
 11494              		.loc 1 3943 0
 11495 04a6 FB6A     		ldr	r3, [r7, #44]
 11496 04a8 5522     		movs	r2, #85
 11497 04aa 83F83622 		strb	r2, [r3, #566]
 11498 04ae FB6A     		ldr	r3, [r7, #44]
 11499 04b0 AA22     		movs	r2, #170
 11500 04b2 83F83722 		strb	r2, [r3, #567]
3944:../fatfs/ff.c **** 			if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)	/* Write it to the MBR sector */
 11501              		.loc 1 3944 0
 11502 04b6 FB6A     		ldr	r3, [r7, #44]
 11503 04b8 3833     		adds	r3, r3, #56
 11504 04ba 97F82B20 		ldrb	r2, [r7, #43]	@ zero_extendqisi2
 11505 04be 1046     		mov	r0, r2
 11506 04c0 1946     		mov	r1, r3
 11507 04c2 0022     		movs	r2, #0
 11508 04c4 0123     		movs	r3, #1
 11509 04c6 FFF7FEFF 		bl	disk_write
 11510 04ca 0346     		mov	r3, r0
 11511 04cc 002B     		cmp	r3, #0
 11512 04ce 01D0     		beq	.L708
3945:../fatfs/ff.c **** 				return FR_DISK_ERR;
 11513              		.loc 1 3945 0
 11514 04d0 0123     		movs	r3, #1
 11515 04d2 C4E2     		b	.L732
 11516              	.L708:
3946:../fatfs/ff.c **** 			md = 0xF8;
 11517              		.loc 1 3946 0
 11518 04d4 F823     		movs	r3, #248
 11519 04d6 87F84E30 		strb	r3, [r7, #78]
 11520              	.L706:
3947:../fatfs/ff.c **** 		}
3948:../fatfs/ff.c **** 	}
3949:../fatfs/ff.c **** 
3950:../fatfs/ff.c **** 	/* Create BPB in the VBR */
3951:../fatfs/ff.c **** 	tbl = fs->win;							/* Clear sector */
 11521              		.loc 1 3951 0
 11522 04da FB6A     		ldr	r3, [r7, #44]
 11523 04dc 3833     		adds	r3, r3, #56
 11524 04de 7B62     		str	r3, [r7, #36]
3952:../fatfs/ff.c **** 	mem_set(tbl, 0, SS(fatfs));
 11525              		.loc 1 3952 0
 11526 04e0 786A     		ldr	r0, [r7, #36]
 11527 04e2 0021     		movs	r1, #0
 11528 04e4 4FF40072 		mov	r2, #512
 11529 04e8 FFF7FEFF 		bl	mem_set
3953:../fatfs/ff.c **** 	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
 11530              		.loc 1 3953 0
 11531 04ec 786A     		ldr	r0, [r7, #36]
 11532 04ee 2A49     		ldr	r1, .L736+4
 11533 04f0 0B22     		movs	r2, #11
 11534 04f2 FFF7FEFF 		bl	mem_cpy
3954:../fatfs/ff.c **** 	i = SS(fatfs);								/* Sector size */
 11535              		.loc 1 3954 0
 11536 04f6 4FF40073 		mov	r3, #512
 11537 04fa 7B64     		str	r3, [r7, #68]
3955:../fatfs/ff.c **** 	ST_WORD(tbl+BPB_BytsPerSec, i);
 11538              		.loc 1 3955 0
 11539 04fc 7B6A     		ldr	r3, [r7, #36]
 11540 04fe 0B33     		adds	r3, r3, #11
 11541 0500 7A6C     		ldr	r2, [r7, #68]
 11542 0502 D2B2     		uxtb	r2, r2
 11543 0504 1A70     		strb	r2, [r3]
 11544 0506 7B6A     		ldr	r3, [r7, #36]
 11545 0508 0C33     		adds	r3, r3, #12
 11546 050a 7A6C     		ldr	r2, [r7, #68]
 11547 050c 92B2     		uxth	r2, r2
 11548 050e 120A     		lsrs	r2, r2, #8
 11549 0510 92B2     		uxth	r2, r2
 11550 0512 D2B2     		uxtb	r2, r2
 11551 0514 1A70     		strb	r2, [r3]
3956:../fatfs/ff.c **** 	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
 11552              		.loc 1 3956 0
 11553 0516 7B6A     		ldr	r3, [r7, #36]
 11554 0518 0D33     		adds	r3, r3, #13
 11555 051a 3A68     		ldr	r2, [r7]
 11556 051c D2B2     		uxtb	r2, r2
 11557 051e 1A70     		strb	r2, [r3]
3957:../fatfs/ff.c **** 	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
 11558              		.loc 1 3957 0
 11559 0520 7B6A     		ldr	r3, [r7, #36]
 11560 0522 0E33     		adds	r3, r3, #14
 11561 0524 BA6B     		ldr	r2, [r7, #56]
 11562 0526 D2B2     		uxtb	r2, r2
 11563 0528 1A70     		strb	r2, [r3]
 11564 052a 7B6A     		ldr	r3, [r7, #36]
 11565 052c 0F33     		adds	r3, r3, #15
 11566 052e BA6B     		ldr	r2, [r7, #56]
 11567 0530 92B2     		uxth	r2, r2
 11568 0532 120A     		lsrs	r2, r2, #8
 11569 0534 92B2     		uxth	r2, r2
 11570 0536 D2B2     		uxtb	r2, r2
 11571 0538 1A70     		strb	r2, [r3]
3958:../fatfs/ff.c **** 	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 11572              		.loc 1 3958 0
 11573 053a 7B6A     		ldr	r3, [r7, #36]
 11574 053c 1033     		adds	r3, r3, #16
 11575 053e 0122     		movs	r2, #1
 11576 0540 1A70     		strb	r2, [r3]
3959:../fatfs/ff.c **** 	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of rootdir entries */
 11577              		.loc 1 3959 0
 11578 0542 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11579 0546 032B     		cmp	r3, #3
 11580 0548 01D1     		bne	.L709
 11581              		.loc 1 3959 0 is_stmt 0 discriminator 1
 11582 054a 0023     		movs	r3, #0
 11583 054c 01E0     		b	.L710
 11584              	.L709:
 11585              		.loc 1 3959 0 discriminator 2
 11586 054e 4FF40073 		mov	r3, #512
 11587              	.L710:
 11588              		.loc 1 3959 0 discriminator 4
 11589 0552 7B64     		str	r3, [r7, #68]
3960:../fatfs/ff.c **** 	ST_WORD(tbl+BPB_RootEntCnt, i);
 11590              		.loc 1 3960 0 is_stmt 1 discriminator 4
 11591 0554 7B6A     		ldr	r3, [r7, #36]
 11592 0556 1133     		adds	r3, r3, #17
 11593 0558 7A6C     		ldr	r2, [r7, #68]
 11594 055a D2B2     		uxtb	r2, r2
 11595 055c 1A70     		strb	r2, [r3]
 11596 055e 7B6A     		ldr	r3, [r7, #36]
 11597 0560 1233     		adds	r3, r3, #18
 11598 0562 7A6C     		ldr	r2, [r7, #68]
 11599 0564 92B2     		uxth	r2, r2
 11600 0566 120A     		lsrs	r2, r2, #8
 11601 0568 92B2     		uxth	r2, r2
 11602 056a D2B2     		uxtb	r2, r2
 11603 056c 1A70     		strb	r2, [r3]
3961:../fatfs/ff.c **** 	if (n_vol < 0x10000) {					/* Number of total sectors */
 11604              		.loc 1 3961 0 discriminator 4
 11605 056e FB68     		ldr	r3, [r7, #12]
 11606 0570 B3F5803F 		cmp	r3, #65536
 11607 0574 12D2     		bcs	.L711
3962:../fatfs/ff.c **** 		ST_WORD(tbl+BPB_TotSec16, n_vol);
 11608              		.loc 1 3962 0
 11609 0576 7B6A     		ldr	r3, [r7, #36]
 11610 0578 1333     		adds	r3, r3, #19
 11611 057a FA68     		ldr	r2, [r7, #12]
 11612 057c D2B2     		uxtb	r2, r2
 11613 057e 1A70     		strb	r2, [r3]
 11614 0580 7B6A     		ldr	r3, [r7, #36]
 11615 0582 1433     		adds	r3, r3, #20
 11616 0584 FA68     		ldr	r2, [r7, #12]
 11617 0586 92B2     		uxth	r2, r2
 11618 0588 120A     		lsrs	r2, r2, #8
 11619 058a 92B2     		uxth	r2, r2
 11620 058c D2B2     		uxtb	r2, r2
 11621 058e 1A70     		strb	r2, [r3]
 11622 0590 1DE0     		b	.L712
 11623              	.L737:
 11624 0592 00BF     		.align	2
 11625              	.L736:
 11626 0594 5B561505 		.word	85284443
 11627 0598 24000000 		.word	.LC3
 11628              	.L711:
3963:../fatfs/ff.c **** 	} else {
3964:../fatfs/ff.c **** 		ST_DWORD(tbl+BPB_TotSec32, n_vol);
 11629              		.loc 1 3964 0
 11630 059c 7B6A     		ldr	r3, [r7, #36]
 11631 059e 2033     		adds	r3, r3, #32
 11632 05a0 FA68     		ldr	r2, [r7, #12]
 11633 05a2 D2B2     		uxtb	r2, r2
 11634 05a4 1A70     		strb	r2, [r3]
 11635 05a6 7B6A     		ldr	r3, [r7, #36]
 11636 05a8 2133     		adds	r3, r3, #33
 11637 05aa FA68     		ldr	r2, [r7, #12]
 11638 05ac 92B2     		uxth	r2, r2
 11639 05ae 120A     		lsrs	r2, r2, #8
 11640 05b0 92B2     		uxth	r2, r2
 11641 05b2 D2B2     		uxtb	r2, r2
 11642 05b4 1A70     		strb	r2, [r3]
 11643 05b6 7B6A     		ldr	r3, [r7, #36]
 11644 05b8 2233     		adds	r3, r3, #34
 11645 05ba FA68     		ldr	r2, [r7, #12]
 11646 05bc 120C     		lsrs	r2, r2, #16
 11647 05be D2B2     		uxtb	r2, r2
 11648 05c0 1A70     		strb	r2, [r3]
 11649 05c2 7B6A     		ldr	r3, [r7, #36]
 11650 05c4 2333     		adds	r3, r3, #35
 11651 05c6 FA68     		ldr	r2, [r7, #12]
 11652 05c8 120E     		lsrs	r2, r2, #24
 11653 05ca D2B2     		uxtb	r2, r2
 11654 05cc 1A70     		strb	r2, [r3]
 11655              	.L712:
3965:../fatfs/ff.c **** 	}
3966:../fatfs/ff.c **** 	tbl[BPB_Media] = md;					/* Media descriptor */
 11656              		.loc 1 3966 0
 11657 05ce 7B6A     		ldr	r3, [r7, #36]
 11658 05d0 1533     		adds	r3, r3, #21
 11659 05d2 97F84E20 		ldrb	r2, [r7, #78]
 11660 05d6 1A70     		strb	r2, [r3]
3967:../fatfs/ff.c **** 	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
 11661              		.loc 1 3967 0
 11662 05d8 7B6A     		ldr	r3, [r7, #36]
 11663 05da 1833     		adds	r3, r3, #24
 11664 05dc 3F22     		movs	r2, #63
 11665 05de 1A70     		strb	r2, [r3]
 11666 05e0 7B6A     		ldr	r3, [r7, #36]
 11667 05e2 1933     		adds	r3, r3, #25
 11668 05e4 0022     		movs	r2, #0
 11669 05e6 1A70     		strb	r2, [r3]
3968:../fatfs/ff.c **** 	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
 11670              		.loc 1 3968 0
 11671 05e8 7B6A     		ldr	r3, [r7, #36]
 11672 05ea 1A33     		adds	r3, r3, #26
 11673 05ec FF22     		movs	r2, #255
 11674 05ee 1A70     		strb	r2, [r3]
 11675 05f0 7B6A     		ldr	r3, [r7, #36]
 11676 05f2 1B33     		adds	r3, r3, #27
 11677 05f4 0022     		movs	r2, #0
 11678 05f6 1A70     		strb	r2, [r3]
3969:../fatfs/ff.c **** 	ST_DWORD(tbl+BPB_HiddSec, b_vol);		/* Hidden sectors */
 11679              		.loc 1 3969 0
 11680 05f8 7B6A     		ldr	r3, [r7, #36]
 11681 05fa 1C33     		adds	r3, r3, #28
 11682 05fc 3A6C     		ldr	r2, [r7, #64]
 11683 05fe D2B2     		uxtb	r2, r2
 11684 0600 1A70     		strb	r2, [r3]
 11685 0602 7B6A     		ldr	r3, [r7, #36]
 11686 0604 1D33     		adds	r3, r3, #29
 11687 0606 3A6C     		ldr	r2, [r7, #64]
 11688 0608 92B2     		uxth	r2, r2
 11689 060a 120A     		lsrs	r2, r2, #8
 11690 060c 92B2     		uxth	r2, r2
 11691 060e D2B2     		uxtb	r2, r2
 11692 0610 1A70     		strb	r2, [r3]
 11693 0612 7B6A     		ldr	r3, [r7, #36]
 11694 0614 1E33     		adds	r3, r3, #30
 11695 0616 3A6C     		ldr	r2, [r7, #64]
 11696 0618 120C     		lsrs	r2, r2, #16
 11697 061a D2B2     		uxtb	r2, r2
 11698 061c 1A70     		strb	r2, [r3]
 11699 061e 7B6A     		ldr	r3, [r7, #36]
 11700 0620 1F33     		adds	r3, r3, #31
 11701 0622 3A6C     		ldr	r2, [r7, #64]
 11702 0624 120E     		lsrs	r2, r2, #24
 11703 0626 D2B2     		uxtb	r2, r2
 11704 0628 1A70     		strb	r2, [r3]
3970:../fatfs/ff.c **** 	n = get_fattime();						/* Use current time as VSN */
 11705              		.loc 1 3970 0
 11706 062a FFF7FEFF 		bl	get_fattime
 11707 062e 0346     		mov	r3, r0
 11708 0630 3B61     		str	r3, [r7, #16]
3971:../fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 11709              		.loc 1 3971 0
 11710 0632 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11711 0636 032B     		cmp	r3, #3
 11712 0638 61D1     		bne	.L713
3972:../fatfs/ff.c **** 		ST_DWORD(tbl+BS_VolID32, n);		/* VSN */
 11713              		.loc 1 3972 0
 11714 063a 7B6A     		ldr	r3, [r7, #36]
 11715 063c 4333     		adds	r3, r3, #67
 11716 063e 3A69     		ldr	r2, [r7, #16]
 11717 0640 D2B2     		uxtb	r2, r2
 11718 0642 1A70     		strb	r2, [r3]
 11719 0644 7B6A     		ldr	r3, [r7, #36]
 11720 0646 4433     		adds	r3, r3, #68
 11721 0648 3A69     		ldr	r2, [r7, #16]
 11722 064a 92B2     		uxth	r2, r2
 11723 064c 120A     		lsrs	r2, r2, #8
 11724 064e 92B2     		uxth	r2, r2
 11725 0650 D2B2     		uxtb	r2, r2
 11726 0652 1A70     		strb	r2, [r3]
 11727 0654 7B6A     		ldr	r3, [r7, #36]
 11728 0656 4533     		adds	r3, r3, #69
 11729 0658 3A69     		ldr	r2, [r7, #16]
 11730 065a 120C     		lsrs	r2, r2, #16
 11731 065c D2B2     		uxtb	r2, r2
 11732 065e 1A70     		strb	r2, [r3]
 11733 0660 7B6A     		ldr	r3, [r7, #36]
 11734 0662 4633     		adds	r3, r3, #70
 11735 0664 3A69     		ldr	r2, [r7, #16]
 11736 0666 120E     		lsrs	r2, r2, #24
 11737 0668 D2B2     		uxtb	r2, r2
 11738 066a 1A70     		strb	r2, [r3]
3973:../fatfs/ff.c **** 		ST_DWORD(tbl+BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 11739              		.loc 1 3973 0
 11740 066c 7B6A     		ldr	r3, [r7, #36]
 11741 066e 2433     		adds	r3, r3, #36
 11742 0670 7A6B     		ldr	r2, [r7, #52]
 11743 0672 D2B2     		uxtb	r2, r2
 11744 0674 1A70     		strb	r2, [r3]
 11745 0676 7B6A     		ldr	r3, [r7, #36]
 11746 0678 2533     		adds	r3, r3, #37
 11747 067a 7A6B     		ldr	r2, [r7, #52]
 11748 067c 92B2     		uxth	r2, r2
 11749 067e 120A     		lsrs	r2, r2, #8
 11750 0680 92B2     		uxth	r2, r2
 11751 0682 D2B2     		uxtb	r2, r2
 11752 0684 1A70     		strb	r2, [r3]
 11753 0686 7B6A     		ldr	r3, [r7, #36]
 11754 0688 2633     		adds	r3, r3, #38
 11755 068a 7A6B     		ldr	r2, [r7, #52]
 11756 068c 120C     		lsrs	r2, r2, #16
 11757 068e D2B2     		uxtb	r2, r2
 11758 0690 1A70     		strb	r2, [r3]
 11759 0692 7B6A     		ldr	r3, [r7, #36]
 11760 0694 2733     		adds	r3, r3, #39
 11761 0696 7A6B     		ldr	r2, [r7, #52]
 11762 0698 120E     		lsrs	r2, r2, #24
 11763 069a D2B2     		uxtb	r2, r2
 11764 069c 1A70     		strb	r2, [r3]
3974:../fatfs/ff.c **** 		ST_DWORD(tbl+BPB_RootClus, 2);		/* Root directory start cluster (2) */
 11765              		.loc 1 3974 0
 11766 069e 7B6A     		ldr	r3, [r7, #36]
 11767 06a0 2C33     		adds	r3, r3, #44
 11768 06a2 0222     		movs	r2, #2
 11769 06a4 1A70     		strb	r2, [r3]
 11770 06a6 7B6A     		ldr	r3, [r7, #36]
 11771 06a8 2D33     		adds	r3, r3, #45
 11772 06aa 0022     		movs	r2, #0
 11773 06ac 1A70     		strb	r2, [r3]
 11774 06ae 7B6A     		ldr	r3, [r7, #36]
 11775 06b0 2E33     		adds	r3, r3, #46
 11776 06b2 0022     		movs	r2, #0
 11777 06b4 1A70     		strb	r2, [r3]
 11778 06b6 7B6A     		ldr	r3, [r7, #36]
 11779 06b8 2F33     		adds	r3, r3, #47
 11780 06ba 0022     		movs	r2, #0
 11781 06bc 1A70     		strb	r2, [r3]
3975:../fatfs/ff.c **** 		ST_WORD(tbl+BPB_FSInfo, 1);			/* FSInfo record offset (VBR+1) */
 11782              		.loc 1 3975 0
 11783 06be 7B6A     		ldr	r3, [r7, #36]
 11784 06c0 3033     		adds	r3, r3, #48
 11785 06c2 0122     		movs	r2, #1
 11786 06c4 1A70     		strb	r2, [r3]
 11787 06c6 7B6A     		ldr	r3, [r7, #36]
 11788 06c8 3133     		adds	r3, r3, #49
 11789 06ca 0022     		movs	r2, #0
 11790 06cc 1A70     		strb	r2, [r3]
3976:../fatfs/ff.c **** 		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
 11791              		.loc 1 3976 0
 11792 06ce 7B6A     		ldr	r3, [r7, #36]
 11793 06d0 3233     		adds	r3, r3, #50
 11794 06d2 0622     		movs	r2, #6
 11795 06d4 1A70     		strb	r2, [r3]
 11796 06d6 7B6A     		ldr	r3, [r7, #36]
 11797 06d8 3333     		adds	r3, r3, #51
 11798 06da 0022     		movs	r2, #0
 11799 06dc 1A70     		strb	r2, [r3]
3977:../fatfs/ff.c **** 		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
 11800              		.loc 1 3977 0
 11801 06de 7B6A     		ldr	r3, [r7, #36]
 11802 06e0 4033     		adds	r3, r3, #64
 11803 06e2 8022     		movs	r2, #128
 11804 06e4 1A70     		strb	r2, [r3]
3978:../fatfs/ff.c **** 		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
 11805              		.loc 1 3978 0
 11806 06e6 7B6A     		ldr	r3, [r7, #36]
 11807 06e8 4233     		adds	r3, r3, #66
 11808 06ea 2922     		movs	r2, #41
 11809 06ec 1A70     		strb	r2, [r3]
3979:../fatfs/ff.c **** 		mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 11810              		.loc 1 3979 0
 11811 06ee 7B6A     		ldr	r3, [r7, #36]
 11812 06f0 4733     		adds	r3, r3, #71
 11813 06f2 1846     		mov	r0, r3
 11814 06f4 8F49     		ldr	r1, .L738
 11815 06f6 1322     		movs	r2, #19
 11816 06f8 FFF7FEFF 		bl	mem_cpy
 11817 06fc 34E0     		b	.L714
 11818              	.L713:
3980:../fatfs/ff.c **** 	} else {
3981:../fatfs/ff.c **** 		ST_DWORD(tbl+BS_VolID, n);			/* VSN */
 11819              		.loc 1 3981 0
 11820 06fe 7B6A     		ldr	r3, [r7, #36]
 11821 0700 2733     		adds	r3, r3, #39
 11822 0702 3A69     		ldr	r2, [r7, #16]
 11823 0704 D2B2     		uxtb	r2, r2
 11824 0706 1A70     		strb	r2, [r3]
 11825 0708 7B6A     		ldr	r3, [r7, #36]
 11826 070a 2833     		adds	r3, r3, #40
 11827 070c 3A69     		ldr	r2, [r7, #16]
 11828 070e 92B2     		uxth	r2, r2
 11829 0710 120A     		lsrs	r2, r2, #8
 11830 0712 92B2     		uxth	r2, r2
 11831 0714 D2B2     		uxtb	r2, r2
 11832 0716 1A70     		strb	r2, [r3]
 11833 0718 7B6A     		ldr	r3, [r7, #36]
 11834 071a 2933     		adds	r3, r3, #41
 11835 071c 3A69     		ldr	r2, [r7, #16]
 11836 071e 120C     		lsrs	r2, r2, #16
 11837 0720 D2B2     		uxtb	r2, r2
 11838 0722 1A70     		strb	r2, [r3]
 11839 0724 7B6A     		ldr	r3, [r7, #36]
 11840 0726 2A33     		adds	r3, r3, #42
 11841 0728 3A69     		ldr	r2, [r7, #16]
 11842 072a 120E     		lsrs	r2, r2, #24
 11843 072c D2B2     		uxtb	r2, r2
 11844 072e 1A70     		strb	r2, [r3]
3982:../fatfs/ff.c **** 		ST_WORD(tbl+BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 11845              		.loc 1 3982 0
 11846 0730 7B6A     		ldr	r3, [r7, #36]
 11847 0732 1633     		adds	r3, r3, #22
 11848 0734 7A6B     		ldr	r2, [r7, #52]
 11849 0736 D2B2     		uxtb	r2, r2
 11850 0738 1A70     		strb	r2, [r3]
 11851 073a 7B6A     		ldr	r3, [r7, #36]
 11852 073c 1733     		adds	r3, r3, #23
 11853 073e 7A6B     		ldr	r2, [r7, #52]
 11854 0740 92B2     		uxth	r2, r2
 11855 0742 120A     		lsrs	r2, r2, #8
 11856 0744 92B2     		uxth	r2, r2
 11857 0746 D2B2     		uxtb	r2, r2
 11858 0748 1A70     		strb	r2, [r3]
3983:../fatfs/ff.c **** 		tbl[BS_DrvNum] = 0x80;				/* Drive number */
 11859              		.loc 1 3983 0
 11860 074a 7B6A     		ldr	r3, [r7, #36]
 11861 074c 2433     		adds	r3, r3, #36
 11862 074e 8022     		movs	r2, #128
 11863 0750 1A70     		strb	r2, [r3]
3984:../fatfs/ff.c **** 		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
 11864              		.loc 1 3984 0
 11865 0752 7B6A     		ldr	r3, [r7, #36]
 11866 0754 2633     		adds	r3, r3, #38
 11867 0756 2922     		movs	r2, #41
 11868 0758 1A70     		strb	r2, [r3]
3985:../fatfs/ff.c **** 		mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 11869              		.loc 1 3985 0
 11870 075a 7B6A     		ldr	r3, [r7, #36]
 11871 075c 2B33     		adds	r3, r3, #43
 11872 075e 1846     		mov	r0, r3
 11873 0760 7549     		ldr	r1, .L738+4
 11874 0762 1322     		movs	r2, #19
 11875 0764 FFF7FEFF 		bl	mem_cpy
 11876              	.L714:
3986:../fatfs/ff.c **** 	}
3987:../fatfs/ff.c **** 	ST_WORD(tbl+BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
 11877              		.loc 1 3987 0
 11878 0768 7B6A     		ldr	r3, [r7, #36]
 11879 076a 03F5FF73 		add	r3, r3, #510
 11880 076e 5522     		movs	r2, #85
 11881 0770 1A70     		strb	r2, [r3]
 11882 0772 7B6A     		ldr	r3, [r7, #36]
 11883 0774 03F2FF13 		addw	r3, r3, #511
 11884 0778 AA22     		movs	r2, #170
 11885 077a 1A70     		strb	r2, [r3]
3988:../fatfs/ff.c **** 	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
 11886              		.loc 1 3988 0
 11887 077c 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 11888 0780 1846     		mov	r0, r3
 11889 0782 796A     		ldr	r1, [r7, #36]
 11890 0784 3A6C     		ldr	r2, [r7, #64]
 11891 0786 0123     		movs	r3, #1
 11892 0788 FFF7FEFF 		bl	disk_write
 11893 078c 0346     		mov	r3, r0
 11894 078e 002B     		cmp	r3, #0
 11895 0790 01D0     		beq	.L715
3989:../fatfs/ff.c **** 		return FR_DISK_ERR;
 11896              		.loc 1 3989 0
 11897 0792 0123     		movs	r3, #1
 11898 0794 63E1     		b	.L732
 11899              	.L715:
3990:../fatfs/ff.c **** 	if (fmt == FS_FAT32)							/* Write backup VBR if needed (VBR+6) */
 11900              		.loc 1 3990 0
 11901 0796 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11902 079a 032B     		cmp	r3, #3
 11903 079c 09D1     		bne	.L716
3991:../fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 6, 1);
 11904              		.loc 1 3991 0
 11905 079e 3B6C     		ldr	r3, [r7, #64]
 11906 07a0 0633     		adds	r3, r3, #6
 11907 07a2 97F82B20 		ldrb	r2, [r7, #43]	@ zero_extendqisi2
 11908 07a6 1046     		mov	r0, r2
 11909 07a8 796A     		ldr	r1, [r7, #36]
 11910 07aa 1A46     		mov	r2, r3
 11911 07ac 0123     		movs	r3, #1
 11912 07ae FFF7FEFF 		bl	disk_write
 11913              	.L716:
3992:../fatfs/ff.c **** 
3993:../fatfs/ff.c **** 	/* Initialize FAT area */
3994:../fatfs/ff.c **** 	wsect = b_fat;
 11914              		.loc 1 3994 0
 11915 07b2 FB6B     		ldr	r3, [r7, #60]
 11916 07b4 BB64     		str	r3, [r7, #72]
3995:../fatfs/ff.c **** 	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
 11917              		.loc 1 3995 0
 11918 07b6 0023     		movs	r3, #0
 11919 07b8 7B64     		str	r3, [r7, #68]
 11920 07ba 9FE0     		b	.L717
 11921              	.L726:
3996:../fatfs/ff.c **** 		mem_set(tbl, 0, SS(fatfs));			/* 1st sector of the FAT  */
 11922              		.loc 1 3996 0
 11923 07bc 786A     		ldr	r0, [r7, #36]
 11924 07be 0021     		movs	r1, #0
 11925 07c0 4FF40072 		mov	r2, #512
 11926 07c4 FFF7FEFF 		bl	mem_set
3997:../fatfs/ff.c **** 		n = md;								/* Media descriptor byte */
 11927              		.loc 1 3997 0
 11928 07c8 97F84E30 		ldrb	r3, [r7, #78]	@ zero_extendqisi2
 11929 07cc 3B61     		str	r3, [r7, #16]
3998:../fatfs/ff.c **** 		if (fmt != FS_FAT32) {
 11930              		.loc 1 3998 0
 11931 07ce 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11932 07d2 032B     		cmp	r3, #3
 11933 07d4 23D0     		beq	.L718
3999:../fatfs/ff.c **** 			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
 11934              		.loc 1 3999 0
 11935 07d6 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11936 07da 012B     		cmp	r3, #1
 11937 07dc 01D1     		bne	.L719
 11938              		.loc 1 3999 0 is_stmt 0 discriminator 1
 11939 07de 574A     		ldr	r2, .L738+8
 11940 07e0 01E0     		b	.L720
 11941              	.L719:
 11942              		.loc 1 3999 0 discriminator 2
 11943 07e2 6FF0FF02 		mvn	r2, #255
 11944              	.L720:
 11945              		.loc 1 3999 0 discriminator 4
 11946 07e6 3B69     		ldr	r3, [r7, #16]
 11947 07e8 1343     		orrs	r3, r3, r2
 11948 07ea 3B61     		str	r3, [r7, #16]
4000:../fatfs/ff.c **** 			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT12/16) */
 11949              		.loc 1 4000 0 is_stmt 1 discriminator 4
 11950 07ec 3B69     		ldr	r3, [r7, #16]
 11951 07ee DAB2     		uxtb	r2, r3
 11952 07f0 7B6A     		ldr	r3, [r7, #36]
 11953 07f2 1A70     		strb	r2, [r3]
 11954 07f4 7B6A     		ldr	r3, [r7, #36]
 11955 07f6 0133     		adds	r3, r3, #1
 11956 07f8 3A69     		ldr	r2, [r7, #16]
 11957 07fa 92B2     		uxth	r2, r2
 11958 07fc 120A     		lsrs	r2, r2, #8
 11959 07fe 92B2     		uxth	r2, r2
 11960 0800 D2B2     		uxtb	r2, r2
 11961 0802 1A70     		strb	r2, [r3]
 11962 0804 7B6A     		ldr	r3, [r7, #36]
 11963 0806 0233     		adds	r3, r3, #2
 11964 0808 3A69     		ldr	r2, [r7, #16]
 11965 080a 120C     		lsrs	r2, r2, #16
 11966 080c D2B2     		uxtb	r2, r2
 11967 080e 1A70     		strb	r2, [r3]
 11968 0810 7B6A     		ldr	r3, [r7, #36]
 11969 0812 0333     		adds	r3, r3, #3
 11970 0814 3A69     		ldr	r2, [r7, #16]
 11971 0816 120E     		lsrs	r2, r2, #24
 11972 0818 D2B2     		uxtb	r2, r2
 11973 081a 1A70     		strb	r2, [r3]
 11974 081c 3BE0     		b	.L721
 11975              	.L718:
4001:../fatfs/ff.c **** 		} else {
4002:../fatfs/ff.c **** 			n |= 0xFFFFFF00;
 11976              		.loc 1 4002 0
 11977 081e 3B69     		ldr	r3, [r7, #16]
 11978 0820 63F0FF03 		orn	r3, r3, #255
 11979 0824 3B61     		str	r3, [r7, #16]
4003:../fatfs/ff.c **** 			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
 11980              		.loc 1 4003 0
 11981 0826 3B69     		ldr	r3, [r7, #16]
 11982 0828 DAB2     		uxtb	r2, r3
 11983 082a 7B6A     		ldr	r3, [r7, #36]
 11984 082c 1A70     		strb	r2, [r3]
 11985 082e 7B6A     		ldr	r3, [r7, #36]
 11986 0830 0133     		adds	r3, r3, #1
 11987 0832 3A69     		ldr	r2, [r7, #16]
 11988 0834 92B2     		uxth	r2, r2
 11989 0836 120A     		lsrs	r2, r2, #8
 11990 0838 92B2     		uxth	r2, r2
 11991 083a D2B2     		uxtb	r2, r2
 11992 083c 1A70     		strb	r2, [r3]
 11993 083e 7B6A     		ldr	r3, [r7, #36]
 11994 0840 0233     		adds	r3, r3, #2
 11995 0842 3A69     		ldr	r2, [r7, #16]
 11996 0844 120C     		lsrs	r2, r2, #16
 11997 0846 D2B2     		uxtb	r2, r2
 11998 0848 1A70     		strb	r2, [r3]
 11999 084a 7B6A     		ldr	r3, [r7, #36]
 12000 084c 0333     		adds	r3, r3, #3
 12001 084e 3A69     		ldr	r2, [r7, #16]
 12002 0850 120E     		lsrs	r2, r2, #24
 12003 0852 D2B2     		uxtb	r2, r2
 12004 0854 1A70     		strb	r2, [r3]
4004:../fatfs/ff.c **** 			ST_DWORD(tbl+4, 0xFFFFFFFF);
 12005              		.loc 1 4004 0
 12006 0856 7B6A     		ldr	r3, [r7, #36]
 12007 0858 0433     		adds	r3, r3, #4
 12008 085a FF22     		movs	r2, #255
 12009 085c 1A70     		strb	r2, [r3]
 12010 085e 7B6A     		ldr	r3, [r7, #36]
 12011 0860 0533     		adds	r3, r3, #5
 12012 0862 FF22     		movs	r2, #255
 12013 0864 1A70     		strb	r2, [r3]
 12014 0866 7B6A     		ldr	r3, [r7, #36]
 12015 0868 0633     		adds	r3, r3, #6
 12016 086a FF22     		movs	r2, #255
 12017 086c 1A70     		strb	r2, [r3]
 12018 086e 7B6A     		ldr	r3, [r7, #36]
 12019 0870 0733     		adds	r3, r3, #7
 12020 0872 FF22     		movs	r2, #255
 12021 0874 1A70     		strb	r2, [r3]
4005:../fatfs/ff.c **** 			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
 12022              		.loc 1 4005 0
 12023 0876 7B6A     		ldr	r3, [r7, #36]
 12024 0878 0833     		adds	r3, r3, #8
 12025 087a FF22     		movs	r2, #255
 12026 087c 1A70     		strb	r2, [r3]
 12027 087e 7B6A     		ldr	r3, [r7, #36]
 12028 0880 0933     		adds	r3, r3, #9
 12029 0882 FF22     		movs	r2, #255
 12030 0884 1A70     		strb	r2, [r3]
 12031 0886 7B6A     		ldr	r3, [r7, #36]
 12032 0888 0A33     		adds	r3, r3, #10
 12033 088a FF22     		movs	r2, #255
 12034 088c 1A70     		strb	r2, [r3]
 12035 088e 7B6A     		ldr	r3, [r7, #36]
 12036 0890 0B33     		adds	r3, r3, #11
 12037 0892 0F22     		movs	r2, #15
 12038 0894 1A70     		strb	r2, [r3]
 12039              	.L721:
4006:../fatfs/ff.c **** 		}
4007:../fatfs/ff.c **** 		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 12040              		.loc 1 4007 0
 12041 0896 BB6C     		ldr	r3, [r7, #72]
 12042 0898 5A1C     		adds	r2, r3, #1
 12043 089a BA64     		str	r2, [r7, #72]
 12044 089c 97F82B20 		ldrb	r2, [r7, #43]	@ zero_extendqisi2
 12045 08a0 1046     		mov	r0, r2
 12046 08a2 796A     		ldr	r1, [r7, #36]
 12047 08a4 1A46     		mov	r2, r3
 12048 08a6 0123     		movs	r3, #1
 12049 08a8 FFF7FEFF 		bl	disk_write
 12050 08ac 0346     		mov	r3, r0
 12051 08ae 002B     		cmp	r3, #0
 12052 08b0 01D0     		beq	.L722
4008:../fatfs/ff.c **** 			return FR_DISK_ERR;
 12053              		.loc 1 4008 0
 12054 08b2 0123     		movs	r3, #1
 12055 08b4 D3E0     		b	.L732
 12056              	.L722:
4009:../fatfs/ff.c **** 		mem_set(tbl, 0, SS(fatfs));			/* Fill following FAT entries with zero */
 12057              		.loc 1 4009 0
 12058 08b6 786A     		ldr	r0, [r7, #36]
 12059 08b8 0021     		movs	r1, #0
 12060 08ba 4FF40072 		mov	r2, #512
 12061 08be FFF7FEFF 		bl	mem_set
4010:../fatfs/ff.c **** 		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single se
 12062              		.loc 1 4010 0
 12063 08c2 0123     		movs	r3, #1
 12064 08c4 3B61     		str	r3, [r7, #16]
 12065 08c6 12E0     		b	.L723
 12066              	.L725:
4011:../fatfs/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 12067              		.loc 1 4011 0
 12068 08c8 BB6C     		ldr	r3, [r7, #72]
 12069 08ca 5A1C     		adds	r2, r3, #1
 12070 08cc BA64     		str	r2, [r7, #72]
 12071 08ce 97F82B20 		ldrb	r2, [r7, #43]	@ zero_extendqisi2
 12072 08d2 1046     		mov	r0, r2
 12073 08d4 796A     		ldr	r1, [r7, #36]
 12074 08d6 1A46     		mov	r2, r3
 12075 08d8 0123     		movs	r3, #1
 12076 08da FFF7FEFF 		bl	disk_write
 12077 08de 0346     		mov	r3, r0
 12078 08e0 002B     		cmp	r3, #0
 12079 08e2 01D0     		beq	.L724
4012:../fatfs/ff.c **** 				return FR_DISK_ERR;
 12080              		.loc 1 4012 0
 12081 08e4 0123     		movs	r3, #1
 12082 08e6 BAE0     		b	.L732
 12083              	.L724:
4010:../fatfs/ff.c **** 		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single se
 12084              		.loc 1 4010 0 discriminator 2
 12085 08e8 3B69     		ldr	r3, [r7, #16]
 12086 08ea 0133     		adds	r3, r3, #1
 12087 08ec 3B61     		str	r3, [r7, #16]
 12088              	.L723:
4010:../fatfs/ff.c **** 		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single se
 12089              		.loc 1 4010 0 is_stmt 0 discriminator 1
 12090 08ee 3A69     		ldr	r2, [r7, #16]
 12091 08f0 7B6B     		ldr	r3, [r7, #52]
 12092 08f2 9A42     		cmp	r2, r3
 12093 08f4 E8D3     		bcc	.L725
3995:../fatfs/ff.c **** 		mem_set(tbl, 0, SS(fatfs));			/* 1st sector of the FAT  */
 12094              		.loc 1 3995 0 is_stmt 1 discriminator 2
 12095 08f6 7B6C     		ldr	r3, [r7, #68]
 12096 08f8 0133     		adds	r3, r3, #1
 12097 08fa 7B64     		str	r3, [r7, #68]
 12098              	.L717:
3995:../fatfs/ff.c **** 		mem_set(tbl, 0, SS(fatfs));			/* 1st sector of the FAT  */
 12099              		.loc 1 3995 0 is_stmt 0 discriminator 1
 12100 08fc 7B6C     		ldr	r3, [r7, #68]
 12101 08fe 002B     		cmp	r3, #0
 12102 0900 3FF45CAF 		beq	.L726
4013:../fatfs/ff.c **** 		}
4014:../fatfs/ff.c **** 	}
4015:../fatfs/ff.c **** 
4016:../fatfs/ff.c **** 	/* Initialize root directory */
4017:../fatfs/ff.c **** 	i = (fmt == FS_FAT32) ? au : n_dir;
 12103              		.loc 1 4017 0 is_stmt 1
 12104 0904 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 12105 0908 032B     		cmp	r3, #3
 12106 090a 01D1     		bne	.L727
 12107              		.loc 1 4017 0 is_stmt 0 discriminator 1
 12108 090c 3B68     		ldr	r3, [r7]
 12109 090e 00E0     		b	.L728
 12110              	.L727:
 12111              		.loc 1 4017 0 discriminator 2
 12112 0910 3B6B     		ldr	r3, [r7, #48]
 12113              	.L728:
 12114              		.loc 1 4017 0 discriminator 4
 12115 0912 7B64     		str	r3, [r7, #68]
 12116              	.L730:
4018:../fatfs/ff.c **** 	do {
4019:../fatfs/ff.c **** 		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 12117              		.loc 1 4019 0 is_stmt 1
 12118 0914 BB6C     		ldr	r3, [r7, #72]
 12119 0916 5A1C     		adds	r2, r3, #1
 12120 0918 BA64     		str	r2, [r7, #72]
 12121 091a 97F82B20 		ldrb	r2, [r7, #43]	@ zero_extendqisi2
 12122 091e 1046     		mov	r0, r2
 12123 0920 796A     		ldr	r1, [r7, #36]
 12124 0922 1A46     		mov	r2, r3
 12125 0924 0123     		movs	r3, #1
 12126 0926 FFF7FEFF 		bl	disk_write
 12127 092a 0346     		mov	r3, r0
 12128 092c 002B     		cmp	r3, #0
 12129 092e 07D0     		beq	.L729
4020:../fatfs/ff.c **** 			return FR_DISK_ERR;
 12130              		.loc 1 4020 0
 12131 0930 0123     		movs	r3, #1
 12132 0932 94E0     		b	.L732
 12133              	.L739:
 12134              		.align	2
 12135              	.L738:
 12136 0934 30000000 		.word	.LC4
 12137 0938 44000000 		.word	.LC5
 12138 093c 00FFFF00 		.word	16776960
 12139              	.L729:
4021:../fatfs/ff.c **** 	} while (--i);
 12140              		.loc 1 4021 0
 12141 0940 7B6C     		ldr	r3, [r7, #68]
 12142 0942 013B     		subs	r3, r3, #1
 12143 0944 7B64     		str	r3, [r7, #68]
 12144 0946 7B6C     		ldr	r3, [r7, #68]
 12145 0948 002B     		cmp	r3, #0
 12146 094a E3D1     		bne	.L730
4022:../fatfs/ff.c **** 
4023:../fatfs/ff.c **** #if _USE_ERASE	/* Erase data area if needed */
4024:../fatfs/ff.c **** 	{
4025:../fatfs/ff.c **** 		DWORD eb[2];
4026:../fatfs/ff.c **** 
4027:../fatfs/ff.c **** 		eb[0] = wsect; eb[1] = wsect + (n_clst - ((fmt == FS_FAT32) ? 1 : 0)) * au - 1;
4028:../fatfs/ff.c **** 		disk_ioctl(pdrv, CTRL_ERASE_SECTOR, eb);
4029:../fatfs/ff.c **** 	}
4030:../fatfs/ff.c **** #endif
4031:../fatfs/ff.c **** 
4032:../fatfs/ff.c **** 	/* Create FSInfo if needed */
4033:../fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 12147              		.loc 1 4033 0
 12148 094c 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 12149 0950 032B     		cmp	r3, #3
 12150 0952 77D1     		bne	.L731
4034:../fatfs/ff.c **** 		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
 12151              		.loc 1 4034 0
 12152 0954 7B6A     		ldr	r3, [r7, #36]
 12153 0956 5222     		movs	r2, #82
 12154 0958 1A70     		strb	r2, [r3]
 12155 095a 7B6A     		ldr	r3, [r7, #36]
 12156 095c 0133     		adds	r3, r3, #1
 12157 095e 5222     		movs	r2, #82
 12158 0960 1A70     		strb	r2, [r3]
 12159 0962 7B6A     		ldr	r3, [r7, #36]
 12160 0964 0233     		adds	r3, r3, #2
 12161 0966 6122     		movs	r2, #97
 12162 0968 1A70     		strb	r2, [r3]
 12163 096a 7B6A     		ldr	r3, [r7, #36]
 12164 096c 0333     		adds	r3, r3, #3
 12165 096e 4122     		movs	r2, #65
 12166 0970 1A70     		strb	r2, [r3]
4035:../fatfs/ff.c **** 		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
 12167              		.loc 1 4035 0
 12168 0972 7B6A     		ldr	r3, [r7, #36]
 12169 0974 03F5F273 		add	r3, r3, #484
 12170 0978 7222     		movs	r2, #114
 12171 097a 1A70     		strb	r2, [r3]
 12172 097c 7B6A     		ldr	r3, [r7, #36]
 12173 097e 03F2E513 		addw	r3, r3, #485
 12174 0982 7222     		movs	r2, #114
 12175 0984 1A70     		strb	r2, [r3]
 12176 0986 7B6A     		ldr	r3, [r7, #36]
 12177 0988 03F5F373 		add	r3, r3, #486
 12178 098c 4122     		movs	r2, #65
 12179 098e 1A70     		strb	r2, [r3]
 12180 0990 7B6A     		ldr	r3, [r7, #36]
 12181 0992 03F2E713 		addw	r3, r3, #487
 12182 0996 6122     		movs	r2, #97
 12183 0998 1A70     		strb	r2, [r3]
4036:../fatfs/ff.c **** 		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 12184              		.loc 1 4036 0
 12185 099a 7B6A     		ldr	r3, [r7, #36]
 12186 099c 03F5F473 		add	r3, r3, #488
 12187 09a0 FA69     		ldr	r2, [r7, #28]
 12188 09a2 D2B2     		uxtb	r2, r2
 12189 09a4 013A     		subs	r2, r2, #1
 12190 09a6 D2B2     		uxtb	r2, r2
 12191 09a8 1A70     		strb	r2, [r3]
 12192 09aa 7B6A     		ldr	r3, [r7, #36]
 12193 09ac 03F2E913 		addw	r3, r3, #489
 12194 09b0 FA69     		ldr	r2, [r7, #28]
 12195 09b2 92B2     		uxth	r2, r2
 12196 09b4 013A     		subs	r2, r2, #1
 12197 09b6 92B2     		uxth	r2, r2
 12198 09b8 120A     		lsrs	r2, r2, #8
 12199 09ba 92B2     		uxth	r2, r2
 12200 09bc D2B2     		uxtb	r2, r2
 12201 09be 1A70     		strb	r2, [r3]
 12202 09c0 7B6A     		ldr	r3, [r7, #36]
 12203 09c2 03F5F573 		add	r3, r3, #490
 12204 09c6 FA69     		ldr	r2, [r7, #28]
 12205 09c8 013A     		subs	r2, r2, #1
 12206 09ca 120C     		lsrs	r2, r2, #16
 12207 09cc D2B2     		uxtb	r2, r2
 12208 09ce 1A70     		strb	r2, [r3]
 12209 09d0 7B6A     		ldr	r3, [r7, #36]
 12210 09d2 03F2EB13 		addw	r3, r3, #491
 12211 09d6 FA69     		ldr	r2, [r7, #28]
 12212 09d8 013A     		subs	r2, r2, #1
 12213 09da 120E     		lsrs	r2, r2, #24
 12214 09dc D2B2     		uxtb	r2, r2
 12215 09de 1A70     		strb	r2, [r3]
4037:../fatfs/ff.c **** 		ST_DWORD(tbl+FSI_Nxt_Free, 2);				/* Last allocated cluster# */
 12216              		.loc 1 4037 0
 12217 09e0 7B6A     		ldr	r3, [r7, #36]
 12218 09e2 03F5F673 		add	r3, r3, #492
 12219 09e6 0222     		movs	r2, #2
 12220 09e8 1A70     		strb	r2, [r3]
 12221 09ea 7B6A     		ldr	r3, [r7, #36]
 12222 09ec 03F2ED13 		addw	r3, r3, #493
 12223 09f0 0022     		movs	r2, #0
 12224 09f2 1A70     		strb	r2, [r3]
 12225 09f4 7B6A     		ldr	r3, [r7, #36]
 12226 09f6 03F5F773 		add	r3, r3, #494
 12227 09fa 0022     		movs	r2, #0
 12228 09fc 1A70     		strb	r2, [r3]
 12229 09fe 7B6A     		ldr	r3, [r7, #36]
 12230 0a00 03F2EF13 		addw	r3, r3, #495
 12231 0a04 0022     		movs	r2, #0
 12232 0a06 1A70     		strb	r2, [r3]
4038:../fatfs/ff.c **** 		ST_WORD(tbl+BS_55AA, 0xAA55);
 12233              		.loc 1 4038 0
 12234 0a08 7B6A     		ldr	r3, [r7, #36]
 12235 0a0a 03F5FF73 		add	r3, r3, #510
 12236 0a0e 5522     		movs	r2, #85
 12237 0a10 1A70     		strb	r2, [r3]
 12238 0a12 7B6A     		ldr	r3, [r7, #36]
 12239 0a14 03F2FF13 		addw	r3, r3, #511
 12240 0a18 AA22     		movs	r2, #170
 12241 0a1a 1A70     		strb	r2, [r3]
4039:../fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR+1) */
 12242              		.loc 1 4039 0
 12243 0a1c 3B6C     		ldr	r3, [r7, #64]
 12244 0a1e 0133     		adds	r3, r3, #1
 12245 0a20 97F82B20 		ldrb	r2, [r7, #43]	@ zero_extendqisi2
 12246 0a24 1046     		mov	r0, r2
 12247 0a26 796A     		ldr	r1, [r7, #36]
 12248 0a28 1A46     		mov	r2, r3
 12249 0a2a 0123     		movs	r3, #1
 12250 0a2c FFF7FEFF 		bl	disk_write
4040:../fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR+7) */
 12251              		.loc 1 4040 0
 12252 0a30 3B6C     		ldr	r3, [r7, #64]
 12253 0a32 0733     		adds	r3, r3, #7
 12254 0a34 97F82B20 		ldrb	r2, [r7, #43]	@ zero_extendqisi2
 12255 0a38 1046     		mov	r0, r2
 12256 0a3a 796A     		ldr	r1, [r7, #36]
 12257 0a3c 1A46     		mov	r2, r3
 12258 0a3e 0123     		movs	r3, #1
 12259 0a40 FFF7FEFF 		bl	disk_write
 12260              	.L731:
4041:../fatfs/ff.c **** 	}
4042:../fatfs/ff.c **** 
4043:../fatfs/ff.c **** 	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
 12261              		.loc 1 4043 0
 12262 0a44 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 12263 0a48 1846     		mov	r0, r3
 12264 0a4a 0021     		movs	r1, #0
 12265 0a4c 0022     		movs	r2, #0
 12266 0a4e FFF7FEFF 		bl	disk_ioctl
 12267 0a52 0346     		mov	r3, r0
 12268 0a54 002B     		cmp	r3, #0
 12269 0a56 14BF     		ite	ne
 12270 0a58 0123     		movne	r3, #1
 12271 0a5a 0023     		moveq	r3, #0
 12272 0a5c DBB2     		uxtb	r3, r3
 12273              	.L732:
4044:../fatfs/ff.c **** }
 12274              		.loc 1 4044 0 discriminator 1
 12275 0a5e 1846     		mov	r0, r3
 12276 0a60 5037     		adds	r7, r7, #80
 12277              		.cfi_def_cfa_offset 8
 12278 0a62 BD46     		mov	sp, r7
 12279              		.cfi_def_cfa_register 13
 12280              		@ sp needed
 12281 0a64 80BD     		pop	{r7, pc}
 12282              		.cfi_endproc
 12283              	.LFE54:
 12285 0a66 00BF     		.section	.text.f_fdisk,"ax",%progbits
 12286              		.align	2
 12287              		.global	f_fdisk
 12288              		.thumb
 12289              		.thumb_func
 12291              	f_fdisk:
 12292              	.LFB55:
4045:../fatfs/ff.c **** 
4046:../fatfs/ff.c **** 
4047:../fatfs/ff.c **** #if _MULTI_PARTITION
4048:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4049:../fatfs/ff.c **** /* Divide Physical Drive                                                 */
4050:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4051:../fatfs/ff.c **** 
4052:../fatfs/ff.c **** FRESULT f_fdisk (
4053:../fatfs/ff.c **** 	BYTE pdrv,			/* Physical drive number */
4054:../fatfs/ff.c **** 	const DWORD szt[],	/* Pointer to the size table for each partitions */
4055:../fatfs/ff.c **** 	void* work			/* Pointer to the working buffer */
4056:../fatfs/ff.c **** )
4057:../fatfs/ff.c **** {
 12293              		.loc 1 4057 0
 12294              		.cfi_startproc
 12295              		@ args = 0, pretend = 0, frame = 72
 12296              		@ frame_needed = 1, uses_anonymous_args = 0
 12297 0000 80B5     		push	{r7, lr}
 12298              		.cfi_def_cfa_offset 8
 12299              		.cfi_offset 7, -8
 12300              		.cfi_offset 14, -4
 12301 0002 92B0     		sub	sp, sp, #72
 12302              		.cfi_def_cfa_offset 80
 12303 0004 00AF     		add	r7, sp, #0
 12304              		.cfi_def_cfa_register 7
 12305 0006 0346     		mov	r3, r0
 12306 0008 B960     		str	r1, [r7, #8]
 12307 000a 7A60     		str	r2, [r7, #4]
 12308 000c FB73     		strb	r3, [r7, #15]
4058:../fatfs/ff.c **** 	UINT i, n, sz_cyl, tot_cyl, b_cyl, e_cyl, p_cyl;
4059:../fatfs/ff.c **** 	BYTE s_hd, e_hd, *p, *buf = (BYTE*)work;
 12309              		.loc 1 4059 0
 12310 000e 7B68     		ldr	r3, [r7, #4]
 12311 0010 BB62     		str	r3, [r7, #40]
4060:../fatfs/ff.c **** 	DSTATUS stat;
4061:../fatfs/ff.c **** 	DWORD sz_disk, sz_part, s_part;
4062:../fatfs/ff.c **** 
4063:../fatfs/ff.c **** 
4064:../fatfs/ff.c **** 	stat = disk_initialize(pdrv);
 12312              		.loc 1 4064 0
 12313 0012 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 12314 0014 1846     		mov	r0, r3
 12315 0016 FFF7FEFF 		bl	disk_initialize
 12316 001a 0346     		mov	r3, r0
 12317 001c 87F82730 		strb	r3, [r7, #39]
4065:../fatfs/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
 12318              		.loc 1 4065 0
 12319 0020 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 12320 0024 03F00103 		and	r3, r3, #1
 12321 0028 002B     		cmp	r3, #0
 12322 002a 01D0     		beq	.L741
 12323              		.loc 1 4065 0 is_stmt 0 discriminator 1
 12324 002c 0323     		movs	r3, #3
 12325 002e 16E1     		b	.L761
 12326              	.L741:
4066:../fatfs/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 12327              		.loc 1 4066 0 is_stmt 1
 12328 0030 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 12329 0034 03F00403 		and	r3, r3, #4
 12330 0038 002B     		cmp	r3, #0
 12331 003a 01D0     		beq	.L743
 12332              		.loc 1 4066 0 is_stmt 0 discriminator 1
 12333 003c 0A23     		movs	r3, #10
 12334 003e 0EE1     		b	.L761
 12335              	.L743:
4067:../fatfs/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_disk)) return FR_DISK_ERR;
 12336              		.loc 1 4067 0 is_stmt 1
 12337 0040 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 12338 0042 07F11003 		add	r3, r7, #16
 12339 0046 1046     		mov	r0, r2
 12340 0048 0121     		movs	r1, #1
 12341 004a 1A46     		mov	r2, r3
 12342 004c FFF7FEFF 		bl	disk_ioctl
 12343 0050 0346     		mov	r3, r0
 12344 0052 002B     		cmp	r3, #0
 12345 0054 01D0     		beq	.L744
 12346              		.loc 1 4067 0 is_stmt 0 discriminator 1
 12347 0056 0123     		movs	r3, #1
 12348 0058 01E1     		b	.L761
 12349              	.L744:
4068:../fatfs/ff.c **** 
4069:../fatfs/ff.c **** 	/* Determine CHS in the table regardless of the drive geometry */
4070:../fatfs/ff.c **** 	for (n = 16; n < 256 && sz_disk / n / 63 > 1024; n *= 2) ;
 12350              		.loc 1 4070 0 is_stmt 1
 12351 005a 1023     		movs	r3, #16
 12352 005c 3B64     		str	r3, [r7, #64]
 12353 005e 02E0     		b	.L745
 12354              	.L747:
 12355              		.loc 1 4070 0 is_stmt 0 discriminator 4
 12356 0060 3B6C     		ldr	r3, [r7, #64]
 12357 0062 5B00     		lsls	r3, r3, #1
 12358 0064 3B64     		str	r3, [r7, #64]
 12359              	.L745:
 12360              		.loc 1 4070 0 discriminator 1
 12361 0066 3B6C     		ldr	r3, [r7, #64]
 12362 0068 FF2B     		cmp	r3, #255
 12363 006a 07D8     		bhi	.L746
 12364              		.loc 1 4070 0 discriminator 3
 12365 006c 3A69     		ldr	r2, [r7, #16]
 12366 006e 3B6C     		ldr	r3, [r7, #64]
 12367 0070 B2FBF3F3 		udiv	r3, r2, r3
 12368 0074 4FF63E42 		movw	r2, #64574
 12369 0078 9342     		cmp	r3, r2
 12370 007a F1D8     		bhi	.L747
 12371              	.L746:
4071:../fatfs/ff.c **** 	if (n == 256) n--;
 12372              		.loc 1 4071 0 is_stmt 1
 12373 007c 3B6C     		ldr	r3, [r7, #64]
 12374 007e B3F5807F 		cmp	r3, #256
 12375 0082 02D1     		bne	.L748
 12376              		.loc 1 4071 0 is_stmt 0 discriminator 1
 12377 0084 3B6C     		ldr	r3, [r7, #64]
 12378 0086 013B     		subs	r3, r3, #1
 12379 0088 3B64     		str	r3, [r7, #64]
 12380              	.L748:
4072:../fatfs/ff.c **** 	e_hd = n - 1;
 12381              		.loc 1 4072 0 is_stmt 1
 12382 008a 3B6C     		ldr	r3, [r7, #64]
 12383 008c DBB2     		uxtb	r3, r3
 12384 008e 013B     		subs	r3, r3, #1
 12385 0090 87F82630 		strb	r3, [r7, #38]
4073:../fatfs/ff.c **** 	sz_cyl = 63 * n;
 12386              		.loc 1 4073 0
 12387 0094 3A6C     		ldr	r2, [r7, #64]
 12388 0096 1346     		mov	r3, r2
 12389 0098 9B01     		lsls	r3, r3, #6
 12390 009a 9B1A     		subs	r3, r3, r2
 12391 009c 3B62     		str	r3, [r7, #32]
4074:../fatfs/ff.c **** 	tot_cyl = sz_disk / sz_cyl;
 12392              		.loc 1 4074 0
 12393 009e 3A69     		ldr	r2, [r7, #16]
 12394 00a0 3B6A     		ldr	r3, [r7, #32]
 12395 00a2 B2FBF3F3 		udiv	r3, r2, r3
 12396 00a6 FB61     		str	r3, [r7, #28]
4075:../fatfs/ff.c **** 
4076:../fatfs/ff.c **** 	/* Create partition table */
4077:../fatfs/ff.c **** 	mem_set(buf, 0, _MAX_SS);
 12397              		.loc 1 4077 0
 12398 00a8 B86A     		ldr	r0, [r7, #40]
 12399 00aa 0021     		movs	r1, #0
 12400 00ac 4FF40072 		mov	r2, #512
 12401 00b0 FFF7FEFF 		bl	mem_set
4078:../fatfs/ff.c **** 	p = buf + MBR_Table; b_cyl = 0;
 12402              		.loc 1 4078 0
 12403 00b4 BB6A     		ldr	r3, [r7, #40]
 12404 00b6 03F5DF73 		add	r3, r3, #446
 12405 00ba 7B63     		str	r3, [r7, #52]
 12406 00bc 0023     		movs	r3, #0
 12407 00be FB63     		str	r3, [r7, #60]
4079:../fatfs/ff.c **** 	for (i = 0; i < 4; i++, p += SZ_PTE) {
 12408              		.loc 1 4079 0
 12409 00c0 0023     		movs	r3, #0
 12410 00c2 7B64     		str	r3, [r7, #68]
 12411 00c4 A9E0     		b	.L749
 12412              	.L757:
4080:../fatfs/ff.c **** 		p_cyl = (szt[i] <= 100) ? (DWORD)tot_cyl * szt[i] / 100 : szt[i] / sz_cyl;
 12413              		.loc 1 4080 0
 12414 00c6 7B6C     		ldr	r3, [r7, #68]
 12415 00c8 9B00     		lsls	r3, r3, #2
 12416 00ca BA68     		ldr	r2, [r7, #8]
 12417 00cc 1344     		add	r3, r3, r2
 12418 00ce 1B68     		ldr	r3, [r3]
 12419 00d0 642B     		cmp	r3, #100
 12420 00d2 0CD8     		bhi	.L750
 12421              		.loc 1 4080 0 is_stmt 0 discriminator 1
 12422 00d4 7B6C     		ldr	r3, [r7, #68]
 12423 00d6 9B00     		lsls	r3, r3, #2
 12424 00d8 BA68     		ldr	r2, [r7, #8]
 12425 00da 1344     		add	r3, r3, r2
 12426 00dc 1B68     		ldr	r3, [r3]
 12427 00de FA69     		ldr	r2, [r7, #28]
 12428 00e0 02FB03F3 		mul	r3, r2, r3
 12429 00e4 604A     		ldr	r2, .L762
 12430 00e6 A2FB0323 		umull	r2, r3, r2, r3
 12431 00ea 5B09     		lsrs	r3, r3, #5
 12432 00ec 07E0     		b	.L751
 12433              	.L750:
 12434              		.loc 1 4080 0 discriminator 2
 12435 00ee 7B6C     		ldr	r3, [r7, #68]
 12436 00f0 9B00     		lsls	r3, r3, #2
 12437 00f2 BA68     		ldr	r2, [r7, #8]
 12438 00f4 1344     		add	r3, r3, r2
 12439 00f6 1A68     		ldr	r2, [r3]
 12440 00f8 3B6A     		ldr	r3, [r7, #32]
 12441 00fa B2FBF3F3 		udiv	r3, r2, r3
 12442              	.L751:
 12443              		.loc 1 4080 0 discriminator 4
 12444 00fe BB61     		str	r3, [r7, #24]
4081:../fatfs/ff.c **** 		if (!p_cyl) continue;
 12445              		.loc 1 4081 0 is_stmt 1 discriminator 4
 12446 0100 BB69     		ldr	r3, [r7, #24]
 12447 0102 002B     		cmp	r3, #0
 12448 0104 00D1     		bne	.L752
 12449              		.loc 1 4081 0 is_stmt 0 discriminator 1
 12450 0106 82E0     		b	.L753
 12451              	.L752:
4082:../fatfs/ff.c **** 		s_part = (DWORD)sz_cyl * b_cyl;
 12452              		.loc 1 4082 0 is_stmt 1
 12453 0108 3B6A     		ldr	r3, [r7, #32]
 12454 010a FA6B     		ldr	r2, [r7, #60]
 12455 010c 02FB03F3 		mul	r3, r2, r3
 12456 0110 FB62     		str	r3, [r7, #44]
4083:../fatfs/ff.c **** 		sz_part = (DWORD)sz_cyl * p_cyl;
 12457              		.loc 1 4083 0
 12458 0112 3B6A     		ldr	r3, [r7, #32]
 12459 0114 BA69     		ldr	r2, [r7, #24]
 12460 0116 02FB03F3 		mul	r3, r2, r3
 12461 011a 3B63     		str	r3, [r7, #48]
4084:../fatfs/ff.c **** 		if (i == 0) {	/* Exclude first track of cylinder 0 */
 12462              		.loc 1 4084 0
 12463 011c 7B6C     		ldr	r3, [r7, #68]
 12464 011e 002B     		cmp	r3, #0
 12465 0120 09D1     		bne	.L754
4085:../fatfs/ff.c **** 			s_hd = 1;
 12466              		.loc 1 4085 0
 12467 0122 0123     		movs	r3, #1
 12468 0124 87F83B30 		strb	r3, [r7, #59]
4086:../fatfs/ff.c **** 			s_part += 63; sz_part -= 63;
 12469              		.loc 1 4086 0
 12470 0128 FB6A     		ldr	r3, [r7, #44]
 12471 012a 3F33     		adds	r3, r3, #63
 12472 012c FB62     		str	r3, [r7, #44]
 12473 012e 3B6B     		ldr	r3, [r7, #48]
 12474 0130 3F3B     		subs	r3, r3, #63
 12475 0132 3B63     		str	r3, [r7, #48]
 12476 0134 02E0     		b	.L755
 12477              	.L754:
4087:../fatfs/ff.c **** 		} else {
4088:../fatfs/ff.c **** 			s_hd = 0;
 12478              		.loc 1 4088 0
 12479 0136 0023     		movs	r3, #0
 12480 0138 87F83B30 		strb	r3, [r7, #59]
 12481              	.L755:
4089:../fatfs/ff.c **** 		}
4090:../fatfs/ff.c **** 		e_cyl = b_cyl + p_cyl - 1;
 12482              		.loc 1 4090 0
 12483 013c FA6B     		ldr	r2, [r7, #60]
 12484 013e BB69     		ldr	r3, [r7, #24]
 12485 0140 1344     		add	r3, r3, r2
 12486 0142 013B     		subs	r3, r3, #1
 12487 0144 7B61     		str	r3, [r7, #20]
4091:../fatfs/ff.c **** 		if (e_cyl >= tot_cyl) return FR_INVALID_PARAMETER;
 12488              		.loc 1 4091 0
 12489 0146 7A69     		ldr	r2, [r7, #20]
 12490 0148 FB69     		ldr	r3, [r7, #28]
 12491 014a 9A42     		cmp	r2, r3
 12492 014c 01D3     		bcc	.L756
 12493              		.loc 1 4091 0 is_stmt 0 discriminator 1
 12494 014e 1323     		movs	r3, #19
 12495 0150 85E0     		b	.L761
 12496              	.L756:
4092:../fatfs/ff.c **** 
4093:../fatfs/ff.c **** 		/* Set partition table */
4094:../fatfs/ff.c **** 		p[1] = s_hd;						/* Start head */
 12497              		.loc 1 4094 0 is_stmt 1
 12498 0152 7B6B     		ldr	r3, [r7, #52]
 12499 0154 0133     		adds	r3, r3, #1
 12500 0156 97F83B20 		ldrb	r2, [r7, #59]
 12501 015a 1A70     		strb	r2, [r3]
4095:../fatfs/ff.c **** 		p[2] = (BYTE)((b_cyl >> 2) + 1);	/* Start sector */
 12502              		.loc 1 4095 0
 12503 015c 7B6B     		ldr	r3, [r7, #52]
 12504 015e 0233     		adds	r3, r3, #2
 12505 0160 FA6B     		ldr	r2, [r7, #60]
 12506 0162 9208     		lsrs	r2, r2, #2
 12507 0164 D2B2     		uxtb	r2, r2
 12508 0166 0132     		adds	r2, r2, #1
 12509 0168 D2B2     		uxtb	r2, r2
 12510 016a 1A70     		strb	r2, [r3]
4096:../fatfs/ff.c **** 		p[3] = (BYTE)b_cyl;					/* Start cylinder */
 12511              		.loc 1 4096 0
 12512 016c 7B6B     		ldr	r3, [r7, #52]
 12513 016e 0333     		adds	r3, r3, #3
 12514 0170 FA6B     		ldr	r2, [r7, #60]
 12515 0172 D2B2     		uxtb	r2, r2
 12516 0174 1A70     		strb	r2, [r3]
4097:../fatfs/ff.c **** 		p[4] = 0x06;						/* System type (temporary setting) */
 12517              		.loc 1 4097 0
 12518 0176 7B6B     		ldr	r3, [r7, #52]
 12519 0178 0433     		adds	r3, r3, #4
 12520 017a 0622     		movs	r2, #6
 12521 017c 1A70     		strb	r2, [r3]
4098:../fatfs/ff.c **** 		p[5] = e_hd;						/* End head */
 12522              		.loc 1 4098 0
 12523 017e 7B6B     		ldr	r3, [r7, #52]
 12524 0180 0533     		adds	r3, r3, #5
 12525 0182 97F82620 		ldrb	r2, [r7, #38]
 12526 0186 1A70     		strb	r2, [r3]
4099:../fatfs/ff.c **** 		p[6] = (BYTE)((e_cyl >> 2) + 63);	/* End sector */
 12527              		.loc 1 4099 0
 12528 0188 7B6B     		ldr	r3, [r7, #52]
 12529 018a 0633     		adds	r3, r3, #6
 12530 018c 7A69     		ldr	r2, [r7, #20]
 12531 018e 9208     		lsrs	r2, r2, #2
 12532 0190 D2B2     		uxtb	r2, r2
 12533 0192 3F32     		adds	r2, r2, #63
 12534 0194 D2B2     		uxtb	r2, r2
 12535 0196 1A70     		strb	r2, [r3]
4100:../fatfs/ff.c **** 		p[7] = (BYTE)e_cyl;					/* End cylinder */
 12536              		.loc 1 4100 0
 12537 0198 7B6B     		ldr	r3, [r7, #52]
 12538 019a 0733     		adds	r3, r3, #7
 12539 019c 7A69     		ldr	r2, [r7, #20]
 12540 019e D2B2     		uxtb	r2, r2
 12541 01a0 1A70     		strb	r2, [r3]
4101:../fatfs/ff.c **** 		ST_DWORD(p + 8, s_part);			/* Start sector in LBA */
 12542              		.loc 1 4101 0
 12543 01a2 7B6B     		ldr	r3, [r7, #52]
 12544 01a4 0833     		adds	r3, r3, #8
 12545 01a6 FA6A     		ldr	r2, [r7, #44]
 12546 01a8 D2B2     		uxtb	r2, r2
 12547 01aa 1A70     		strb	r2, [r3]
 12548 01ac 7B6B     		ldr	r3, [r7, #52]
 12549 01ae 0933     		adds	r3, r3, #9
 12550 01b0 FA6A     		ldr	r2, [r7, #44]
 12551 01b2 92B2     		uxth	r2, r2
 12552 01b4 120A     		lsrs	r2, r2, #8
 12553 01b6 92B2     		uxth	r2, r2
 12554 01b8 D2B2     		uxtb	r2, r2
 12555 01ba 1A70     		strb	r2, [r3]
 12556 01bc 7B6B     		ldr	r3, [r7, #52]
 12557 01be 0A33     		adds	r3, r3, #10
 12558 01c0 FA6A     		ldr	r2, [r7, #44]
 12559 01c2 120C     		lsrs	r2, r2, #16
 12560 01c4 D2B2     		uxtb	r2, r2
 12561 01c6 1A70     		strb	r2, [r3]
 12562 01c8 7B6B     		ldr	r3, [r7, #52]
 12563 01ca 0B33     		adds	r3, r3, #11
 12564 01cc FA6A     		ldr	r2, [r7, #44]
 12565 01ce 120E     		lsrs	r2, r2, #24
 12566 01d0 D2B2     		uxtb	r2, r2
 12567 01d2 1A70     		strb	r2, [r3]
4102:../fatfs/ff.c **** 		ST_DWORD(p + 12, sz_part);			/* Partition size */
 12568              		.loc 1 4102 0
 12569 01d4 7B6B     		ldr	r3, [r7, #52]
 12570 01d6 0C33     		adds	r3, r3, #12
 12571 01d8 3A6B     		ldr	r2, [r7, #48]
 12572 01da D2B2     		uxtb	r2, r2
 12573 01dc 1A70     		strb	r2, [r3]
 12574 01de 7B6B     		ldr	r3, [r7, #52]
 12575 01e0 0D33     		adds	r3, r3, #13
 12576 01e2 3A6B     		ldr	r2, [r7, #48]
 12577 01e4 92B2     		uxth	r2, r2
 12578 01e6 120A     		lsrs	r2, r2, #8
 12579 01e8 92B2     		uxth	r2, r2
 12580 01ea D2B2     		uxtb	r2, r2
 12581 01ec 1A70     		strb	r2, [r3]
 12582 01ee 7B6B     		ldr	r3, [r7, #52]
 12583 01f0 0E33     		adds	r3, r3, #14
 12584 01f2 3A6B     		ldr	r2, [r7, #48]
 12585 01f4 120C     		lsrs	r2, r2, #16
 12586 01f6 D2B2     		uxtb	r2, r2
 12587 01f8 1A70     		strb	r2, [r3]
 12588 01fa 7B6B     		ldr	r3, [r7, #52]
 12589 01fc 0F33     		adds	r3, r3, #15
 12590 01fe 3A6B     		ldr	r2, [r7, #48]
 12591 0200 120E     		lsrs	r2, r2, #24
 12592 0202 D2B2     		uxtb	r2, r2
 12593 0204 1A70     		strb	r2, [r3]
4103:../fatfs/ff.c **** 
4104:../fatfs/ff.c **** 		/* Next partition */
4105:../fatfs/ff.c **** 		b_cyl += p_cyl;
 12594              		.loc 1 4105 0
 12595 0206 FA6B     		ldr	r2, [r7, #60]
 12596 0208 BB69     		ldr	r3, [r7, #24]
 12597 020a 1344     		add	r3, r3, r2
 12598 020c FB63     		str	r3, [r7, #60]
 12599              	.L753:
4079:../fatfs/ff.c **** 		p_cyl = (szt[i] <= 100) ? (DWORD)tot_cyl * szt[i] / 100 : szt[i] / sz_cyl;
 12600              		.loc 1 4079 0 discriminator 2
 12601 020e 7B6C     		ldr	r3, [r7, #68]
 12602 0210 0133     		adds	r3, r3, #1
 12603 0212 7B64     		str	r3, [r7, #68]
 12604 0214 7B6B     		ldr	r3, [r7, #52]
 12605 0216 1033     		adds	r3, r3, #16
 12606 0218 7B63     		str	r3, [r7, #52]
 12607              	.L749:
4079:../fatfs/ff.c **** 		p_cyl = (szt[i] <= 100) ? (DWORD)tot_cyl * szt[i] / 100 : szt[i] / sz_cyl;
 12608              		.loc 1 4079 0 is_stmt 0 discriminator 1
 12609 021a 7B6C     		ldr	r3, [r7, #68]
 12610 021c 032B     		cmp	r3, #3
 12611 021e 7FF652AF 		bls	.L757
4106:../fatfs/ff.c **** 	}
4107:../fatfs/ff.c **** 	ST_WORD(p, 0xAA55);
 12612              		.loc 1 4107 0 is_stmt 1
 12613 0222 7B6B     		ldr	r3, [r7, #52]
 12614 0224 5522     		movs	r2, #85
 12615 0226 1A70     		strb	r2, [r3]
 12616 0228 7B6B     		ldr	r3, [r7, #52]
 12617 022a 0133     		adds	r3, r3, #1
 12618 022c AA22     		movs	r2, #170
 12619 022e 1A70     		strb	r2, [r3]
4108:../fatfs/ff.c **** 
4109:../fatfs/ff.c **** 	/* Write it to the MBR */
4110:../fatfs/ff.c **** 	return (disk_write(pdrv, buf, 0, 1) || disk_ioctl(pdrv, CTRL_SYNC, 0)) ? FR_DISK_ERR : FR_OK;
 12620              		.loc 1 4110 0
 12621 0230 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 12622 0232 1846     		mov	r0, r3
 12623 0234 B96A     		ldr	r1, [r7, #40]
 12624 0236 0022     		movs	r2, #0
 12625 0238 0123     		movs	r3, #1
 12626 023a FFF7FEFF 		bl	disk_write
 12627 023e 0346     		mov	r3, r0
 12628 0240 002B     		cmp	r3, #0
 12629 0242 08D1     		bne	.L758
 12630              		.loc 1 4110 0 is_stmt 0 discriminator 2
 12631 0244 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 12632 0246 1846     		mov	r0, r3
 12633 0248 0021     		movs	r1, #0
 12634 024a 0022     		movs	r2, #0
 12635 024c FFF7FEFF 		bl	disk_ioctl
 12636 0250 0346     		mov	r3, r0
 12637 0252 002B     		cmp	r3, #0
 12638 0254 01D0     		beq	.L759
 12639              	.L758:
 12640              		.loc 1 4110 0 discriminator 3
 12641 0256 0123     		movs	r3, #1
 12642 0258 00E0     		b	.L760
 12643              	.L759:
 12644              		.loc 1 4110 0 discriminator 4
 12645 025a 0023     		movs	r3, #0
 12646              	.L760:
 12647              		.loc 1 4110 0 discriminator 6
 12648 025c DBB2     		uxtb	r3, r3
 12649              	.L761:
4111:../fatfs/ff.c **** }
 12650              		.loc 1 4111 0 is_stmt 1 discriminator 1
 12651 025e 1846     		mov	r0, r3
 12652 0260 4837     		adds	r7, r7, #72
 12653              		.cfi_def_cfa_offset 8
 12654 0262 BD46     		mov	sp, r7
 12655              		.cfi_def_cfa_register 13
 12656              		@ sp needed
 12657 0264 80BD     		pop	{r7, pc}
 12658              	.L763:
 12659 0266 00BF     		.align	2
 12660              	.L762:
 12661 0268 1F85EB51 		.word	1374389535
 12662              		.cfi_endproc
 12663              	.LFE55:
 12665              		.section	.rodata.vst.4734,"a",%progbits
 12666              		.align	2
 12669              	vst.4734:
 12670 0000 0004     		.short	1024
 12671 0002 0002     		.short	512
 12672 0004 0001     		.short	256
 12673 0006 8000     		.short	128
 12674 0008 4000     		.short	64
 12675 000a 2000     		.short	32
 12676 000c 1000     		.short	16
 12677 000e 0800     		.short	8
 12678 0010 0400     		.short	4
 12679 0012 0200     		.short	2
 12680 0014 0000     		.short	0
 12681              		.section	.rodata.cst.4735,"a",%progbits
 12682              		.align	2
 12685              	cst.4735:
 12686 0000 0080     		.short	-32768
 12687 0002 0040     		.short	16384
 12688 0004 0020     		.short	8192
 12689 0006 0010     		.short	4096
 12690 0008 0008     		.short	2048
 12691 000a 0040     		.short	16384
 12692 000c 0020     		.short	8192
 12693 000e 0010     		.short	4096
 12694 0010 0008     		.short	2048
 12695 0012 0004     		.short	1024
 12696 0014 0002     		.short	512
 12697              		.text
 12698              	.Letext0:
 12699              		.file 2 "../fatfs/../fatfs/integer.h"
 12700              		.file 3 "../fatfs/ff.h"
 12701              		.file 4 "../fatfs/diskio.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ff.c
                            *COM*:00000238 fatfs
     /tmp/ccN6TgX8.s:26     .data.VolToPart:00000000 VolToPart
     /tmp/ccN6TgX8.s:23     .data.VolToPart:00000000 $d
     /tmp/ccN6TgX8.s:32     .bss.FatFs:00000000 $d
     /tmp/ccN6TgX8.s:35     .bss.FatFs:00000000 FatFs
     /tmp/ccN6TgX8.s:38     .bss.Fsid:00000000 $d
     /tmp/ccN6TgX8.s:41     .bss.Fsid:00000000 Fsid
     /tmp/ccN6TgX8.s:46     .bss.CurrVol:00000000 CurrVol
     /tmp/ccN6TgX8.s:47     .bss.CurrVol:00000000 $d
     /tmp/ccN6TgX8.s:49     .bss.LfnBuf:00000000 $d
     /tmp/ccN6TgX8.s:52     .bss.LfnBuf:00000000 LfnBuf
     /tmp/ccN6TgX8.s:55     .rodata.ExCvt:00000000 $d
     /tmp/ccN6TgX8.s:58     .rodata.ExCvt:00000000 ExCvt
     /tmp/ccN6TgX8.s:188    .text.SD_mount:00000000 $t
     /tmp/ccN6TgX8.s:193    .text.SD_mount:00000000 SD_mount
     /tmp/ccN6TgX8.s:6160   .text.f_mount:00000000 f_mount
     /tmp/ccN6TgX8.s:222    .text.SD_mount:00000018 $d
     /tmp/ccN6TgX8.s:227    .text.mem_cpy:00000000 $t
     /tmp/ccN6TgX8.s:231    .text.mem_cpy:00000000 mem_cpy
     /tmp/ccN6TgX8.s:287    .text.mem_set:00000000 $t
     /tmp/ccN6TgX8.s:291    .text.mem_set:00000000 mem_set
     /tmp/ccN6TgX8.s:342    .text.mem_cmp:00000000 $t
     /tmp/ccN6TgX8.s:346    .text.mem_cmp:00000000 mem_cmp
     /tmp/ccN6TgX8.s:413    .text.chk_chr:00000000 $t
     /tmp/ccN6TgX8.s:417    .text.chk_chr:00000000 chk_chr
     /tmp/ccN6TgX8.s:472    .text.sync_window:00000000 $t
     /tmp/ccN6TgX8.s:476    .text.sync_window:00000000 sync_window
     /tmp/ccN6TgX8.s:583    .text.move_window:00000000 $t
     /tmp/ccN6TgX8.s:587    .text.move_window:00000000 move_window
     /tmp/ccN6TgX8.s:656    .text.sync_fs:00000000 $t
     /tmp/ccN6TgX8.s:660    .text.sync_fs:00000000 sync_fs
     /tmp/ccN6TgX8.s:835    .text.clust2sect:00000000 $t
     /tmp/ccN6TgX8.s:840    .text.clust2sect:00000000 clust2sect
     /tmp/ccN6TgX8.s:896    .text.get_fat:00000000 $t
     /tmp/ccN6TgX8.s:901    .text.get_fat:00000000 get_fat
     /tmp/ccN6TgX8.s:1107   .text.put_fat:00000000 $t
     /tmp/ccN6TgX8.s:1112   .text.put_fat:00000000 put_fat
     /tmp/ccN6TgX8.s:1417   .text.remove_chain:00000000 $t
     /tmp/ccN6TgX8.s:1421   .text.remove_chain:00000000 remove_chain
     /tmp/ccN6TgX8.s:1542   .text.create_chain:00000000 $t
     /tmp/ccN6TgX8.s:1546   .text.create_chain:00000000 create_chain
     /tmp/ccN6TgX8.s:1753   .text.dir_sdi:00000000 $t
     /tmp/ccN6TgX8.s:1757   .text.dir_sdi:00000000 dir_sdi
     /tmp/ccN6TgX8.s:1940   .text.dir_next:00000000 $t
     /tmp/ccN6TgX8.s:1944   .text.dir_next:00000000 dir_next
     /tmp/ccN6TgX8.s:2218   .text.dir_alloc:00000000 $t
     /tmp/ccN6TgX8.s:2222   .text.dir_alloc:00000000 dir_alloc
     /tmp/ccN6TgX8.s:2330   .text.ld_clust:00000000 $t
     /tmp/ccN6TgX8.s:2334   .text.ld_clust:00000000 ld_clust
     /tmp/ccN6TgX8.s:2404   .text.st_clust:00000000 $t
     /tmp/ccN6TgX8.s:2408   .text.st_clust:00000000 st_clust
     /tmp/ccN6TgX8.s:2468   .rodata.LfnOfs:00000000 $d
     /tmp/ccN6TgX8.s:2471   .rodata.LfnOfs:00000000 LfnOfs
     /tmp/ccN6TgX8.s:2486   .text.cmp_lfn:00000000 $t
     /tmp/ccN6TgX8.s:2490   .text.cmp_lfn:00000000 cmp_lfn
     /tmp/ccN6TgX8.s:2633   .text.cmp_lfn:000000d8 $d
     /tmp/ccN6TgX8.s:2638   .text.pick_lfn:00000000 $t
     /tmp/ccN6TgX8.s:2642   .text.pick_lfn:00000000 pick_lfn
     /tmp/ccN6TgX8.s:2779   .text.pick_lfn:000000c8 $d
     /tmp/ccN6TgX8.s:2784   .text.fit_lfn:00000000 $t
     /tmp/ccN6TgX8.s:2788   .text.fit_lfn:00000000 fit_lfn
     /tmp/ccN6TgX8.s:2938   .text.fit_lfn:000000e4 $d
     /tmp/ccN6TgX8.s:2943   .text.gen_numname:00000000 $t
     /tmp/ccN6TgX8.s:2948   .text.gen_numname:00000000 gen_numname
     /tmp/ccN6TgX8.s:3097   .text.sum_sfn:00000000 $t
     /tmp/ccN6TgX8.s:3101   .text.sum_sfn:00000000 sum_sfn
     /tmp/ccN6TgX8.s:3159   .text.dir_find:00000000 $t
     /tmp/ccN6TgX8.s:3163   .text.dir_find:00000000 dir_find
     /tmp/ccN6TgX8.s:3388   .text.dir_read:00000000 $t
     /tmp/ccN6TgX8.s:3392   .text.dir_read:00000000 dir_read
     /tmp/ccN6TgX8.s:3601   .text.dir_register:00000000 $t
     /tmp/ccN6TgX8.s:3605   .text.dir_register:00000000 dir_register
     /tmp/ccN6TgX8.s:3905   .text.dir_register:00000200 $d
     /tmp/ccN6TgX8.s:3910   .text.dir_remove:00000000 $t
     /tmp/ccN6TgX8.s:3914   .text.dir_remove:00000000 dir_remove
     /tmp/ccN6TgX8.s:4025   .rodata:00000000 $d
     /tmp/ccN6TgX8.s:4032   .text.create_name:00000000 $t
     /tmp/ccN6TgX8.s:4036   .text.create_name:00000000 create_name
     /tmp/ccN6TgX8.s:4540   .text.create_name:0000031c $d
     /tmp/ccN6TgX8.s:4545   .text.create_name:00000328 $t
     /tmp/ccN6TgX8.s:4657   .text.get_fileinfo:00000000 $t
     /tmp/ccN6TgX8.s:4661   .text.get_fileinfo:00000000 get_fileinfo
     /tmp/ccN6TgX8.s:4980   .text.follow_path:00000000 $t
     /tmp/ccN6TgX8.s:4984   .text.follow_path:00000000 follow_path
     /tmp/ccN6TgX8.s:5163   .text.check_fs:00000000 $t
     /tmp/ccN6TgX8.s:5167   .text.check_fs:00000000 check_fs
     /tmp/ccN6TgX8.s:5278   .text.check_fs:000000b8 $d
     /tmp/ccN6TgX8.s:5284   .text.chk_mounted:00000000 $t
     /tmp/ccN6TgX8.s:5288   .text.chk_mounted:00000000 chk_mounted
     /tmp/ccN6TgX8.s:5721   .text.chk_mounted:00000300 $d
     /tmp/ccN6TgX8.s:5726   .text.chk_mounted:0000030c $t
     /tmp/ccN6TgX8.s:6068   .text.chk_mounted:00000580 $d
     /tmp/ccN6TgX8.s:6076   .text.validate:00000000 $t
     /tmp/ccN6TgX8.s:6080   .text.validate:00000000 validate
     /tmp/ccN6TgX8.s:6155   .text.f_mount:00000000 $t
     /tmp/ccN6TgX8.s:6230   .text.f_mount:00000050 $d
     /tmp/ccN6TgX8.s:6235   .text.f_open:00000000 $t
     /tmp/ccN6TgX8.s:6240   .text.f_open:00000000 f_open
     /tmp/ccN6TgX8.s:6603   .text.f_open:00000284 $d
     /tmp/ccN6TgX8.s:6608   .text.f_read:00000000 $t
     /tmp/ccN6TgX8.s:6613   .text.f_read:00000000 f_read
     /tmp/ccN6TgX8.s:7024   .text.f_write:00000000 $t
     /tmp/ccN6TgX8.s:7029   .text.f_write:00000000 f_write
     /tmp/ccN6TgX8.s:7494   .text.f_sync:00000000 $t
     /tmp/ccN6TgX8.s:7499   .text.f_sync:00000000 f_sync
     /tmp/ccN6TgX8.s:7699   .text.f_close:00000000 $t
     /tmp/ccN6TgX8.s:7704   .text.f_close:00000000 f_close
     /tmp/ccN6TgX8.s:7747   .text.f_chdrive:00000000 $t
     /tmp/ccN6TgX8.s:7752   .text.f_chdrive:00000000 f_chdrive
     /tmp/ccN6TgX8.s:7797   .text.f_chdrive:00000028 $d
     /tmp/ccN6TgX8.s:7802   .text.f_chdir:00000000 $t
     /tmp/ccN6TgX8.s:7807   .text.f_chdir:00000000 f_chdir
     /tmp/ccN6TgX8.s:7906   .text.f_chdir:0000009c $d
     /tmp/ccN6TgX8.s:7911   .text.f_lseek:00000000 $t
     /tmp/ccN6TgX8.s:7916   .text.f_lseek:00000000 f_lseek
     /tmp/ccN6TgX8.s:8336   .text.f_opendir:00000000 $t
     /tmp/ccN6TgX8.s:8341   .text.f_opendir:00000000 f_opendir
     /tmp/ccN6TgX8.s:8481   .text.f_opendir:000000c8 $d
     /tmp/ccN6TgX8.s:8486   .text.f_readdir:00000000 $t
     /tmp/ccN6TgX8.s:8491   .text.f_readdir:00000000 f_readdir
     /tmp/ccN6TgX8.s:8592   .text.f_readdir:0000008c $d
     /tmp/ccN6TgX8.s:8597   .text.f_stat:00000000 $t
     /tmp/ccN6TgX8.s:8602   .text.f_stat:00000000 f_stat
     /tmp/ccN6TgX8.s:8676   .text.f_stat:00000074 $d
     /tmp/ccN6TgX8.s:8681   .text.f_getfree:00000000 $t
     /tmp/ccN6TgX8.s:8686   .text.f_getfree:00000000 f_getfree
     /tmp/ccN6TgX8.s:8940   .text.f_truncate:00000000 $t
     /tmp/ccN6TgX8.s:8945   .text.f_truncate:00000000 f_truncate
     /tmp/ccN6TgX8.s:9124   .text.f_unlink:00000000 $t
     /tmp/ccN6TgX8.s:9129   .text.f_unlink:00000000 f_unlink
     /tmp/ccN6TgX8.s:9339   .text.f_unlink:00000184 $d
     /tmp/ccN6TgX8.s:9344   .text.f_mkdir:00000000 $t
     /tmp/ccN6TgX8.s:9349   .text.f_mkdir:00000000 f_mkdir
     /tmp/ccN6TgX8.s:9689   .text.f_mkdir:00000264 $d
     /tmp/ccN6TgX8.s:9694   .text.f_chmod:00000000 $t
     /tmp/ccN6TgX8.s:9699   .text.f_chmod:00000000 f_chmod
     /tmp/ccN6TgX8.s:9821   .text.f_chmod:000000cc $d
     /tmp/ccN6TgX8.s:9826   .text.f_utime:00000000 $t
     /tmp/ccN6TgX8.s:9831   .text.f_utime:00000000 f_utime
     /tmp/ccN6TgX8.s:9958   .text.f_utime:000000d4 $d
     /tmp/ccN6TgX8.s:9963   .text.f_rename:00000000 $t
     /tmp/ccN6TgX8.s:9968   .text.f_rename:00000000 f_rename
     /tmp/ccN6TgX8.s:10226  .text.f_rename:000001d8 $d
     /tmp/ccN6TgX8.s:10231  .text.f_getlabel:00000000 $t
     /tmp/ccN6TgX8.s:10236  .text.f_getlabel:00000000 f_getlabel
     /tmp/ccN6TgX8.s:10423  .text.f_setlabel:00000000 $t
     /tmp/ccN6TgX8.s:10428  .text.f_setlabel:00000000 f_setlabel
     /tmp/ccN6TgX8.s:10790  .text.f_setlabel:00000270 $d
     /tmp/ccN6TgX8.s:10805  .text.f_mkfs:00000000 $t
     /tmp/ccN6TgX8.s:10810  .text.f_mkfs:00000000 f_mkfs
     /tmp/ccN6TgX8.s:11261  .text.f_mkfs:000002f8 $d
     /tmp/ccN6TgX8.s:12669  .rodata.vst.4734:00000000 vst.4734
     /tmp/ccN6TgX8.s:12685  .rodata.cst.4735:00000000 cst.4735
     /tmp/ccN6TgX8.s:11269  .text.f_mkfs:00000310 $t
     /tmp/ccN6TgX8.s:11626  .text.f_mkfs:00000594 $d
     /tmp/ccN6TgX8.s:11630  .text.f_mkfs:0000059c $t
     /tmp/ccN6TgX8.s:12136  .text.f_mkfs:00000934 $d
     /tmp/ccN6TgX8.s:12141  .text.f_mkfs:00000940 $t
     /tmp/ccN6TgX8.s:12286  .text.f_fdisk:00000000 $t
     /tmp/ccN6TgX8.s:12291  .text.f_fdisk:00000000 f_fdisk
     /tmp/ccN6TgX8.s:12661  .text.f_fdisk:00000268 $d
     /tmp/ccN6TgX8.s:12666  .rodata.vst.4734:00000000 $d
     /tmp/ccN6TgX8.s:12682  .rodata.cst.4735:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.728a2e6911dc01ff85c2d70c52e8fae1
                           .group:00000000 wm4.lib_c99.prefix.8.3580c292f50811c682d980dc4180498e
                           .group:00000000 wm4.common.prefix.16.d7bf937cdf46fd76dde96b376e3b328a
                           .group:00000000 wm4.ewl_c_version.h.9.0bcb57d6a3f89baae1f9b121de2772f5
                           .group:00000000 wm4.ffconf.h.10.449b8c507c21d4b88b2726fdbe709539
                           .group:00000000 wm4.ff.h.41.697fd665eaee50d266af411eac66adba
                           .group:00000000 wm4.diskio.h.7.555874ab7b9c7b3ffb17d0f7a4d89d8e

UNDEFINED SYMBOLS
disk_write
disk_read
disk_ioctl
ff_wtoupper
ff_convert
disk_status
disk_initialize
get_fattime
