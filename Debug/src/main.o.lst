   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.rodata
  21              		.align	2
  22              	.LC1:
  23 0000 62757A7A 		.ascii	"buzzer_on\012\000"
  23      65725F6F 
  23      6E0A00
  24 000b 00       		.align	2
  25              	.LC2:
  26 000c 62757A7A 		.ascii	"buzzer_off\012\000"
  26      65725F6F 
  26      66660A00 
  27              		.section	.text.test_buzzer,"ax",%progbits
  28              		.align	2
  29              		.global	test_buzzer
  30              		.thumb
  31              		.thumb_func
  33              	test_buzzer:
  34              	.LFB4:
  35              		.file 1 "../src/main.c"
   1:../src/main.c **** #include <stdio.h>
   2:../src/main.c **** #include <string.h>
   3:../src/main.c **** #include <stdlib.h>
   4:../src/main.c **** #include "S32K144.h"
   5:../src/main.c **** #include "bl.h"
   6:../src/main.c **** #include "ff.h"
   7:../src/main.c **** #include "convert.h"
   8:../src/main.c **** #include "timelib.h"
   9:../src/main.c **** #include "oswrapper.h"
  10:../src/main.c **** 
  11:../src/main.c **** void uart_send(int port,int len,const uint8_t* data);
  12:../src/main.c **** 
  13:../src/main.c **** int test_buzzer()
  14:../src/main.c **** {
  36              		.loc 1 14 0
  37              		.cfi_startproc
  38              		@ args = 0, pretend = 0, frame = 8
  39              		@ frame_needed = 1, uses_anonymous_args = 0
  40 0000 80B5     		push	{r7, lr}
  41              		.cfi_def_cfa_offset 8
  42              		.cfi_offset 7, -8
  43              		.cfi_offset 14, -4
  44 0002 82B0     		sub	sp, sp, #8
  45              		.cfi_def_cfa_offset 16
  46 0004 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  48              	.LBB2:
  15:../src/main.c **** 	for(int i=0;i<3;i++){
  49              		.loc 1 15 0
  50 0006 0023     		movs	r3, #0
  51 0008 7B60     		str	r3, [r7, #4]
  52 000a 16E0     		b	.L2
  53              	.L3:
  16:../src/main.c **** 		buzzer_ctrl(1);
  54              		.loc 1 16 0 discriminator 3
  55 000c 0120     		movs	r0, #1
  56 000e FFF7FEFF 		bl	buzzer_ctrl
  17:../src/main.c **** 		os_trace("buzzer_on\n");
  57              		.loc 1 17 0 discriminator 3
  58 0012 0E48     		ldr	r0, .L5
  59 0014 FFF7FEFF 		bl	os_trace
  18:../src/main.c **** 		os_sleep_ms(1000);
  60              		.loc 1 18 0 discriminator 3
  61 0018 4FF47A70 		mov	r0, #1000
  62 001c FFF7FEFF 		bl	os_sleep_ms
  19:../src/main.c **** 		buzzer_ctrl(0);
  63              		.loc 1 19 0 discriminator 3
  64 0020 0020     		movs	r0, #0
  65 0022 FFF7FEFF 		bl	buzzer_ctrl
  20:../src/main.c **** 		os_trace("buzzer_off\n");
  66              		.loc 1 20 0 discriminator 3
  67 0026 0A48     		ldr	r0, .L5+4
  68 0028 FFF7FEFF 		bl	os_trace
  21:../src/main.c **** 		os_sleep_ms(500);
  69              		.loc 1 21 0 discriminator 3
  70 002c 4FF4FA70 		mov	r0, #500
  71 0030 FFF7FEFF 		bl	os_sleep_ms
  15:../src/main.c **** 		buzzer_ctrl(1);
  72              		.loc 1 15 0 discriminator 3
  73 0034 7B68     		ldr	r3, [r7, #4]
  74 0036 0133     		adds	r3, r3, #1
  75 0038 7B60     		str	r3, [r7, #4]
  76              	.L2:
  15:../src/main.c **** 		buzzer_ctrl(1);
  77              		.loc 1 15 0 is_stmt 0 discriminator 1
  78 003a 7B68     		ldr	r3, [r7, #4]
  79 003c 022B     		cmp	r3, #2
  80 003e E5DD     		ble	.L3
  81              	.LBE2:
  22:../src/main.c **** 	}
  23:../src/main.c **** 	return 0;
  82              		.loc 1 23 0 is_stmt 1
  83 0040 0023     		movs	r3, #0
  24:../src/main.c **** }
  84              		.loc 1 24 0
  85 0042 1846     		mov	r0, r3
  86 0044 0837     		adds	r7, r7, #8
  87              		.cfi_def_cfa_offset 8
  88 0046 BD46     		mov	sp, r7
  89              		.cfi_def_cfa_register 13
  90              		@ sp needed
  91 0048 80BD     		pop	{r7, pc}
  92              	.L6:
  93 004a 00BF     		.align	2
  94              	.L5:
  95 004c 00000000 		.word	.LC1
  96 0050 0C000000 		.word	.LC2
  97              		.cfi_endproc
  98              	.LFE4:
 100              		.section	.rodata
 101              		.align	2
 102              	.LC3:
 103 0018 6D6F756E 		.ascii	"mount filesystem\012\000"
 103      74206669 
 103      6C657379 
 103      7374656D 
 103      0A00
 104 002a 0000     		.align	2
 105              	.LC4:
 106 002c 6D6F756E 		.ascii	"mount filesystem 0 failed : %d\012\000"
 106      74206669 
 106      6C657379 
 106      7374656D 
 106      20302066 
 107              		.align	2
 108              	.LC5:
 109 004c 63726561 		.ascii	"create test.txt\012\000"
 109      74652074 
 109      6573742E 
 109      7478740A 
 109      00
 110 005d 000000   		.align	2
 111              	.LC6:
 112 0060 74657374 		.ascii	"test.txt\000"
 112      2E747874 
 112      00
 113 0069 000000   		.align	2
 114              	.LC7:
 115 006c 77726974 		.ascii	"write error\012\000"
 115      65206572 
 115      726F720A 
 115      00
 116 0079 000000   		.align	2
 117              	.LC8:
 118 007c 77726974 		.ascii	"write: \"test12345\"\012\000"
 118      653A2022 
 118      74657374 
 118      31323334 
 118      35220A00 
 119              		.align	2
 120              	.LC9:
 121 0090 74657374 		.ascii	"test12345\000"
 121      31323334 
 121      3500
 122 009a 0000     		.align	2
 123              	.LC10:
 124 009c 72656164 		.ascii	"read and check file data\012\000"
 124      20616E64 
 124      20636865 
 124      636B2066 
 124      696C6520 
 125 00b6 0000     		.align	2
 126              	.LC11:
 127 00b8 72656164 		.ascii	"read error\012\000"
 127      20657272 
 127      6F720A00 
 128              		.align	2
 129              	.LC12:
 130 00c4 72656164 		.ascii	"read len error %d\012\000"
 130      206C656E 
 130      20657272 
 130      6F722025 
 130      640A00
 131 00d7 00       		.align	2
 132              	.LC13:
 133 00d8 72656164 		.ascii	"read data error %s\012\000"
 133      20646174 
 133      61206572 
 133      726F7220 
 133      25730A00 
 134              		.align	2
 135              	.LC14:
 136 00ec 636C6F73 		.ascii	"close file\012\000"
 136      65206669 
 136      6C650A00 
 137              		.align	2
 138              	.LC15:
 139 00f8 636C6F73 		.ascii	"close error\012\000"
 139      65206572 
 139      726F720A 
 139      00
 140              		.section	.text.test_sd,"ax",%progbits
 141              		.align	2
 142              		.thumb
 143              		.thumb_func
 145              	test_sd:
 146              	.LFB5:
  25:../src/main.c **** static int test_sd()
  26:../src/main.c **** {
 147              		.loc 1 26 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 1256
 150              		@ frame_needed = 1, uses_anonymous_args = 0
 151 0000 80B5     		push	{r7, lr}
 152              		.cfi_def_cfa_offset 8
 153              		.cfi_offset 7, -8
 154              		.cfi_offset 14, -4
 155 0002 ADF59D6D 		sub	sp, sp, #1256
 156              		.cfi_def_cfa_offset 1264
 157 0006 00AF     		add	r7, sp, #0
 158              		.cfi_def_cfa_register 7
  27:../src/main.c **** 	FATFS fatfs;
  28:../src/main.c **** 	FRESULT res;
  29:../src/main.c **** 
  30:../src/main.c **** 	FIL f;
  31:../src/main.c **** 	unsigned int flen;
  32:../src/main.c **** 
  33:../src/main.c **** 	os_trace("mount filesystem\n");
 159              		.loc 1 33 0
 160 0008 5548     		ldr	r0, .L17
 161 000a FFF7FEFF 		bl	os_trace
  34:../src/main.c **** 	res = f_mount(0, &fatfs);
 162              		.loc 1 34 0
 163 000e 07F52B73 		add	r3, r7, #684
 164 0012 0020     		movs	r0, #0
 165 0014 1946     		mov	r1, r3
 166 0016 FFF7FEFF 		bl	f_mount
 167 001a 0346     		mov	r3, r0
 168 001c 87F8E734 		strb	r3, [r7, #1255]
  35:../src/main.c **** 	if (res != FR_OK) {
 169              		.loc 1 35 0
 170 0020 97F8E734 		ldrb	r3, [r7, #1255]	@ zero_extendqisi2
 171 0024 002B     		cmp	r3, #0
 172 0026 08D0     		beq	.L8
  36:../src/main.c **** 		os_trace("mount filesystem 0 failed : %d\n", res);
 173              		.loc 1 36 0
 174 0028 97F8E734 		ldrb	r3, [r7, #1255]	@ zero_extendqisi2
 175 002c 4D48     		ldr	r0, .L17+4
 176 002e 1946     		mov	r1, r3
 177 0030 FFF7FEFF 		bl	os_trace
  37:../src/main.c **** 		return -1;
 178              		.loc 1 37 0
 179 0034 4FF0FF33 		mov	r3, #-1
 180 0038 8DE0     		b	.L16
 181              	.L8:
  38:../src/main.c **** 	}
  39:../src/main.c **** 
  40:../src/main.c **** 	os_trace("create test.txt\n");
 182              		.loc 1 40 0
 183 003a 4B48     		ldr	r0, .L17+8
 184 003c FFF7FEFF 		bl	os_trace
  41:../src/main.c **** 	res = f_open(&f, "test.txt", FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
 185              		.loc 1 41 0
 186 0040 07F18803 		add	r3, r7, #136
 187 0044 1846     		mov	r0, r3
 188 0046 4949     		ldr	r1, .L17+12
 189 0048 1322     		movs	r2, #19
 190 004a FFF7FEFF 		bl	f_open
 191 004e 0346     		mov	r3, r0
 192 0050 87F8E734 		strb	r3, [r7, #1255]
  42:../src/main.c **** 	if (res != FR_OK){
 193              		.loc 1 42 0
 194 0054 97F8E734 		ldrb	r3, [r7, #1255]	@ zero_extendqisi2
 195 0058 002B     		cmp	r3, #0
 196 005a 05D0     		beq	.L10
  43:../src/main.c **** 		os_trace("write error\n");
 197              		.loc 1 43 0
 198 005c 4448     		ldr	r0, .L17+16
 199 005e FFF7FEFF 		bl	os_trace
  44:../src/main.c **** 		return -1;
 200              		.loc 1 44 0
 201 0062 4FF0FF33 		mov	r3, #-1
 202 0066 76E0     		b	.L16
 203              	.L10:
  45:../src/main.c **** 	}
  46:../src/main.c **** 
  47:../src/main.c **** 	os_trace("write: \"test12345\"\n");
 204              		.loc 1 47 0
 205 0068 4248     		ldr	r0, .L17+20
 206 006a FFF7FEFF 		bl	os_trace
  48:../src/main.c **** 	f_lseek(&f, 0);
 207              		.loc 1 48 0
 208 006e 07F18803 		add	r3, r7, #136
 209 0072 1846     		mov	r0, r3
 210 0074 0021     		movs	r1, #0
 211 0076 FFF7FEFF 		bl	f_lseek
  49:../src/main.c **** 	res = f_write(&f, "test12345", 9, &flen);
 212              		.loc 1 49 0
 213 007a 07F18802 		add	r2, r7, #136
 214 007e 07F18403 		add	r3, r7, #132
 215 0082 1046     		mov	r0, r2
 216 0084 3C49     		ldr	r1, .L17+24
 217 0086 0922     		movs	r2, #9
 218 0088 FFF7FEFF 		bl	f_write
 219 008c 0346     		mov	r3, r0
 220 008e 87F8E734 		strb	r3, [r7, #1255]
  50:../src/main.c **** 	if (res != FR_OK){
 221              		.loc 1 50 0
 222 0092 97F8E734 		ldrb	r3, [r7, #1255]	@ zero_extendqisi2
 223 0096 002B     		cmp	r3, #0
 224 0098 05D0     		beq	.L11
  51:../src/main.c **** 		os_trace("write error\n");
 225              		.loc 1 51 0
 226 009a 3548     		ldr	r0, .L17+16
 227 009c FFF7FEFF 		bl	os_trace
  52:../src/main.c **** 		return -1;
 228              		.loc 1 52 0
 229 00a0 4FF0FF33 		mov	r3, #-1
 230 00a4 57E0     		b	.L16
 231              	.L11:
  53:../src/main.c **** 	}
  54:../src/main.c **** 
  55:../src/main.c **** 
  56:../src/main.c **** 	os_trace("read and check file data\n");
 232              		.loc 1 56 0
 233 00a6 3548     		ldr	r0, .L17+28
 234 00a8 FFF7FEFF 		bl	os_trace
  57:../src/main.c **** 	char buf[128];
  58:../src/main.c **** 	memset(buf,0,128);
 235              		.loc 1 58 0
 236 00ac 3B1D     		adds	r3, r7, #4
 237 00ae 1846     		mov	r0, r3
 238 00b0 0021     		movs	r1, #0
 239 00b2 8022     		movs	r2, #128
 240 00b4 FFF7FEFF 		bl	memset
  59:../src/main.c **** 	UINT rd;
  60:../src/main.c **** 	f_lseek(&f, 0);
 241              		.loc 1 60 0
 242 00b8 07F18803 		add	r3, r7, #136
 243 00bc 1846     		mov	r0, r3
 244 00be 0021     		movs	r1, #0
 245 00c0 FFF7FEFF 		bl	f_lseek
  61:../src/main.c **** 	res = f_read(&f, buf, 9, &rd);
 246              		.loc 1 61 0
 247 00c4 07F18801 		add	r1, r7, #136
 248 00c8 3A1D     		adds	r2, r7, #4
 249 00ca 3B46     		mov	r3, r7
 250 00cc 0846     		mov	r0, r1
 251 00ce 1146     		mov	r1, r2
 252 00d0 0922     		movs	r2, #9
 253 00d2 FFF7FEFF 		bl	f_read
 254 00d6 0346     		mov	r3, r0
 255 00d8 87F8E734 		strb	r3, [r7, #1255]
  62:../src/main.c **** 	if(res != FR_OK){
 256              		.loc 1 62 0
 257 00dc 97F8E734 		ldrb	r3, [r7, #1255]	@ zero_extendqisi2
 258 00e0 002B     		cmp	r3, #0
 259 00e2 05D0     		beq	.L12
  63:../src/main.c **** 		os_trace("read error\n");
 260              		.loc 1 63 0
 261 00e4 2648     		ldr	r0, .L17+32
 262 00e6 FFF7FEFF 		bl	os_trace
  64:../src/main.c **** 		return -1;
 263              		.loc 1 64 0
 264 00ea 4FF0FF33 		mov	r3, #-1
 265 00ee 32E0     		b	.L16
 266              	.L12:
  65:../src/main.c **** 	}
  66:../src/main.c **** 	if(rd!=9){
 267              		.loc 1 66 0
 268 00f0 3B46     		mov	r3, r7
 269 00f2 1B68     		ldr	r3, [r3]
 270 00f4 092B     		cmp	r3, #9
 271 00f6 08D0     		beq	.L13
  67:../src/main.c **** 		os_trace("read len error %d\n",rd);
 272              		.loc 1 67 0
 273 00f8 3B46     		mov	r3, r7
 274 00fa 1B68     		ldr	r3, [r3]
 275 00fc 2148     		ldr	r0, .L17+36
 276 00fe 1946     		mov	r1, r3
 277 0100 FFF7FEFF 		bl	os_trace
  68:../src/main.c **** 		return -1;
 278              		.loc 1 68 0
 279 0104 4FF0FF33 		mov	r3, #-1
 280 0108 25E0     		b	.L16
 281              	.L13:
  69:../src/main.c **** 	}
  70:../src/main.c **** 	if(strcmp(buf,"test12345")){
 282              		.loc 1 70 0
 283 010a 3B1D     		adds	r3, r7, #4
 284 010c 1846     		mov	r0, r3
 285 010e 1A49     		ldr	r1, .L17+24
 286 0110 FFF7FEFF 		bl	strcmp
 287 0114 0346     		mov	r3, r0
 288 0116 002B     		cmp	r3, #0
 289 0118 07D0     		beq	.L14
  71:../src/main.c **** 		os_trace("read data error %s\n",buf);
 290              		.loc 1 71 0
 291 011a 3B1D     		adds	r3, r7, #4
 292 011c 1A48     		ldr	r0, .L17+40
 293 011e 1946     		mov	r1, r3
 294 0120 FFF7FEFF 		bl	os_trace
  72:../src/main.c **** 		return -1;
 295              		.loc 1 72 0
 296 0124 4FF0FF33 		mov	r3, #-1
 297 0128 15E0     		b	.L16
 298              	.L14:
  73:../src/main.c **** 	}
  74:../src/main.c **** 
  75:../src/main.c **** 	os_trace("close file\n");
 299              		.loc 1 75 0
 300 012a 1848     		ldr	r0, .L17+44
 301 012c FFF7FEFF 		bl	os_trace
  76:../src/main.c **** 	res = f_close(&f);
 302              		.loc 1 76 0
 303 0130 07F18803 		add	r3, r7, #136
 304 0134 1846     		mov	r0, r3
 305 0136 FFF7FEFF 		bl	f_close
 306 013a 0346     		mov	r3, r0
 307 013c 87F8E734 		strb	r3, [r7, #1255]
  77:../src/main.c **** 	if(res != FR_OK){
 308              		.loc 1 77 0
 309 0140 97F8E734 		ldrb	r3, [r7, #1255]	@ zero_extendqisi2
 310 0144 002B     		cmp	r3, #0
 311 0146 05D0     		beq	.L15
  78:../src/main.c **** 		os_trace("close error\n");
 312              		.loc 1 78 0
 313 0148 1148     		ldr	r0, .L17+48
 314 014a FFF7FEFF 		bl	os_trace
  79:../src/main.c **** 		return -1;
 315              		.loc 1 79 0
 316 014e 4FF0FF33 		mov	r3, #-1
 317 0152 00E0     		b	.L16
 318              	.L15:
  80:../src/main.c **** 	}
  81:../src/main.c **** 	return 0;
 319              		.loc 1 81 0
 320 0154 0023     		movs	r3, #0
 321              	.L16:
  82:../src/main.c **** }
 322              		.loc 1 82 0 discriminator 1
 323 0156 1846     		mov	r0, r3
 324 0158 07F59D67 		add	r7, r7, #1256
 325              		.cfi_def_cfa_offset 8
 326 015c BD46     		mov	sp, r7
 327              		.cfi_def_cfa_register 13
 328              		@ sp needed
 329 015e 80BD     		pop	{r7, pc}
 330              	.L18:
 331              		.align	2
 332              	.L17:
 333 0160 18000000 		.word	.LC3
 334 0164 2C000000 		.word	.LC4
 335 0168 4C000000 		.word	.LC5
 336 016c 60000000 		.word	.LC6
 337 0170 6C000000 		.word	.LC7
 338 0174 7C000000 		.word	.LC8
 339 0178 90000000 		.word	.LC9
 340 017c 9C000000 		.word	.LC10
 341 0180 B8000000 		.word	.LC11
 342 0184 C4000000 		.word	.LC12
 343 0188 D8000000 		.word	.LC13
 344 018c EC000000 		.word	.LC14
 345 0190 F8000000 		.word	.LC15
 346              		.cfi_endproc
 347              	.LFE5:
 349              		.section	.rodata
 350 0105 000000   		.align	2
 351              	.LC16:
 352 0108 AA55AA55 		.ascii	"\252U\252U\252U\252U\000"
 352      AA55AA55 
 352      00
 353 0111 000000   		.align	2
 354              	.LC17:
 355 0114 43414E25 		.ascii	"CAN%d get message :RxLENGTH=%X RxDATA=%s\012\000"
 355      64206765 
 355      74206D65 
 355      73736167 
 355      65203A52 
 356              		.section	.text.can_task_proc,"ax",%progbits
 357              		.align	2
 358              		.thumb
 359              		.thumb_func
 361              	can_task_proc:
 362              	.LFB6:
  83:../src/main.c **** 
  84:../src/main.c **** struct CanParamSt{
  85:../src/main.c **** 	OS_Mutex mtx;
  86:../src/main.c **** 	int selfPort;
  87:../src/main.c **** 	int targetPort;
  88:../src/main.c **** 	TaskHandle_t handle;
  89:../src/main.c **** 	int rxFlag;
  90:../src/main.c **** };
  91:../src/main.c **** static void can_task_proc(void *p)
  92:../src/main.c **** {
 363              		.loc 1 92 0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 72
 366              		@ frame_needed = 1, uses_anonymous_args = 0
 367 0000 90B5     		push	{r4, r7, lr}
 368              		.cfi_def_cfa_offset 12
 369              		.cfi_offset 4, -12
 370              		.cfi_offset 7, -8
 371              		.cfi_offset 14, -4
 372 0002 93B0     		sub	sp, sp, #76
 373              		.cfi_def_cfa_offset 88
 374 0004 00AF     		add	r7, sp, #0
 375              		.cfi_def_cfa_register 7
 376 0006 7860     		str	r0, [r7, #4]
  93:../src/main.c **** 	struct CanParamSt *canSt = (struct CanParamSt*)p;
 377              		.loc 1 93 0
 378 0008 7B68     		ldr	r3, [r7, #4]
 379 000a 7B64     		str	r3, [r7, #68]
  94:../src/main.c **** 	int port = canSt->selfPort;
 380              		.loc 1 94 0
 381 000c 7B6C     		ldr	r3, [r7, #68]
 382 000e 5B68     		ldr	r3, [r3, #4]
 383 0010 3B64     		str	r3, [r7, #64]
  95:../src/main.c **** 	int targetID = canSt->targetPort + 0xA;
 384              		.loc 1 95 0
 385 0012 7B6C     		ldr	r3, [r7, #68]
 386 0014 9B68     		ldr	r3, [r3, #8]
 387 0016 0A33     		adds	r3, r3, #10
 388 0018 FB63     		str	r3, [r7, #60]
 389              	.L21:
 390              	.LBB3:
  96:../src/main.c **** 
  97:../src/main.c **** 	for (;;) {
  98:../src/main.c **** 
  99:../src/main.c **** 		os_mutex_lock(&(canSt->mtx));
 391              		.loc 1 99 0
 392 001a 7B6C     		ldr	r3, [r7, #68]
 393 001c 1846     		mov	r0, r3
 394 001e FFF7FEFF 		bl	os_mutex_lock
 100:../src/main.c **** 		FLEXCAN_transmit_msg(port,targetID,8,(uint8_t*)"\xAA\x55\xAA\x55\xAA\x55\xAA\x55"); /* Transmit m
 395              		.loc 1 100 0
 396 0022 FB6B     		ldr	r3, [r7, #60]
 397 0024 386C     		ldr	r0, [r7, #64]
 398 0026 1946     		mov	r1, r3
 399 0028 0822     		movs	r2, #8
 400 002a 1A4B     		ldr	r3, .L22
 401 002c FFF7FEFF 		bl	FLEXCAN_transmit_msg
 101:../src/main.c **** 		os_mutex_unlock(&(canSt->mtx));
 402              		.loc 1 101 0
 403 0030 7B6C     		ldr	r3, [r7, #68]
 404 0032 1846     		mov	r0, r3
 405 0034 FFF7FEFF 		bl	os_mutex_unlock
 102:../src/main.c **** 
 103:../src/main.c **** 		uint32_t RxLENGTH;
 104:../src/main.c **** 		uint8_t RxDATA[8];
 105:../src/main.c **** 		os_mutex_lock(&(canSt->mtx));
 406              		.loc 1 105 0
 407 0038 7B6C     		ldr	r3, [r7, #68]
 408 003a 1846     		mov	r0, r3
 409 003c FFF7FEFF 		bl	os_mutex_lock
 106:../src/main.c **** 		int res = FLEXCAN_receive_msg(port, &RxLENGTH, RxDATA);
 410              		.loc 1 106 0
 411 0040 07F13402 		add	r2, r7, #52
 412 0044 07F12C03 		add	r3, r7, #44
 413 0048 386C     		ldr	r0, [r7, #64]
 414 004a 1146     		mov	r1, r2
 415 004c 1A46     		mov	r2, r3
 416 004e FFF7FEFF 		bl	FLEXCAN_receive_msg
 417 0052 B863     		str	r0, [r7, #56]
 107:../src/main.c **** 		os_mutex_unlock(&(canSt->mtx));
 418              		.loc 1 107 0
 419 0054 7B6C     		ldr	r3, [r7, #68]
 420 0056 1846     		mov	r0, r3
 421 0058 FFF7FEFF 		bl	os_mutex_unlock
 108:../src/main.c **** 		if(res==0){
 422              		.loc 1 108 0
 423 005c BB6B     		ldr	r3, [r7, #56]
 424 005e 002B     		cmp	r3, #0
 425 0060 12D1     		bne	.L20
 426              	.LBB4:
 109:../src/main.c **** 			char buf[32];
 110:../src/main.c **** 			os_trace("CAN%d get message :RxLENGTH=%X RxDATA=%s\n",port,RxLENGTH,hx_dumphex2str(RxDATA, 8, bu
 427              		.loc 1 110 0
 428 0062 7C6B     		ldr	r4, [r7, #52]
 429 0064 07F12C02 		add	r2, r7, #44
 430 0068 07F10C03 		add	r3, r7, #12
 431 006c 1046     		mov	r0, r2
 432 006e 0821     		movs	r1, #8
 433 0070 1A46     		mov	r2, r3
 434 0072 FFF7FEFF 		bl	hx_dumphex2str
 435 0076 0346     		mov	r3, r0
 436 0078 0748     		ldr	r0, .L22+4
 437 007a 396C     		ldr	r1, [r7, #64]
 438 007c 2246     		mov	r2, r4
 439 007e FFF7FEFF 		bl	os_trace
 111:../src/main.c **** 			canSt->rxFlag = 1;
 440              		.loc 1 111 0
 441 0082 7B6C     		ldr	r3, [r7, #68]
 442 0084 0122     		movs	r2, #1
 443 0086 1A61     		str	r2, [r3, #16]
 444              	.L20:
 445              	.LBE4:
 112:../src/main.c **** 		}else{
 113:../src/main.c **** 
 114:../src/main.c **** 		}
 115:../src/main.c **** 
 116:../src/main.c **** 		os_sleep_ms(1000);
 446              		.loc 1 116 0 discriminator 1
 447 0088 4FF47A70 		mov	r0, #1000
 448 008c FFF7FEFF 		bl	os_sleep_ms
 449              	.LBE3:
 117:../src/main.c **** 	}
 450              		.loc 1 117 0 discriminator 1
 451 0090 C3E7     		b	.L21
 452              	.L23:
 453 0092 00BF     		.align	2
 454              	.L22:
 455 0094 08010000 		.word	.LC16
 456 0098 14010000 		.word	.LC17
 457              		.cfi_endproc
 458              	.LFE6:
 460              		.section	.rodata
 461 013e 0000     		.align	2
 462              	.LC18:
 463 0140 43414E25 		.ascii	"CAN%d <-> CAN%d\012\000"
 463      64203C2D 
 463      3E204341 
 463      4E25640A 
 463      00
 464 0151 000000   		.align	2
 465              	.LC19:
 466 0154 63616E5F 		.ascii	"can_task_a\000"
 466      7461736B 
 466      5F6100
 467 015f 00       		.align	2
 468              	.LC20:
 469 0160 6661756C 		.ascii	"fault in %s call: %s\012\000"
 469      7420696E 
 469      20257320 
 469      63616C6C 
 469      3A202573 
 470 0176 0000     		.align	2
 471              	.LC21:
 472 0178 70645452 		.ascii	"pdTRUE==xTaskCreate(can_task_proc,\"can_task_a\", 1"
 472      55453D3D 
 472      78546173 
 472      6B437265 
 472      61746528 
 473 01a9 3032342F 		.ascii	"024/4, &canA , 5, &canA.handle)\000"
 473      342C2026 
 473      63616E41 
 473      202C2035 
 473      2C202663 
 474 01c9 000000   		.align	2
 475              	.LC22:
 476 01cc 63616E5F 		.ascii	"can_task_b\000"
 476      7461736B 
 476      5F6200
 477 01d7 00       		.align	2
 478              	.LC23:
 479 01d8 70645452 		.ascii	"pdTRUE==xTaskCreate(can_task_proc,\"can_task_b\", 1"
 479      55453D3D 
 479      78546173 
 479      6B437265 
 479      61746528 
 480 0209 3032342F 		.ascii	"024/4, &canB , 5, &canB.handle)\000"
 480      342C2026 
 480      63616E42 
 480      202C2035 
 480      2C202663 
 481 0229 000000   		.align	2
 482              	.LC24:
 483 022c 43414E25 		.ascii	"CAN%d & CAN%d PASS.\012\000"
 483      64202620 
 483      43414E25 
 483      64205041 
 483      53532E0A 
 484 0241 000000   		.align	2
 485              	.LC25:
 486 0244 43414E25 		.ascii	"CAN%d receive timeout, Test FAIL***\012\000"
 486      64207265 
 486      63656976 
 486      65207469 
 486      6D656F75 
 487 0269 000000   		.align	2
 488              	.LC26:
 489 026c 43414E20 		.ascii	"CAN test complete\012\000"
 489      74657374 
 489      20636F6D 
 489      706C6574 
 489      650A00
 490 027f 00       		.align	2
 491              	.LC27:
 492 0280 43414E20 		.ascii	"CAN test has FAIL***\012\000"
 492      74657374 
 492      20686173 
 492      20464149 
 492      4C2A2A2A 
 493              		.section	.text.test_can,"ax",%progbits
 494              		.align	2
 495              		.thumb
 496              		.thumb_func
 498              	test_can:
 499              	.LFB7:
 118:../src/main.c **** }
 119:../src/main.c **** static int test_can()
 120:../src/main.c **** {
 500              		.loc 1 120 0
 501              		.cfi_startproc
 502              		@ args = 0, pretend = 0, frame = 64
 503              		@ frame_needed = 1, uses_anonymous_args = 0
 504 0000 90B5     		push	{r4, r7, lr}
 505              		.cfi_def_cfa_offset 12
 506              		.cfi_offset 4, -12
 507              		.cfi_offset 7, -8
 508              		.cfi_offset 14, -4
 509 0002 95B0     		sub	sp, sp, #84
 510              		.cfi_def_cfa_offset 96
 511 0004 04AF     		add	r7, sp, #16
 512              		.cfi_def_cfa 7, 80
 121:../src/main.c **** 	uint32_t test_rst = 0U;
 513              		.loc 1 121 0
 514 0006 0023     		movs	r3, #0
 515 0008 FB63     		str	r3, [r7, #60]
 122:../src/main.c **** 	OS_Mutex  can_mutex;
 123:../src/main.c **** 	os_mutex_create(&can_mutex);
 516              		.loc 1 123 0
 517 000a 07F12C03 		add	r3, r7, #44
 518 000e 1846     		mov	r0, r3
 519 0010 FFF7FEFF 		bl	os_mutex_create
 520              	.LBB5:
 124:../src/main.c **** 
 125:../src/main.c **** 	for(int i=0;i<3;i++){
 521              		.loc 1 125 0
 522 0014 0023     		movs	r3, #0
 523 0016 BB63     		str	r3, [r7, #56]
 524 0018 B7E0     		b	.L25
 525              	.L37:
 526              	.LBB6:
 126:../src/main.c **** 		int j = (i+1)%3;
 527              		.loc 1 126 0
 528 001a BB6B     		ldr	r3, [r7, #56]
 529 001c 5A1C     		adds	r2, r3, #1
 530 001e 654B     		ldr	r3, .L41
 531 0020 83FB0231 		smull	r3, r1, r3, r2
 532 0024 D317     		asrs	r3, r2, #31
 533 0026 C91A     		subs	r1, r1, r3
 534 0028 0B46     		mov	r3, r1
 535 002a 5B00     		lsls	r3, r3, #1
 536 002c 0B44     		add	r3, r3, r1
 537 002e D31A     		subs	r3, r2, r3
 538 0030 3B63     		str	r3, [r7, #48]
 127:../src/main.c **** 		os_trace("CAN%d <-> CAN%d\n",i,j);
 539              		.loc 1 127 0
 540 0032 6148     		ldr	r0, .L41+4
 541 0034 B96B     		ldr	r1, [r7, #56]
 542 0036 3A6B     		ldr	r2, [r7, #48]
 543 0038 FFF7FEFF 		bl	os_trace
 128:../src/main.c **** 		struct CanParamSt canA = {
 544              		.loc 1 128 0
 545 003c 07F11803 		add	r3, r7, #24
 546 0040 0022     		movs	r2, #0
 547 0042 1A60     		str	r2, [r3]
 548 0044 0433     		adds	r3, r3, #4
 549 0046 0022     		movs	r2, #0
 550 0048 1A60     		str	r2, [r3]
 551 004a 0433     		adds	r3, r3, #4
 552 004c 0022     		movs	r2, #0
 553 004e 1A60     		str	r2, [r3]
 554 0050 0433     		adds	r3, r3, #4
 555 0052 0022     		movs	r2, #0
 556 0054 1A60     		str	r2, [r3]
 557 0056 0433     		adds	r3, r3, #4
 558 0058 0022     		movs	r2, #0
 559 005a 1A60     		str	r2, [r3]
 560 005c 0433     		adds	r3, r3, #4
 561 005e FB6A     		ldr	r3, [r7, #44]
 562 0060 BB61     		str	r3, [r7, #24]
 563 0062 BB6B     		ldr	r3, [r7, #56]
 564 0064 FB61     		str	r3, [r7, #28]
 565 0066 3B6B     		ldr	r3, [r7, #48]
 566 0068 3B62     		str	r3, [r7, #32]
 129:../src/main.c **** 			.mtx = can_mutex,
 130:../src/main.c **** 			.selfPort = i,
 131:../src/main.c **** 			.targetPort = j,
 132:../src/main.c **** 			.rxFlag = 0,
 133:../src/main.c **** 		};
 134:../src/main.c **** 		OS_ASSERT(pdTRUE==xTaskCreate(can_task_proc,"can_task_a", 1024/4, &canA , 5, &canA.handle));
 567              		.loc 1 134 0
 568 006a 07F11804 		add	r4, r7, #24
 569 006e 0523     		movs	r3, #5
 570 0070 0093     		str	r3, [sp]
 571 0072 07F11803 		add	r3, r7, #24
 572 0076 0C33     		adds	r3, r3, #12
 573 0078 0193     		str	r3, [sp, #4]
 574 007a 0023     		movs	r3, #0
 575 007c 0293     		str	r3, [sp, #8]
 576 007e 0023     		movs	r3, #0
 577 0080 0393     		str	r3, [sp, #12]
 578 0082 4E48     		ldr	r0, .L41+8
 579 0084 4E49     		ldr	r1, .L41+12
 580 0086 4FF48072 		mov	r2, #256
 581 008a 2346     		mov	r3, r4
 582 008c FFF7FEFF 		bl	xTaskGenericCreate
 583 0090 0346     		mov	r3, r0
 584 0092 012B     		cmp	r3, #1
 585 0094 05D0     		beq	.L26
 586              		.loc 1 134 0 is_stmt 0 discriminator 1
 587 0096 4B48     		ldr	r0, .L41+16
 588 0098 4B49     		ldr	r1, .L41+20
 589 009a 4C4A     		ldr	r2, .L41+24
 590 009c FFF7FEFF 		bl	os_trace
 591              	.L27:
 592 00a0 FEE7     		b	.L27
 593              	.L26:
 135:../src/main.c **** 		struct CanParamSt canB = {
 594              		.loc 1 135 0 is_stmt 1
 595 00a2 3B1D     		adds	r3, r7, #4
 596 00a4 0022     		movs	r2, #0
 597 00a6 1A60     		str	r2, [r3]
 598 00a8 0433     		adds	r3, r3, #4
 599 00aa 0022     		movs	r2, #0
 600 00ac 1A60     		str	r2, [r3]
 601 00ae 0433     		adds	r3, r3, #4
 602 00b0 0022     		movs	r2, #0
 603 00b2 1A60     		str	r2, [r3]
 604 00b4 0433     		adds	r3, r3, #4
 605 00b6 0022     		movs	r2, #0
 606 00b8 1A60     		str	r2, [r3]
 607 00ba 0433     		adds	r3, r3, #4
 608 00bc 0022     		movs	r2, #0
 609 00be 1A60     		str	r2, [r3]
 610 00c0 0433     		adds	r3, r3, #4
 611 00c2 FB6A     		ldr	r3, [r7, #44]
 612 00c4 7B60     		str	r3, [r7, #4]
 613 00c6 3B6B     		ldr	r3, [r7, #48]
 614 00c8 BB60     		str	r3, [r7, #8]
 615 00ca BB6B     		ldr	r3, [r7, #56]
 616 00cc FB60     		str	r3, [r7, #12]
 136:../src/main.c **** 			.mtx = can_mutex,
 137:../src/main.c **** 			.selfPort = j,
 138:../src/main.c **** 			.targetPort = i,
 139:../src/main.c **** 			.rxFlag = 0,
 140:../src/main.c **** 		};
 141:../src/main.c **** 		OS_ASSERT(pdTRUE==xTaskCreate(can_task_proc,"can_task_b", 1024/4, &canB , 5, &canB.handle));
 617              		.loc 1 141 0
 618 00ce 3C1D     		adds	r4, r7, #4
 619 00d0 0523     		movs	r3, #5
 620 00d2 0093     		str	r3, [sp]
 621 00d4 3B1D     		adds	r3, r7, #4
 622 00d6 0C33     		adds	r3, r3, #12
 623 00d8 0193     		str	r3, [sp, #4]
 624 00da 0023     		movs	r3, #0
 625 00dc 0293     		str	r3, [sp, #8]
 626 00de 0023     		movs	r3, #0
 627 00e0 0393     		str	r3, [sp, #12]
 628 00e2 3648     		ldr	r0, .L41+8
 629 00e4 3A49     		ldr	r1, .L41+28
 630 00e6 4FF48072 		mov	r2, #256
 631 00ea 2346     		mov	r3, r4
 632 00ec FFF7FEFF 		bl	xTaskGenericCreate
 633 00f0 0346     		mov	r3, r0
 634 00f2 012B     		cmp	r3, #1
 635 00f4 05D0     		beq	.L28
 636              		.loc 1 141 0 is_stmt 0 discriminator 1
 637 00f6 3348     		ldr	r0, .L41+16
 638 00f8 3349     		ldr	r1, .L41+20
 639 00fa 364A     		ldr	r2, .L41+32
 640 00fc FFF7FEFF 		bl	os_trace
 641              	.L29:
 642              		.loc 1 141 0 discriminator 2
 643 0100 FEE7     		b	.L29
 644              	.L28:
 645              	.LBB7:
 142:../src/main.c **** 
 143:../src/main.c **** 		for(int i=0;i<8;i++){
 646              		.loc 1 143 0 is_stmt 1
 647 0102 0023     		movs	r3, #0
 648 0104 7B63     		str	r3, [r7, #52]
 649 0106 0DE0     		b	.L30
 650              	.L33:
 144:../src/main.c **** 			if(canA.rxFlag && canB.rxFlag)
 651              		.loc 1 144 0
 652 0108 BB6A     		ldr	r3, [r7, #40]
 653 010a 002B     		cmp	r3, #0
 654 010c 03D0     		beq	.L31
 655              		.loc 1 144 0 is_stmt 0 discriminator 1
 656 010e 7B69     		ldr	r3, [r7, #20]
 657 0110 002B     		cmp	r3, #0
 658 0112 00D0     		beq	.L31
 145:../src/main.c **** 				break;
 659              		.loc 1 145 0 is_stmt 1
 660 0114 09E0     		b	.L32
 661              	.L31:
 146:../src/main.c **** 			os_sleep_ms(1000);
 662              		.loc 1 146 0 discriminator 2
 663 0116 4FF47A70 		mov	r0, #1000
 664 011a FFF7FEFF 		bl	os_sleep_ms
 143:../src/main.c **** 			if(canA.rxFlag && canB.rxFlag)
 665              		.loc 1 143 0 discriminator 2
 666 011e 7B6B     		ldr	r3, [r7, #52]
 667 0120 0133     		adds	r3, r3, #1
 668 0122 7B63     		str	r3, [r7, #52]
 669              	.L30:
 143:../src/main.c **** 			if(canA.rxFlag && canB.rxFlag)
 670              		.loc 1 143 0 is_stmt 0 discriminator 1
 671 0124 7B6B     		ldr	r3, [r7, #52]
 672 0126 072B     		cmp	r3, #7
 673 0128 EEDD     		ble	.L33
 674              	.L32:
 675              	.LBE7:
 147:../src/main.c **** 		}
 148:../src/main.c **** 		if(canA.rxFlag && canB.rxFlag){
 676              		.loc 1 148 0 is_stmt 1
 677 012a BB6A     		ldr	r3, [r7, #40]
 678 012c 002B     		cmp	r3, #0
 679 012e 0FD0     		beq	.L34
 680              		.loc 1 148 0 is_stmt 0 discriminator 1
 681 0130 7B69     		ldr	r3, [r7, #20]
 682 0132 002B     		cmp	r3, #0
 683 0134 0CD0     		beq	.L34
 149:../src/main.c **** 			os_trace("CAN%d & CAN%d PASS.\n",i,j);
 684              		.loc 1 149 0 is_stmt 1
 685 0136 2848     		ldr	r0, .L41+36
 686 0138 B96B     		ldr	r1, [r7, #56]
 687 013a 3A6B     		ldr	r2, [r7, #48]
 688 013c FFF7FEFF 		bl	os_trace
 150:../src/main.c **** 			test_rst |= 1<<i;
 689              		.loc 1 150 0
 690 0140 0122     		movs	r2, #1
 691 0142 BB6B     		ldr	r3, [r7, #56]
 692 0144 02FA03F3 		lsl	r3, r2, r3
 693 0148 1A46     		mov	r2, r3
 694 014a FB6B     		ldr	r3, [r7, #60]
 695 014c 1343     		orrs	r3, r3, r2
 696 014e FB63     		str	r3, [r7, #60]
 697              	.L34:
 151:../src/main.c **** 		}
 152:../src/main.c **** 		if(canA.rxFlag==0)
 698              		.loc 1 152 0
 699 0150 BB6A     		ldr	r3, [r7, #40]
 700 0152 002B     		cmp	r3, #0
 701 0154 03D1     		bne	.L35
 153:../src/main.c **** 			os_trace("CAN%d receive timeout, Test FAIL***\n",i);
 702              		.loc 1 153 0
 703 0156 2148     		ldr	r0, .L41+40
 704 0158 B96B     		ldr	r1, [r7, #56]
 705 015a FFF7FEFF 		bl	os_trace
 706              	.L35:
 154:../src/main.c **** 		if(canB.rxFlag==0)
 707              		.loc 1 154 0
 708 015e 7B69     		ldr	r3, [r7, #20]
 709 0160 002B     		cmp	r3, #0
 710 0162 03D1     		bne	.L36
 155:../src/main.c **** 			os_trace("CAN%d receive timeout, Test FAIL***\n",j);
 711              		.loc 1 155 0
 712 0164 1D48     		ldr	r0, .L41+40
 713 0166 396B     		ldr	r1, [r7, #48]
 714 0168 FFF7FEFF 		bl	os_trace
 715              	.L36:
 156:../src/main.c **** 
 157:../src/main.c **** 		vTaskDelete(canA.handle);
 716              		.loc 1 157 0 discriminator 2
 717 016c 7B6A     		ldr	r3, [r7, #36]
 718 016e 1846     		mov	r0, r3
 719 0170 FFF7FEFF 		bl	vTaskDelete
 158:../src/main.c **** 		vTaskDelete(canB.handle);
 720              		.loc 1 158 0 discriminator 2
 721 0174 3B69     		ldr	r3, [r7, #16]
 722 0176 1846     		mov	r0, r3
 723 0178 FFF7FEFF 		bl	vTaskDelete
 159:../src/main.c **** 		os_sleep_ms(500);
 724              		.loc 1 159 0 discriminator 2
 725 017c 4FF4FA70 		mov	r0, #500
 726 0180 FFF7FEFF 		bl	os_sleep_ms
 727              	.LBE6:
 125:../src/main.c **** 		int j = (i+1)%3;
 728              		.loc 1 125 0 discriminator 2
 729 0184 BB6B     		ldr	r3, [r7, #56]
 730 0186 0133     		adds	r3, r3, #1
 731 0188 BB63     		str	r3, [r7, #56]
 732              	.L25:
 125:../src/main.c **** 		int j = (i+1)%3;
 733              		.loc 1 125 0 is_stmt 0 discriminator 1
 734 018a BB6B     		ldr	r3, [r7, #56]
 735 018c 022B     		cmp	r3, #2
 736 018e 7FF744AF 		ble	.L37
 737              	.LBE5:
 160:../src/main.c **** 	}
 161:../src/main.c **** 
 162:../src/main.c **** 	if(test_rst == 0b111){
 738              		.loc 1 162 0 is_stmt 1
 739 0192 FB6B     		ldr	r3, [r7, #60]
 740 0194 072B     		cmp	r3, #7
 741 0196 04D1     		bne	.L38
 163:../src/main.c **** 		os_trace("CAN test complete\n");
 742              		.loc 1 163 0
 743 0198 1148     		ldr	r0, .L41+44
 744 019a FFF7FEFF 		bl	os_trace
 164:../src/main.c **** 		return 0;
 745              		.loc 1 164 0
 746 019e 0023     		movs	r3, #0
 747 01a0 04E0     		b	.L40
 748              	.L38:
 165:../src/main.c **** 	}else{
 166:../src/main.c **** 		os_trace("CAN test has FAIL***\n");
 749              		.loc 1 166 0
 750 01a2 1048     		ldr	r0, .L41+48
 751 01a4 FFF7FEFF 		bl	os_trace
 167:../src/main.c **** 		return -1;
 752              		.loc 1 167 0
 753 01a8 4FF0FF33 		mov	r3, #-1
 754              	.L40:
 168:../src/main.c **** 	}
 169:../src/main.c **** }
 755              		.loc 1 169 0 discriminator 3
 756 01ac 1846     		mov	r0, r3
 757 01ae 4437     		adds	r7, r7, #68
 758              		.cfi_def_cfa_offset 12
 759 01b0 BD46     		mov	sp, r7
 760              		.cfi_def_cfa_register 13
 761              		@ sp needed
 762 01b2 90BD     		pop	{r4, r7, pc}
 763              	.L42:
 764              		.align	2
 765              	.L41:
 766 01b4 56555555 		.word	1431655766
 767 01b8 40010000 		.word	.LC18
 768 01bc 00000000 		.word	can_task_proc
 769 01c0 54010000 		.word	.LC19
 770 01c4 60010000 		.word	.LC20
 771 01c8 00000000 		.word	__FUNCTION__.6435
 772 01cc 78010000 		.word	.LC21
 773 01d0 CC010000 		.word	.LC22
 774 01d4 D8010000 		.word	.LC23
 775 01d8 2C020000 		.word	.LC24
 776 01dc 44020000 		.word	.LC25
 777 01e0 6C020000 		.word	.LC26
 778 01e4 80020000 		.word	.LC27
 779              		.cfi_endproc
 780              	.LFE7:
 782              		.section	.bss.uartQueueTbl,"aw",%nobits
 783              		.align	2
 786              	uartQueueTbl:
 787 0000 00000000 		.space	12
 787      00000000 
 787      00000000 
 788              		.section	.text.UartRxIRQHandler,"ax",%progbits
 789              		.align	2
 790              		.global	UartRxIRQHandler
 791              		.thumb
 792              		.thumb_func
 794              	UartRxIRQHandler:
 795              	.LFB8:
 170:../src/main.c **** struct UartParamSt {
 171:../src/main.c **** 	char tr;
 172:../src/main.c **** 	int port;
 173:../src/main.c **** 	TaskHandle_t handle;
 174:../src/main.c **** 	int test_rst;
 175:../src/main.c **** };
 176:../src/main.c **** 
 177:../src/main.c **** static xQueueHandle uartQueueTbl[3];
 178:../src/main.c **** 
 179:../src/main.c **** void UartRxIRQHandler(int port,uint8_t rxbyte)
 180:../src/main.c **** {
 796              		.loc 1 180 0
 797              		.cfi_startproc
 798              		@ args = 0, pretend = 0, frame = 16
 799              		@ frame_needed = 1, uses_anonymous_args = 0
 800 0000 80B5     		push	{r7, lr}
 801              		.cfi_def_cfa_offset 8
 802              		.cfi_offset 7, -8
 803              		.cfi_offset 14, -4
 804 0002 84B0     		sub	sp, sp, #16
 805              		.cfi_def_cfa_offset 24
 806 0004 00AF     		add	r7, sp, #0
 807              		.cfi_def_cfa_register 7
 808 0006 7860     		str	r0, [r7, #4]
 809 0008 0B46     		mov	r3, r1
 810 000a FB70     		strb	r3, [r7, #3]
 181:../src/main.c **** 	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 811              		.loc 1 181 0
 812 000c 0023     		movs	r3, #0
 813 000e FB60     		str	r3, [r7, #12]
 182:../src/main.c **** 	uint8_t c = rxbyte;
 814              		.loc 1 182 0
 815 0010 FB78     		ldrb	r3, [r7, #3]
 816 0012 FB72     		strb	r3, [r7, #11]
 183:../src/main.c **** 	xQueueSendToBackFromISR(uartQueueTbl[port],&c,&xHigherPriorityTaskWoken);
 817              		.loc 1 183 0
 818 0014 0D4A     		ldr	r2, .L45
 819 0016 7B68     		ldr	r3, [r7, #4]
 820 0018 52F82310 		ldr	r1, [r2, r3, lsl #2]
 821 001c 07F10B02 		add	r2, r7, #11
 822 0020 07F10C03 		add	r3, r7, #12
 823 0024 0846     		mov	r0, r1
 824 0026 1146     		mov	r1, r2
 825 0028 1A46     		mov	r2, r3
 826 002a 0023     		movs	r3, #0
 827 002c FFF7FEFF 		bl	xQueueGenericSendFromISR
 184:../src/main.c **** 	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken)
 828              		.loc 1 184 0
 829 0030 FB68     		ldr	r3, [r7, #12]
 830 0032 002B     		cmp	r3, #0
 831 0034 07D0     		beq	.L43
 832              		.loc 1 184 0 is_stmt 0 discriminator 1
 833 0036 064B     		ldr	r3, .L45+4
 834 0038 4FF08052 		mov	r2, #268435456
 835 003c 1A60     		str	r2, [r3]
 836              	@ 184 "../src/main.c" 1
 837 003e BFF34F8F 		dsb
 838              	@ 0 "" 2
 839              	@ 184 "../src/main.c" 1
 840 0042 BFF36F8F 		isb
 841              	@ 0 "" 2
 842              		.thumb
 843              	.L43:
 185:../src/main.c **** }
 844              		.loc 1 185 0 is_stmt 1
 845 0046 1037     		adds	r7, r7, #16
 846              		.cfi_def_cfa_offset 8
 847 0048 BD46     		mov	sp, r7
 848              		.cfi_def_cfa_register 13
 849              		@ sp needed
 850 004a 80BD     		pop	{r7, pc}
 851              	.L46:
 852              		.align	2
 853              	.L45:
 854 004c 00000000 		.word	uartQueueTbl
 855 0050 04ED00E0 		.word	-536810236
 856              		.cfi_endproc
 857              	.LFE8:
 859              		.section	.text.uart_getc_timeout,"ax",%progbits
 860              		.align	2
 861              		.global	uart_getc_timeout
 862              		.thumb
 863              		.thumb_func
 865              	uart_getc_timeout:
 866              	.LFB9:
 186:../src/main.c **** int uart_getc_timeout(int port,int timeout){
 867              		.loc 1 186 0
 868              		.cfi_startproc
 869              		@ args = 0, pretend = 0, frame = 16
 870              		@ frame_needed = 1, uses_anonymous_args = 0
 871 0000 80B5     		push	{r7, lr}
 872              		.cfi_def_cfa_offset 8
 873              		.cfi_offset 7, -8
 874              		.cfi_offset 14, -4
 875 0002 84B0     		sub	sp, sp, #16
 876              		.cfi_def_cfa_offset 24
 877 0004 00AF     		add	r7, sp, #0
 878              		.cfi_def_cfa_register 7
 879 0006 7860     		str	r0, [r7, #4]
 880 0008 3960     		str	r1, [r7]
 187:../src/main.c **** 	uint8_t c;
 188:../src/main.c **** 	if(xQueueReceive(uartQueueTbl[port], &c, timeout)==pdPASS){
 881              		.loc 1 188 0
 882 000a 0C4A     		ldr	r2, .L51
 883 000c 7B68     		ldr	r3, [r7, #4]
 884 000e 52F82310 		ldr	r1, [r2, r3, lsl #2]
 885 0012 3B68     		ldr	r3, [r7]
 886 0014 07F10F02 		add	r2, r7, #15
 887 0018 0846     		mov	r0, r1
 888 001a 1146     		mov	r1, r2
 889 001c 1A46     		mov	r2, r3
 890 001e 0023     		movs	r3, #0
 891 0020 FFF7FEFF 		bl	xQueueGenericReceive
 892 0024 0346     		mov	r3, r0
 893 0026 012B     		cmp	r3, #1
 894 0028 01D1     		bne	.L48
 189:../src/main.c **** 		return c;
 895              		.loc 1 189 0
 896 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 897 002c 01E0     		b	.L50
 898              	.L48:
 190:../src/main.c **** 	}else{
 191:../src/main.c **** 		return -1;
 899              		.loc 1 191 0
 900 002e 4FF0FF33 		mov	r3, #-1
 901              	.L50:
 192:../src/main.c **** 	}
 193:../src/main.c **** }
 902              		.loc 1 193 0 discriminator 1
 903 0032 1846     		mov	r0, r3
 904 0034 1037     		adds	r7, r7, #16
 905              		.cfi_def_cfa_offset 8
 906 0036 BD46     		mov	sp, r7
 907              		.cfi_def_cfa_register 13
 908              		@ sp needed
 909 0038 80BD     		pop	{r7, pc}
 910              	.L52:
 911 003a 00BF     		.align	2
 912              	.L51:
 913 003c 00000000 		.word	uartQueueTbl
 914              		.cfi_endproc
 915              	.LFE9:
 917              		.section	.text.uart_rx_flush,"ax",%progbits
 918              		.align	2
 919              		.global	uart_rx_flush
 920              		.thumb
 921              		.thumb_func
 923              	uart_rx_flush:
 924              	.LFB10:
 194:../src/main.c **** void uart_rx_flush(int port)
 195:../src/main.c **** {
 925              		.loc 1 195 0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 8
 928              		@ frame_needed = 1, uses_anonymous_args = 0
 929 0000 80B5     		push	{r7, lr}
 930              		.cfi_def_cfa_offset 8
 931              		.cfi_offset 7, -8
 932              		.cfi_offset 14, -4
 933 0002 82B0     		sub	sp, sp, #8
 934              		.cfi_def_cfa_offset 16
 935 0004 00AF     		add	r7, sp, #0
 936              		.cfi_def_cfa_register 7
 937 0006 7860     		str	r0, [r7, #4]
 196:../src/main.c **** 	xQueueReset(uartQueueTbl[port]);
 938              		.loc 1 196 0
 939 0008 054A     		ldr	r2, .L54
 940 000a 7B68     		ldr	r3, [r7, #4]
 941 000c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 942 0010 1846     		mov	r0, r3
 943 0012 0021     		movs	r1, #0
 944 0014 FFF7FEFF 		bl	xQueueGenericReset
 197:../src/main.c **** }
 945              		.loc 1 197 0
 946 0018 0837     		adds	r7, r7, #8
 947              		.cfi_def_cfa_offset 8
 948 001a BD46     		mov	sp, r7
 949              		.cfi_def_cfa_register 13
 950              		@ sp needed
 951 001c 80BD     		pop	{r7, pc}
 952              	.L55:
 953 001e 00BF     		.align	2
 954              	.L54:
 955 0020 00000000 		.word	uartQueueTbl
 956              		.cfi_endproc
 957              	.LFE10:
 959              		.section	.text.uart_gets_timeout,"ax",%progbits
 960              		.align	2
 961              		.global	uart_gets_timeout
 962              		.thumb
 963              		.thumb_func
 965              	uart_gets_timeout:
 966              	.LFB11:
 198:../src/main.c **** char *uart_gets_timeout(int port,char *buf, int bufsize, int timeout)
 199:../src/main.c **** {
 967              		.loc 1 199 0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 32
 970              		@ frame_needed = 1, uses_anonymous_args = 0
 971 0000 80B5     		push	{r7, lr}
 972              		.cfi_def_cfa_offset 8
 973              		.cfi_offset 7, -8
 974              		.cfi_offset 14, -4
 975 0002 88B0     		sub	sp, sp, #32
 976              		.cfi_def_cfa_offset 40
 977 0004 00AF     		add	r7, sp, #0
 978              		.cfi_def_cfa_register 7
 979 0006 F860     		str	r0, [r7, #12]
 980 0008 B960     		str	r1, [r7, #8]
 981 000a 7A60     		str	r2, [r7, #4]
 982 000c 3B60     		str	r3, [r7]
 200:../src/main.c **** 	char *p = buf;
 983              		.loc 1 200 0
 984 000e BB68     		ldr	r3, [r7, #8]
 985 0010 FB61     		str	r3, [r7, #28]
 201:../src/main.c **** 	char *end = buf+bufsize-1;
 986              		.loc 1 201 0
 987 0012 7B68     		ldr	r3, [r7, #4]
 988 0014 013B     		subs	r3, r3, #1
 989 0016 BA68     		ldr	r2, [r7, #8]
 990 0018 1344     		add	r3, r3, r2
 991 001a BB61     		str	r3, [r7, #24]
 202:../src/main.c **** 	while(p<end){
 992              		.loc 1 202 0
 993 001c 1CE0     		b	.L57
 994              	.L62:
 995              	.LBB8:
 203:../src/main.c **** 		int c = uart_getc_timeout(port, timeout);
 996              		.loc 1 203 0
 997 001e F868     		ldr	r0, [r7, #12]
 998 0020 3968     		ldr	r1, [r7]
 999 0022 FFF7FEFF 		bl	uart_getc_timeout
 1000 0026 7861     		str	r0, [r7, #20]
 204:../src/main.c **** 		if(c==-1)
 1001              		.loc 1 204 0
 1002 0028 7B69     		ldr	r3, [r7, #20]
 1003 002a B3F1FF3F 		cmp	r3, #-1
 1004 002e 01D1     		bne	.L58
 205:../src/main.c **** 			return NULL;	/*timeout*/
 1005              		.loc 1 205 0
 1006 0030 0023     		movs	r3, #0
 1007 0032 19E0     		b	.L59
 1008              	.L58:
 206:../src/main.c **** 		if(c=='\r')
 1009              		.loc 1 206 0
 1010 0034 7B69     		ldr	r3, [r7, #20]
 1011 0036 0D2B     		cmp	r3, #13
 1012 0038 00D1     		bne	.L60
 207:../src/main.c **** 			continue;
 1013              		.loc 1 207 0
 1014 003a 0DE0     		b	.L57
 1015              	.L60:
 208:../src/main.c **** 		if(c=='\n'){
 1016              		.loc 1 208 0
 1017 003c 7B69     		ldr	r3, [r7, #20]
 1018 003e 0A2B     		cmp	r3, #10
 1019 0040 04D1     		bne	.L61
 209:../src/main.c **** 			*p = '\0';
 1020              		.loc 1 209 0
 1021 0042 FB69     		ldr	r3, [r7, #28]
 1022 0044 0022     		movs	r2, #0
 1023 0046 1A70     		strb	r2, [r3]
 210:../src/main.c **** 			return buf;		/*get*/
 1024              		.loc 1 210 0
 1025 0048 BB68     		ldr	r3, [r7, #8]
 1026 004a 0DE0     		b	.L59
 1027              	.L61:
 211:../src/main.c **** 		}
 212:../src/main.c **** 		*p++ = c;
 1028              		.loc 1 212 0
 1029 004c FB69     		ldr	r3, [r7, #28]
 1030 004e 5A1C     		adds	r2, r3, #1
 1031 0050 FA61     		str	r2, [r7, #28]
 1032 0052 7A69     		ldr	r2, [r7, #20]
 1033 0054 D2B2     		uxtb	r2, r2
 1034 0056 1A70     		strb	r2, [r3]
 1035              	.L57:
 1036              	.LBE8:
 202:../src/main.c **** 		int c = uart_getc_timeout(port, timeout);
 1037              		.loc 1 202 0
 1038 0058 FA69     		ldr	r2, [r7, #28]
 1039 005a BB69     		ldr	r3, [r7, #24]
 1040 005c 9A42     		cmp	r2, r3
 1041 005e DED3     		bcc	.L62
 213:../src/main.c **** 	}
 214:../src/main.c **** 	*p = '\0';
 1042              		.loc 1 214 0
 1043 0060 FB69     		ldr	r3, [r7, #28]
 1044 0062 0022     		movs	r2, #0
 1045 0064 1A70     		strb	r2, [r3]
 215:../src/main.c **** 	return buf;		/*full*/
 1046              		.loc 1 215 0
 1047 0066 BB68     		ldr	r3, [r7, #8]
 1048              	.L59:
 216:../src/main.c **** }
 1049              		.loc 1 216 0
 1050 0068 1846     		mov	r0, r3
 1051 006a 2037     		adds	r7, r7, #32
 1052              		.cfi_def_cfa_offset 8
 1053 006c BD46     		mov	sp, r7
 1054              		.cfi_def_cfa_register 13
 1055              		@ sp needed
 1056 006e 80BD     		pop	{r7, pc}
 1057              		.cfi_endproc
 1058              	.LFE11:
 1060              		.section	.rodata
 1061 0296 0000     		.align	2
 1062              	.LC28:
 1063 0298 0D0A00   		.ascii	"\015\012\000"
 1064              		.section	.text.uart_gets_echo_blocked,"ax",%progbits
 1065              		.align	2
 1066              		.global	uart_gets_echo_blocked
 1067              		.thumb
 1068              		.thumb_func
 1070              	uart_gets_echo_blocked:
 1071              	.LFB12:
 217:../src/main.c **** char *uart_gets_echo_blocked(int port,char *buf, int bufsize)
 218:../src/main.c **** {
 1072              		.loc 1 218 0
 1073              		.cfi_startproc
 1074              		@ args = 0, pretend = 0, frame = 32
 1075              		@ frame_needed = 1, uses_anonymous_args = 0
 1076 0000 80B5     		push	{r7, lr}
 1077              		.cfi_def_cfa_offset 8
 1078              		.cfi_offset 7, -8
 1079              		.cfi_offset 14, -4
 1080 0002 88B0     		sub	sp, sp, #32
 1081              		.cfi_def_cfa_offset 40
 1082 0004 00AF     		add	r7, sp, #0
 1083              		.cfi_def_cfa_register 7
 1084 0006 F860     		str	r0, [r7, #12]
 1085 0008 B960     		str	r1, [r7, #8]
 1086 000a 7A60     		str	r2, [r7, #4]
 219:../src/main.c **** 	char *p = buf;
 1087              		.loc 1 219 0
 1088 000c BB68     		ldr	r3, [r7, #8]
 1089 000e FB61     		str	r3, [r7, #28]
 220:../src/main.c **** 	char *end = buf+bufsize-1;
 1090              		.loc 1 220 0
 1091 0010 7B68     		ldr	r3, [r7, #4]
 1092 0012 013B     		subs	r3, r3, #1
 1093 0014 BA68     		ldr	r2, [r7, #8]
 1094 0016 1344     		add	r3, r3, r2
 1095 0018 BB61     		str	r3, [r7, #24]
 221:../src/main.c **** 	while(p<end){
 1096              		.loc 1 221 0
 1097 001a 2BE0     		b	.L64
 1098              	.L70:
 1099              	.LBB9:
 222:../src/main.c **** 		int c = uart_getc_timeout(port, portMAX_DELAY);
 1100              		.loc 1 222 0
 1101 001c F868     		ldr	r0, [r7, #12]
 1102 001e 4FF0FF31 		mov	r1, #-1
 1103 0022 FFF7FEFF 		bl	uart_getc_timeout
 1104 0026 7861     		str	r0, [r7, #20]
 223:../src/main.c **** 		if(c==-1)
 1105              		.loc 1 223 0
 1106 0028 7B69     		ldr	r3, [r7, #20]
 1107 002a B3F1FF3F 		cmp	r3, #-1
 1108 002e 01D1     		bne	.L65
 224:../src/main.c **** 			return NULL;	/*timeout*/
 1109              		.loc 1 224 0
 1110 0030 0023     		movs	r3, #0
 1111 0032 27E0     		b	.L69
 1112              	.L65:
 225:../src/main.c **** 		if(c=='\r' || c=='\n'){
 1113              		.loc 1 225 0
 1114 0034 7B69     		ldr	r3, [r7, #20]
 1115 0036 0D2B     		cmp	r3, #13
 1116 0038 02D0     		beq	.L67
 1117              		.loc 1 225 0 is_stmt 0 discriminator 1
 1118 003a 7B69     		ldr	r3, [r7, #20]
 1119 003c 0A2B     		cmp	r3, #10
 1120 003e 09D1     		bne	.L68
 1121              	.L67:
 226:../src/main.c **** 			*p = '\0';
 1122              		.loc 1 226 0 is_stmt 1
 1123 0040 FB69     		ldr	r3, [r7, #28]
 1124 0042 0022     		movs	r2, #0
 1125 0044 1A70     		strb	r2, [r3]
 227:../src/main.c **** 			uart_send(port, 2, (uint8_t*)"\r\n");
 1126              		.loc 1 227 0
 1127 0046 F868     		ldr	r0, [r7, #12]
 1128 0048 0221     		movs	r1, #2
 1129 004a 104A     		ldr	r2, .L71
 1130 004c FFF7FEFF 		bl	uart_send
 228:../src/main.c **** 			return buf;		/*get*/
 1131              		.loc 1 228 0
 1132 0050 BB68     		ldr	r3, [r7, #8]
 1133 0052 17E0     		b	.L69
 1134              	.L68:
 229:../src/main.c **** 		}
 230:../src/main.c **** 		uint8_t cc = c;
 1135              		.loc 1 230 0
 1136 0054 7B69     		ldr	r3, [r7, #20]
 1137 0056 DBB2     		uxtb	r3, r3
 1138 0058 FB74     		strb	r3, [r7, #19]
 231:../src/main.c **** 		uart_send(port, 1, &cc);
 1139              		.loc 1 231 0
 1140 005a 07F11303 		add	r3, r7, #19
 1141 005e F868     		ldr	r0, [r7, #12]
 1142 0060 0121     		movs	r1, #1
 1143 0062 1A46     		mov	r2, r3
 1144 0064 FFF7FEFF 		bl	uart_send
 232:../src/main.c **** 		*p++ = c;
 1145              		.loc 1 232 0
 1146 0068 FB69     		ldr	r3, [r7, #28]
 1147 006a 5A1C     		adds	r2, r3, #1
 1148 006c FA61     		str	r2, [r7, #28]
 1149 006e 7A69     		ldr	r2, [r7, #20]
 1150 0070 D2B2     		uxtb	r2, r2
 1151 0072 1A70     		strb	r2, [r3]
 1152              	.L64:
 1153              	.LBE9:
 221:../src/main.c **** 		int c = uart_getc_timeout(port, portMAX_DELAY);
 1154              		.loc 1 221 0
 1155 0074 FA69     		ldr	r2, [r7, #28]
 1156 0076 BB69     		ldr	r3, [r7, #24]
 1157 0078 9A42     		cmp	r2, r3
 1158 007a CFD3     		bcc	.L70
 233:../src/main.c **** 	}
 234:../src/main.c **** 	*p = '\0';
 1159              		.loc 1 234 0
 1160 007c FB69     		ldr	r3, [r7, #28]
 1161 007e 0022     		movs	r2, #0
 1162 0080 1A70     		strb	r2, [r3]
 235:../src/main.c **** 	return buf;		/*full*/
 1163              		.loc 1 235 0
 1164 0082 BB68     		ldr	r3, [r7, #8]
 1165              	.L69:
 236:../src/main.c **** }
 1166              		.loc 1 236 0
 1167 0084 1846     		mov	r0, r3
 1168 0086 2037     		adds	r7, r7, #32
 1169              		.cfi_def_cfa_offset 8
 1170 0088 BD46     		mov	sp, r7
 1171              		.cfi_def_cfa_register 13
 1172              		@ sp needed
 1173 008a 80BD     		pop	{r7, pc}
 1174              	.L72:
 1175              		.align	2
 1176              	.L71:
 1177 008c 98020000 		.word	.LC28
 1178              		.cfi_endproc
 1179              	.LFE12:
 1181              		.section	.text.uart_gets_blocked,"ax",%progbits
 1182              		.align	2
 1183              		.global	uart_gets_blocked
 1184              		.thumb
 1185              		.thumb_func
 1187              	uart_gets_blocked:
 1188              	.LFB13:
 237:../src/main.c **** char *uart_gets_blocked(int port,char *buf, int bufsize)
 238:../src/main.c **** {
 1189              		.loc 1 238 0
 1190              		.cfi_startproc
 1191              		@ args = 0, pretend = 0, frame = 16
 1192              		@ frame_needed = 1, uses_anonymous_args = 0
 1193 0000 80B5     		push	{r7, lr}
 1194              		.cfi_def_cfa_offset 8
 1195              		.cfi_offset 7, -8
 1196              		.cfi_offset 14, -4
 1197 0002 84B0     		sub	sp, sp, #16
 1198              		.cfi_def_cfa_offset 24
 1199 0004 00AF     		add	r7, sp, #0
 1200              		.cfi_def_cfa_register 7
 1201 0006 F860     		str	r0, [r7, #12]
 1202 0008 B960     		str	r1, [r7, #8]
 1203 000a 7A60     		str	r2, [r7, #4]
 239:../src/main.c **** 	return uart_gets_timeout(port,buf,bufsize,portMAX_DELAY);
 1204              		.loc 1 239 0
 1205 000c F868     		ldr	r0, [r7, #12]
 1206 000e B968     		ldr	r1, [r7, #8]
 1207 0010 7A68     		ldr	r2, [r7, #4]
 1208 0012 4FF0FF33 		mov	r3, #-1
 1209 0016 FFF7FEFF 		bl	uart_gets_timeout
 1210 001a 0346     		mov	r3, r0
 240:../src/main.c **** }
 1211              		.loc 1 240 0
 1212 001c 1846     		mov	r0, r3
 1213 001e 1037     		adds	r7, r7, #16
 1214              		.cfi_def_cfa_offset 8
 1215 0020 BD46     		mov	sp, r7
 1216              		.cfi_def_cfa_register 13
 1217              		@ sp needed
 1218 0022 80BD     		pop	{r7, pc}
 1219              		.cfi_endproc
 1220              	.LFE13:
 1222              		.section	.text.uart_getdata,"ax",%progbits
 1223              		.align	2
 1224              		.global	uart_getdata
 1225              		.thumb
 1226              		.thumb_func
 1228              	uart_getdata:
 1229              	.LFB14:
 241:../src/main.c **** int uart_getdata(int port,uint8_t *buf,int bufsize,int recv_tmout,int frame_tmout)
 242:../src/main.c **** {
 1230              		.loc 1 242 0
 1231              		.cfi_startproc
 1232              		@ args = 4, pretend = 0, frame = 32
 1233              		@ frame_needed = 1, uses_anonymous_args = 0
 1234 0000 80B5     		push	{r7, lr}
 1235              		.cfi_def_cfa_offset 8
 1236              		.cfi_offset 7, -8
 1237              		.cfi_offset 14, -4
 1238 0002 88B0     		sub	sp, sp, #32
 1239              		.cfi_def_cfa_offset 40
 1240 0004 00AF     		add	r7, sp, #0
 1241              		.cfi_def_cfa_register 7
 1242 0006 F860     		str	r0, [r7, #12]
 1243 0008 B960     		str	r1, [r7, #8]
 1244 000a 7A60     		str	r2, [r7, #4]
 1245 000c 3B60     		str	r3, [r7]
 243:../src/main.c **** 	uint8_t *p = buf;
 1246              		.loc 1 243 0
 1247 000e BB68     		ldr	r3, [r7, #8]
 1248 0010 FB61     		str	r3, [r7, #28]
 244:../src/main.c **** 	uint8_t *end = buf + bufsize;
 1249              		.loc 1 244 0
 1250 0012 7B68     		ldr	r3, [r7, #4]
 1251 0014 BA68     		ldr	r2, [r7, #8]
 1252 0016 1344     		add	r3, r3, r2
 1253 0018 BB61     		str	r3, [r7, #24]
 245:../src/main.c **** 	int c = uart_getc_timeout(port,recv_tmout);
 1254              		.loc 1 245 0
 1255 001a F868     		ldr	r0, [r7, #12]
 1256 001c 3968     		ldr	r1, [r7]
 1257 001e FFF7FEFF 		bl	uart_getc_timeout
 1258 0022 7861     		str	r0, [r7, #20]
 246:../src/main.c **** 	if(c==-1)
 1259              		.loc 1 246 0
 1260 0024 7B69     		ldr	r3, [r7, #20]
 1261 0026 B3F1FF3F 		cmp	r3, #-1
 1262 002a 02D1     		bne	.L76
 247:../src/main.c **** 		return -1;
 1263              		.loc 1 247 0
 1264 002c 4FF0FF33 		mov	r3, #-1
 1265 0030 1CE0     		b	.L77
 1266              	.L76:
 248:../src/main.c **** 	*p++ = c;
 1267              		.loc 1 248 0
 1268 0032 FB69     		ldr	r3, [r7, #28]
 1269 0034 5A1C     		adds	r2, r3, #1
 1270 0036 FA61     		str	r2, [r7, #28]
 1271 0038 7A69     		ldr	r2, [r7, #20]
 1272 003a D2B2     		uxtb	r2, r2
 1273 003c 1A70     		strb	r2, [r3]
 1274              	.L80:
 249:../src/main.c **** 	do{
 250:../src/main.c **** 		c = uart_getc_timeout(port,frame_tmout);
 1275              		.loc 1 250 0
 1276 003e F868     		ldr	r0, [r7, #12]
 1277 0040 B96A     		ldr	r1, [r7, #40]
 1278 0042 FFF7FEFF 		bl	uart_getc_timeout
 1279 0046 7861     		str	r0, [r7, #20]
 251:../src/main.c **** 		if(c==-1)
 1280              		.loc 1 251 0
 1281 0048 7B69     		ldr	r3, [r7, #20]
 1282 004a B3F1FF3F 		cmp	r3, #-1
 1283 004e 00D1     		bne	.L78
 252:../src/main.c **** 			break;
 1284              		.loc 1 252 0
 1285 0050 09E0     		b	.L79
 1286              	.L78:
 253:../src/main.c **** 		*p++ = c;
 1287              		.loc 1 253 0
 1288 0052 FB69     		ldr	r3, [r7, #28]
 1289 0054 5A1C     		adds	r2, r3, #1
 1290 0056 FA61     		str	r2, [r7, #28]
 1291 0058 7A69     		ldr	r2, [r7, #20]
 1292 005a D2B2     		uxtb	r2, r2
 1293 005c 1A70     		strb	r2, [r3]
 254:../src/main.c **** 	}while(p<end);
 1294              		.loc 1 254 0
 1295 005e FA69     		ldr	r2, [r7, #28]
 1296 0060 BB69     		ldr	r3, [r7, #24]
 1297 0062 9A42     		cmp	r2, r3
 1298 0064 EBD3     		bcc	.L80
 1299              	.L79:
 255:../src/main.c **** 	return p-buf;
 1300              		.loc 1 255 0
 1301 0066 FA69     		ldr	r2, [r7, #28]
 1302 0068 BB68     		ldr	r3, [r7, #8]
 1303 006a D31A     		subs	r3, r2, r3
 1304              	.L77:
 256:../src/main.c **** }
 1305              		.loc 1 256 0
 1306 006c 1846     		mov	r0, r3
 1307 006e 2037     		adds	r7, r7, #32
 1308              		.cfi_def_cfa_offset 8
 1309 0070 BD46     		mov	sp, r7
 1310              		.cfi_def_cfa_register 13
 1311              		@ sp needed
 1312 0072 80BD     		pop	{r7, pc}
 1313              		.cfi_endproc
 1314              	.LFE14:
 1316              		.section	.text.uart_getdata_blocked,"ax",%progbits
 1317              		.align	2
 1318              		.global	uart_getdata_blocked
 1319              		.thumb
 1320              		.thumb_func
 1322              	uart_getdata_blocked:
 1323              	.LFB15:
 257:../src/main.c **** unsigned uart_getdata_blocked(int port,uint8_t *buf,int bufsize,int frame_tmout)
 258:../src/main.c **** {
 1324              		.loc 1 258 0
 1325              		.cfi_startproc
 1326              		@ args = 0, pretend = 0, frame = 24
 1327              		@ frame_needed = 1, uses_anonymous_args = 0
 1328 0000 80B5     		push	{r7, lr}
 1329              		.cfi_def_cfa_offset 8
 1330              		.cfi_offset 7, -8
 1331              		.cfi_offset 14, -4
 1332 0002 88B0     		sub	sp, sp, #32
 1333              		.cfi_def_cfa_offset 40
 1334 0004 02AF     		add	r7, sp, #8
 1335              		.cfi_def_cfa 7, 32
 1336 0006 F860     		str	r0, [r7, #12]
 1337 0008 B960     		str	r1, [r7, #8]
 1338 000a 7A60     		str	r2, [r7, #4]
 1339 000c 3B60     		str	r3, [r7]
 259:../src/main.c **** 	int r = uart_getdata(port,buf,bufsize,portMAX_DELAY,frame_tmout);
 1340              		.loc 1 259 0
 1341 000e 3B68     		ldr	r3, [r7]
 1342 0010 0093     		str	r3, [sp]
 1343 0012 F868     		ldr	r0, [r7, #12]
 1344 0014 B968     		ldr	r1, [r7, #8]
 1345 0016 7A68     		ldr	r2, [r7, #4]
 1346 0018 4FF0FF33 		mov	r3, #-1
 1347 001c FFF7FEFF 		bl	uart_getdata
 1348 0020 7861     		str	r0, [r7, #20]
 260:../src/main.c **** 	return r<0?0:r;
 1349              		.loc 1 260 0
 1350 0022 7B69     		ldr	r3, [r7, #20]
 1351 0024 23EAE373 		bic	r3, r3, r3, asr #31
 261:../src/main.c **** }
 1352              		.loc 1 261 0
 1353 0028 1846     		mov	r0, r3
 1354 002a 1837     		adds	r7, r7, #24
 1355              		.cfi_def_cfa_offset 8
 1356 002c BD46     		mov	sp, r7
 1357              		.cfi_def_cfa_register 13
 1358              		@ sp needed
 1359 002e 80BD     		pop	{r7, pc}
 1360              		.cfi_endproc
 1361              	.LFE15:
 1363              		.section	.rodata
 1364 029b 00       		.align	2
 1365              	.LC0:
 1366 029c 00A00640 		.word	1074176000
 1367 02a0 00B00640 		.word	1074180096
 1368 02a4 00C00640 		.word	1074184192
 1369              		.section	.text.uart_puts,"ax",%progbits
 1370              		.align	2
 1371              		.global	uart_puts
 1372              		.thumb
 1373              		.thumb_func
 1375              	uart_puts:
 1376              	.LFB16:
 262:../src/main.c **** void uart_puts(int port,const char *data_string)  {
 1377              		.loc 1 262 0
 1378              		.cfi_startproc
 1379              		@ args = 0, pretend = 0, frame = 32
 1380              		@ frame_needed = 1, uses_anonymous_args = 0
 1381 0000 80B5     		push	{r7, lr}
 1382              		.cfi_def_cfa_offset 8
 1383              		.cfi_offset 7, -8
 1384              		.cfi_offset 14, -4
 1385 0002 88B0     		sub	sp, sp, #32
 1386              		.cfi_def_cfa_offset 40
 1387 0004 00AF     		add	r7, sp, #0
 1388              		.cfi_def_cfa_register 7
 1389 0006 7860     		str	r0, [r7, #4]
 1390 0008 3960     		str	r1, [r7]
 263:../src/main.c **** 	taskENTER_CRITICAL();
 1391              		.loc 1 263 0
 1392 000a FFF7FEFF 		bl	vPortEnterCritical
 264:../src/main.c **** 	LPUART_Type* uartTbl[3] = { LPUART0, LPUART1, LPUART2 };
 1393              		.loc 1 264 0
 1394 000e 114A     		ldr	r2, .L86
 1395 0010 07F10C03 		add	r3, r7, #12
 1396 0014 07CA     		ldmia	r2, {r0, r1, r2}
 1397 0016 83E80700 		stmia	r3, {r0, r1, r2}
 265:../src/main.c **** 	const char *p = data_string;
 1398              		.loc 1 265 0
 1399 001a 3B68     		ldr	r3, [r7]
 1400 001c FB61     		str	r3, [r7, #28]
 266:../src/main.c **** 	int c;
 267:../src/main.c **** 	while ((c=*p++))
 1401              		.loc 1 267 0
 1402 001e 0CE0     		b	.L84
 1403              	.L85:
 268:../src/main.c **** 		LPUART_transmit_char(uartTbl[port], c);
 1404              		.loc 1 268 0
 1405 0020 7B68     		ldr	r3, [r7, #4]
 1406 0022 9B00     		lsls	r3, r3, #2
 1407 0024 07F12002 		add	r2, r7, #32
 1408 0028 1344     		add	r3, r3, r2
 1409 002a 53F8142C 		ldr	r2, [r3, #-20]
 1410 002e BB69     		ldr	r3, [r7, #24]
 1411 0030 DBB2     		uxtb	r3, r3
 1412 0032 1046     		mov	r0, r2
 1413 0034 1946     		mov	r1, r3
 1414 0036 FFF7FEFF 		bl	LPUART_transmit_char
 1415              	.L84:
 267:../src/main.c **** 		LPUART_transmit_char(uartTbl[port], c);
 1416              		.loc 1 267 0
 1417 003a FB69     		ldr	r3, [r7, #28]
 1418 003c 5A1C     		adds	r2, r3, #1
 1419 003e FA61     		str	r2, [r7, #28]
 1420 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1421 0042 BB61     		str	r3, [r7, #24]
 1422 0044 BB69     		ldr	r3, [r7, #24]
 1423 0046 002B     		cmp	r3, #0
 1424 0048 EAD1     		bne	.L85
 269:../src/main.c **** 	taskEXIT_CRITICAL();
 1425              		.loc 1 269 0
 1426 004a FFF7FEFF 		bl	vPortExitCritical
 270:../src/main.c **** }
 1427              		.loc 1 270 0
 1428 004e 2037     		adds	r7, r7, #32
 1429              		.cfi_def_cfa_offset 8
 1430 0050 BD46     		mov	sp, r7
 1431              		.cfi_def_cfa_register 13
 1432              		@ sp needed
 1433 0052 80BD     		pop	{r7, pc}
 1434              	.L87:
 1435              		.align	2
 1436              	.L86:
 1437 0054 9C020000 		.word	.LC0
 1438              		.cfi_endproc
 1439              	.LFE16:
 1441              		.section	.text.uart_send_lf_crlf,"ax",%progbits
 1442              		.align	2
 1443              		.global	uart_send_lf_crlf
 1444              		.thumb
 1445              		.thumb_func
 1447              	uart_send_lf_crlf:
 1448              	.LFB17:
 271:../src/main.c **** void uart_send_lf_crlf(int port,int len,const uint8_t* data)
 272:../src/main.c **** {
 1449              		.loc 1 272 0
 1450              		.cfi_startproc
 1451              		@ args = 0, pretend = 0, frame = 40
 1452              		@ frame_needed = 1, uses_anonymous_args = 0
 1453 0000 80B5     		push	{r7, lr}
 1454              		.cfi_def_cfa_offset 8
 1455              		.cfi_offset 7, -8
 1456              		.cfi_offset 14, -4
 1457 0002 8AB0     		sub	sp, sp, #40
 1458              		.cfi_def_cfa_offset 48
 1459 0004 00AF     		add	r7, sp, #0
 1460              		.cfi_def_cfa_register 7
 1461 0006 F860     		str	r0, [r7, #12]
 1462 0008 B960     		str	r1, [r7, #8]
 1463 000a 7A60     		str	r2, [r7, #4]
 273:../src/main.c **** 	LPUART_Type* uartTbl[3] = { LPUART0, LPUART1, LPUART2 };
 1464              		.loc 1 273 0
 1465 000c 204A     		ldr	r2, .L94
 1466 000e 07F11403 		add	r3, r7, #20
 1467 0012 07CA     		ldmia	r2, {r0, r1, r2}
 1468 0014 83E80700 		stmia	r3, {r0, r1, r2}
 274:../src/main.c **** 	const uint8_t *p = data;
 1469              		.loc 1 274 0
 1470 0018 7B68     		ldr	r3, [r7, #4]
 1471 001a 7B62     		str	r3, [r7, #36]
 275:../src/main.c **** 	const uint8_t *end = p+len;
 1472              		.loc 1 275 0
 1473 001c BB68     		ldr	r3, [r7, #8]
 1474 001e 7A6A     		ldr	r2, [r7, #36]
 1475 0020 1344     		add	r3, r3, r2
 1476 0022 3B62     		str	r3, [r7, #32]
 276:../src/main.c **** 	taskENTER_CRITICAL();
 1477              		.loc 1 276 0
 1478 0024 FFF7FEFF 		bl	vPortEnterCritical
 277:../src/main.c **** 	if(port==UART_RS485)rs485_dir(1);
 1479              		.loc 1 277 0
 1480 0028 FB68     		ldr	r3, [r7, #12]
 1481 002a 002B     		cmp	r3, #0
 1482 002c 02D1     		bne	.L89
 1483              		.loc 1 277 0 is_stmt 0 discriminator 1
 1484 002e 0120     		movs	r0, #1
 1485 0030 FFF7FEFF 		bl	rs485_dir
 1486              	.L89:
 278:../src/main.c **** 	while(p<end){
 1487              		.loc 1 278 0 is_stmt 1
 1488 0034 1DE0     		b	.L90
 1489              	.L92:
 279:../src/main.c **** 		if(*p=='\n')
 1490              		.loc 1 279 0
 1491 0036 7B6A     		ldr	r3, [r7, #36]
 1492 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1493 003a 0A2B     		cmp	r3, #10
 1494 003c 0AD1     		bne	.L91
 280:../src/main.c **** 			LPUART_transmit_char(uartTbl[port], '\r');
 1495              		.loc 1 280 0
 1496 003e FB68     		ldr	r3, [r7, #12]
 1497 0040 9B00     		lsls	r3, r3, #2
 1498 0042 07F12802 		add	r2, r7, #40
 1499 0046 1344     		add	r3, r3, r2
 1500 0048 53F8143C 		ldr	r3, [r3, #-20]
 1501 004c 1846     		mov	r0, r3
 1502 004e 0D21     		movs	r1, #13
 1503 0050 FFF7FEFF 		bl	LPUART_transmit_char
 1504              	.L91:
 281:../src/main.c **** 		LPUART_transmit_char(uartTbl[port], *p++);
 1505              		.loc 1 281 0
 1506 0054 FB68     		ldr	r3, [r7, #12]
 1507 0056 9B00     		lsls	r3, r3, #2
 1508 0058 07F12802 		add	r2, r7, #40
 1509 005c 1344     		add	r3, r3, r2
 1510 005e 53F8141C 		ldr	r1, [r3, #-20]
 1511 0062 7B6A     		ldr	r3, [r7, #36]
 1512 0064 5A1C     		adds	r2, r3, #1
 1513 0066 7A62     		str	r2, [r7, #36]
 1514 0068 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1515 006a 0846     		mov	r0, r1
 1516 006c 1946     		mov	r1, r3
 1517 006e FFF7FEFF 		bl	LPUART_transmit_char
 1518              	.L90:
 278:../src/main.c **** 		if(*p=='\n')
 1519              		.loc 1 278 0
 1520 0072 7A6A     		ldr	r2, [r7, #36]
 1521 0074 3B6A     		ldr	r3, [r7, #32]
 1522 0076 9A42     		cmp	r2, r3
 1523 0078 DDD3     		bcc	.L92
 282:../src/main.c **** 	}
 283:../src/main.c **** 	if(port==UART_RS485)rs485_dir(0);
 1524              		.loc 1 283 0
 1525 007a FB68     		ldr	r3, [r7, #12]
 1526 007c 002B     		cmp	r3, #0
 1527 007e 02D1     		bne	.L93
 1528              		.loc 1 283 0 is_stmt 0 discriminator 1
 1529 0080 0020     		movs	r0, #0
 1530 0082 FFF7FEFF 		bl	rs485_dir
 1531              	.L93:
 284:../src/main.c **** 	taskEXIT_CRITICAL();
 1532              		.loc 1 284 0 is_stmt 1
 1533 0086 FFF7FEFF 		bl	vPortExitCritical
 285:../src/main.c **** }
 1534              		.loc 1 285 0
 1535 008a 2837     		adds	r7, r7, #40
 1536              		.cfi_def_cfa_offset 8
 1537 008c BD46     		mov	sp, r7
 1538              		.cfi_def_cfa_register 13
 1539              		@ sp needed
 1540 008e 80BD     		pop	{r7, pc}
 1541              	.L95:
 1542              		.align	2
 1543              	.L94:
 1544 0090 9C020000 		.word	.LC0
 1545              		.cfi_endproc
 1546              	.LFE17:
 1548              		.section	.text.uart_send,"ax",%progbits
 1549              		.align	2
 1550              		.global	uart_send
 1551              		.thumb
 1552              		.thumb_func
 1554              	uart_send:
 1555              	.LFB18:
 286:../src/main.c **** void uart_send(int port,int len,const uint8_t* data)
 287:../src/main.c **** {
 1556              		.loc 1 287 0
 1557              		.cfi_startproc
 1558              		@ args = 0, pretend = 0, frame = 40
 1559              		@ frame_needed = 1, uses_anonymous_args = 0
 1560 0000 80B5     		push	{r7, lr}
 1561              		.cfi_def_cfa_offset 8
 1562              		.cfi_offset 7, -8
 1563              		.cfi_offset 14, -4
 1564 0002 8AB0     		sub	sp, sp, #40
 1565              		.cfi_def_cfa_offset 48
 1566 0004 00AF     		add	r7, sp, #0
 1567              		.cfi_def_cfa_register 7
 1568 0006 F860     		str	r0, [r7, #12]
 1569 0008 B960     		str	r1, [r7, #8]
 1570 000a 7A60     		str	r2, [r7, #4]
 288:../src/main.c **** 	LPUART_Type* uartTbl[3] = { LPUART0, LPUART1, LPUART2 };
 1571              		.loc 1 288 0
 1572 000c 194A     		ldr	r2, .L101
 1573 000e 07F11403 		add	r3, r7, #20
 1574 0012 07CA     		ldmia	r2, {r0, r1, r2}
 1575 0014 83E80700 		stmia	r3, {r0, r1, r2}
 289:../src/main.c **** 	const uint8_t *p = data;
 1576              		.loc 1 289 0
 1577 0018 7B68     		ldr	r3, [r7, #4]
 1578 001a 7B62     		str	r3, [r7, #36]
 290:../src/main.c **** 	const uint8_t *end = p+len;
 1579              		.loc 1 290 0
 1580 001c BB68     		ldr	r3, [r7, #8]
 1581 001e 7A6A     		ldr	r2, [r7, #36]
 1582 0020 1344     		add	r3, r3, r2
 1583 0022 3B62     		str	r3, [r7, #32]
 291:../src/main.c **** 	taskENTER_CRITICAL();
 1584              		.loc 1 291 0
 1585 0024 FFF7FEFF 		bl	vPortEnterCritical
 292:../src/main.c **** 	if(port==UART_RS485)rs485_dir(1);
 1586              		.loc 1 292 0
 1587 0028 FB68     		ldr	r3, [r7, #12]
 1588 002a 002B     		cmp	r3, #0
 1589 002c 02D1     		bne	.L97
 1590              		.loc 1 292 0 is_stmt 0 discriminator 1
 1591 002e 0120     		movs	r0, #1
 1592 0030 FFF7FEFF 		bl	rs485_dir
 1593              	.L97:
 293:../src/main.c **** 	while(p<end){
 1594              		.loc 1 293 0 is_stmt 1
 1595 0034 0EE0     		b	.L98
 1596              	.L99:
 294:../src/main.c **** 		LPUART_transmit_char(uartTbl[port], *p++);
 1597              		.loc 1 294 0
 1598 0036 FB68     		ldr	r3, [r7, #12]
 1599 0038 9B00     		lsls	r3, r3, #2
 1600 003a 07F12802 		add	r2, r7, #40
 1601 003e 1344     		add	r3, r3, r2
 1602 0040 53F8141C 		ldr	r1, [r3, #-20]
 1603 0044 7B6A     		ldr	r3, [r7, #36]
 1604 0046 5A1C     		adds	r2, r3, #1
 1605 0048 7A62     		str	r2, [r7, #36]
 1606 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1607 004c 0846     		mov	r0, r1
 1608 004e 1946     		mov	r1, r3
 1609 0050 FFF7FEFF 		bl	LPUART_transmit_char
 1610              	.L98:
 293:../src/main.c **** 	while(p<end){
 1611              		.loc 1 293 0
 1612 0054 7A6A     		ldr	r2, [r7, #36]
 1613 0056 3B6A     		ldr	r3, [r7, #32]
 1614 0058 9A42     		cmp	r2, r3
 1615 005a ECD3     		bcc	.L99
 295:../src/main.c **** 	}
 296:../src/main.c **** 	if(port==UART_RS485)rs485_dir(0);
 1616              		.loc 1 296 0
 1617 005c FB68     		ldr	r3, [r7, #12]
 1618 005e 002B     		cmp	r3, #0
 1619 0060 02D1     		bne	.L100
 1620              		.loc 1 296 0 is_stmt 0 discriminator 1
 1621 0062 0020     		movs	r0, #0
 1622 0064 FFF7FEFF 		bl	rs485_dir
 1623              	.L100:
 297:../src/main.c **** 	taskEXIT_CRITICAL();
 1624              		.loc 1 297 0 is_stmt 1
 1625 0068 FFF7FEFF 		bl	vPortExitCritical
 298:../src/main.c **** }
 1626              		.loc 1 298 0
 1627 006c 2837     		adds	r7, r7, #40
 1628              		.cfi_def_cfa_offset 8
 1629 006e BD46     		mov	sp, r7
 1630              		.cfi_def_cfa_register 13
 1631              		@ sp needed
 1632 0070 80BD     		pop	{r7, pc}
 1633              	.L102:
 1634 0072 00BF     		.align	2
 1635              	.L101:
 1636 0074 9C020000 		.word	.LC0
 1637              		.cfi_endproc
 1638              	.LFE18:
 1640              		.section	.rodata
 1641              		.align	2
 1642              	.LC29:
 1643 02a8 55415254 		.ascii	"UART%d send message\012\000"
 1643      25642073 
 1643      656E6420 
 1643      6D657373 
 1643      6167650A 
 1644 02bd 000000   		.align	2
 1645              	.LC30:
 1646 02c0 24245445 		.ascii	"$$TEST$$\012\000"
 1646      53542424 
 1646      0A00
 1647 02ca 0000     		.align	2
 1648              	.LC31:
 1649 02cc 55415254 		.ascii	"UART%d wait data.\012\000"
 1649      25642077 
 1649      61697420 
 1649      64617461 
 1649      2E0A00
 1650 02df 00       		.align	2
 1651              	.LC32:
 1652 02e0 55415254 		.ascii	"UART%d get message: %s\012\000"
 1652      25642067 
 1652      6574206D 
 1652      65737361 
 1652      67653A20 
 1653              		.section	.text.uart_proc,"ax",%progbits
 1654              		.align	2
 1655              		.thumb
 1656              		.thumb_func
 1658              	uart_proc:
 1659              	.LFB19:
 299:../src/main.c **** //static void test_uart_loop(void *p)
 300:../src/main.c **** //{
 301:../src/main.c **** //	uartQueueTbl[1] = xQueueCreate(128, sizeof(uint8_t));
 302:../src/main.c **** //	os_trace("UART%d send message\n",1);
 303:../src/main.c **** //	uart_puts(1, "$$TEST$$\n");
 304:../src/main.c **** //	os_sleep_ms(1000);
 305:../src/main.c **** //	char buf[64];
 306:../src/main.c **** //	uart_gets_timeout(1, buf, 64, 1000);//(1, buf, 64);
 307:../src/main.c **** //	os_trace("UART%d get message: %s\n",1,buf);
 308:../src/main.c **** //	os_suspend();
 309:../src/main.c **** //}
 310:../src/main.c **** static void uart_proc(void *p)
 311:../src/main.c **** {
 1660              		.loc 1 311 0
 1661              		.cfi_startproc
 1662              		@ args = 0, pretend = 0, frame = 80
 1663              		@ frame_needed = 1, uses_anonymous_args = 0
 1664 0000 80B5     		push	{r7, lr}
 1665              		.cfi_def_cfa_offset 8
 1666              		.cfi_offset 7, -8
 1667              		.cfi_offset 14, -4
 1668 0002 94B0     		sub	sp, sp, #80
 1669              		.cfi_def_cfa_offset 88
 1670 0004 00AF     		add	r7, sp, #0
 1671              		.cfi_def_cfa_register 7
 1672 0006 7860     		str	r0, [r7, #4]
 312:../src/main.c **** 	struct UartParamSt* param = (struct UartParamSt*)p;
 1673              		.loc 1 312 0
 1674 0008 7B68     		ldr	r3, [r7, #4]
 1675 000a BB64     		str	r3, [r7, #72]
 313:../src/main.c **** 	if(param->tr=='t'){
 1676              		.loc 1 313 0
 1677 000c BB6C     		ldr	r3, [r7, #72]
 1678 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1679 0010 742B     		cmp	r3, #116
 1680 0012 19D1     		bne	.L104
 1681              	.LBB10:
 314:../src/main.c **** 		for(int i=0;i<10;i++){
 1682              		.loc 1 314 0
 1683 0014 0023     		movs	r3, #0
 1684 0016 FB64     		str	r3, [r7, #76]
 1685 0018 12E0     		b	.L105
 1686              	.L106:
 315:../src/main.c **** 			os_trace("UART%d send message\n",param->port);
 1687              		.loc 1 315 0 discriminator 3
 1688 001a BB6C     		ldr	r3, [r7, #72]
 1689 001c 5B68     		ldr	r3, [r3, #4]
 1690 001e 1A48     		ldr	r0, .L109
 1691 0020 1946     		mov	r1, r3
 1692 0022 FFF7FEFF 		bl	os_trace
 316:../src/main.c **** 			uart_puts(param->port, "$$TEST$$\n");
 1693              		.loc 1 316 0 discriminator 3
 1694 0026 BB6C     		ldr	r3, [r7, #72]
 1695 0028 5B68     		ldr	r3, [r3, #4]
 1696 002a 1846     		mov	r0, r3
 1697 002c 1749     		ldr	r1, .L109+4
 1698 002e FFF7FEFF 		bl	uart_puts
 317:../src/main.c **** 			os_sleep_ms(1000);
 1699              		.loc 1 317 0 discriminator 3
 1700 0032 4FF47A70 		mov	r0, #1000
 1701 0036 FFF7FEFF 		bl	os_sleep_ms
 314:../src/main.c **** 			os_trace("UART%d send message\n",param->port);
 1702              		.loc 1 314 0 discriminator 3
 1703 003a FB6C     		ldr	r3, [r7, #76]
 1704 003c 0133     		adds	r3, r3, #1
 1705 003e FB64     		str	r3, [r7, #76]
 1706              	.L105:
 314:../src/main.c **** 			os_trace("UART%d send message\n",param->port);
 1707              		.loc 1 314 0 is_stmt 0 discriminator 1
 1708 0040 FB6C     		ldr	r3, [r7, #76]
 1709 0042 092B     		cmp	r3, #9
 1710 0044 E9DD     		ble	.L106
 1711              	.LBE10:
 1712 0046 1BE0     		b	.L108
 1713              	.L104:
 1714              	.LBB11:
 318:../src/main.c **** 		}
 319:../src/main.c **** 	}else{
 320:../src/main.c **** 		for(;;){
 321:../src/main.c **** 			char buf[64];
 322:../src/main.c **** 			os_trace("UART%d wait data.\n",param->port);
 1715              		.loc 1 322 0 is_stmt 1 discriminator 1
 1716 0048 BB6C     		ldr	r3, [r7, #72]
 1717 004a 5B68     		ldr	r3, [r3, #4]
 1718 004c 1048     		ldr	r0, .L109+8
 1719 004e 1946     		mov	r1, r3
 1720 0050 FFF7FEFF 		bl	os_trace
 323:../src/main.c **** 			uart_gets_blocked(param->port, buf, 64);
 1721              		.loc 1 323 0 discriminator 1
 1722 0054 BB6C     		ldr	r3, [r7, #72]
 1723 0056 5A68     		ldr	r2, [r3, #4]
 1724 0058 07F10803 		add	r3, r7, #8
 1725 005c 1046     		mov	r0, r2
 1726 005e 1946     		mov	r1, r3
 1727 0060 4022     		movs	r2, #64
 1728 0062 FFF7FEFF 		bl	uart_gets_blocked
 324:../src/main.c **** 			os_trace("UART%d get message: %s\n",param->port,buf);
 1729              		.loc 1 324 0 discriminator 1
 1730 0066 BB6C     		ldr	r3, [r7, #72]
 1731 0068 5A68     		ldr	r2, [r3, #4]
 1732 006a 07F10803 		add	r3, r7, #8
 1733 006e 0948     		ldr	r0, .L109+12
 1734 0070 1146     		mov	r1, r2
 1735 0072 1A46     		mov	r2, r3
 1736 0074 FFF7FEFF 		bl	os_trace
 325:../src/main.c **** 			//param->test_rst = 1;
 326:../src/main.c **** 			os_sleep_ms(100);
 1737              		.loc 1 326 0 discriminator 1
 1738 0078 6420     		movs	r0, #100
 1739 007a FFF7FEFF 		bl	os_sleep_ms
 1740              	.LBE11:
 327:../src/main.c **** 		}
 1741              		.loc 1 327 0 discriminator 1
 1742 007e E3E7     		b	.L104
 1743              	.L108:
 328:../src/main.c **** 	}
 329:../src/main.c **** 
 330:../src/main.c **** }
 1744              		.loc 1 330 0
 1745 0080 5037     		adds	r7, r7, #80
 1746              		.cfi_def_cfa_offset 8
 1747 0082 BD46     		mov	sp, r7
 1748              		.cfi_def_cfa_register 13
 1749              		@ sp needed
 1750 0084 80BD     		pop	{r7, pc}
 1751              	.L110:
 1752 0086 00BF     		.align	2
 1753              	.L109:
 1754 0088 A8020000 		.word	.LC29
 1755 008c C0020000 		.word	.LC30
 1756 0090 CC020000 		.word	.LC31
 1757 0094 E0020000 		.word	.LC32
 1758              		.cfi_endproc
 1759              	.LFE19:
 1761              		.section	.rodata
 1762              		.align	2
 1763              	.LC33:
 1764 02f8 75617274 		.ascii	"uart_tx\000"
 1764      5F747800 
 1765              		.align	2
 1766              	.LC34:
 1767 0300 70645452 		.ascii	"pdTRUE==xTaskCreate(uart_proc,\"uart_tx\", 2048/4, "
 1767      55453D3D 
 1767      78546173 
 1767      6B437265 
 1767      61746528 
 1768 0331 26747820 		.ascii	"&tx , 5, &tx.handle)\000"
 1768      2C20352C 
 1768      20267478 
 1768      2E68616E 
 1768      646C6529 
 1769 0346 0000     		.align	2
 1770              	.LC35:
 1771 0348 75617274 		.ascii	"uart_rx\000"
 1771      5F727800 
 1772              		.align	2
 1773              	.LC36:
 1774 0350 70645452 		.ascii	"pdTRUE==xTaskCreate(uart_proc,\"uart_rx\", 2048/4, "
 1774      55453D3D 
 1774      78546173 
 1774      6B437265 
 1774      61746528 
 1775 0381 26727820 		.ascii	"&rx , 5, &rx.handle)\000"
 1775      2C20352C 
 1775      20267278 
 1775      2E68616E 
 1775      646C6529 
 1776 0396 0000     		.align	2
 1777              	.LC37:
 1778 0398 55415254 		.ascii	"UART test complete\012\000"
 1778      20746573 
 1778      7420636F 
 1778      6D706C65 
 1778      74650A00 
 1779              		.align	2
 1780              	.LC38:
 1781 03ac 55415254 		.ascii	"UART test has FAIL***\012\000"
 1781      20746573 
 1781      74206861 
 1781      73204641 
 1781      494C2A2A 
 1782              		.section	.text.test_uart,"ax",%progbits
 1783              		.align	2
 1784              		.thumb
 1785              		.thumb_func
 1787              	test_uart:
 1788              	.LFB20:
 331:../src/main.c **** 
 332:../src/main.c **** static int test_uart()
 333:../src/main.c **** {
 1789              		.loc 1 333 0
 1790              		.cfi_startproc
 1791              		@ args = 0, pretend = 0, frame = 48
 1792              		@ frame_needed = 1, uses_anonymous_args = 0
 1793 0000 90B5     		push	{r4, r7, lr}
 1794              		.cfi_def_cfa_offset 12
 1795              		.cfi_offset 4, -12
 1796              		.cfi_offset 7, -8
 1797              		.cfi_offset 14, -4
 1798 0002 91B0     		sub	sp, sp, #68
 1799              		.cfi_def_cfa_offset 80
 1800 0004 04AF     		add	r7, sp, #16
 1801              		.cfi_def_cfa 7, 64
 1802              	.LBB12:
 334:../src/main.c **** 	uint32_t testFlag;
 335:../src/main.c **** 	for(int i=0;i<=0;i++){
 1803              		.loc 1 335 0
 1804 0006 0023     		movs	r3, #0
 1805 0008 BB62     		str	r3, [r7, #40]
 1806 000a 83E0     		b	.L112
 1807              	.L122:
 1808              	.LBB13:
 336:../src/main.c **** 		struct UartParamSt tx = {
 1809              		.loc 1 336 0
 1810 000c 07F11403 		add	r3, r7, #20
 1811 0010 0022     		movs	r2, #0
 1812 0012 1A60     		str	r2, [r3]
 1813 0014 0433     		adds	r3, r3, #4
 1814 0016 0022     		movs	r2, #0
 1815 0018 1A60     		str	r2, [r3]
 1816 001a 0433     		adds	r3, r3, #4
 1817 001c 0022     		movs	r2, #0
 1818 001e 1A60     		str	r2, [r3]
 1819 0020 0433     		adds	r3, r3, #4
 1820 0022 0022     		movs	r2, #0
 1821 0024 1A60     		str	r2, [r3]
 1822 0026 0433     		adds	r3, r3, #4
 1823 0028 7423     		movs	r3, #116
 1824 002a 3B75     		strb	r3, [r7, #20]
 1825 002c BB6A     		ldr	r3, [r7, #40]
 1826 002e BB61     		str	r3, [r7, #24]
 337:../src/main.c **** 			.tr = 't',
 338:../src/main.c **** 			.port = i,
 339:../src/main.c **** 			.test_rst = 0,
 340:../src/main.c **** 		};
 341:../src/main.c **** 		OS_ASSERT(pdTRUE==xTaskCreate(uart_proc,"uart_tx", 2048/4, &tx , 5, &tx.handle));
 1827              		.loc 1 341 0
 1828 0030 07F11404 		add	r4, r7, #20
 1829 0034 0523     		movs	r3, #5
 1830 0036 0093     		str	r3, [sp]
 1831 0038 07F11403 		add	r3, r7, #20
 1832 003c 0833     		adds	r3, r3, #8
 1833 003e 0193     		str	r3, [sp, #4]
 1834 0040 0023     		movs	r3, #0
 1835 0042 0293     		str	r3, [sp, #8]
 1836 0044 0023     		movs	r3, #0
 1837 0046 0393     		str	r3, [sp, #12]
 1838 0048 3D48     		ldr	r0, .L125
 1839 004a 3E49     		ldr	r1, .L125+4
 1840 004c 4FF40072 		mov	r2, #512
 1841 0050 2346     		mov	r3, r4
 1842 0052 FFF7FEFF 		bl	xTaskGenericCreate
 1843 0056 0346     		mov	r3, r0
 1844 0058 012B     		cmp	r3, #1
 1845 005a 05D0     		beq	.L113
 1846              		.loc 1 341 0 is_stmt 0 discriminator 1
 1847 005c 3A48     		ldr	r0, .L125+8
 1848 005e 3B49     		ldr	r1, .L125+12
 1849 0060 3B4A     		ldr	r2, .L125+16
 1850 0062 FFF7FEFF 		bl	os_trace
 1851              	.L114:
 1852 0066 FEE7     		b	.L114
 1853              	.L113:
 342:../src/main.c **** 		struct UartParamSt rx = {
 1854              		.loc 1 342 0 is_stmt 1
 1855 0068 3B1D     		adds	r3, r7, #4
 1856 006a 0022     		movs	r2, #0
 1857 006c 1A60     		str	r2, [r3]
 1858 006e 0433     		adds	r3, r3, #4
 1859 0070 0022     		movs	r2, #0
 1860 0072 1A60     		str	r2, [r3]
 1861 0074 0433     		adds	r3, r3, #4
 1862 0076 0022     		movs	r2, #0
 1863 0078 1A60     		str	r2, [r3]
 1864 007a 0433     		adds	r3, r3, #4
 1865 007c 0022     		movs	r2, #0
 1866 007e 1A60     		str	r2, [r3]
 1867 0080 0433     		adds	r3, r3, #4
 1868 0082 7223     		movs	r3, #114
 1869 0084 3B71     		strb	r3, [r7, #4]
 1870 0086 BB6A     		ldr	r3, [r7, #40]
 1871 0088 BB60     		str	r3, [r7, #8]
 343:../src/main.c **** 			.tr = 'r',
 344:../src/main.c **** 			.port = i,
 345:../src/main.c **** 			.test_rst = 0,
 346:../src/main.c **** 		};
 347:../src/main.c **** 		OS_ASSERT(pdTRUE==xTaskCreate(uart_proc,"uart_rx", 2048/4, &rx , 5, &rx.handle));
 1872              		.loc 1 347 0
 1873 008a 3C1D     		adds	r4, r7, #4
 1874 008c 0523     		movs	r3, #5
 1875 008e 0093     		str	r3, [sp]
 1876 0090 3B1D     		adds	r3, r7, #4
 1877 0092 0833     		adds	r3, r3, #8
 1878 0094 0193     		str	r3, [sp, #4]
 1879 0096 0023     		movs	r3, #0
 1880 0098 0293     		str	r3, [sp, #8]
 1881 009a 0023     		movs	r3, #0
 1882 009c 0393     		str	r3, [sp, #12]
 1883 009e 2848     		ldr	r0, .L125
 1884 00a0 2C49     		ldr	r1, .L125+20
 1885 00a2 4FF40072 		mov	r2, #512
 1886 00a6 2346     		mov	r3, r4
 1887 00a8 FFF7FEFF 		bl	xTaskGenericCreate
 1888 00ac 0346     		mov	r3, r0
 1889 00ae 012B     		cmp	r3, #1
 1890 00b0 05D0     		beq	.L115
 1891              		.loc 1 347 0 is_stmt 0 discriminator 1
 1892 00b2 2548     		ldr	r0, .L125+8
 1893 00b4 2549     		ldr	r1, .L125+12
 1894 00b6 284A     		ldr	r2, .L125+24
 1895 00b8 FFF7FEFF 		bl	os_trace
 1896              	.L116:
 1897              		.loc 1 347 0 discriminator 2
 1898 00bc FEE7     		b	.L116
 1899              	.L115:
 1900              	.LBB14:
 348:../src/main.c **** 
 349:../src/main.c **** 		for(int i=0;i<10;i++){
 1901              		.loc 1 349 0 is_stmt 1
 1902 00be 0023     		movs	r3, #0
 1903 00c0 7B62     		str	r3, [r7, #36]
 1904 00c2 0AE0     		b	.L117
 1905              	.L120:
 350:../src/main.c **** 			if(rx.test_rst)
 1906              		.loc 1 350 0
 1907 00c4 3B69     		ldr	r3, [r7, #16]
 1908 00c6 002B     		cmp	r3, #0
 1909 00c8 00D0     		beq	.L118
 351:../src/main.c **** 				break;
 1910              		.loc 1 351 0
 1911 00ca 09E0     		b	.L119
 1912              	.L118:
 352:../src/main.c **** 			os_sleep_ms(1000);
 1913              		.loc 1 352 0 discriminator 2
 1914 00cc 4FF47A70 		mov	r0, #1000
 1915 00d0 FFF7FEFF 		bl	os_sleep_ms
 349:../src/main.c **** 			if(rx.test_rst)
 1916              		.loc 1 349 0 discriminator 2
 1917 00d4 7B6A     		ldr	r3, [r7, #36]
 1918 00d6 0133     		adds	r3, r3, #1
 1919 00d8 7B62     		str	r3, [r7, #36]
 1920              	.L117:
 349:../src/main.c **** 			if(rx.test_rst)
 1921              		.loc 1 349 0 is_stmt 0 discriminator 1
 1922 00da 7B6A     		ldr	r3, [r7, #36]
 1923 00dc 092B     		cmp	r3, #9
 1924 00de F1DD     		ble	.L120
 1925              	.L119:
 1926              	.LBE14:
 353:../src/main.c **** 		}
 354:../src/main.c **** 		if(rx.test_rst){
 1927              		.loc 1 354 0 is_stmt 1
 1928 00e0 3B69     		ldr	r3, [r7, #16]
 1929 00e2 002B     		cmp	r3, #0
 1930 00e4 07D0     		beq	.L121
 355:../src/main.c **** 			testFlag |= 1<<rx.port;
 1931              		.loc 1 355 0
 1932 00e6 BB68     		ldr	r3, [r7, #8]
 1933 00e8 0122     		movs	r2, #1
 1934 00ea 02FA03F3 		lsl	r3, r2, r3
 1935 00ee 1A46     		mov	r2, r3
 1936 00f0 FB6A     		ldr	r3, [r7, #44]
 1937 00f2 1343     		orrs	r3, r3, r2
 1938 00f4 FB62     		str	r3, [r7, #44]
 1939              	.L121:
 356:../src/main.c **** 		}
 357:../src/main.c **** 
 358:../src/main.c **** 		vTaskDelete(tx.handle);
 1940              		.loc 1 358 0 discriminator 2
 1941 00f6 FB69     		ldr	r3, [r7, #28]
 1942 00f8 1846     		mov	r0, r3
 1943 00fa FFF7FEFF 		bl	vTaskDelete
 359:../src/main.c **** 		vTaskDelete(rx.handle);
 1944              		.loc 1 359 0 discriminator 2
 1945 00fe FB68     		ldr	r3, [r7, #12]
 1946 0100 1846     		mov	r0, r3
 1947 0102 FFF7FEFF 		bl	vTaskDelete
 360:../src/main.c **** 		os_sleep_ms(500);
 1948              		.loc 1 360 0 discriminator 2
 1949 0106 4FF4FA70 		mov	r0, #500
 1950 010a FFF7FEFF 		bl	os_sleep_ms
 1951              	.LBE13:
 335:../src/main.c **** 		struct UartParamSt tx = {
 1952              		.loc 1 335 0 discriminator 2
 1953 010e BB6A     		ldr	r3, [r7, #40]
 1954 0110 0133     		adds	r3, r3, #1
 1955 0112 BB62     		str	r3, [r7, #40]
 1956              	.L112:
 335:../src/main.c **** 		struct UartParamSt tx = {
 1957              		.loc 1 335 0 is_stmt 0 discriminator 1
 1958 0114 BB6A     		ldr	r3, [r7, #40]
 1959 0116 002B     		cmp	r3, #0
 1960 0118 7FF778AF 		ble	.L122
 1961              	.LBE12:
 361:../src/main.c **** 	}
 362:../src/main.c **** 
 363:../src/main.c **** 	if(testFlag == 0b111){
 1962              		.loc 1 363 0 is_stmt 1
 1963 011c FB6A     		ldr	r3, [r7, #44]
 1964 011e 072B     		cmp	r3, #7
 1965 0120 04D1     		bne	.L123
 364:../src/main.c **** 		os_trace("UART test complete\n");
 1966              		.loc 1 364 0
 1967 0122 0E48     		ldr	r0, .L125+28
 1968 0124 FFF7FEFF 		bl	os_trace
 365:../src/main.c **** 		return 0;
 1969              		.loc 1 365 0
 1970 0128 0023     		movs	r3, #0
 1971 012a 04E0     		b	.L124
 1972              	.L123:
 366:../src/main.c **** 	}else{
 367:../src/main.c **** 		os_trace("UART test has FAIL***\n");
 1973              		.loc 1 367 0
 1974 012c 0C48     		ldr	r0, .L125+32
 1975 012e FFF7FEFF 		bl	os_trace
 368:../src/main.c **** 		return -1;
 1976              		.loc 1 368 0
 1977 0132 4FF0FF33 		mov	r3, #-1
 1978              	.L124:
 369:../src/main.c **** 	}
 370:../src/main.c **** }
 1979              		.loc 1 370 0
 1980 0136 1846     		mov	r0, r3
 1981 0138 3437     		adds	r7, r7, #52
 1982              		.cfi_def_cfa_offset 12
 1983 013a BD46     		mov	sp, r7
 1984              		.cfi_def_cfa_register 13
 1985              		@ sp needed
 1986 013c 90BD     		pop	{r4, r7, pc}
 1987              	.L126:
 1988 013e 00BF     		.align	2
 1989              	.L125:
 1990 0140 00000000 		.word	uart_proc
 1991 0144 F8020000 		.word	.LC33
 1992 0148 60010000 		.word	.LC20
 1993 014c 00000000 		.word	__FUNCTION__.6561
 1994 0150 00030000 		.word	.LC34
 1995 0154 48030000 		.word	.LC35
 1996 0158 50030000 		.word	.LC36
 1997 015c 98030000 		.word	.LC37
 1998 0160 AC030000 		.word	.LC38
 1999              		.cfi_endproc
 2000              	.LFE20:
 2002              		.section	.text.nic_io_init,"ax",%progbits
 2003              		.align	2
 2004              		.global	nic_io_init
 2005              		.thumb
 2006              		.thumb_func
 2008              	nic_io_init:
 2009              	.LFB21:
 371:../src/main.c **** #define NIC_RST_CLR()   		PTD-> PCOR |= 1<<16
 372:../src/main.c **** #define NIC_RST_SET()    		PTD-> PSOR |= 1<<16
 373:../src/main.c **** #define NIC_POWER_ON_CLR()    		PTD-> PCOR |= 1<<15
 374:../src/main.c **** #define NIC_POWER_ON_SET()   		PTD-> PSOR |= 1<<15
 375:../src/main.c **** #define NIC_VBAT_CLR()				PTD-> PCOR |= 1<<11
 376:../src/main.c **** #define NIC_VBAT_SET()				PTD-> PSOR |= 1<<11
 377:../src/main.c **** void nic_io_init(){
 2010              		.loc 1 377 0
 2011              		.cfi_startproc
 2012              		@ args = 0, pretend = 0, frame = 0
 2013              		@ frame_needed = 1, uses_anonymous_args = 0
 2014              		@ link register save eliminated.
 2015 0000 80B4     		push	{r7}
 2016              		.cfi_def_cfa_offset 4
 2017              		.cfi_offset 7, -4
 2018 0002 00AF     		add	r7, sp, #0
 2019              		.cfi_def_cfa_register 7
 378:../src/main.c **** 	PCC->PCCn[PCC_PORTD_INDEX] |= PCC_PCCn_CGC_MASK; /* Enable clock for PORTC */
 2020              		.loc 1 378 0
 2021 0004 204A     		ldr	r2, .L128
 2022 0006 204B     		ldr	r3, .L128
 2023 0008 D3F83031 		ldr	r3, [r3, #304]
 2024 000c 43F08043 		orr	r3, r3, #1073741824
 2025 0010 C2F83031 		str	r3, [r2, #304]
 379:../src/main.c **** 	PORTD->PCR[15] |= PORT_PCR_MUX(1); /* Port C6: MUX = ALT2,UART1 TX */
 2026              		.loc 1 379 0
 2027 0014 1D4A     		ldr	r2, .L128+4
 2028 0016 1D4B     		ldr	r3, .L128+4
 2029 0018 DB6B     		ldr	r3, [r3, #60]
 2030 001a 43F48073 		orr	r3, r3, #256
 2031 001e D363     		str	r3, [r2, #60]
 380:../src/main.c **** 	PORTD->PCR[16] |= PORT_PCR_MUX(1); /* Port C7: MUX = ALT2,UART1 RX */
 2032              		.loc 1 380 0
 2033 0020 1A4A     		ldr	r2, .L128+4
 2034 0022 1A4B     		ldr	r3, .L128+4
 2035 0024 1B6C     		ldr	r3, [r3, #64]
 2036 0026 43F48073 		orr	r3, r3, #256
 2037 002a 1364     		str	r3, [r2, #64]
 381:../src/main.c **** 	PORTD->PCR[11] |= PORT_PCR_MUX(1); /* Port C7: MUX = ALT2,UART1 RX */
 2038              		.loc 1 381 0
 2039 002c 174A     		ldr	r2, .L128+4
 2040 002e 174B     		ldr	r3, .L128+4
 2041 0030 DB6A     		ldr	r3, [r3, #44]
 2042 0032 43F48073 		orr	r3, r3, #256
 2043 0036 D362     		str	r3, [r2, #44]
 382:../src/main.c **** 	PTD->PDDR |= 1 << 15;
 2044              		.loc 1 382 0
 2045 0038 154A     		ldr	r2, .L128+8
 2046 003a 154B     		ldr	r3, .L128+8
 2047 003c 5B69     		ldr	r3, [r3, #20]
 2048 003e 43F40043 		orr	r3, r3, #32768
 2049 0042 5361     		str	r3, [r2, #20]
 383:../src/main.c **** 	PTD->PDDR |= 1 << 16;
 2050              		.loc 1 383 0
 2051 0044 124A     		ldr	r2, .L128+8
 2052 0046 124B     		ldr	r3, .L128+8
 2053 0048 5B69     		ldr	r3, [r3, #20]
 2054 004a 43F48033 		orr	r3, r3, #65536
 2055 004e 5361     		str	r3, [r2, #20]
 384:../src/main.c **** 	PTD->PDDR |= 1 << 11;
 2056              		.loc 1 384 0
 2057 0050 0F4A     		ldr	r2, .L128+8
 2058 0052 0F4B     		ldr	r3, .L128+8
 2059 0054 5B69     		ldr	r3, [r3, #20]
 2060 0056 43F40063 		orr	r3, r3, #2048
 2061 005a 5361     		str	r3, [r2, #20]
 385:../src/main.c **** 	NIC_RST_CLR();
 2062              		.loc 1 385 0
 2063 005c 0C4A     		ldr	r2, .L128+8
 2064 005e 0C4B     		ldr	r3, .L128+8
 2065 0060 9B68     		ldr	r3, [r3, #8]
 2066 0062 43F48033 		orr	r3, r3, #65536
 2067 0066 9360     		str	r3, [r2, #8]
 386:../src/main.c **** 	NIC_POWER_ON_CLR();
 2068              		.loc 1 386 0
 2069 0068 094A     		ldr	r2, .L128+8
 2070 006a 094B     		ldr	r3, .L128+8
 2071 006c 9B68     		ldr	r3, [r3, #8]
 2072 006e 43F40043 		orr	r3, r3, #32768
 2073 0072 9360     		str	r3, [r2, #8]
 387:../src/main.c **** 	NIC_VBAT_CLR();
 2074              		.loc 1 387 0
 2075 0074 064A     		ldr	r2, .L128+8
 2076 0076 064B     		ldr	r3, .L128+8
 2077 0078 9B68     		ldr	r3, [r3, #8]
 2078 007a 43F40063 		orr	r3, r3, #2048
 2079 007e 9360     		str	r3, [r2, #8]
 388:../src/main.c **** }
 2080              		.loc 1 388 0
 2081 0080 BD46     		mov	sp, r7
 2082              		.cfi_def_cfa_register 13
 2083              		@ sp needed
 2084 0082 5DF8047B 		ldr	r7, [sp], #4
 2085              		.cfi_restore 7
 2086              		.cfi_def_cfa_offset 0
 2087 0086 7047     		bx	lr
 2088              	.L129:
 2089              		.align	2
 2090              	.L128:
 2091 0088 00500640 		.word	1074155520
 2092 008c 00C00440 		.word	1074053120
 2093 0090 C0F00F40 		.word	1074786496
 2094              		.cfi_endproc
 2095              	.LFE21:
 2097              		.section	.text.nic_power_onoff,"ax",%progbits
 2098              		.align	2
 2099              		.global	nic_power_onoff
 2100              		.thumb
 2101              		.thumb_func
 2103              	nic_power_onoff:
 2104              	.LFB22:
 389:../src/main.c **** void nic_power_onoff(void)
 390:../src/main.c **** {
 2105              		.loc 1 390 0
 2106              		.cfi_startproc
 2107              		@ args = 0, pretend = 0, frame = 0
 2108              		@ frame_needed = 1, uses_anonymous_args = 0
 2109 0000 80B5     		push	{r7, lr}
 2110              		.cfi_def_cfa_offset 8
 2111              		.cfi_offset 7, -8
 2112              		.cfi_offset 14, -4
 2113 0002 00AF     		add	r7, sp, #0
 2114              		.cfi_def_cfa_register 7
 391:../src/main.c **** 	NIC_VBAT_CLR();
 2115              		.loc 1 391 0
 2116 0004 174A     		ldr	r2, .L131
 2117 0006 174B     		ldr	r3, .L131
 2118 0008 9B68     		ldr	r3, [r3, #8]
 2119 000a 43F40063 		orr	r3, r3, #2048
 2120 000e 9360     		str	r3, [r2, #8]
 392:../src/main.c **** 	os_sleep_ms(500);		/* 500 ms might be ok */
 2121              		.loc 1 392 0
 2122 0010 4FF4FA70 		mov	r0, #500
 2123 0014 FFF7FEFF 		bl	os_sleep_ms
 393:../src/main.c **** 	NIC_VBAT_SET();
 2124              		.loc 1 393 0
 2125 0018 124A     		ldr	r2, .L131
 2126 001a 124B     		ldr	r3, .L131
 2127 001c 5B68     		ldr	r3, [r3, #4]
 2128 001e 43F40063 		orr	r3, r3, #2048
 2129 0022 5360     		str	r3, [r2, #4]
 394:../src/main.c **** 	NIC_POWER_ON_CLR();
 2130              		.loc 1 394 0
 2131 0024 0F4A     		ldr	r2, .L131
 2132 0026 0F4B     		ldr	r3, .L131
 2133 0028 9B68     		ldr	r3, [r3, #8]
 2134 002a 43F40043 		orr	r3, r3, #32768
 2135 002e 9360     		str	r3, [r2, #8]
 395:../src/main.c **** 	os_sleep_ms(300);
 2136              		.loc 1 395 0
 2137 0030 4FF49670 		mov	r0, #300
 2138 0034 FFF7FEFF 		bl	os_sleep_ms
 396:../src/main.c **** 	NIC_POWER_ON_SET();		/* ____--2s--___ */
 2139              		.loc 1 396 0
 2140 0038 0A4A     		ldr	r2, .L131
 2141 003a 0A4B     		ldr	r3, .L131
 2142 003c 5B68     		ldr	r3, [r3, #4]
 2143 003e 43F40043 		orr	r3, r3, #32768
 2144 0042 5360     		str	r3, [r2, #4]
 397:../src/main.c **** 	os_sleep_ms(3000);
 2145              		.loc 1 397 0
 2146 0044 40F6B830 		movw	r0, #3000
 2147 0048 FFF7FEFF 		bl	os_sleep_ms
 398:../src/main.c **** 	NIC_POWER_ON_CLR();
 2148              		.loc 1 398 0
 2149 004c 054A     		ldr	r2, .L131
 2150 004e 054B     		ldr	r3, .L131
 2151 0050 9B68     		ldr	r3, [r3, #8]
 2152 0052 43F40043 		orr	r3, r3, #32768
 2153 0056 9360     		str	r3, [r2, #8]
 399:../src/main.c **** 	os_sleep_ms(300);
 2154              		.loc 1 399 0
 2155 0058 4FF49670 		mov	r0, #300
 2156 005c FFF7FEFF 		bl	os_sleep_ms
 400:../src/main.c **** }
 2157              		.loc 1 400 0
 2158 0060 80BD     		pop	{r7, pc}
 2159              	.L132:
 2160 0062 00BF     		.align	2
 2161              	.L131:
 2162 0064 C0F00F40 		.word	1074786496
 2163              		.cfi_endproc
 2164              	.LFE22:
 2166              		.section	.text.nic_reset,"ax",%progbits
 2167              		.align	2
 2168              		.global	nic_reset
 2169              		.thumb
 2170              		.thumb_func
 2172              	nic_reset:
 2173              	.LFB23:
 401:../src/main.c **** void nic_reset(void)
 402:../src/main.c **** {
 2174              		.loc 1 402 0
 2175              		.cfi_startproc
 2176              		@ args = 0, pretend = 0, frame = 0
 2177              		@ frame_needed = 1, uses_anonymous_args = 0
 2178 0000 80B5     		push	{r7, lr}
 2179              		.cfi_def_cfa_offset 8
 2180              		.cfi_offset 7, -8
 2181              		.cfi_offset 14, -4
 2182 0002 00AF     		add	r7, sp, #0
 2183              		.cfi_def_cfa_register 7
 403:../src/main.c **** 	NIC_RST_CLR();
 2184              		.loc 1 403 0
 2185 0004 0F4A     		ldr	r2, .L134
 2186 0006 0F4B     		ldr	r3, .L134
 2187 0008 9B68     		ldr	r3, [r3, #8]
 2188 000a 43F48033 		orr	r3, r3, #65536
 2189 000e 9360     		str	r3, [r2, #8]
 404:../src/main.c **** 	os_sleep_ms(300);
 2190              		.loc 1 404 0
 2191 0010 4FF49670 		mov	r0, #300
 2192 0014 FFF7FEFF 		bl	os_sleep_ms
 405:../src/main.c **** 	NIC_RST_SET();		/* ____--600ms--___ */
 2193              		.loc 1 405 0
 2194 0018 0A4A     		ldr	r2, .L134
 2195 001a 0A4B     		ldr	r3, .L134
 2196 001c 5B68     		ldr	r3, [r3, #4]
 2197 001e 43F48033 		orr	r3, r3, #65536
 2198 0022 5360     		str	r3, [r2, #4]
 406:../src/main.c **** 	os_sleep_ms(800);
 2199              		.loc 1 406 0
 2200 0024 4FF44870 		mov	r0, #800
 2201 0028 FFF7FEFF 		bl	os_sleep_ms
 407:../src/main.c **** 	NIC_RST_CLR();
 2202              		.loc 1 407 0
 2203 002c 054A     		ldr	r2, .L134
 2204 002e 054B     		ldr	r3, .L134
 2205 0030 9B68     		ldr	r3, [r3, #8]
 2206 0032 43F48033 		orr	r3, r3, #65536
 2207 0036 9360     		str	r3, [r2, #8]
 408:../src/main.c **** 	os_sleep_ms(300);
 2208              		.loc 1 408 0
 2209 0038 4FF49670 		mov	r0, #300
 2210 003c FFF7FEFF 		bl	os_sleep_ms
 409:../src/main.c **** }
 2211              		.loc 1 409 0
 2212 0040 80BD     		pop	{r7, pc}
 2213              	.L135:
 2214 0042 00BF     		.align	2
 2215              	.L134:
 2216 0044 C0F00F40 		.word	1074786496
 2217              		.cfi_endproc
 2218              	.LFE23:
 2220              		.section	.rodata
 2221 03c3 00       		.align	2
 2222              	.LC39:
 2223 03c4 2B435351 		.ascii	"+CSQ: %d,%d\000"
 2223      3A202564 
 2223      2C256400 
 2224              		.section	.text.at_csq.6592,"ax",%progbits
 2225              		.align	2
 2226              		.thumb
 2227              		.thumb_func
 2229              	at_csq.6592:
 2230              	.LFB25:
 410:../src/main.c **** static int test_4g()
 411:../src/main.c **** {
 412:../src/main.c **** 	int test_trys =3;
 413:../src/main.c **** 	test_start:
 414:../src/main.c **** 	nic_power_onoff();
 415:../src/main.c **** #define UART_4G_BUFSIZE		(128)
 416:../src/main.c **** 	char buf[UART_4G_BUFSIZE];
 417:../src/main.c **** 	char imsi[16];
 418:../src/main.c **** 	const char *apn = "CMNET";
 419:../src/main.c **** 	int sockid=1;
 420:../src/main.c **** 	uint16_t lcport = 5000;
 421:../src/main.c **** 	char *rmip = "180.89.58.27";
 422:../src/main.c **** 	uint16_t rmport = 9020;
 423:../src/main.c **** 	char lcip[16];
 424:../src/main.c **** 
 425:../src/main.c **** 	int at_csq(){
 2231              		.loc 1 425 0
 2232              		.cfi_startproc
 2233              		@ Nested: function declared inside another function.
 2234              		@ args = 0, pretend = 0, frame = 16
 2235              		@ frame_needed = 1, uses_anonymous_args = 0
 2236 0000 80B5     		push	{r7, lr}
 2237              		.cfi_def_cfa_offset 8
 2238              		.cfi_offset 7, -8
 2239              		.cfi_offset 14, -4
 2240 0002 84B0     		sub	sp, sp, #16
 2241              		.cfi_def_cfa_offset 24
 2242 0004 00AF     		add	r7, sp, #0
 2243              		.cfi_def_cfa_register 7
 2244 0006 6246     		mov	r2, ip
 426:../src/main.c **** 		int res;
 427:../src/main.c **** 		int a=0,b=0;
 2245              		.loc 1 427 0
 2246 0008 0023     		movs	r3, #0
 2247 000a BB60     		str	r3, [r7, #8]
 2248 000c 0023     		movs	r3, #0
 2249 000e 7B60     		str	r3, [r7, #4]
 428:../src/main.c **** 		res = sscanf(buf,"+CSQ: %d,%d",&a,&b);
 2250              		.loc 1 428 0
 2251 0010 02F13001 		add	r1, r2, #48
 2252 0014 07F10802 		add	r2, r7, #8
 2253 0018 3B1D     		adds	r3, r7, #4
 2254 001a 0846     		mov	r0, r1
 2255 001c 0A49     		ldr	r1, .L140
 2256 001e FFF7FEFF 		bl	sscanf
 2257 0022 F860     		str	r0, [r7, #12]
 429:../src/main.c **** 		if(res==2 &&(a>0 && a<99))
 2258              		.loc 1 429 0
 2259 0024 FB68     		ldr	r3, [r7, #12]
 2260 0026 022B     		cmp	r3, #2
 2261 0028 07D1     		bne	.L137
 2262              		.loc 1 429 0 is_stmt 0 discriminator 1
 2263 002a BB68     		ldr	r3, [r7, #8]
 2264 002c 002B     		cmp	r3, #0
 2265 002e 04DD     		ble	.L137
 2266              		.loc 1 429 0 discriminator 2
 2267 0030 BB68     		ldr	r3, [r7, #8]
 2268 0032 622B     		cmp	r3, #98
 2269 0034 01DC     		bgt	.L137
 430:../src/main.c **** 			return 0;
 2270              		.loc 1 430 0 is_stmt 1
 2271 0036 0023     		movs	r3, #0
 2272 0038 01E0     		b	.L139
 2273              	.L137:
 431:../src/main.c **** 		return -1;
 2274              		.loc 1 431 0
 2275 003a 4FF0FF33 		mov	r3, #-1
 2276              	.L139:
 432:../src/main.c **** 	}
 2277              		.loc 1 432 0 discriminator 1
 2278 003e 1846     		mov	r0, r3
 2279 0040 1037     		adds	r7, r7, #16
 2280              		.cfi_def_cfa_offset 8
 2281 0042 BD46     		mov	sp, r7
 2282              		.cfi_def_cfa_register 13
 2283              		@ sp needed
 2284 0044 80BD     		pop	{r7, pc}
 2285              	.L141:
 2286 0046 00BF     		.align	2
 2287              	.L140:
 2288 0048 C4030000 		.word	.LC39
 2289              		.cfi_endproc
 2290              	.LFE25:
 2292              		.section	.rodata
 2293              		.align	2
 2294              	.LTRAMP0:
 2295 03d0 DFF804C0 		ldr.w	ip, [pc, #4]
 2296 03d4 DFF804F0 		ldr.w	pc, [pc, #4]
 2297 03d8 00000000 		.word	0
 2298 03dc 00000000 		.word	0
 2299              		.global	__clear_cache
 2300              		.global	__clear_cache
 2301              		.global	__clear_cache
 2302              		.global	__clear_cache
 2303              		.global	__clear_cache
 2304              		.global	__clear_cache
 2305              		.global	__clear_cache
 2306              		.align	2
 2307              	.LC40:
 2308 03e0 434D4E45 		.ascii	"CMNET\000"
 2308      5400
 2309 03e6 0000     		.align	2
 2310              	.LC41:
 2311 03e8 3138302E 		.ascii	"180.89.58.27\000"
 2311      38392E35 
 2311      382E3237 
 2311      00
 2312 03f5 000000   		.align	2
 2313              	.LC42:
 2314 03f8 41544531 		.ascii	"ATE1\000"
 2314      00
 2315 03fd 000000   		.align	2
 2316              	.LC43:
 2317 0400 4F4B00   		.ascii	"OK\000"
 2318 0403 00       		.align	2
 2319              	.LC44:
 2320 0404 41544530 		.ascii	"ATE0\000"
 2320      00
 2321 0409 000000   		.align	2
 2322              	.LC45:
 2323 040c 41542B43 		.ascii	"AT+CPIN?\000"
 2323      50494E3F 
 2323      00
 2324 0415 000000   		.align	2
 2325              	.LC46:
 2326 0418 2B435049 		.ascii	"+CPIN: READY\000"
 2326      4E3A2052 
 2326      45414459 
 2326      00
 2327 0425 000000   		.align	2
 2328              	.LC47:
 2329 0428 41542B43 		.ascii	"AT+CSQ\000"
 2329      535100
 2330 042f 00       		.align	2
 2331              	.LC48:
 2332 0430 41542B43 		.ascii	"AT+CREG?\000"
 2332      5245473F 
 2332      00
 2333 0439 000000   		.align	2
 2334              	.LC49:
 2335 043c 41542B43 		.ascii	"AT+CIMI\000"
 2335      494D4900 
 2336              		.align	2
 2337              	.LC50:
 2338 0444 41542B4D 		.ascii	"AT+MIPCALL=1\000"
 2338      49504341 
 2338      4C4C3D31 
 2338      00
 2339 0451 000000   		.align	2
 2340              	.LC51:
 2341 0454 41542B4D 		.ascii	"AT+MIPCALL?\000"
 2341      49504341 
 2341      4C4C3F00 
 2342              		.align	2
 2343              	.LC52:
 2344 0460 41542B4D 		.ascii	"AT+MIPHEX=0\000"
 2344      49504845 
 2344      583D3000 
 2345              		.align	2
 2346              	.LC53:
 2347 046c 7075743A 		.ascii	"put:%s\012\000"
 2347      25730A00 
 2348              		.align	2
 2349              	.LC54:
 2350 0474 67657473 		.ascii	"gets:%s\012\000"
 2350      3A25730A 
 2350      00
 2351 047d 000000   		.align	2
 2352              	.LC55:
 2353 0480 41542072 		.ascii	"AT route complete!\012\000"
 2353      6F757465 
 2353      20636F6D 
 2353      706C6574 
 2353      65210A00 
 2354              		.align	2
 2355              	.LC56:
 2356 0494 41542072 		.ascii	"AT route abort, step=%d cmd=%s want=%s!\012\000"
 2356      6F757465 
 2356      2061626F 
 2356      72742C20 
 2356      73746570 
 2357              		.section	.text.test_4g,"ax",%progbits
 2358              		.align	2
 2359              		.thumb
 2360              		.thumb_func
 2362              	test_4g:
 2363              	.LFB24:
 411:../src/main.c **** 	int test_trys =3;
 2364              		.loc 1 411 0
 2365              		.cfi_startproc
 2366              		@ args = 0, pretend = 0, frame = 784
 2367              		@ frame_needed = 1, uses_anonymous_args = 0
 2368 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2369              		.cfi_def_cfa_offset 20
 2370              		.cfi_offset 4, -20
 2371              		.cfi_offset 5, -16
 2372              		.cfi_offset 6, -12
 2373              		.cfi_offset 7, -8
 2374              		.cfi_offset 14, -4
 2375 0002 ADF5457D 		sub	sp, sp, #788
 2376              		.cfi_def_cfa_offset 808
 2377 0006 00AF     		add	r7, sp, #0
 2378              		.cfi_def_cfa_register 7
 410:../src/main.c **** {
 2379              		.loc 1 410 0
 2380 0008 3B46     		mov	r3, r7
 2381 000a 03F58874 		add	r4, r3, #272
 2382 000e 3D46     		mov	r5, r7
 2383 0010 B04B     		ldr	r3, .L167
 2384 0012 2646     		mov	r6, r4
 2385 0014 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2386 0016 86E80F00 		stmia	r6, {r0, r1, r2, r3}
 2387 001a A560     		str	r5, [r4, #8]
 2388 001c AE4B     		ldr	r3, .L167+4
 2389 001e E360     		str	r3, [r4, #12]
 2390 0020 04F11003 		add	r3, r4, #16
 2391 0024 2046     		mov	r0, r4
 2392 0026 1946     		mov	r1, r3
 2393 0028 FFF7FEFF 		bl	__clear_cache
 2394 002c 3B46     		mov	r3, r7
 2395 002e 03F58074 		add	r4, r3, #256
 2396 0032 3D46     		mov	r5, r7
 2397 0034 A74B     		ldr	r3, .L167
 2398 0036 2646     		mov	r6, r4
 2399 0038 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2400 003a 86E80F00 		stmia	r6, {r0, r1, r2, r3}
 2401 003e A560     		str	r5, [r4, #8]
 2402 0040 A64B     		ldr	r3, .L167+8
 2403 0042 E360     		str	r3, [r4, #12]
 2404 0044 04F11003 		add	r3, r4, #16
 2405 0048 2046     		mov	r0, r4
 2406 004a 1946     		mov	r1, r3
 2407 004c FFF7FEFF 		bl	__clear_cache
 2408 0050 3B46     		mov	r3, r7
 2409 0052 03F1F004 		add	r4, r3, #240
 2410 0056 3D46     		mov	r5, r7
 2411 0058 9E4B     		ldr	r3, .L167
 2412 005a 2646     		mov	r6, r4
 2413 005c 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2414 005e 86E80F00 		stmia	r6, {r0, r1, r2, r3}
 2415 0062 A560     		str	r5, [r4, #8]
 2416 0064 9E4B     		ldr	r3, .L167+12
 2417 0066 E360     		str	r3, [r4, #12]
 2418 0068 04F11003 		add	r3, r4, #16
 2419 006c 2046     		mov	r0, r4
 2420 006e 1946     		mov	r1, r3
 2421 0070 FFF7FEFF 		bl	__clear_cache
 2422 0074 3B46     		mov	r3, r7
 2423 0076 03F1E004 		add	r4, r3, #224
 2424 007a 3D46     		mov	r5, r7
 2425 007c 954B     		ldr	r3, .L167
 2426 007e 2646     		mov	r6, r4
 2427 0080 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2428 0082 86E80F00 		stmia	r6, {r0, r1, r2, r3}
 2429 0086 A560     		str	r5, [r4, #8]
 2430 0088 964B     		ldr	r3, .L167+16
 2431 008a E360     		str	r3, [r4, #12]
 2432 008c 04F11003 		add	r3, r4, #16
 2433 0090 2046     		mov	r0, r4
 2434 0092 1946     		mov	r1, r3
 2435 0094 FFF7FEFF 		bl	__clear_cache
 2436 0098 3B46     		mov	r3, r7
 2437 009a 03F1C004 		add	r4, r3, #192
 2438 009e 3D46     		mov	r5, r7
 2439 00a0 8C4B     		ldr	r3, .L167
 2440 00a2 2646     		mov	r6, r4
 2441 00a4 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2442 00a6 86E80F00 		stmia	r6, {r0, r1, r2, r3}
 2443 00aa A560     		str	r5, [r4, #8]
 2444 00ac 8E4B     		ldr	r3, .L167+20
 2445 00ae E360     		str	r3, [r4, #12]
 2446 00b0 04F11003 		add	r3, r4, #16
 2447 00b4 2046     		mov	r0, r4
 2448 00b6 1946     		mov	r1, r3
 2449 00b8 FFF7FEFF 		bl	__clear_cache
 2450 00bc 3B46     		mov	r3, r7
 2451 00be 03F1B004 		add	r4, r3, #176
 2452 00c2 3D46     		mov	r5, r7
 2453 00c4 834B     		ldr	r3, .L167
 2454 00c6 2646     		mov	r6, r4
 2455 00c8 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2456 00ca 86E80F00 		stmia	r6, {r0, r1, r2, r3}
 2457 00ce A560     		str	r5, [r4, #8]
 2458 00d0 864B     		ldr	r3, .L167+24
 2459 00d2 E360     		str	r3, [r4, #12]
 2460 00d4 04F11003 		add	r3, r4, #16
 2461 00d8 2046     		mov	r0, r4
 2462 00da 1946     		mov	r1, r3
 2463 00dc FFF7FEFF 		bl	__clear_cache
 2464 00e0 3B46     		mov	r3, r7
 2465 00e2 03F1D004 		add	r4, r3, #208
 2466 00e6 3D46     		mov	r5, r7
 2467 00e8 7A4B     		ldr	r3, .L167
 2468 00ea 2646     		mov	r6, r4
 2469 00ec 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2470 00ee 86E80F00 		stmia	r6, {r0, r1, r2, r3}
 2471 00f2 A560     		str	r5, [r4, #8]
 2472 00f4 7E4B     		ldr	r3, .L167+28
 2473 00f6 E360     		str	r3, [r4, #12]
 2474 00f8 04F11003 		add	r3, r4, #16
 2475 00fc 2046     		mov	r0, r4
 2476 00fe 1946     		mov	r1, r3
 2477 0100 FFF7FEFF 		bl	__clear_cache
 412:../src/main.c **** 	test_start:
 2478              		.loc 1 412 0
 2479 0104 0323     		movs	r3, #3
 2480 0106 C7F80C33 		str	r3, [r7, #780]
 2481              	.L143:
 414:../src/main.c **** #define UART_4G_BUFSIZE		(128)
 2482              		.loc 1 414 0
 2483 010a FFF7FEFF 		bl	nic_power_onoff
 418:../src/main.c **** 	int sockid=1;
 2484              		.loc 1 418 0
 2485 010e 794A     		ldr	r2, .L167+32
 2486 0110 3B46     		mov	r3, r7
 2487 0112 9A60     		str	r2, [r3, #8]
 419:../src/main.c **** 	uint16_t lcport = 5000;
 2488              		.loc 1 419 0
 2489 0114 0122     		movs	r2, #1
 2490 0116 3B46     		mov	r3, r7
 2491 0118 5A60     		str	r2, [r3, #4]
 420:../src/main.c **** 	char *rmip = "180.89.58.27";
 2492              		.loc 1 420 0
 2493 011a 41F28832 		movw	r2, #5000
 2494 011e 3B46     		mov	r3, r7
 2495 0120 DA81     		strh	r2, [r3, #14]	@ movhi
 421:../src/main.c **** 	uint16_t rmport = 9020;
 2496              		.loc 1 421 0
 2497 0122 754A     		ldr	r2, .L167+36
 2498 0124 3B46     		mov	r3, r7
 2499 0126 1A60     		str	r2, [r3]
 422:../src/main.c **** 	char lcip[16];
 2500              		.loc 1 422 0
 2501 0128 42F23C32 		movw	r2, #9020
 2502 012c 3B46     		mov	r3, r7
 2503 012e 9A81     		strh	r2, [r3, #12]	@ movhi
 433:../src/main.c **** 	int at_creg(){
 434:../src/main.c **** 		int res;
 435:../src/main.c **** 		int a=0,b=0;
 436:../src/main.c **** 		res = sscanf(buf,"+CREG: %d,%d",&a,&b);
 437:../src/main.c **** 		if(res==2 && (b==1||b==5))
 438:../src/main.c **** 			return 0;
 439:../src/main.c **** 		return -1;;
 440:../src/main.c **** 	}
 441:../src/main.c **** 	int at_cimi(){
 442:../src/main.c **** 		if(strlen(buf)==15 && strspn(buf,"0123456789")==15){
 443:../src/main.c **** 			strcpy(imsi,buf);
 444:../src/main.c **** 			return 0;
 445:../src/main.c **** 		}
 446:../src/main.c **** 		return -1;;
 447:../src/main.c **** 	}
 448:../src/main.c **** 	const char* at_miprofile(){
 449:../src/main.c **** 		snprintf(buf,UART_4G_BUFSIZE,"AT+MIPPROFILE=1,\"%s\"",apn);
 450:../src/main.c **** 		return buf;
 451:../src/main.c **** 	}
 452:../src/main.c **** 	const char* at_mipopen(){
 453:../src/main.c **** 		snprintf(buf,UART_4G_BUFSIZE,"AT+MIPOPEN=%d,%hu,\"%s\",%hu,0",
 454:../src/main.c **** 				sockid,lcport,rmip,rmport);
 455:../src/main.c **** 		return buf;
 456:../src/main.c **** 	}
 457:../src/main.c **** 	int at_miopen_r(){
 458:../src/main.c **** 		int res;
 459:../src/main.c **** 		int a=0,b=0;
 460:../src/main.c **** 		res = sscanf(buf,"+MIPOPEN=%d,%d",&a,&b);
 461:../src/main.c **** 		if(res==2 && a==sockid && b==1)
 462:../src/main.c **** 			return 0;
 463:../src/main.c **** 		return -1;;
 464:../src/main.c **** 	}
 465:../src/main.c **** 	int at_mipcall(){
 466:../src/main.c **** 		int res;
 467:../src/main.c **** 		int a=0;
 468:../src/main.c **** 		res = sscanf(buf,"+MIPCALL:%d, %s",&a,lcip);
 469:../src/main.c **** 		if(res==2 && a==sockid)
 470:../src/main.c **** 			return 0;
 471:../src/main.c **** 		return -1;;
 472:../src/main.c **** 	}
 473:../src/main.c **** 	struct AtTalkTable {
 474:../src/main.c **** 		const char *ts;
 475:../src/main.c **** 		const char *(*tf)();
 476:../src/main.c **** 		const char *rs;
 477:../src/main.c **** 		const char *abort;
 478:../src/main.c **** 		int (*rf)();
 479:../src/main.c **** 		int retry;
 480:../src/main.c **** 		int tmout;
 481:../src/main.c **** 		/*
 482:../src/main.c **** 		 * when retry tmout not init, use def val
 483:../src/main.c **** 		 */
 484:../src/main.c **** #define _DFT_AT_RETRY	(5)
 485:../src/main.c **** #define _DFT_AT_TMOUT	(1000)
 486:../src/main.c **** 	}attbl[] = {
 2504              		.loc 1 486 0
 2505 0130 07F59073 		add	r3, r7, #288
 2506 0134 1A46     		mov	r2, r3
 2507 0136 4FF49A73 		mov	r3, #308
 2508 013a 1046     		mov	r0, r2
 2509 013c 0021     		movs	r1, #0
 2510 013e 1A46     		mov	r2, r3
 2511 0140 FFF7FEFF 		bl	memset
 2512 0144 07F59073 		add	r3, r7, #288
 2513 0148 6C4A     		ldr	r2, .L167+40
 2514 014a 1A60     		str	r2, [r3]
 2515 014c 07F59073 		add	r3, r7, #288
 2516 0150 6B4A     		ldr	r2, .L167+44
 2517 0152 9A60     		str	r2, [r3, #8]
 2518 0154 07F59073 		add	r3, r7, #288
 2519 0158 1E22     		movs	r2, #30
 2520 015a 5A61     		str	r2, [r3, #20]
 2521 015c 07F59073 		add	r3, r7, #288
 2522 0160 4FF47A72 		mov	r2, #1000
 2523 0164 9A61     		str	r2, [r3, #24]
 2524 0166 07F59073 		add	r3, r7, #288
 2525 016a 664A     		ldr	r2, .L167+48
 2526 016c DA61     		str	r2, [r3, #28]
 2527 016e 07F59073 		add	r3, r7, #288
 2528 0172 634A     		ldr	r2, .L167+44
 2529 0174 5A62     		str	r2, [r3, #36]
 2530 0176 07F59073 		add	r3, r7, #288
 2531 017a 634A     		ldr	r2, .L167+52
 2532 017c 9A63     		str	r2, [r3, #56]
 2533 017e 07F59073 		add	r3, r7, #288
 2534 0182 624A     		ldr	r2, .L167+56
 2535 0184 1A64     		str	r2, [r3, #64]
 2536 0186 07F59073 		add	r3, r7, #288
 2537 018a 614A     		ldr	r2, .L167+60
 2538 018c 5A65     		str	r2, [r3, #84]
 2539 018e 3B46     		mov	r3, r7
 2540 0190 03F58873 		add	r3, r3, #272
 2541 0194 43F00103 		orr	r3, r3, #1
 2542 0198 1A46     		mov	r2, r3
 2543 019a 07F59073 		add	r3, r7, #288
 2544 019e 5A66     		str	r2, [r3, #100]
 2545 01a0 07F59073 		add	r3, r7, #288
 2546 01a4 5B4A     		ldr	r2, .L167+64
 2547 01a6 1A67     		str	r2, [r3, #112]
 2548 01a8 3B46     		mov	r3, r7
 2549 01aa 03F58073 		add	r3, r3, #256
 2550 01ae 43F00103 		orr	r3, r3, #1
 2551 01b2 1A46     		mov	r2, r3
 2552 01b4 07F59073 		add	r3, r7, #288
 2553 01b8 C3F88020 		str	r2, [r3, #128]
 2554 01bc 07F59073 		add	r3, r7, #288
 2555 01c0 554A     		ldr	r2, .L167+68
 2556 01c2 C3F88C20 		str	r2, [r3, #140]
 2557 01c6 3B46     		mov	r3, r7
 2558 01c8 F033     		adds	r3, r3, #240
 2559 01ca 43F00103 		orr	r3, r3, #1
 2560 01ce 1A46     		mov	r2, r3
 2561 01d0 07F59073 		add	r3, r7, #288
 2562 01d4 C3F89C20 		str	r2, [r3, #156]
 2563 01d8 3B46     		mov	r3, r7
 2564 01da E033     		adds	r3, r3, #224
 2565 01dc 43F00103 		orr	r3, r3, #1
 2566 01e0 1A46     		mov	r2, r3
 2567 01e2 07F59073 		add	r3, r7, #288
 2568 01e6 C3F8AC20 		str	r2, [r3, #172]
 2569 01ea 07F59073 		add	r3, r7, #288
 2570 01ee 444A     		ldr	r2, .L167+44
 2571 01f0 C3F8B020 		str	r2, [r3, #176]
 2572 01f4 07F59073 		add	r3, r7, #288
 2573 01f8 484A     		ldr	r2, .L167+72
 2574 01fa C3F8C420 		str	r2, [r3, #196]
 2575 01fe 3B46     		mov	r3, r7
 2576 0200 D033     		adds	r3, r3, #208
 2577 0202 43F00103 		orr	r3, r3, #1
 2578 0206 1A46     		mov	r2, r3
 2579 0208 07F59073 		add	r3, r7, #288
 2580 020c C3F8D420 		str	r2, [r3, #212]
 2581 0210 07F59073 		add	r3, r7, #288
 2582 0214 0522     		movs	r2, #5
 2583 0216 C3F8D820 		str	r2, [r3, #216]
 2584 021a 07F59073 		add	r3, r7, #288
 2585 021e 42F21072 		movw	r2, #10000
 2586 0222 C3F8DC20 		str	r2, [r3, #220]
 2587 0226 07F59073 		add	r3, r7, #288
 2588 022a 3D4A     		ldr	r2, .L167+76
 2589 022c C3F8E020 		str	r2, [r3, #224]
 2590 0230 07F59073 		add	r3, r7, #288
 2591 0234 324A     		ldr	r2, .L167+44
 2592 0236 C3F8E820 		str	r2, [r3, #232]
 2593 023a 07F59073 		add	r3, r7, #288
 2594 023e 0522     		movs	r2, #5
 2595 0240 C3F8F420 		str	r2, [r3, #244]
 2596 0244 07F59073 		add	r3, r7, #288
 2597 0248 4FF4FA62 		mov	r2, #2000
 2598 024c C3F8F820 		str	r2, [r3, #248]
 2599 0250 3B46     		mov	r3, r7
 2600 0252 C033     		adds	r3, r3, #192
 2601 0254 43F00103 		orr	r3, r3, #1
 2602 0258 1A46     		mov	r2, r3
 2603 025a 07F59073 		add	r3, r7, #288
 2604 025e C3F80021 		str	r2, [r3, #256]
 2605 0262 3B46     		mov	r3, r7
 2606 0264 B033     		adds	r3, r3, #176
 2607 0266 43F00103 		orr	r3, r3, #1
 2608 026a 1A46     		mov	r2, r3
 2609 026c 07F59073 		add	r3, r7, #288
 2610 0270 C3F80C21 		str	r2, [r3, #268]
 2611 0274 07F59073 		add	r3, r7, #288
 2612 0278 0522     		movs	r2, #5
 2613 027a C3F81021 		str	r2, [r3, #272]
 2614 027e 07F59073 		add	r3, r7, #288
 2615 0282 41F28832 		movw	r2, #5000
 2616 0286 C3F81421 		str	r2, [r3, #276]
 2617 028a 07F59073 		add	r3, r7, #288
 2618 028e 254A     		ldr	r2, .L167+80
 2619 0290 C3F81821 		str	r2, [r3, #280]
 2620 0294 07F59073 		add	r3, r7, #288
 2621 0298 194A     		ldr	r2, .L167+44
 2622 029a C3F82021 		str	r2, [r3, #288]
 487:../src/main.c **** 			/*
 488:../src/main.c **** AT+CIMI
 489:../src/main.c **** AT+MIPPROFILE=1,"CMNET"
 490:../src/main.c **** AT+MIPCALL=1
 491:../src/main.c **** AT+MIPCALL?
 492:../src/main.c **** AT+MIPOPEN=1,5000,"180.89.58.27",9020,0
 493:../src/main.c **** AT+MIPHEX=0
 494:../src/main.c **** AT+MIPTPS=1,1,5000,600
 495:../src/main.c **** 			 */
 496:../src/main.c **** 			{.ts="ATE1",			.rs="OK",				.retry=30, .tmout=1000},
 497:../src/main.c **** 			{.ts="ATE0",			.rs="OK",				},
 498:../src/main.c **** 			{.ts="AT+CPIN?",		.rs="+CPIN: READY",		},
 499:../src/main.c **** 			{.ts="AT+CSQ",			.rf=at_csq,				},
 500:../src/main.c **** 			{.ts="AT+CREG?",		.rf=at_creg,			},
 501:../src/main.c **** 			{.ts="AT+CIMI",			.rf=at_cimi,			},
 502:../src/main.c **** 			{.tf=at_miprofile,		.rs="OK",				},
 503:../src/main.c **** 			{.ts="AT+MIPCALL=1",	.rf=at_mipcall,			.retry=5,	.tmout=10000},
 504:../src/main.c **** 			{.ts="AT+MIPCALL?",		.rs="OK",				.retry=5,	.tmout=2000},
 505:../src/main.c **** 			{.tf=at_mipopen,		.rf=at_miopen_r,		.retry=5,	.tmout=5000},
 506:../src/main.c **** 			{.ts="AT+MIPHEX=0",		.rs="OK",				},
 507:../src/main.c **** 
 508:../src/main.c **** 			//{.tx="AT+CIMI",		.rx="OK",	5,	1000},
 509:../src/main.c **** 			//{.tx="AT+MIPPROFILE=1,\"CMNET\"",	"OK",	5,	1000},
 510:../src/main.c **** 	};
 511:../src/main.c **** 	int step=0;
 2623              		.loc 1 511 0
 2624 029e 0023     		movs	r3, #0
 2625 02a0 C7F80833 		str	r3, [r7, #776]
 512:../src/main.c **** 	for(;step<sizeof(attbl)/sizeof(attbl[0]);step++){
 2626              		.loc 1 512 0
 2627 02a4 E8E0     		b	.L144
 2628              	.L162:
 2629              	.LBB15:
 513:../src/main.c **** 		int need_try = 1;
 2630              		.loc 1 513 0
 2631 02a6 0123     		movs	r3, #1
 2632 02a8 C7F80433 		str	r3, [r7, #772]
 514:../src/main.c **** 		int retry = attbl[step].retry?:_DFT_AT_RETRY;
 2633              		.loc 1 514 0
 2634 02ac 07F59071 		add	r1, r7, #288
 2635 02b0 D7F80823 		ldr	r2, [r7, #776]
 2636 02b4 1346     		mov	r3, r2
 2637 02b6 DB00     		lsls	r3, r3, #3
 2638 02b8 9B1A     		subs	r3, r3, r2
 2639 02ba 9B00     		lsls	r3, r3, #2
 2640 02bc 0B44     		add	r3, r3, r1
 2641 02be 1033     		adds	r3, r3, #16
 2642 02c0 5B68     		ldr	r3, [r3, #4]
 2643 02c2 002B     		cmp	r3, #0
 2644 02c4 00D1     		bne	.L146
 2645              		.loc 1 514 0 is_stmt 0 discriminator 2
 2646 02c6 0523     		movs	r3, #5
 2647              	.L146:
 2648              		.loc 1 514 0 discriminator 4
 2649 02c8 C7F8FC32 		str	r3, [r7, #764]
 2650              	.LBB16:
 515:../src/main.c **** 		for(int r=0;need_try&&r<retry;r++){
 2651              		.loc 1 515 0 is_stmt 1 discriminator 4
 2652 02cc 0023     		movs	r3, #0
 2653 02ce C7F80033 		str	r3, [r7, #768]
 2654 02d2 B8E0     		b	.L147
 2655              	.L168:
 2656              		.align	2
 2657              	.L167:
 2658 02d4 D0030000 		.word	.LTRAMP0
 2659 02d8 00000000 		.word	at_csq.6592
 2660 02dc 00000000 		.word	at_creg.6597
 2661 02e0 00000000 		.word	at_cimi.6602
 2662 02e4 00000000 		.word	at_miprofile.6604
 2663 02e8 00000000 		.word	at_mipopen.6606
 2664 02ec 00000000 		.word	at_miopen_r.6608
 2665 02f0 00000000 		.word	at_mipcall.6613
 2666 02f4 E0030000 		.word	.LC40
 2667 02f8 E8030000 		.word	.LC41
 2668 02fc F8030000 		.word	.LC42
 2669 0300 00040000 		.word	.LC43
 2670 0304 04040000 		.word	.LC44
 2671 0308 0C040000 		.word	.LC45
 2672 030c 18040000 		.word	.LC46
 2673 0310 28040000 		.word	.LC47
 2674 0314 30040000 		.word	.LC48
 2675 0318 3C040000 		.word	.LC49
 2676 031c 44040000 		.word	.LC50
 2677 0320 54040000 		.word	.LC51
 2678 0324 60040000 		.word	.LC52
 2679              	.L159:
 2680              	.LBB17:
 516:../src/main.c **** 			const char *ts = attbl[step].ts?:attbl[step].tf();
 2681              		.loc 1 516 0
 2682 0328 07F59071 		add	r1, r7, #288
 2683 032c D7F80823 		ldr	r2, [r7, #776]
 2684 0330 1346     		mov	r3, r2
 2685 0332 DB00     		lsls	r3, r3, #3
 2686 0334 9B1A     		subs	r3, r3, r2
 2687 0336 9B00     		lsls	r3, r3, #2
 2688 0338 0B44     		add	r3, r3, r1
 2689 033a 1B68     		ldr	r3, [r3]
 2690 033c 002B     		cmp	r3, #0
 2691 033e 0BD1     		bne	.L149
 2692              		.loc 1 516 0 is_stmt 0 discriminator 2
 2693 0340 07F59071 		add	r1, r7, #288
 2694 0344 D7F80823 		ldr	r2, [r7, #776]
 2695 0348 1346     		mov	r3, r2
 2696 034a DB00     		lsls	r3, r3, #3
 2697 034c 9B1A     		subs	r3, r3, r2
 2698 034e 9B00     		lsls	r3, r3, #2
 2699 0350 0B44     		add	r3, r3, r1
 2700 0352 5B68     		ldr	r3, [r3, #4]
 2701 0354 9847     		blx	r3
 2702 0356 0346     		mov	r3, r0
 2703              	.L149:
 2704              		.loc 1 516 0 discriminator 4
 2705 0358 C7F8F832 		str	r3, [r7, #760]
 517:../src/main.c **** 			//LPUART_receive_flush(UART_4G);
 518:../src/main.c **** 			os_trace("put:%s\n",ts);
 2706              		.loc 1 518 0 is_stmt 1 discriminator 4
 2707 035c 6248     		ldr	r0, .L169
 2708 035e D7F8F812 		ldr	r1, [r7, #760]
 2709 0362 FFF7FEFF 		bl	os_trace
 519:../src/main.c **** 			uart_puts(UART_4G, ts);
 2710              		.loc 1 519 0 discriminator 4
 2711 0366 0120     		movs	r0, #1
 2712 0368 D7F8F812 		ldr	r1, [r7, #760]
 2713 036c FFF7FEFF 		bl	uart_puts
 520:../src/main.c **** 			uart_puts(UART_4G,"\r\n");
 2714              		.loc 1 520 0 discriminator 4
 2715 0370 0120     		movs	r0, #1
 2716 0372 5E49     		ldr	r1, .L169+4
 2717 0374 FFF7FEFF 		bl	uart_puts
 521:../src/main.c **** 			os_sleep_ms(100);	/* must delay if not, rx nothing. */
 2718              		.loc 1 521 0 discriminator 4
 2719 0378 6420     		movs	r0, #100
 2720 037a FFF7FEFF 		bl	os_sleep_ms
 2721              	.L157:
 522:../src/main.c **** 			char *s;
 523:../src/main.c **** 			do{
 524:../src/main.c **** 				s = uart_gets_timeout(UART_4G, buf, UART_4G_BUFSIZE, attbl[step].tmout?:_DFT_AT_TMOUT);
 2722              		.loc 1 524 0
 2723 037e 07F59071 		add	r1, r7, #288
 2724 0382 D7F80823 		ldr	r2, [r7, #776]
 2725 0386 1346     		mov	r3, r2
 2726 0388 DB00     		lsls	r3, r3, #3
 2727 038a 9B1A     		subs	r3, r3, r2
 2728 038c 9B00     		lsls	r3, r3, #2
 2729 038e 0B44     		add	r3, r3, r1
 2730 0390 1833     		adds	r3, r3, #24
 2731 0392 1B68     		ldr	r3, [r3]
 2732 0394 002B     		cmp	r3, #0
 2733 0396 01D1     		bne	.L151
 2734              		.loc 1 524 0 is_stmt 0 discriminator 2
 2735 0398 4FF47A73 		mov	r3, #1000
 2736              	.L151:
 2737              		.loc 1 524 0 discriminator 4
 2738 039c 3A46     		mov	r2, r7
 2739 039e 3032     		adds	r2, r2, #48
 2740 03a0 0120     		movs	r0, #1
 2741 03a2 1146     		mov	r1, r2
 2742 03a4 8022     		movs	r2, #128
 2743 03a6 FFF7FEFF 		bl	uart_gets_timeout
 2744 03aa C7F8F402 		str	r0, [r7, #756]
 525:../src/main.c **** 				if(s){
 2745              		.loc 1 525 0 is_stmt 1 discriminator 4
 2746 03ae D7F8F432 		ldr	r3, [r7, #756]
 2747 03b2 002B     		cmp	r3, #0
 2748 03b4 04D0     		beq	.L152
 526:../src/main.c **** 					os_trace("gets:%s\n",s);
 2749              		.loc 1 526 0
 2750 03b6 4E48     		ldr	r0, .L169+8
 2751 03b8 D7F8F412 		ldr	r1, [r7, #756]
 2752 03bc FFF7FEFF 		bl	os_trace
 2753              	.L152:
 527:../src/main.c **** 				}
 528:../src/main.c **** 				if(attbl[step].rs){
 2754              		.loc 1 528 0
 2755 03c0 07F59071 		add	r1, r7, #288
 2756 03c4 D7F80823 		ldr	r2, [r7, #776]
 2757 03c8 1346     		mov	r3, r2
 2758 03ca DB00     		lsls	r3, r3, #3
 2759 03cc 9B1A     		subs	r3, r3, r2
 2760 03ce 9B00     		lsls	r3, r3, #2
 2761 03d0 0B44     		add	r3, r3, r1
 2762 03d2 0833     		adds	r3, r3, #8
 2763 03d4 1B68     		ldr	r3, [r3]
 2764 03d6 002B     		cmp	r3, #0
 2765 03d8 1AD0     		beq	.L153
 529:../src/main.c **** 					if(s && strcmp(s,attbl[step].rs)==0){
 2766              		.loc 1 529 0
 2767 03da D7F8F432 		ldr	r3, [r7, #756]
 2768 03de 002B     		cmp	r3, #0
 2769 03e0 24D0     		beq	.L155
 2770              		.loc 1 529 0 is_stmt 0 discriminator 1
 2771 03e2 07F59071 		add	r1, r7, #288
 2772 03e6 D7F80823 		ldr	r2, [r7, #776]
 2773 03ea 1346     		mov	r3, r2
 2774 03ec DB00     		lsls	r3, r3, #3
 2775 03ee 9B1A     		subs	r3, r3, r2
 2776 03f0 9B00     		lsls	r3, r3, #2
 2777 03f2 0B44     		add	r3, r3, r1
 2778 03f4 0833     		adds	r3, r3, #8
 2779 03f6 1B68     		ldr	r3, [r3]
 2780 03f8 D7F8F402 		ldr	r0, [r7, #756]
 2781 03fc 1946     		mov	r1, r3
 2782 03fe FFF7FEFF 		bl	strcmp
 2783 0402 0346     		mov	r3, r0
 2784 0404 002B     		cmp	r3, #0
 2785 0406 11D1     		bne	.L155
 530:../src/main.c **** 						need_try = 0;
 2786              		.loc 1 530 0 is_stmt 1
 2787 0408 0023     		movs	r3, #0
 2788 040a C7F80433 		str	r3, [r7, #772]
 2789 040e 0DE0     		b	.L155
 2790              	.L153:
 531:../src/main.c **** 					}
 532:../src/main.c **** 				}else{
 533:../src/main.c **** 					need_try = attbl[step].rf();
 2791              		.loc 1 533 0
 2792 0410 07F59071 		add	r1, r7, #288
 2793 0414 D7F80823 		ldr	r2, [r7, #776]
 2794 0418 1346     		mov	r3, r2
 2795 041a DB00     		lsls	r3, r3, #3
 2796 041c 9B1A     		subs	r3, r3, r2
 2797 041e 9B00     		lsls	r3, r3, #2
 2798 0420 0B44     		add	r3, r3, r1
 2799 0422 1033     		adds	r3, r3, #16
 2800 0424 1B68     		ldr	r3, [r3]
 2801 0426 9847     		blx	r3
 2802 0428 C7F80403 		str	r0, [r7, #772]
 2803              	.L155:
 534:../src/main.c **** 				}
 535:../src/main.c **** 			}while(s && need_try);
 2804              		.loc 1 535 0
 2805 042c D7F8F432 		ldr	r3, [r7, #756]
 2806 0430 002B     		cmp	r3, #0
 2807 0432 03D0     		beq	.L156
 2808              		.loc 1 535 0 is_stmt 0 discriminator 1
 2809 0434 D7F80433 		ldr	r3, [r7, #772]
 2810 0438 002B     		cmp	r3, #0
 2811 043a A0D1     		bne	.L157
 2812              	.L156:
 2813              	.LBE17:
 515:../src/main.c **** 			const char *ts = attbl[step].ts?:attbl[step].tf();
 2814              		.loc 1 515 0 is_stmt 1 discriminator 2
 2815 043c D7F80033 		ldr	r3, [r7, #768]
 2816 0440 0133     		adds	r3, r3, #1
 2817 0442 C7F80033 		str	r3, [r7, #768]
 2818              	.L147:
 515:../src/main.c **** 			const char *ts = attbl[step].ts?:attbl[step].tf();
 2819              		.loc 1 515 0 is_stmt 0 discriminator 1
 2820 0446 D7F80433 		ldr	r3, [r7, #772]
 2821 044a 002B     		cmp	r3, #0
 2822 044c 06D0     		beq	.L158
 515:../src/main.c **** 			const char *ts = attbl[step].ts?:attbl[step].tf();
 2823              		.loc 1 515 0 discriminator 3
 2824 044e D7F80023 		ldr	r2, [r7, #768]
 2825 0452 D7F8FC32 		ldr	r3, [r7, #764]
 2826 0456 9A42     		cmp	r2, r3
 2827 0458 FFF666AF 		blt	.L159
 2828              	.L158:
 2829              	.LBE16:
 536:../src/main.c **** 		}
 537:../src/main.c **** 		if(need_try)
 2830              		.loc 1 537 0 is_stmt 1
 2831 045c D7F80433 		ldr	r3, [r7, #772]
 2832 0460 002B     		cmp	r3, #0
 2833 0462 00D0     		beq	.L160
 538:../src/main.c **** 			break;
 2834              		.loc 1 538 0
 2835 0464 0DE0     		b	.L161
 2836              	.L160:
 539:../src/main.c **** 		os_sleep_ms(500);	/* next cmd before delay some ms. */
 2837              		.loc 1 539 0
 2838 0466 4FF4FA70 		mov	r0, #500
 2839 046a FFF7FEFF 		bl	os_sleep_ms
 2840              	.LBE15:
 512:../src/main.c **** 		int need_try = 1;
 2841              		.loc 1 512 0
 2842 046e D7F80833 		ldr	r3, [r7, #776]
 2843 0472 0133     		adds	r3, r3, #1
 2844 0474 C7F80833 		str	r3, [r7, #776]
 2845              	.L144:
 512:../src/main.c **** 		int need_try = 1;
 2846              		.loc 1 512 0 is_stmt 0 discriminator 1
 2847 0478 D7F80833 		ldr	r3, [r7, #776]
 2848 047c 0A2B     		cmp	r3, #10
 2849 047e 7FF612AF 		bls	.L162
 2850              	.L161:
 540:../src/main.c **** 	}
 541:../src/main.c **** 	if(step==sizeof(attbl)/sizeof(attbl[0])){
 2851              		.loc 1 541 0 is_stmt 1
 2852 0482 D7F80833 		ldr	r3, [r7, #776]
 2853 0486 0B2B     		cmp	r3, #11
 2854 0488 04D1     		bne	.L163
 542:../src/main.c **** 		os_trace("AT route complete!\n");
 2855              		.loc 1 542 0
 2856 048a 1A48     		ldr	r0, .L169+12
 2857 048c FFF7FEFF 		bl	os_trace
 543:../src/main.c **** 		return 0;
 2858              		.loc 1 543 0
 2859 0490 0023     		movs	r3, #0
 2860 0492 24E0     		b	.L166
 2861              	.L163:
 544:../src/main.c **** 	}else{
 545:../src/main.c **** 		os_trace("AT route abort, step=%d cmd=%s want=%s!\n",step,attbl[step].ts,attbl[step].rs);
 2862              		.loc 1 545 0
 2863 0494 07F59071 		add	r1, r7, #288
 2864 0498 D7F80823 		ldr	r2, [r7, #776]
 2865 049c 1346     		mov	r3, r2
 2866 049e DB00     		lsls	r3, r3, #3
 2867 04a0 9B1A     		subs	r3, r3, r2
 2868 04a2 9B00     		lsls	r3, r3, #2
 2869 04a4 0B44     		add	r3, r3, r1
 2870 04a6 1C68     		ldr	r4, [r3]
 2871 04a8 07F59071 		add	r1, r7, #288
 2872 04ac D7F80823 		ldr	r2, [r7, #776]
 2873 04b0 1346     		mov	r3, r2
 2874 04b2 DB00     		lsls	r3, r3, #3
 2875 04b4 9B1A     		subs	r3, r3, r2
 2876 04b6 9B00     		lsls	r3, r3, #2
 2877 04b8 0B44     		add	r3, r3, r1
 2878 04ba 0833     		adds	r3, r3, #8
 2879 04bc 1B68     		ldr	r3, [r3]
 2880 04be 0E48     		ldr	r0, .L169+16
 2881 04c0 D7F80813 		ldr	r1, [r7, #776]
 2882 04c4 2246     		mov	r2, r4
 2883 04c6 FFF7FEFF 		bl	os_trace
 546:../src/main.c **** 		if(test_trys-->0)
 2884              		.loc 1 546 0
 2885 04ca D7F80C33 		ldr	r3, [r7, #780]
 2886 04ce 5A1E     		subs	r2, r3, #1
 2887 04d0 C7F80C23 		str	r2, [r7, #780]
 2888 04d4 002B     		cmp	r3, #0
 2889 04d6 00DD     		ble	.L165
 547:../src/main.c **** 			goto test_start;
 2890              		.loc 1 547 0
 2891 04d8 17E6     		b	.L143
 2892              	.L165:
 548:../src/main.c **** 		return -1;
 2893              		.loc 1 548 0
 2894 04da 4FF0FF33 		mov	r3, #-1
 2895              	.L166:
 549:../src/main.c **** 	}
 550:../src/main.c **** }
 2896              		.loc 1 550 0 discriminator 1
 2897 04de 1846     		mov	r0, r3
 2898 04e0 07F54577 		add	r7, r7, #788
 2899              		.cfi_def_cfa_offset 20
 2900 04e4 BD46     		mov	sp, r7
 2901              		.cfi_def_cfa_register 13
 2902              		@ sp needed
 2903 04e6 F0BD     		pop	{r4, r5, r6, r7, pc}
 2904              	.L170:
 2905              		.align	2
 2906              	.L169:
 2907 04e8 6C040000 		.word	.LC53
 2908 04ec 98020000 		.word	.LC28
 2909 04f0 74040000 		.word	.LC54
 2910 04f4 80040000 		.word	.LC55
 2911 04f8 94040000 		.word	.LC56
 2912              		.cfi_endproc
 2913              	.LFE24:
 2915              		.section	.rodata
 2916 04bd 000000   		.align	2
 2917              	.LC57:
 2918 04c0 2B435245 		.ascii	"+CREG: %d,%d\000"
 2918      473A2025 
 2918      642C2564 
 2918      00
 2919              		.section	.text.at_creg.6597,"ax",%progbits
 2920              		.align	2
 2921              		.thumb
 2922              		.thumb_func
 2924              	at_creg.6597:
 2925              	.LFB26:
 433:../src/main.c **** 		int res;
 2926              		.loc 1 433 0
 2927              		.cfi_startproc
 2928              		@ Nested: function declared inside another function.
 2929              		@ args = 0, pretend = 0, frame = 16
 2930              		@ frame_needed = 1, uses_anonymous_args = 0
 2931 0000 80B5     		push	{r7, lr}
 2932              		.cfi_def_cfa_offset 8
 2933              		.cfi_offset 7, -8
 2934              		.cfi_offset 14, -4
 2935 0002 84B0     		sub	sp, sp, #16
 2936              		.cfi_def_cfa_offset 24
 2937 0004 00AF     		add	r7, sp, #0
 2938              		.cfi_def_cfa_register 7
 2939 0006 6246     		mov	r2, ip
 435:../src/main.c **** 		res = sscanf(buf,"+CREG: %d,%d",&a,&b);
 2940              		.loc 1 435 0
 2941 0008 0023     		movs	r3, #0
 2942 000a BB60     		str	r3, [r7, #8]
 2943 000c 0023     		movs	r3, #0
 2944 000e 7B60     		str	r3, [r7, #4]
 436:../src/main.c **** 		if(res==2 && (b==1||b==5))
 2945              		.loc 1 436 0
 2946 0010 02F13001 		add	r1, r2, #48
 2947 0014 07F10802 		add	r2, r7, #8
 2948 0018 3B1D     		adds	r3, r7, #4
 2949 001a 0846     		mov	r0, r1
 2950 001c 0A49     		ldr	r1, .L176
 2951 001e FFF7FEFF 		bl	sscanf
 2952 0022 F860     		str	r0, [r7, #12]
 437:../src/main.c **** 			return 0;
 2953              		.loc 1 437 0
 2954 0024 FB68     		ldr	r3, [r7, #12]
 2955 0026 022B     		cmp	r3, #2
 2956 0028 07D1     		bne	.L172
 437:../src/main.c **** 			return 0;
 2957              		.loc 1 437 0 is_stmt 0 discriminator 1
 2958 002a 7B68     		ldr	r3, [r7, #4]
 2959 002c 012B     		cmp	r3, #1
 2960 002e 02D0     		beq	.L173
 437:../src/main.c **** 			return 0;
 2961              		.loc 1 437 0 discriminator 2
 2962 0030 7B68     		ldr	r3, [r7, #4]
 2963 0032 052B     		cmp	r3, #5
 2964 0034 01D1     		bne	.L172
 2965              	.L173:
 438:../src/main.c **** 		return -1;;
 2966              		.loc 1 438 0 is_stmt 1
 2967 0036 0023     		movs	r3, #0
 2968 0038 01E0     		b	.L175
 2969              	.L172:
 439:../src/main.c **** 	}
 2970              		.loc 1 439 0
 2971 003a 4FF0FF33 		mov	r3, #-1
 2972              	.L175:
 440:../src/main.c **** 	int at_cimi(){
 2973              		.loc 1 440 0 discriminator 1
 2974 003e 1846     		mov	r0, r3
 2975 0040 1037     		adds	r7, r7, #16
 2976              		.cfi_def_cfa_offset 8
 2977 0042 BD46     		mov	sp, r7
 2978              		.cfi_def_cfa_register 13
 2979              		@ sp needed
 2980 0044 80BD     		pop	{r7, pc}
 2981              	.L177:
 2982 0046 00BF     		.align	2
 2983              	.L176:
 2984 0048 C0040000 		.word	.LC57
 2985              		.cfi_endproc
 2986              	.LFE26:
 2988              		.section	.rodata
 2989 04cd 000000   		.align	2
 2990              	.LC58:
 2991 04d0 30313233 		.ascii	"0123456789\000"
 2991      34353637 
 2991      383900
 2992              		.section	.text.at_cimi.6602,"ax",%progbits
 2993              		.align	2
 2994              		.thumb
 2995              		.thumb_func
 2997              	at_cimi.6602:
 2998              	.LFB27:
 441:../src/main.c **** 		if(strlen(buf)==15 && strspn(buf,"0123456789")==15){
 2999              		.loc 1 441 0
 3000              		.cfi_startproc
 3001              		@ Nested: function declared inside another function.
 3002              		@ args = 0, pretend = 0, frame = 0
 3003              		@ frame_needed = 1, uses_anonymous_args = 0
 3004 0000 98B5     		push	{r3, r4, r7, lr}
 3005              		.cfi_def_cfa_offset 16
 3006              		.cfi_offset 3, -16
 3007              		.cfi_offset 4, -12
 3008              		.cfi_offset 7, -8
 3009              		.cfi_offset 14, -4
 3010 0002 00AF     		add	r7, sp, #0
 3011              		.cfi_def_cfa_register 7
 3012 0004 6446     		mov	r4, ip
 442:../src/main.c **** 			strcpy(imsi,buf);
 3013              		.loc 1 442 0
 3014 0006 04F13003 		add	r3, r4, #48
 3015 000a 1846     		mov	r0, r3
 3016 000c FFF7FEFF 		bl	strlen
 3017 0010 0346     		mov	r3, r0
 3018 0012 0F2B     		cmp	r3, #15
 3019 0014 12D1     		bne	.L179
 442:../src/main.c **** 			strcpy(imsi,buf);
 3020              		.loc 1 442 0 is_stmt 0 discriminator 1
 3021 0016 04F13003 		add	r3, r4, #48
 3022 001a 1846     		mov	r0, r3
 3023 001c 0949     		ldr	r1, .L181
 3024 001e FFF7FEFF 		bl	strspn
 3025 0022 0346     		mov	r3, r0
 3026 0024 0F2B     		cmp	r3, #15
 3027 0026 09D1     		bne	.L179
 443:../src/main.c **** 			return 0;
 3028              		.loc 1 443 0 is_stmt 1
 3029 0028 04F12002 		add	r2, r4, #32
 3030 002c 04F13003 		add	r3, r4, #48
 3031 0030 1046     		mov	r0, r2
 3032 0032 1946     		mov	r1, r3
 3033 0034 FFF7FEFF 		bl	strcpy
 444:../src/main.c **** 		}
 3034              		.loc 1 444 0
 3035 0038 0023     		movs	r3, #0
 3036 003a 01E0     		b	.L180
 3037              	.L179:
 446:../src/main.c **** 	}
 3038              		.loc 1 446 0
 3039 003c 4FF0FF33 		mov	r3, #-1
 3040              	.L180:
 447:../src/main.c **** 	const char* at_miprofile(){
 3041              		.loc 1 447 0
 3042 0040 1846     		mov	r0, r3
 3043 0042 98BD     		pop	{r3, r4, r7, pc}
 3044              	.L182:
 3045              		.align	2
 3046              	.L181:
 3047 0044 D0040000 		.word	.LC58
 3048              		.cfi_endproc
 3049              	.LFE27:
 3051              		.section	.rodata
 3052 04db 00       		.align	2
 3053              	.LC59:
 3054 04dc 41542B4D 		.ascii	"AT+MIPPROFILE=1,\"%s\"\000"
 3054      49505052 
 3054      4F46494C 
 3054      453D312C 
 3054      22257322 
 3055              		.section	.text.at_miprofile.6604,"ax",%progbits
 3056              		.align	2
 3057              		.thumb
 3058              		.thumb_func
 3060              	at_miprofile.6604:
 3061              	.LFB28:
 448:../src/main.c **** 		snprintf(buf,UART_4G_BUFSIZE,"AT+MIPPROFILE=1,\"%s\"",apn);
 3062              		.loc 1 448 0
 3063              		.cfi_startproc
 3064              		@ Nested: function declared inside another function.
 3065              		@ args = 0, pretend = 0, frame = 0
 3066              		@ frame_needed = 1, uses_anonymous_args = 0
 3067 0000 98B5     		push	{r3, r4, r7, lr}
 3068              		.cfi_def_cfa_offset 16
 3069              		.cfi_offset 3, -16
 3070              		.cfi_offset 4, -12
 3071              		.cfi_offset 7, -8
 3072              		.cfi_offset 14, -4
 3073 0002 00AF     		add	r7, sp, #0
 3074              		.cfi_def_cfa_register 7
 3075 0004 6446     		mov	r4, ip
 449:../src/main.c **** 		return buf;
 3076              		.loc 1 449 0
 3077 0006 04F13002 		add	r2, r4, #48
 3078 000a A368     		ldr	r3, [r4, #8]
 3079 000c 1046     		mov	r0, r2
 3080 000e 8021     		movs	r1, #128
 3081 0010 034A     		ldr	r2, .L185
 3082 0012 FFF7FEFF 		bl	snprintf
 450:../src/main.c **** 	}
 3083              		.loc 1 450 0
 3084 0016 04F13003 		add	r3, r4, #48
 451:../src/main.c **** 	const char* at_mipopen(){
 3085              		.loc 1 451 0
 3086 001a 1846     		mov	r0, r3
 3087 001c 98BD     		pop	{r3, r4, r7, pc}
 3088              	.L186:
 3089 001e 00BF     		.align	2
 3090              	.L185:
 3091 0020 DC040000 		.word	.LC59
 3092              		.cfi_endproc
 3093              	.LFE28:
 3095              		.section	.rodata
 3096 04f1 000000   		.align	2
 3097              	.LC60:
 3098 04f4 41542B4D 		.ascii	"AT+MIPOPEN=%d,%hu,\"%s\",%hu,0\000"
 3098      49504F50 
 3098      454E3D25 
 3098      642C2568 
 3098      752C2225 
 3099              		.section	.text.at_mipopen.6606,"ax",%progbits
 3100              		.align	2
 3101              		.thumb
 3102              		.thumb_func
 3104              	at_mipopen.6606:
 3105              	.LFB29:
 452:../src/main.c **** 		snprintf(buf,UART_4G_BUFSIZE,"AT+MIPOPEN=%d,%hu,\"%s\",%hu,0",
 3106              		.loc 1 452 0
 3107              		.cfi_startproc
 3108              		@ Nested: function declared inside another function.
 3109              		@ args = 0, pretend = 0, frame = 0
 3110              		@ frame_needed = 1, uses_anonymous_args = 0
 3111 0000 B0B5     		push	{r4, r5, r7, lr}
 3112              		.cfi_def_cfa_offset 16
 3113              		.cfi_offset 4, -16
 3114              		.cfi_offset 5, -12
 3115              		.cfi_offset 7, -8
 3116              		.cfi_offset 14, -4
 3117 0002 84B0     		sub	sp, sp, #16
 3118              		.cfi_def_cfa_offset 32
 3119 0004 04AF     		add	r7, sp, #16
 3120              		.cfi_def_cfa 7, 16
 3121 0006 6446     		mov	r4, ip
 453:../src/main.c **** 				sockid,lcport,rmip,rmport);
 3122              		.loc 1 453 0
 3123 0008 04F13002 		add	r2, r4, #48
 3124 000c E389     		ldrh	r3, [r4, #14]
 3125 000e 1846     		mov	r0, r3
 3126 0010 A389     		ldrh	r3, [r4, #12]
 3127 0012 1946     		mov	r1, r3
 3128 0014 6568     		ldr	r5, [r4, #4]
 3129 0016 2368     		ldr	r3, [r4]
 3130 0018 0090     		str	r0, [sp]
 3131 001a 0193     		str	r3, [sp, #4]
 3132 001c 0291     		str	r1, [sp, #8]
 3133 001e 1046     		mov	r0, r2
 3134 0020 8021     		movs	r1, #128
 3135 0022 044A     		ldr	r2, .L189
 3136 0024 2B46     		mov	r3, r5
 3137 0026 FFF7FEFF 		bl	snprintf
 455:../src/main.c **** 	}
 3138              		.loc 1 455 0
 3139 002a 04F13003 		add	r3, r4, #48
 456:../src/main.c **** 	int at_miopen_r(){
 3140              		.loc 1 456 0
 3141 002e 1846     		mov	r0, r3
 3142 0030 BD46     		mov	sp, r7
 3143              		.cfi_def_cfa_register 13
 3144              		@ sp needed
 3145 0032 B0BD     		pop	{r4, r5, r7, pc}
 3146              	.L190:
 3147              		.align	2
 3148              	.L189:
 3149 0034 F4040000 		.word	.LC60
 3150              		.cfi_endproc
 3151              	.LFE29:
 3153              		.section	.rodata
 3154 0511 000000   		.align	2
 3155              	.LC61:
 3156 0514 2B4D4950 		.ascii	"+MIPOPEN=%d,%d\000"
 3156      4F50454E 
 3156      3D25642C 
 3156      256400
 3157              		.section	.text.at_miopen_r.6608,"ax",%progbits
 3158              		.align	2
 3159              		.thumb
 3160              		.thumb_func
 3162              	at_miopen_r.6608:
 3163              	.LFB30:
 457:../src/main.c **** 		int res;
 3164              		.loc 1 457 0
 3165              		.cfi_startproc
 3166              		@ Nested: function declared inside another function.
 3167              		@ args = 0, pretend = 0, frame = 16
 3168              		@ frame_needed = 1, uses_anonymous_args = 0
 3169 0000 90B5     		push	{r4, r7, lr}
 3170              		.cfi_def_cfa_offset 12
 3171              		.cfi_offset 4, -12
 3172              		.cfi_offset 7, -8
 3173              		.cfi_offset 14, -4
 3174 0002 85B0     		sub	sp, sp, #20
 3175              		.cfi_def_cfa_offset 32
 3176 0004 00AF     		add	r7, sp, #0
 3177              		.cfi_def_cfa_register 7
 3178 0006 6446     		mov	r4, ip
 459:../src/main.c **** 		res = sscanf(buf,"+MIPOPEN=%d,%d",&a,&b);
 3179              		.loc 1 459 0
 3180 0008 0023     		movs	r3, #0
 3181 000a BB60     		str	r3, [r7, #8]
 3182 000c 0023     		movs	r3, #0
 3183 000e 7B60     		str	r3, [r7, #4]
 460:../src/main.c **** 		if(res==2 && a==sockid && b==1)
 3184              		.loc 1 460 0
 3185 0010 04F13001 		add	r1, r4, #48
 3186 0014 07F10802 		add	r2, r7, #8
 3187 0018 3B1D     		adds	r3, r7, #4
 3188 001a 0846     		mov	r0, r1
 3189 001c 0A49     		ldr	r1, .L195
 3190 001e FFF7FEFF 		bl	sscanf
 3191 0022 F860     		str	r0, [r7, #12]
 461:../src/main.c **** 			return 0;
 3192              		.loc 1 461 0
 3193 0024 FB68     		ldr	r3, [r7, #12]
 3194 0026 022B     		cmp	r3, #2
 3195 0028 08D1     		bne	.L192
 461:../src/main.c **** 			return 0;
 3196              		.loc 1 461 0 is_stmt 0 discriminator 1
 3197 002a BA68     		ldr	r2, [r7, #8]
 3198 002c 6368     		ldr	r3, [r4, #4]
 3199 002e 9A42     		cmp	r2, r3
 3200 0030 04D1     		bne	.L192
 461:../src/main.c **** 			return 0;
 3201              		.loc 1 461 0 discriminator 2
 3202 0032 7B68     		ldr	r3, [r7, #4]
 3203 0034 012B     		cmp	r3, #1
 3204 0036 01D1     		bne	.L192
 462:../src/main.c **** 		return -1;;
 3205              		.loc 1 462 0 is_stmt 1
 3206 0038 0023     		movs	r3, #0
 3207 003a 01E0     		b	.L194
 3208              	.L192:
 463:../src/main.c **** 	}
 3209              		.loc 1 463 0
 3210 003c 4FF0FF33 		mov	r3, #-1
 3211              	.L194:
 464:../src/main.c **** 	int at_mipcall(){
 3212              		.loc 1 464 0 discriminator 1
 3213 0040 1846     		mov	r0, r3
 3214 0042 1437     		adds	r7, r7, #20
 3215              		.cfi_def_cfa_offset 12
 3216 0044 BD46     		mov	sp, r7
 3217              		.cfi_def_cfa_register 13
 3218              		@ sp needed
 3219 0046 90BD     		pop	{r4, r7, pc}
 3220              	.L196:
 3221              		.align	2
 3222              	.L195:
 3223 0048 14050000 		.word	.LC61
 3224              		.cfi_endproc
 3225              	.LFE30:
 3227              		.section	.rodata
 3228 0523 00       		.align	2
 3229              	.LC62:
 3230 0524 2B4D4950 		.ascii	"+MIPCALL:%d, %s\000"
 3230      43414C4C 
 3230      3A25642C 
 3230      20257300 
 3231              		.section	.text.at_mipcall.6613,"ax",%progbits
 3232              		.align	2
 3233              		.thumb
 3234              		.thumb_func
 3236              	at_mipcall.6613:
 3237              	.LFB31:
 465:../src/main.c **** 		int res;
 3238              		.loc 1 465 0
 3239              		.cfi_startproc
 3240              		@ Nested: function declared inside another function.
 3241              		@ args = 0, pretend = 0, frame = 8
 3242              		@ frame_needed = 1, uses_anonymous_args = 0
 3243 0000 90B5     		push	{r4, r7, lr}
 3244              		.cfi_def_cfa_offset 12
 3245              		.cfi_offset 4, -12
 3246              		.cfi_offset 7, -8
 3247              		.cfi_offset 14, -4
 3248 0002 83B0     		sub	sp, sp, #12
 3249              		.cfi_def_cfa_offset 24
 3250 0004 00AF     		add	r7, sp, #0
 3251              		.cfi_def_cfa_register 7
 3252 0006 6446     		mov	r4, ip
 467:../src/main.c **** 		res = sscanf(buf,"+MIPCALL:%d, %s",&a,lcip);
 3253              		.loc 1 467 0
 3254 0008 0023     		movs	r3, #0
 3255 000a 3B60     		str	r3, [r7]
 468:../src/main.c **** 		if(res==2 && a==sockid)
 3256              		.loc 1 468 0
 3257 000c 04F13001 		add	r1, r4, #48
 3258 0010 04F11003 		add	r3, r4, #16
 3259 0014 3A46     		mov	r2, r7
 3260 0016 0846     		mov	r0, r1
 3261 0018 0949     		ldr	r1, .L201
 3262 001a FFF7FEFF 		bl	sscanf
 3263 001e 7860     		str	r0, [r7, #4]
 469:../src/main.c **** 			return 0;
 3264              		.loc 1 469 0
 3265 0020 7B68     		ldr	r3, [r7, #4]
 3266 0022 022B     		cmp	r3, #2
 3267 0024 05D1     		bne	.L198
 469:../src/main.c **** 			return 0;
 3268              		.loc 1 469 0 is_stmt 0 discriminator 1
 3269 0026 3A68     		ldr	r2, [r7]
 3270 0028 6368     		ldr	r3, [r4, #4]
 3271 002a 9A42     		cmp	r2, r3
 3272 002c 01D1     		bne	.L198
 470:../src/main.c **** 		return -1;;
 3273              		.loc 1 470 0 is_stmt 1
 3274 002e 0023     		movs	r3, #0
 3275 0030 01E0     		b	.L200
 3276              	.L198:
 471:../src/main.c **** 	}
 3277              		.loc 1 471 0
 3278 0032 4FF0FF33 		mov	r3, #-1
 3279              	.L200:
 472:../src/main.c **** 	struct AtTalkTable {
 3280              		.loc 1 472 0 discriminator 1
 3281 0036 1846     		mov	r0, r3
 3282 0038 0C37     		adds	r7, r7, #12
 3283              		.cfi_def_cfa_offset 12
 3284 003a BD46     		mov	sp, r7
 3285              		.cfi_def_cfa_register 13
 3286              		@ sp needed
 3287 003c 90BD     		pop	{r4, r7, pc}
 3288              	.L202:
 3289 003e 00BF     		.align	2
 3290              	.L201:
 3291 0040 24050000 		.word	.LC62
 3292              		.cfi_endproc
 3293              	.LFE31:
 3295              		.section	.text.load_time,"ax",%progbits
 3296              		.align	2
 3297              		.global	load_time
 3298              		.thumb
 3299              		.thumb_func
 3301              	load_time:
 3302              	.LFB32:
 551:../src/main.c **** 
 552:../src/main.c **** void load_time()
 553:../src/main.c **** {
 3303              		.loc 1 553 0
 3304              		.cfi_startproc
 3305              		@ args = 0, pretend = 0, frame = 48
 3306              		@ frame_needed = 1, uses_anonymous_args = 0
 3307 0000 90B5     		push	{r4, r7, lr}
 3308              		.cfi_def_cfa_offset 12
 3309              		.cfi_offset 4, -12
 3310              		.cfi_offset 7, -8
 3311              		.cfi_offset 14, -4
 3312 0002 8DB0     		sub	sp, sp, #52
 3313              		.cfi_def_cfa_offset 64
 3314 0004 00AF     		add	r7, sp, #0
 3315              		.cfi_def_cfa_register 7
 554:../src/main.c **** 	struct DS3231_Time dst;
 555:../src/main.c **** 	struct DS3231_Time dst2;
 556:../src/main.c **** 	taskENTER_CRITICAL();
 3316              		.loc 1 556 0
 3317 0006 FFF7FEFF 		bl	vPortEnterCritical
 557:../src/main.c **** 	ds3231_gettime(&dst2);	//local
 3318              		.loc 1 557 0
 3319 000a 07F12003 		add	r3, r7, #32
 3320 000e 1846     		mov	r0, r3
 3321 0010 FFF7FEFF 		bl	ds3231_gettime
 3322              	.L204:
 558:../src/main.c **** 	do{
 559:../src/main.c **** 		ds3231_gettime(&dst);
 3323              		.loc 1 559 0 discriminator 1
 3324 0014 07F12803 		add	r3, r7, #40
 3325 0018 1846     		mov	r0, r3
 3326 001a FFF7FEFF 		bl	ds3231_gettime
 560:../src/main.c **** 	}while(dst.sec==dst2.sec);
 3327              		.loc 1 560 0 discriminator 1
 3328 001e 97F82820 		ldrb	r2, [r7, #40]	@ zero_extendqisi2
 3329 0022 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 3330 0026 9A42     		cmp	r2, r3
 3331 0028 F4D0     		beq	.L204
 561:../src/main.c **** 	taskEXIT_CRITICAL();
 3332              		.loc 1 561 0
 3333 002a FFF7FEFF 		bl	vPortExitCritical
 562:../src/main.c **** 	struct tm ltm = {
 563:../src/main.c **** 		.tm_sec = bcd2int(dst.sec),
 3334              		.loc 1 563 0
 3335 002e 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 3336 0032 1846     		mov	r0, r3
 3337 0034 FFF7FEFF 		bl	bcd2int
 3338 0038 0346     		mov	r3, r0
 562:../src/main.c **** 	struct tm ltm = {
 3339              		.loc 1 562 0
 3340 003a 7B60     		str	r3, [r7, #4]
 564:../src/main.c **** 		.tm_min = bcd2int(dst.min),
 3341              		.loc 1 564 0
 3342 003c 97F82930 		ldrb	r3, [r7, #41]	@ zero_extendqisi2
 3343 0040 1846     		mov	r0, r3
 3344 0042 FFF7FEFF 		bl	bcd2int
 3345 0046 0346     		mov	r3, r0
 562:../src/main.c **** 	struct tm ltm = {
 3346              		.loc 1 562 0
 3347 0048 BB60     		str	r3, [r7, #8]
 565:../src/main.c **** 		.tm_hour = bcd2int(dst.hour),
 3348              		.loc 1 565 0
 3349 004a 97F82A30 		ldrb	r3, [r7, #42]	@ zero_extendqisi2
 3350 004e 1846     		mov	r0, r3
 3351 0050 FFF7FEFF 		bl	bcd2int
 3352 0054 0346     		mov	r3, r0
 562:../src/main.c **** 	struct tm ltm = {
 3353              		.loc 1 562 0
 3354 0056 FB60     		str	r3, [r7, #12]
 566:../src/main.c **** 		.tm_wday = bcd2int(dst.wday)-1,
 567:../src/main.c **** 		.tm_mday = bcd2int(dst.mday),
 3355              		.loc 1 567 0
 3356 0058 97F82C30 		ldrb	r3, [r7, #44]	@ zero_extendqisi2
 3357 005c 1846     		mov	r0, r3
 3358 005e FFF7FEFF 		bl	bcd2int
 3359 0062 0346     		mov	r3, r0
 562:../src/main.c **** 		.tm_sec = bcd2int(dst.sec),
 3360              		.loc 1 562 0
 3361 0064 3B61     		str	r3, [r7, #16]
 568:../src/main.c **** 		.tm_mon = bcd2int(dst.mon),
 3362              		.loc 1 568 0
 3363 0066 97F82D30 		ldrb	r3, [r7, #45]	@ zero_extendqisi2
 3364 006a 1846     		mov	r0, r3
 3365 006c FFF7FEFF 		bl	bcd2int
 3366 0070 0346     		mov	r3, r0
 562:../src/main.c **** 		.tm_sec = bcd2int(dst.sec),
 3367              		.loc 1 562 0
 3368 0072 7B61     		str	r3, [r7, #20]
 569:../src/main.c **** 		.tm_year = (2000 + bcd2int(dst.year)) - 1900,
 3369              		.loc 1 569 0
 3370 0074 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 3371 0078 1846     		mov	r0, r3
 3372 007a FFF7FEFF 		bl	bcd2int
 3373 007e 0346     		mov	r3, r0
 3374 0080 6433     		adds	r3, r3, #100
 562:../src/main.c **** 		.tm_sec = bcd2int(dst.sec),
 3375              		.loc 1 562 0
 3376 0082 BB61     		str	r3, [r7, #24]
 566:../src/main.c **** 		.tm_mday = bcd2int(dst.mday),
 3377              		.loc 1 566 0
 3378 0084 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 3379 0088 1846     		mov	r0, r3
 3380 008a FFF7FEFF 		bl	bcd2int
 3381 008e 0346     		mov	r3, r0
 3382 0090 013B     		subs	r3, r3, #1
 562:../src/main.c **** 		.tm_sec = bcd2int(dst.sec),
 3383              		.loc 1 562 0
 3384 0092 FB61     		str	r3, [r7, #28]
 570:../src/main.c **** 	};
 571:../src/main.c **** 	time_t now = mktime(&ltm) - __timezone(NULL);	//to utc
 3385              		.loc 1 571 0
 3386 0094 3B1D     		adds	r3, r7, #4
 3387 0096 1846     		mov	r0, r3
 3388 0098 FFF7FEFF 		bl	mktime
 3389 009c 0446     		mov	r4, r0
 3390 009e 0020     		movs	r0, #0
 3391 00a0 FFF7FEFF 		bl	__timezone
 3392 00a4 0346     		mov	r3, r0
 3393 00a6 E31A     		subs	r3, r4, r3
 3394 00a8 3B60     		str	r3, [r7]
 572:../src/main.c **** 	time(&now);
 3395              		.loc 1 572 0
 3396 00aa 3B46     		mov	r3, r7
 3397 00ac 1846     		mov	r0, r3
 3398 00ae FFF7FEFF 		bl	time
 573:../src/main.c **** }
 3399              		.loc 1 573 0
 3400 00b2 3437     		adds	r7, r7, #52
 3401              		.cfi_def_cfa_offset 12
 3402 00b4 BD46     		mov	sp, r7
 3403              		.cfi_def_cfa_register 13
 3404              		@ sp needed
 3405 00b6 90BD     		pop	{r4, r7, pc}
 3406              		.cfi_endproc
 3407              	.LFE32:
 3409              		.section	.text.store_time,"ax",%progbits
 3410              		.align	2
 3411              		.global	store_time
 3412              		.thumb
 3413              		.thumb_func
 3415              	store_time:
 3416              	.LFB33:
 574:../src/main.c **** void store_time()
 575:../src/main.c **** {
 3417              		.loc 1 575 0
 3418              		.cfi_startproc
 3419              		@ args = 0, pretend = 0, frame = 40
 3420              		@ frame_needed = 1, uses_anonymous_args = 0
 3421 0000 80B5     		push	{r7, lr}
 3422              		.cfi_def_cfa_offset 8
 3423              		.cfi_offset 7, -8
 3424              		.cfi_offset 14, -4
 3425 0002 8AB0     		sub	sp, sp, #40
 3426              		.cfi_def_cfa_offset 48
 3427 0004 00AF     		add	r7, sp, #0
 3428              		.cfi_def_cfa_register 7
 576:../src/main.c **** 	time_t t = time(NULL);		//utc
 3429              		.loc 1 576 0
 3430 0006 0020     		movs	r0, #0
 3431 0008 FFF7FEFF 		bl	time
 3432 000c 0346     		mov	r3, r0
 3433 000e 7B62     		str	r3, [r7, #36]
 577:../src/main.c **** 	struct tm ltm;
 578:../src/main.c **** 	localtime_s(&t,&ltm);		//to local
 3434              		.loc 1 578 0
 3435 0010 07F12402 		add	r2, r7, #36
 3436 0014 07F10803 		add	r3, r7, #8
 3437 0018 1046     		mov	r0, r2
 3438 001a 1946     		mov	r1, r3
 3439 001c FFF7FEFF 		bl	localtime_s
 579:../src/main.c **** 	struct DS3231_Time dst = {
 580:../src/main.c **** 		.sec = 	int2bcd(ltm.tm_sec),
 3440              		.loc 1 580 0
 3441 0020 BB68     		ldr	r3, [r7, #8]
 3442 0022 1846     		mov	r0, r3
 3443 0024 FFF7FEFF 		bl	int2bcd
 3444 0028 0346     		mov	r3, r0
 579:../src/main.c **** 	struct DS3231_Time dst = {
 3445              		.loc 1 579 0
 3446 002a 3B70     		strb	r3, [r7]
 581:../src/main.c **** 		.min = 	int2bcd(ltm.tm_min),
 3447              		.loc 1 581 0
 3448 002c FB68     		ldr	r3, [r7, #12]
 3449 002e 1846     		mov	r0, r3
 3450 0030 FFF7FEFF 		bl	int2bcd
 3451 0034 0346     		mov	r3, r0
 579:../src/main.c **** 	struct DS3231_Time dst = {
 3452              		.loc 1 579 0
 3453 0036 7B70     		strb	r3, [r7, #1]
 582:../src/main.c **** 		.hour = int2bcd(ltm.tm_hour),
 3454              		.loc 1 582 0
 3455 0038 3B69     		ldr	r3, [r7, #16]
 3456 003a 1846     		mov	r0, r3
 3457 003c FFF7FEFF 		bl	int2bcd
 3458 0040 0346     		mov	r3, r0
 579:../src/main.c **** 	struct DS3231_Time dst = {
 3459              		.loc 1 579 0
 3460 0042 BB70     		strb	r3, [r7, #2]
 583:../src/main.c **** 		.wday = int2bcd(ltm.tm_wday+1),
 3461              		.loc 1 583 0
 3462 0044 3B6A     		ldr	r3, [r7, #32]
 3463 0046 0133     		adds	r3, r3, #1
 3464 0048 1846     		mov	r0, r3
 3465 004a FFF7FEFF 		bl	int2bcd
 3466 004e 0346     		mov	r3, r0
 579:../src/main.c **** 		.sec = 	int2bcd(ltm.tm_sec),
 3467              		.loc 1 579 0
 3468 0050 FB70     		strb	r3, [r7, #3]
 584:../src/main.c **** 		.mday = int2bcd(ltm.tm_mday),
 3469              		.loc 1 584 0
 3470 0052 7B69     		ldr	r3, [r7, #20]
 3471 0054 1846     		mov	r0, r3
 3472 0056 FFF7FEFF 		bl	int2bcd
 3473 005a 0346     		mov	r3, r0
 579:../src/main.c **** 		.sec = 	int2bcd(ltm.tm_sec),
 3474              		.loc 1 579 0
 3475 005c 3B71     		strb	r3, [r7, #4]
 585:../src/main.c **** 		.mon = 	int2bcd(ltm.tm_mon),
 3476              		.loc 1 585 0
 3477 005e BB69     		ldr	r3, [r7, #24]
 3478 0060 1846     		mov	r0, r3
 3479 0062 FFF7FEFF 		bl	int2bcd
 3480 0066 0346     		mov	r3, r0
 579:../src/main.c **** 		.sec = 	int2bcd(ltm.tm_sec),
 3481              		.loc 1 579 0
 3482 0068 7B71     		strb	r3, [r7, #5]
 586:../src/main.c **** 		.year = int2bcd(ltm.tm_year%100),
 3483              		.loc 1 586 0
 3484 006a FB69     		ldr	r3, [r7, #28]
 3485 006c 0C4A     		ldr	r2, .L206
 3486 006e 82FB0312 		smull	r1, r2, r2, r3
 3487 0072 5111     		asrs	r1, r2, #5
 3488 0074 DA17     		asrs	r2, r3, #31
 3489 0076 8A1A     		subs	r2, r1, r2
 3490 0078 6421     		movs	r1, #100
 3491 007a 01FB02F2 		mul	r2, r1, r2
 3492 007e 9A1A     		subs	r2, r3, r2
 3493 0080 1046     		mov	r0, r2
 3494 0082 FFF7FEFF 		bl	int2bcd
 3495 0086 0346     		mov	r3, r0
 579:../src/main.c **** 		.sec = 	int2bcd(ltm.tm_sec),
 3496              		.loc 1 579 0
 3497 0088 BB71     		strb	r3, [r7, #6]
 587:../src/main.c **** 	};
 588:../src/main.c **** 	taskENTER_CRITICAL();
 3498              		.loc 1 588 0
 3499 008a FFF7FEFF 		bl	vPortEnterCritical
 589:../src/main.c **** 	ds3231_settime(&dst);
 3500              		.loc 1 589 0
 3501 008e 3B46     		mov	r3, r7
 3502 0090 1846     		mov	r0, r3
 3503 0092 FFF7FEFF 		bl	ds3231_settime
 590:../src/main.c **** 	taskEXIT_CRITICAL();
 3504              		.loc 1 590 0
 3505 0096 FFF7FEFF 		bl	vPortExitCritical
 591:../src/main.c **** }
 3506              		.loc 1 591 0
 3507 009a 2837     		adds	r7, r7, #40
 3508              		.cfi_def_cfa_offset 8
 3509 009c BD46     		mov	sp, r7
 3510              		.cfi_def_cfa_register 13
 3511              		@ sp needed
 3512 009e 80BD     		pop	{r7, pc}
 3513              	.L207:
 3514              		.align	2
 3515              	.L206:
 3516 00a0 1F85EB51 		.word	1374389535
 3517              		.cfi_endproc
 3518              	.LFE33:
 3520              		.section	.rodata
 3521              		.align	2
 3522              	.LC63:
 3523 0534 72656164 		.ascii	"read time: %s\000"
 3523      2074696D 
 3523      653A2025 
 3523      7300
 3524              		.section	.text.rtc_proc,"ax",%progbits
 3525              		.align	2
 3526              		.global	rtc_proc
 3527              		.thumb
 3528              		.thumb_func
 3530              	rtc_proc:
 3531              	.LFB34:
 592:../src/main.c **** void rtc_proc(void* p)
 593:../src/main.c **** {
 3532              		.loc 1 593 0
 3533              		.cfi_startproc
 3534              		@ args = 0, pretend = 0, frame = 40
 3535              		@ frame_needed = 1, uses_anonymous_args = 0
 3536 0000 80B5     		push	{r7, lr}
 3537              		.cfi_def_cfa_offset 8
 3538              		.cfi_offset 7, -8
 3539              		.cfi_offset 14, -4
 3540 0002 8AB0     		sub	sp, sp, #40
 3541              		.cfi_def_cfa_offset 48
 3542 0004 00AF     		add	r7, sp, #0
 3543              		.cfi_def_cfa_register 7
 3544 0006 7860     		str	r0, [r7, #4]
 3545              	.L209:
 3546              	.LBB18:
 594:../src/main.c **** 	(void)p;
 595:../src/main.c **** 	for(;;){
 596:../src/main.c **** 		struct tm ltm;
 597:../src/main.c **** 		localtime_s(NULL,&ltm);
 3547              		.loc 1 597 0 discriminator 1
 3548 0008 07F10C03 		add	r3, r7, #12
 3549 000c 0020     		movs	r0, #0
 3550 000e 1946     		mov	r1, r3
 3551 0010 FFF7FEFF 		bl	localtime_s
 598:../src/main.c **** 		os_trace("read time: %s",asctime(&ltm));
 3552              		.loc 1 598 0 discriminator 1
 3553 0014 07F10C03 		add	r3, r7, #12
 3554 0018 1846     		mov	r0, r3
 3555 001a FFF7FEFF 		bl	asctime
 3556 001e 0346     		mov	r3, r0
 3557 0020 0448     		ldr	r0, .L210
 3558 0022 1946     		mov	r1, r3
 3559 0024 FFF7FEFF 		bl	os_trace
 599:../src/main.c **** 		os_sleep_ms(1000);
 3560              		.loc 1 599 0 discriminator 1
 3561 0028 4FF47A70 		mov	r0, #1000
 3562 002c FFF7FEFF 		bl	os_sleep_ms
 3563              	.LBE18:
 600:../src/main.c **** 	}
 3564              		.loc 1 600 0 discriminator 1
 3565 0030 EAE7     		b	.L209
 3566              	.L211:
 3567 0032 00BF     		.align	2
 3568              	.L210:
 3569 0034 34050000 		.word	.LC63
 3570              		.cfi_endproc
 3571              	.LFE34:
 3573              		.global	__aeabi_f2d
 3574              		.section	.rodata
 3575 0542 0000     		.align	2
 3576              	.LC64:
 3577 0544 44533332 		.ascii	"DS3231 temprature: %f\012\000"
 3577      33312074 
 3577      656D7072 
 3577      61747572 
 3577      653A2025 
 3578 055b 00       		.align	2
 3579              	.LC65:
 3580 055c 7274635F 		.ascii	"rtc_proc\000"
 3580      70726F63 
 3580      00
 3581 0565 000000   		.align	2
 3582              	.LC66:
 3583 0568 70645452 		.ascii	"pdTRUE==xTaskCreate(rtc_proc,\"rtc_proc\", 1024/4, "
 3583      55453D3D 
 3583      78546173 
 3583      6B437265 
 3583      61746528 
 3584 0599 4E554C4C 		.ascii	"NULL , 5, &rtc_handle)\000"
 3584      202C2035 
 3584      2C202672 
 3584      74635F68 
 3584      616E646C 
 3585              		.section	.text.test_rtc,"ax",%progbits
 3586              		.align	2
 3587              		.global	test_rtc
 3588              		.thumb
 3589              		.thumb_func
 3591              	test_rtc:
 3592              	.LFB35:
 601:../src/main.c **** }
 602:../src/main.c **** int test_rtc(void)
 603:../src/main.c **** {
 3593              		.loc 1 603 0
 3594              		.cfi_startproc
 3595              		@ args = 0, pretend = 0, frame = 16
 3596              		@ frame_needed = 1, uses_anonymous_args = 0
 3597 0000 80B5     		push	{r7, lr}
 3598              		.cfi_def_cfa_offset 8
 3599              		.cfi_offset 7, -8
 3600              		.cfi_offset 14, -4
 3601 0002 88B0     		sub	sp, sp, #32
 3602              		.cfi_def_cfa_offset 40
 3603 0004 04AF     		add	r7, sp, #16
 3604              		.cfi_def_cfa 7, 24
 604:../src/main.c **** 	TaskHandle_t rtc_handle;
 605:../src/main.c **** 	float tempr = ds3231_gettempr();
 3605              		.loc 1 605 0
 3606 0006 FFF7FEFF 		bl	ds3231_gettempr
 3607 000a 87ED020A 		fsts	s0, [r7, #8]
 606:../src/main.c **** 	os_trace("DS3231 temprature: %f\n", tempr);
 3608              		.loc 1 606 0
 3609 000e B868     		ldr	r0, [r7, #8]	@ float
 3610 0010 FFF7FEFF 		bl	__aeabi_f2d
 3611 0014 0246     		mov	r2, r0
 3612 0016 0B46     		mov	r3, r1
 3613 0018 1948     		ldr	r0, .L218
 3614 001a FFF7FEFF 		bl	os_trace
 607:../src/main.c **** //	//2017/10/20 9:26:0
 608:../src/main.c **** //	time_t set = 1508462760;	//utc
 609:../src/main.c **** //	struct tm ltm;
 610:../src/main.c **** //	localtime_s(&set,&ltm);
 611:../src/main.c **** //	printf("set time: %s\n",asctime(&ltm));
 612:../src/main.c **** //	time(&set);
 613:../src/main.c **** //	store_time();
 614:../src/main.c **** 	OS_ASSERT(pdTRUE==xTaskCreate(rtc_proc,"rtc_proc", 1024/4, NULL , 5, &rtc_handle));
 3615              		.loc 1 614 0
 3616 001e 0523     		movs	r3, #5
 3617 0020 0093     		str	r3, [sp]
 3618 0022 3B1D     		adds	r3, r7, #4
 3619 0024 0193     		str	r3, [sp, #4]
 3620 0026 0023     		movs	r3, #0
 3621 0028 0293     		str	r3, [sp, #8]
 3622 002a 0023     		movs	r3, #0
 3623 002c 0393     		str	r3, [sp, #12]
 3624 002e 1548     		ldr	r0, .L218+4
 3625 0030 1549     		ldr	r1, .L218+8
 3626 0032 4FF48072 		mov	r2, #256
 3627 0036 0023     		movs	r3, #0
 3628 0038 FFF7FEFF 		bl	xTaskGenericCreate
 3629 003c 0346     		mov	r3, r0
 3630 003e 012B     		cmp	r3, #1
 3631 0040 05D0     		beq	.L213
 3632              		.loc 1 614 0 is_stmt 0 discriminator 1
 3633 0042 1248     		ldr	r0, .L218+12
 3634 0044 1249     		ldr	r1, .L218+16
 3635 0046 134A     		ldr	r2, .L218+20
 3636 0048 FFF7FEFF 		bl	os_trace
 3637              	.L214:
 3638 004c FEE7     		b	.L214
 3639              	.L213:
 3640              	.LBB19:
 615:../src/main.c **** 	for(int i=0;i<2;i++){
 3641              		.loc 1 615 0 is_stmt 1
 3642 004e 0023     		movs	r3, #0
 3643 0050 FB60     		str	r3, [r7, #12]
 3644 0052 08E0     		b	.L215
 3645              	.L216:
 616:../src/main.c **** 		load_time();		//per 5-sec load time from hardware
 3646              		.loc 1 616 0 discriminator 3
 3647 0054 FFF7FEFF 		bl	load_time
 617:../src/main.c **** 		os_sleep_ms(5000);
 3648              		.loc 1 617 0 discriminator 3
 3649 0058 41F28830 		movw	r0, #5000
 3650 005c FFF7FEFF 		bl	os_sleep_ms
 615:../src/main.c **** 	for(int i=0;i<2;i++){
 3651              		.loc 1 615 0 discriminator 3
 3652 0060 FB68     		ldr	r3, [r7, #12]
 3653 0062 0133     		adds	r3, r3, #1
 3654 0064 FB60     		str	r3, [r7, #12]
 3655              	.L215:
 615:../src/main.c **** 	for(int i=0;i<2;i++){
 3656              		.loc 1 615 0 is_stmt 0 discriminator 1
 3657 0066 FB68     		ldr	r3, [r7, #12]
 3658 0068 012B     		cmp	r3, #1
 3659 006a F3DD     		ble	.L216
 3660              	.LBE19:
 618:../src/main.c **** 	}
 619:../src/main.c **** 	vTaskDelete(rtc_handle);
 3661              		.loc 1 619 0 is_stmt 1
 3662 006c 7B68     		ldr	r3, [r7, #4]
 3663 006e 1846     		mov	r0, r3
 3664 0070 FFF7FEFF 		bl	vTaskDelete
 620:../src/main.c **** 	return 0;
 3665              		.loc 1 620 0
 3666 0074 0023     		movs	r3, #0
 621:../src/main.c **** }
 3667              		.loc 1 621 0
 3668 0076 1846     		mov	r0, r3
 3669 0078 1037     		adds	r7, r7, #16
 3670              		.cfi_def_cfa_offset 8
 3671 007a BD46     		mov	sp, r7
 3672              		.cfi_def_cfa_register 13
 3673              		@ sp needed
 3674 007c 80BD     		pop	{r7, pc}
 3675              	.L219:
 3676 007e 00BF     		.align	2
 3677              	.L218:
 3678 0080 44050000 		.word	.LC64
 3679 0084 00000000 		.word	rtc_proc
 3680 0088 5C050000 		.word	.LC65
 3681 008c 60010000 		.word	.LC20
 3682 0090 00000000 		.word	__FUNCTION__.6663
 3683 0094 68050000 		.word	.LC66
 3684              		.cfi_endproc
 3685              	.LFE35:
 3687              		.section	.rodata
 3688              		.align	2
 3689              	.LC67:
 3690 05b0 7265733D 		.ascii	"res=%d\012\000"
 3690      25640A00 
 3691              		.align	2
 3692              	.LC68:
 3693 05b8 25730A00 		.ascii	"%s\012\000"
 3694              		.align	2
 3695              	.LC69:
 3696 05bc 72656164 		.ascii	"read success.\012\000"
 3696      20737563 
 3696      63657373 
 3696      2E0A00
 3697 05cb 00       		.align	2
 3698              	.LC70:
 3699 05cc 72656164 		.ascii	"read failure.\012\000"
 3699      20666169 
 3699      6C757265 
 3699      2E0A00
 3700              		.section	.text.test_ds2411,"ax",%progbits
 3701              		.align	2
 3702              		.global	test_ds2411
 3703              		.thumb
 3704              		.thumb_func
 3706              	test_ds2411:
 3707              	.LFB36:
 622:../src/main.c **** int test_ds2411()
 623:../src/main.c **** {
 3708              		.loc 1 623 0
 3709              		.cfi_startproc
 3710              		@ args = 0, pretend = 0, frame = 40
 3711              		@ frame_needed = 1, uses_anonymous_args = 0
 3712 0000 80B5     		push	{r7, lr}
 3713              		.cfi_def_cfa_offset 8
 3714              		.cfi_offset 7, -8
 3715              		.cfi_offset 14, -4
 3716 0002 8AB0     		sub	sp, sp, #40
 3717              		.cfi_def_cfa_offset 48
 3718 0004 00AF     		add	r7, sp, #0
 3719              		.cfi_def_cfa_register 7
 3720              	.LBB20:
 624:../src/main.c **** 	for(int i=0;i<5;i++){
 3721              		.loc 1 624 0
 3722 0006 0023     		movs	r3, #0
 3723 0008 7B62     		str	r3, [r7, #36]
 3724 000a 28E0     		b	.L221
 3725              	.L224:
 3726              	.LBB21:
 625:../src/main.c **** 		char asc[17];
 626:../src/main.c **** 		char buf[8];
 627:../src/main.c **** 		taskENTER_CRITICAL();
 3727              		.loc 1 627 0
 3728 000c FFF7FEFF 		bl	vPortEnterCritical
 628:../src/main.c **** 		int res = ds2411_getsn((struct DS2411_SN*)buf);
 3729              		.loc 1 628 0
 3730 0010 3B1D     		adds	r3, r7, #4
 3731 0012 1846     		mov	r0, r3
 3732 0014 FFF7FEFF 		bl	ds2411_getsn
 3733 0018 3862     		str	r0, [r7, #32]
 629:../src/main.c **** 		taskEXIT_CRITICAL();
 3734              		.loc 1 629 0
 3735 001a FFF7FEFF 		bl	vPortExitCritical
 630:../src/main.c **** 		os_trace("res=%d\n",res);
 3736              		.loc 1 630 0
 3737 001e 1648     		ldr	r0, .L225
 3738 0020 396A     		ldr	r1, [r7, #32]
 3739 0022 FFF7FEFF 		bl	os_trace
 631:../src/main.c **** 		os_trace("%s\n",hx_dumphex2str(buf,8,asc));
 3740              		.loc 1 631 0
 3741 0026 3A1D     		adds	r2, r7, #4
 3742 0028 07F10C03 		add	r3, r7, #12
 3743 002c 1046     		mov	r0, r2
 3744 002e 0821     		movs	r1, #8
 3745 0030 1A46     		mov	r2, r3
 3746 0032 FFF7FEFF 		bl	hx_dumphex2str
 3747 0036 0346     		mov	r3, r0
 3748 0038 1048     		ldr	r0, .L225+4
 3749 003a 1946     		mov	r1, r3
 3750 003c FFF7FEFF 		bl	os_trace
 632:../src/main.c **** 		if(res==0){
 3751              		.loc 1 632 0
 3752 0040 3B6A     		ldr	r3, [r7, #32]
 3753 0042 002B     		cmp	r3, #0
 3754 0044 04D1     		bne	.L222
 633:../src/main.c **** 			os_trace("read success.\n");
 3755              		.loc 1 633 0
 3756 0046 0E48     		ldr	r0, .L225+8
 3757 0048 FFF7FEFF 		bl	os_trace
 634:../src/main.c **** 			return 0;
 3758              		.loc 1 634 0
 3759 004c 0023     		movs	r3, #0
 3760 004e 0EE0     		b	.L223
 3761              	.L222:
 635:../src/main.c **** 		}
 636:../src/main.c **** 		os_sleep_ms(1000);
 3762              		.loc 1 636 0
 3763 0050 4FF47A70 		mov	r0, #1000
 3764 0054 FFF7FEFF 		bl	os_sleep_ms
 3765              	.LBE21:
 624:../src/main.c **** 		char asc[17];
 3766              		.loc 1 624 0
 3767 0058 7B6A     		ldr	r3, [r7, #36]
 3768 005a 0133     		adds	r3, r3, #1
 3769 005c 7B62     		str	r3, [r7, #36]
 3770              	.L221:
 624:../src/main.c **** 		char asc[17];
 3771              		.loc 1 624 0 is_stmt 0 discriminator 1
 3772 005e 7B6A     		ldr	r3, [r7, #36]
 3773 0060 042B     		cmp	r3, #4
 3774 0062 D3DD     		ble	.L224
 3775              	.LBE20:
 637:../src/main.c **** 	}
 638:../src/main.c **** 	os_trace("read failure.\n");
 3776              		.loc 1 638 0 is_stmt 1
 3777 0064 0748     		ldr	r0, .L225+12
 3778 0066 FFF7FEFF 		bl	os_trace
 639:../src/main.c **** 	return -1;
 3779              		.loc 1 639 0
 3780 006a 4FF0FF33 		mov	r3, #-1
 3781              	.L223:
 640:../src/main.c **** }
 3782              		.loc 1 640 0
 3783 006e 1846     		mov	r0, r3
 3784 0070 2837     		adds	r7, r7, #40
 3785              		.cfi_def_cfa_offset 8
 3786 0072 BD46     		mov	sp, r7
 3787              		.cfi_def_cfa_register 13
 3788              		@ sp needed
 3789 0074 80BD     		pop	{r7, pc}
 3790              	.L226:
 3791 0076 00BF     		.align	2
 3792              	.L225:
 3793 0078 B0050000 		.word	.LC67
 3794 007c B8050000 		.word	.LC68
 3795 0080 BC050000 		.word	.LC69
 3796 0084 CC050000 		.word	.LC70
 3797              		.cfi_endproc
 3798              	.LFE36:
 3800              		.section	.rodata
 3801 05db 00       		.align	2
 3802              	.LC71:
 3803 05dc 72656365 		.ascii	"received GPS data too long (%d), truncate to %d byt"
 3803      69766564 
 3803      20475053 
 3803      20646174 
 3803      6120746F 
 3804 060f 652E0A00 		.ascii	"e.\012\000"
 3805 0613 00       		.align	2
 3806              	.LC72:
 3807 0614 72656365 		.ascii	"received GPS data: len=%u : \012%s\012\000"
 3807      69766564 
 3807      20475053 
 3807      20646174 
 3807      613A206C 
 3808 0635 000000   		.align	2
 3809              	.LC73:
 3810 0638 72656365 		.ascii	"receive GPS data timeout.\012\000"
 3810      69766520 
 3810      47505320 
 3810      64617461 
 3810      2074696D 
 3811              		.section	.text.test_gps,"ax",%progbits
 3812              		.align	2
 3813              		.global	test_gps
 3814              		.thumb
 3815              		.thumb_func
 3817              	test_gps:
 3818              	.LFB37:
 641:../src/main.c **** 
 642:../src/main.c **** int test_gps()
 643:../src/main.c **** {
 3819              		.loc 1 643 0
 3820              		.cfi_startproc
 3821              		@ args = 0, pretend = 0, frame = 520
 3822              		@ frame_needed = 1, uses_anonymous_args = 0
 3823 0000 80B5     		push	{r7, lr}
 3824              		.cfi_def_cfa_offset 8
 3825              		.cfi_offset 7, -8
 3826              		.cfi_offset 14, -4
 3827 0002 ADF5047D 		sub	sp, sp, #528
 3828              		.cfi_def_cfa_offset 536
 3829 0006 02AF     		add	r7, sp, #8
 3830              		.cfi_def_cfa 7, 528
 3831              	.LBB22:
 644:../src/main.c **** #define UART_GPS_BUFSIZE		(512U)
 645:../src/main.c **** 	uint8_t buf[UART_GPS_BUFSIZE];
 646:../src/main.c **** 	for(int i=0;i<5;i++){
 3832              		.loc 1 646 0
 3833 0008 0023     		movs	r3, #0
 3834 000a C7F80032 		str	r3, [r7, #512]
 3835 000e D7F80032 		ldr	r3, [r7, #512]
 3836 0012 042B     		cmp	r3, #4
 3837 0014 35DC     		bgt	.L228
 3838              	.LBB23:
 647:../src/main.c **** 		int rl = uart_getdata(UART_GPS,buf,UART_GPS_BUFSIZE,3000,100);
 3839              		.loc 1 647 0
 3840 0016 3A46     		mov	r2, r7
 3841 0018 6423     		movs	r3, #100
 3842 001a 0093     		str	r3, [sp]
 3843 001c 0220     		movs	r0, #2
 3844 001e 1146     		mov	r1, r2
 3845 0020 4FF40072 		mov	r2, #512
 3846 0024 40F6B833 		movw	r3, #3000
 3847 0028 FFF7FEFF 		bl	uart_getdata
 3848 002c C7F80402 		str	r0, [r7, #516]
 648:../src/main.c **** 		if(rl>0){
 3849              		.loc 1 648 0
 3850 0030 D7F80432 		ldr	r3, [r7, #516]
 3851 0034 002B     		cmp	r3, #0
 3852 0036 1EDD     		ble	.L229
 649:../src/main.c **** 			if(rl>=512){
 3853              		.loc 1 649 0
 3854 0038 D7F80432 		ldr	r3, [r7, #516]
 3855 003c B3F5007F 		cmp	r3, #512
 3856 0040 0ADB     		blt	.L230
 650:../src/main.c **** 				os_trace("received GPS data too long (%d), truncate to %d byte.\n",
 3857              		.loc 1 650 0
 3858 0042 1248     		ldr	r0, .L233
 3859 0044 D7F80412 		ldr	r1, [r7, #516]
 3860 0048 40F2FF12 		movw	r2, #511
 3861 004c FFF7FEFF 		bl	os_trace
 651:../src/main.c **** 						rl,UART_GPS_BUFSIZE -1);
 652:../src/main.c **** 				rl = UART_GPS_BUFSIZE - 1;
 3862              		.loc 1 652 0
 3863 0050 40F2FF13 		movw	r3, #511
 3864 0054 C7F80432 		str	r3, [r7, #516]
 3865              	.L230:
 653:../src/main.c **** 			}
 654:../src/main.c **** 			buf[rl] = 0;
 3866              		.loc 1 654 0
 3867 0058 3A46     		mov	r2, r7
 3868 005a D7F80432 		ldr	r3, [r7, #516]
 3869 005e 1344     		add	r3, r3, r2
 3870 0060 0022     		movs	r2, #0
 3871 0062 1A70     		strb	r2, [r3]
 655:../src/main.c **** 			os_trace("received GPS data: len=%u : \n%s\n",rl,buf);
 3872              		.loc 1 655 0
 3873 0064 3B46     		mov	r3, r7
 3874 0066 0A48     		ldr	r0, .L233+4
 3875 0068 D7F80412 		ldr	r1, [r7, #516]
 3876 006c 1A46     		mov	r2, r3
 3877 006e FFF7FEFF 		bl	os_trace
 656:../src/main.c **** 			return 0;
 3878              		.loc 1 656 0
 3879 0072 0023     		movs	r3, #0
 3880 0074 05E0     		b	.L227
 3881              	.L229:
 657:../src/main.c **** 		}else{
 658:../src/main.c **** 			os_trace("receive GPS data timeout.\n");
 3882              		.loc 1 658 0
 3883 0076 0748     		ldr	r0, .L233+8
 3884 0078 FFF7FEFF 		bl	os_trace
 659:../src/main.c **** 			return -1;
 3885              		.loc 1 659 0
 3886 007c 4FF0FF33 		mov	r3, #-1
 3887 0080 FFE7     		b	.L227
 3888              	.L228:
 3889              	.L227:
 3890              	.LBE23:
 3891              	.LBE22:
 660:../src/main.c **** 		}
 661:../src/main.c **** 	}
 662:../src/main.c **** }
 3892              		.loc 1 662 0
 3893 0082 1846     		mov	r0, r3
 3894 0084 07F50277 		add	r7, r7, #520
 3895              		.cfi_def_cfa_offset 8
 3896 0088 BD46     		mov	sp, r7
 3897              		.cfi_def_cfa_register 13
 3898              		@ sp needed
 3899 008a 80BD     		pop	{r7, pc}
 3900              	.L234:
 3901              		.align	2
 3902              	.L233:
 3903 008c DC050000 		.word	.LC71
 3904 0090 14060000 		.word	.LC72
 3905 0094 38060000 		.word	.LC73
 3906              		.cfi_endproc
 3907              	.LFE37:
 3909              		.section	.rodata
 3910 0653 00       		.align	2
 3911              	.LC74:
 3912 0654 72656365 		.ascii	"received RS485 data too long (%d), truncate to %d b"
 3912      69766564 
 3912      20525334 
 3912      38352064 
 3912      61746120 
 3913 0687 7974652E 		.ascii	"yte.\012\000"
 3913      0A00
 3914 068d 000000   		.align	2
 3915              	.LC75:
 3916 0690 72656365 		.ascii	"received RS485 data: len=%u : \012%s\012\000"
 3916      69766564 
 3916      20525334 
 3916      38352064 
 3916      6174613A 
 3917 06b3 00       		.align	2
 3918              	.LC76:
 3919 06b4 72656365 		.ascii	"receive RS485 data timeout.\012\000"
 3919      69766520 
 3919      52533438 
 3919      35206461 
 3919      74612074 
 3920              		.section	.text.test_485,"ax",%progbits
 3921              		.align	2
 3922              		.global	test_485
 3923              		.thumb
 3924              		.thumb_func
 3926              	test_485:
 3927              	.LFB38:
 663:../src/main.c **** 
 664:../src/main.c **** int test_485()
 665:../src/main.c **** {
 3928              		.loc 1 665 0
 3929              		.cfi_startproc
 3930              		@ args = 0, pretend = 0, frame = 520
 3931              		@ frame_needed = 1, uses_anonymous_args = 0
 3932 0000 80B5     		push	{r7, lr}
 3933              		.cfi_def_cfa_offset 8
 3934              		.cfi_offset 7, -8
 3935              		.cfi_offset 14, -4
 3936 0002 ADF5047D 		sub	sp, sp, #528
 3937              		.cfi_def_cfa_offset 536
 3938 0006 02AF     		add	r7, sp, #8
 3939              		.cfi_def_cfa 7, 528
 666:../src/main.c **** #define UART_485_BUFSIZE		(512U)
 667:../src/main.c **** 	uint8_t buf[UART_485_BUFSIZE];
 668:../src/main.c **** 	int rl = uart_getdata(UART_RS485,buf,UART_485_BUFSIZE,5000,100);
 3940              		.loc 1 668 0
 3941 0008 3A1D     		adds	r2, r7, #4
 3942 000a 6423     		movs	r3, #100
 3943 000c 0093     		str	r3, [sp]
 3944 000e 0020     		movs	r0, #0
 3945 0010 1146     		mov	r1, r2
 3946 0012 4FF40072 		mov	r2, #512
 3947 0016 41F28833 		movw	r3, #5000
 3948 001a FFF7FEFF 		bl	uart_getdata
 3949 001e C7F80402 		str	r0, [r7, #516]
 669:../src/main.c **** 	if(rl>0){
 3950              		.loc 1 669 0
 3951 0022 D7F80432 		ldr	r3, [r7, #516]
 3952 0026 002B     		cmp	r3, #0
 3953 0028 1EDD     		ble	.L236
 670:../src/main.c **** 		if(rl>=512){
 3954              		.loc 1 670 0
 3955 002a D7F80432 		ldr	r3, [r7, #516]
 3956 002e B3F5007F 		cmp	r3, #512
 3957 0032 0ADB     		blt	.L237
 671:../src/main.c **** 			os_trace("received RS485 data too long (%d), truncate to %d byte.\n",
 3958              		.loc 1 671 0
 3959 0034 1148     		ldr	r0, .L240
 3960 0036 D7F80412 		ldr	r1, [r7, #516]
 3961 003a 40F2FF12 		movw	r2, #511
 3962 003e FFF7FEFF 		bl	os_trace
 672:../src/main.c **** 					rl,UART_485_BUFSIZE -1);
 673:../src/main.c **** 			rl = UART_485_BUFSIZE - 1;
 3963              		.loc 1 673 0
 3964 0042 40F2FF13 		movw	r3, #511
 3965 0046 C7F80432 		str	r3, [r7, #516]
 3966              	.L237:
 674:../src/main.c **** 		}
 675:../src/main.c **** 		buf[rl] = 0;
 3967              		.loc 1 675 0
 3968 004a 3A1D     		adds	r2, r7, #4
 3969 004c D7F80432 		ldr	r3, [r7, #516]
 3970 0050 1344     		add	r3, r3, r2
 3971 0052 0022     		movs	r2, #0
 3972 0054 1A70     		strb	r2, [r3]
 676:../src/main.c **** 		os_trace("received RS485 data: len=%u : \n%s\n",rl,buf);
 3973              		.loc 1 676 0
 3974 0056 3B1D     		adds	r3, r7, #4
 3975 0058 0948     		ldr	r0, .L240+4
 3976 005a D7F80412 		ldr	r1, [r7, #516]
 3977 005e 1A46     		mov	r2, r3
 3978 0060 FFF7FEFF 		bl	os_trace
 677:../src/main.c **** 		return 0;
 3979              		.loc 1 677 0
 3980 0064 0023     		movs	r3, #0
 3981 0066 04E0     		b	.L239
 3982              	.L236:
 678:../src/main.c **** 	}else{
 679:../src/main.c **** 		os_trace("receive RS485 data timeout.\n");
 3983              		.loc 1 679 0
 3984 0068 0648     		ldr	r0, .L240+8
 3985 006a FFF7FEFF 		bl	os_trace
 680:../src/main.c **** 		return -1;
 3986              		.loc 1 680 0
 3987 006e 4FF0FF33 		mov	r3, #-1
 3988              	.L239:
 681:../src/main.c **** 	}
 682:../src/main.c **** }
 3989              		.loc 1 682 0 discriminator 1
 3990 0072 1846     		mov	r0, r3
 3991 0074 07F50277 		add	r7, r7, #520
 3992              		.cfi_def_cfa_offset 8
 3993 0078 BD46     		mov	sp, r7
 3994              		.cfi_def_cfa_register 13
 3995              		@ sp needed
 3996 007a 80BD     		pop	{r7, pc}
 3997              	.L241:
 3998              		.align	2
 3999              	.L240:
 4000 007c 54060000 		.word	.LC74
 4001 0080 90060000 		.word	.LC75
 4002 0084 B4060000 		.word	.LC76
 4003              		.cfi_endproc
 4004              	.LFE38:
 4006              		.section	.rodata
 4007 06d1 000000   		.align	2
 4008              	.LC77:
 4009 06d4 4800     		.ascii	"H\000"
 4010 06d6 0000     		.align	2
 4011              	.LC78:
 4012 06d8 4C00     		.ascii	"L\000"
 4013 06da 0000     		.align	2
 4014              	.LC79:
 4015 06dc 494F2049 		.ascii	"IO IN Channel-%d get %s\012\000"
 4015      4E204368 
 4015      616E6E65 
 4015      6C2D2564 
 4015      20676574 
 4016              		.section	.text.test_io_in,"ax",%progbits
 4017              		.align	2
 4018              		.thumb
 4019              		.thumb_func
 4021              	test_io_in:
 4022              	.LFB39:
 683:../src/main.c **** 
 684:../src/main.c **** static int test_io_in(void)
 685:../src/main.c **** {
 4023              		.loc 1 685 0
 4024              		.cfi_startproc
 4025              		@ args = 0, pretend = 0, frame = 16
 4026              		@ frame_needed = 1, uses_anonymous_args = 0
 4027 0000 80B5     		push	{r7, lr}
 4028              		.cfi_def_cfa_offset 8
 4029              		.cfi_offset 7, -8
 4030              		.cfi_offset 14, -4
 4031 0002 84B0     		sub	sp, sp, #16
 4032              		.cfi_def_cfa_offset 24
 4033 0004 00AF     		add	r7, sp, #0
 4034              		.cfi_def_cfa_register 7
 686:../src/main.c **** 	int trys = 3;
 4035              		.loc 1 686 0
 4036 0006 0323     		movs	r3, #3
 4037 0008 FB60     		str	r3, [r7, #12]
 687:../src/main.c **** 	while(trys--){
 4038              		.loc 1 687 0
 4039 000a 1BE0     		b	.L243
 4040              	.L248:
 4041              	.LBB24:
 688:../src/main.c **** 		for(int i=0;i<3;i++){
 4042              		.loc 1 688 0
 4043 000c 0023     		movs	r3, #0
 4044 000e BB60     		str	r3, [r7, #8]
 4045 0010 11E0     		b	.L244
 4046              	.L247:
 4047              	.LBB25:
 689:../src/main.c **** 			int v = get_input_val(i);
 4048              		.loc 1 689 0
 4049 0012 B868     		ldr	r0, [r7, #8]
 4050 0014 FFF7FEFF 		bl	get_input_val
 4051 0018 7860     		str	r0, [r7, #4]
 690:../src/main.c **** 			os_trace("IO IN Channel-%d get %s\n",i,v?"H":"L");
 4052              		.loc 1 690 0
 4053 001a 7B68     		ldr	r3, [r7, #4]
 4054 001c 002B     		cmp	r3, #0
 4055 001e 01D0     		beq	.L245
 4056              		.loc 1 690 0 is_stmt 0 discriminator 1
 4057 0020 0D4B     		ldr	r3, .L250
 4058 0022 00E0     		b	.L246
 4059              	.L245:
 4060              		.loc 1 690 0 discriminator 2
 4061 0024 0D4B     		ldr	r3, .L250+4
 4062              	.L246:
 4063              		.loc 1 690 0 discriminator 4
 4064 0026 0E48     		ldr	r0, .L250+8
 4065 0028 B968     		ldr	r1, [r7, #8]
 4066 002a 1A46     		mov	r2, r3
 4067 002c FFF7FEFF 		bl	os_trace
 4068              	.LBE25:
 688:../src/main.c **** 		for(int i=0;i<3;i++){
 4069              		.loc 1 688 0 is_stmt 1 discriminator 4
 4070 0030 BB68     		ldr	r3, [r7, #8]
 4071 0032 0133     		adds	r3, r3, #1
 4072 0034 BB60     		str	r3, [r7, #8]
 4073              	.L244:
 688:../src/main.c **** 		for(int i=0;i<3;i++){
 4074              		.loc 1 688 0 is_stmt 0 discriminator 2
 4075 0036 BB68     		ldr	r3, [r7, #8]
 4076 0038 022B     		cmp	r3, #2
 4077 003a EADD     		ble	.L247
 4078              	.LBE24:
 691:../src/main.c **** 		}
 692:../src/main.c **** 		os_sleep_ms(500);
 4079              		.loc 1 692 0 is_stmt 1
 4080 003c 4FF4FA70 		mov	r0, #500
 4081 0040 FFF7FEFF 		bl	os_sleep_ms
 4082              	.L243:
 687:../src/main.c **** 		for(int i=0;i<3;i++){
 4083              		.loc 1 687 0
 4084 0044 FB68     		ldr	r3, [r7, #12]
 4085 0046 5A1E     		subs	r2, r3, #1
 4086 0048 FA60     		str	r2, [r7, #12]
 4087 004a 002B     		cmp	r3, #0
 4088 004c DED1     		bne	.L248
 693:../src/main.c **** 	}
 694:../src/main.c **** 	return 0;
 4089              		.loc 1 694 0
 4090 004e 0023     		movs	r3, #0
 695:../src/main.c **** }
 4091              		.loc 1 695 0
 4092 0050 1846     		mov	r0, r3
 4093 0052 1037     		adds	r7, r7, #16
 4094              		.cfi_def_cfa_offset 8
 4095 0054 BD46     		mov	sp, r7
 4096              		.cfi_def_cfa_register 13
 4097              		@ sp needed
 4098 0056 80BD     		pop	{r7, pc}
 4099              	.L251:
 4100              		.align	2
 4101              	.L250:
 4102 0058 D4060000 		.word	.LC77
 4103 005c D8060000 		.word	.LC78
 4104 0060 DC060000 		.word	.LC79
 4105              		.cfi_endproc
 4106              	.LFE39:
 4108              		.section	.rodata
 4109 06f5 000000   		.align	2
 4110              	.LC80:
 4111 06f8 4C454420 		.ascii	"LED pin output H\012\000"
 4111      70696E20 
 4111      6F757470 
 4111      75742048 
 4111      0A00
 4112 070a 0000     		.align	2
 4113              	.LC81:
 4114 070c 4C454420 		.ascii	"LED pin output L\012\000"
 4114      70696E20 
 4114      6F757470 
 4114      7574204C 
 4114      0A00
 4115              		.section	.text.test_led,"ax",%progbits
 4116              		.align	2
 4117              		.thumb
 4118              		.thumb_func
 4120              	test_led:
 4121              	.LFB40:
 696:../src/main.c **** static int test_led(void)
 697:../src/main.c **** {
 4122              		.loc 1 697 0
 4123              		.cfi_startproc
 4124              		@ args = 0, pretend = 0, frame = 16
 4125              		@ frame_needed = 1, uses_anonymous_args = 0
 4126 0000 80B5     		push	{r7, lr}
 4127              		.cfi_def_cfa_offset 8
 4128              		.cfi_offset 7, -8
 4129              		.cfi_offset 14, -4
 4130 0002 84B0     		sub	sp, sp, #16
 4131              		.cfi_def_cfa_offset 24
 4132 0004 00AF     		add	r7, sp, #0
 4133              		.cfi_def_cfa_register 7
 698:../src/main.c **** 	int trys = 3;
 4134              		.loc 1 698 0
 4135 0006 0323     		movs	r3, #3
 4136 0008 FB60     		str	r3, [r7, #12]
 699:../src/main.c **** 	while(trys--){
 4137              		.loc 1 699 0
 4138 000a 27E0     		b	.L253
 4139              	.L258:
 700:../src/main.c **** 		os_trace("LED pin output H\n");
 4140              		.loc 1 700 0
 4141 000c 1848     		ldr	r0, .L260
 4142 000e FFF7FEFF 		bl	os_trace
 4143              	.LBB26:
 701:../src/main.c **** 		for(int i=0;i<6;i++){
 4144              		.loc 1 701 0
 4145 0012 0023     		movs	r3, #0
 4146 0014 BB60     		str	r3, [r7, #8]
 4147 0016 06E0     		b	.L254
 4148              	.L255:
 702:../src/main.c **** 			led_ctrl(i,1);
 4149              		.loc 1 702 0 discriminator 3
 4150 0018 B868     		ldr	r0, [r7, #8]
 4151 001a 0121     		movs	r1, #1
 4152 001c FFF7FEFF 		bl	led_ctrl
 701:../src/main.c **** 		for(int i=0;i<6;i++){
 4153              		.loc 1 701 0 discriminator 3
 4154 0020 BB68     		ldr	r3, [r7, #8]
 4155 0022 0133     		adds	r3, r3, #1
 4156 0024 BB60     		str	r3, [r7, #8]
 4157              	.L254:
 701:../src/main.c **** 		for(int i=0;i<6;i++){
 4158              		.loc 1 701 0 is_stmt 0 discriminator 1
 4159 0026 BB68     		ldr	r3, [r7, #8]
 4160 0028 052B     		cmp	r3, #5
 4161 002a F5DD     		ble	.L255
 4162              	.LBE26:
 703:../src/main.c **** 		}
 704:../src/main.c **** 		os_sleep_ms(1000);
 4163              		.loc 1 704 0 is_stmt 1
 4164 002c 4FF47A70 		mov	r0, #1000
 4165 0030 FFF7FEFF 		bl	os_sleep_ms
 705:../src/main.c **** 		os_trace("LED pin output L\n");
 4166              		.loc 1 705 0
 4167 0034 0F48     		ldr	r0, .L260+4
 4168 0036 FFF7FEFF 		bl	os_trace
 4169              	.LBB27:
 706:../src/main.c **** 		for(int i=0;i<6;i++){
 4170              		.loc 1 706 0
 4171 003a 0023     		movs	r3, #0
 4172 003c 7B60     		str	r3, [r7, #4]
 4173 003e 06E0     		b	.L256
 4174              	.L257:
 707:../src/main.c **** 			led_ctrl(i,0);
 4175              		.loc 1 707 0 discriminator 3
 4176 0040 7868     		ldr	r0, [r7, #4]
 4177 0042 0021     		movs	r1, #0
 4178 0044 FFF7FEFF 		bl	led_ctrl
 706:../src/main.c **** 		for(int i=0;i<6;i++){
 4179              		.loc 1 706 0 discriminator 3
 4180 0048 7B68     		ldr	r3, [r7, #4]
 4181 004a 0133     		adds	r3, r3, #1
 4182 004c 7B60     		str	r3, [r7, #4]
 4183              	.L256:
 706:../src/main.c **** 		for(int i=0;i<6;i++){
 4184              		.loc 1 706 0 is_stmt 0 discriminator 1
 4185 004e 7B68     		ldr	r3, [r7, #4]
 4186 0050 052B     		cmp	r3, #5
 4187 0052 F5DD     		ble	.L257
 4188              	.LBE27:
 708:../src/main.c **** 		}
 709:../src/main.c **** 		os_sleep_ms(1000);
 4189              		.loc 1 709 0 is_stmt 1
 4190 0054 4FF47A70 		mov	r0, #1000
 4191 0058 FFF7FEFF 		bl	os_sleep_ms
 4192              	.L253:
 699:../src/main.c **** 		os_trace("LED pin output H\n");
 4193              		.loc 1 699 0
 4194 005c FB68     		ldr	r3, [r7, #12]
 4195 005e 5A1E     		subs	r2, r3, #1
 4196 0060 FA60     		str	r2, [r7, #12]
 4197 0062 002B     		cmp	r3, #0
 4198 0064 D2D1     		bne	.L258
 710:../src/main.c **** 	}
 711:../src/main.c **** 	return 0;
 4199              		.loc 1 711 0
 4200 0066 0023     		movs	r3, #0
 712:../src/main.c **** }
 4201              		.loc 1 712 0
 4202 0068 1846     		mov	r0, r3
 4203 006a 1037     		adds	r7, r7, #16
 4204              		.cfi_def_cfa_offset 8
 4205 006c BD46     		mov	sp, r7
 4206              		.cfi_def_cfa_register 13
 4207              		@ sp needed
 4208 006e 80BD     		pop	{r7, pc}
 4209              	.L261:
 4210              		.align	2
 4211              	.L260:
 4212 0070 F8060000 		.word	.LC80
 4213 0074 0C070000 		.word	.LC81
 4214              		.cfi_endproc
 4215              	.LFE40:
 4217              		.section	.bss.mainTaskHandle,"aw",%nobits
 4218              		.align	2
 4221              	mainTaskHandle:
 4222 0000 00000000 		.space	4
 4223              		.section	.rodata
 4224 071e 0000     		.align	2
 4225              	.LC82:
 4226 0720 0A0A626F 		.ascii	"\012\012board routes init ok.\012\000"
 4226      61726420 
 4226      726F7574 
 4226      65732069 
 4226      6E697420 
 4227 0739 000000   		.align	2
 4228              	.LC83:
 4229 073c 64703130 		.ascii	"dp1000 test program, version:0.1 build: %s %s\012\000"
 4229      30302074 
 4229      65737420 
 4229      70726F67 
 4229      72616D2C 
 4230 076b 00       		.align	2
 4231              	.LC84:
 4232 076c 4F637420 		.ascii	"Oct 23 2017\000"
 4232      32332032 
 4232      30313700 
 4233              		.align	2
 4234              	.LC85:
 4235 0778 31323A30 		.ascii	"12:06:54\000"
 4235      363A3534 
 4235      00
 4236 0781 000000   		.align	2
 4237              	.LC86:
 4238 0784 2D2D2D2D 		.ascii	"-------------------------------------------------\012"
 4238      2D2D2D2D 
 4238      2D2D2D2D 
 4238      2D2D2D2D 
 4238      2D2D2D2D 
 4239 07b6 00       		.ascii	"\000"
 4240 07b7 00       		.align	2
 4241              	.LC87:
 4242 07b8 54797065 		.ascii	"Type '%u'-'%u' to select test item, or 'a' for all:"
 4242      20272575 
 4242      272D2725 
 4242      75272074 
 4242      6F207365 
 4243 07eb 0A00     		.ascii	"\012\000"
 4244 07ed 000000   		.align	2
 4245              	.LC88:
 4246 07f0 74696D65 		.ascii	"time setup use command:\012\000"
 4246      20736574 
 4246      75702075 
 4246      73652063 
 4246      6F6D6D61 
 4247 0809 000000   		.align	2
 4248              	.LC89:
 4249 080c 20202020 		.ascii	"      \"ts 20171012120000 \"\012\000"
 4249      20202274 
 4249      73203230 
 4249      31373130 
 4249      31323132 
 4250              		.align	2
 4251              	.LC90:
 4252 0828 25752E25 		.ascii	"%u.%s\012\000"
 4252      730A00
 4253 082f 00       		.align	2
 4254              	.LC91:
 4255 0830 74732000 		.ascii	"ts \000"
 4256              		.align	2
 4257              	.LC92:
 4258 0834 74732025 		.ascii	"ts %02u%02u%02u%02u%02u%02u%02u\000"
 4258      30327525 
 4258      30327525 
 4258      30327525 
 4258      30327525 
 4259              		.align	2
 4260              	.LC93:
 4261 0854 696E7075 		.ascii	"input format error, please again.\012\000"
 4261      7420666F 
 4261      726D6174 
 4261      20657272 
 4261      6F722C20 
 4262 0877 00       		.align	2
 4263              	.LC94:
 4264 0878 74696D65 		.ascii	"time set: %s\000"
 4264      20736574 
 4264      3A202573 
 4264      00
 4265 0885 000000   		.align	2
 4266              	.LC95:
 4267 0888 6100     		.ascii	"a\000"
 4268 088a 0000     		.align	2
 4269              	.LC96:
 4270 088c 4100     		.ascii	"A\000"
 4271 088e 0000     		.align	2
 4272              	.LC97:
 4273 0890 50415353 		.ascii	"PASS\000"
 4273      00
 4274 0895 000000   		.align	2
 4275              	.LC98:
 4276 0898 4641494C 		.ascii	"FAIL\000"
 4276      00
 4277 089d 000000   		.align	2
 4278              	.LC99:
 4279 08a0 3E3E3E20 		.ascii	">>> %s\012\000"
 4279      25730A00 
 4280              		.align	2
 4281              	.LC100:
 4282 08a8 696E7075 		.ascii	"input error, please again.\012\000"
 4282      74206572 
 4282      726F722C 
 4282      20706C65 
 4282      61736520 
 4283              		.section	.text.mainTask,"ax",%progbits
 4284              		.align	2
 4285              		.global	mainTask
 4286              		.thumb
 4287              		.thumb_func
 4289              	mainTask:
 4290              	.LFB41:
 713:../src/main.c **** 
 714:../src/main.c **** static TaskHandle_t mainTaskHandle;
 715:../src/main.c **** void mainTask(void *p)
 716:../src/main.c **** {
 4291              		.loc 1 716 0
 4292              		.cfi_startproc
 4293              		@ args = 0, pretend = 0, frame = 208
 4294              		@ frame_needed = 1, uses_anonymous_args = 0
 4295 0000 90B5     		push	{r4, r7, lr}
 4296              		.cfi_def_cfa_offset 12
 4297              		.cfi_offset 4, -12
 4298              		.cfi_offset 7, -8
 4299              		.cfi_offset 14, -4
 4300 0002 BBB0     		sub	sp, sp, #236
 4301              		.cfi_def_cfa_offset 248
 4302 0004 06AF     		add	r7, sp, #24
 4303              		.cfi_def_cfa 7, 224
 4304 0006 7860     		str	r0, [r7, #4]
 717:../src/main.c **** 
 718:../src/main.c **** 	static const struct {
 719:../src/main.c **** 		const char *testitem;
 720:../src/main.c **** 		int (*func)(void);
 721:../src/main.c **** 	} test_tbl[] = {
 722:../src/main.c **** 			//{"T",								test_uart_loop},
 723:../src/main.c **** 			{"LED Output Test",					test_led},
 724:../src/main.c **** 			{"IO_IN Test",						test_io_in},
 725:../src/main.c **** 			{"UART0/1/2 Loop-back Test",		test_uart},
 726:../src/main.c **** 			{"GPS Test",						test_gps},
 727:../src/main.c **** 			{"RS485 loop-back Test",			test_485},
 728:../src/main.c **** 			{"DS2411 SN Read Test",				test_ds2411},
 729:../src/main.c **** 			{"RTC Test",						test_rtc},
 730:../src/main.c **** 			{"4G Module Test",					test_4g},
 731:../src/main.c **** 			{"SD Card Test",					test_sd},
 732:../src/main.c **** 			{"CAN0/1/2 loop-cycle Test",		test_can},
 733:../src/main.c **** 			//{"CAN0/1/2 loop-back Test",			test_can1},
 734:../src/main.c **** 			{"Buzzer Test\n",					test_buzzer},
 735:../src/main.c **** 	};
 736:../src/main.c **** 	const int tbllen = sizeof(test_tbl)/sizeof(test_tbl[0]);
 4305              		.loc 1 736 0
 4306 0008 0B23     		movs	r3, #11
 4307 000a C7F8C430 		str	r3, [r7, #196]
 737:../src/main.c **** 	os_trace("\n\nboard routes init ok.\n");
 4308              		.loc 1 737 0
 4309 000e 9348     		ldr	r0, .L280
 4310 0010 FFF7FEFF 		bl	os_trace
 4311              	.L279:
 4312              	.LBB28:
 738:../src/main.c **** 	for(;;){
 739:../src/main.c **** 		os_trace("dp1000 test program, version:0.1 build: %s %s\n",__DATE__,__TIME__);
 4313              		.loc 1 739 0
 4314 0014 9248     		ldr	r0, .L280+4
 4315 0016 9349     		ldr	r1, .L280+8
 4316 0018 934A     		ldr	r2, .L280+12
 4317 001a FFF7FEFF 		bl	os_trace
 740:../src/main.c **** 		os_trace("-------------------------------------------------\n");
 4318              		.loc 1 740 0
 4319 001e 9348     		ldr	r0, .L280+16
 4320 0020 FFF7FEFF 		bl	os_trace
 741:../src/main.c **** 		os_trace("Type \'%u\'-\'%u\' to select test item, or \'a\' for all:\n",0,tbllen);
 4321              		.loc 1 741 0
 4322 0024 9248     		ldr	r0, .L280+20
 4323 0026 0021     		movs	r1, #0
 4324 0028 D7F8C420 		ldr	r2, [r7, #196]
 4325 002c FFF7FEFF 		bl	os_trace
 742:../src/main.c **** 		os_trace("time setup use command:\n");
 4326              		.loc 1 742 0
 4327 0030 9048     		ldr	r0, .L280+24
 4328 0032 FFF7FEFF 		bl	os_trace
 743:../src/main.c **** 		os_trace("      \"ts 20171012120000 \"\n");
 4329              		.loc 1 743 0
 4330 0036 9048     		ldr	r0, .L280+28
 4331 0038 FFF7FEFF 		bl	os_trace
 4332              	.LBB29:
 744:../src/main.c **** 
 745:../src/main.c **** 		for(int i=0;i<tbllen;i++){
 4333              		.loc 1 745 0
 4334 003c 0023     		movs	r3, #0
 4335 003e C7F8CC30 		str	r3, [r7, #204]
 4336 0042 10E0     		b	.L263
 4337              	.L264:
 746:../src/main.c **** 			os_trace("%u.%s\n",(int)(i+1),test_tbl[i].testitem);
 4338              		.loc 1 746 0 discriminator 3
 4339 0044 D7F8CC30 		ldr	r3, [r7, #204]
 4340 0048 591C     		adds	r1, r3, #1
 4341 004a 8C4A     		ldr	r2, .L280+32
 4342 004c D7F8CC30 		ldr	r3, [r7, #204]
 4343 0050 52F83330 		ldr	r3, [r2, r3, lsl #3]
 4344 0054 8A48     		ldr	r0, .L280+36
 4345 0056 1A46     		mov	r2, r3
 4346 0058 FFF7FEFF 		bl	os_trace
 745:../src/main.c **** 			os_trace("%u.%s\n",(int)(i+1),test_tbl[i].testitem);
 4347              		.loc 1 745 0 discriminator 3
 4348 005c D7F8CC30 		ldr	r3, [r7, #204]
 4349 0060 0133     		adds	r3, r3, #1
 4350 0062 C7F8CC30 		str	r3, [r7, #204]
 4351              	.L263:
 745:../src/main.c **** 			os_trace("%u.%s\n",(int)(i+1),test_tbl[i].testitem);
 4352              		.loc 1 745 0 is_stmt 0 discriminator 1
 4353 0066 D7F8CC20 		ldr	r2, [r7, #204]
 4354 006a D7F8C430 		ldr	r3, [r7, #196]
 4355 006e 9A42     		cmp	r2, r3
 4356 0070 E8DB     		blt	.L264
 4357              	.L265:
 4358              	.LBE29:
 747:../src/main.c **** 		}
 748:../src/main.c **** 		char buf[128];
 749:../src/main.c **** 		again:
 750:../src/main.c **** 		memset(buf,0,128);
 4359              		.loc 1 750 0 is_stmt 1
 4360 0072 07F10C03 		add	r3, r7, #12
 4361 0076 1846     		mov	r0, r3
 4362 0078 0021     		movs	r1, #0
 4363 007a 8022     		movs	r2, #128
 4364 007c FFF7FEFF 		bl	memset
 751:../src/main.c **** 		while(os_console_gets(buf,128)==NULL);
 4365              		.loc 1 751 0
 4366 0080 00BF     		nop
 4367              	.L266:
 4368              		.loc 1 751 0 is_stmt 0 discriminator 1
 4369 0082 07F10C03 		add	r3, r7, #12
 4370 0086 1846     		mov	r0, r3
 4371 0088 8021     		movs	r1, #128
 4372 008a FFF7FEFF 		bl	os_console_gets
 4373 008e 0346     		mov	r3, r0
 4374 0090 002B     		cmp	r3, #0
 4375 0092 F6D0     		beq	.L266
 752:../src/main.c **** 		if(strncmp(buf,"ts ",2)==0){
 4376              		.loc 1 752 0 is_stmt 1
 4377 0094 07F10C03 		add	r3, r7, #12
 4378 0098 1846     		mov	r0, r3
 4379 009a 7A49     		ldr	r1, .L280+40
 4380 009c 0222     		movs	r2, #2
 4381 009e FFF7FEFF 		bl	strncmp
 4382 00a2 0346     		mov	r3, r0
 4383 00a4 002B     		cmp	r3, #0
 4384 00a6 55D1     		bne	.L267
 4385              	.LBB30:
 753:../src/main.c **** 			int yh;
 754:../src/main.c **** 			struct tm t;
 755:../src/main.c **** 			int n = sscanf(buf,"ts %02u%02u%02u%02u%02u%02u%02u",
 4386              		.loc 1 755 0
 4387 00a8 07F10C01 		add	r1, r7, #12
 4388 00ac 07F1AC02 		add	r2, r7, #172
 4389 00b0 07F19003 		add	r3, r7, #144
 4390 00b4 03F11404 		add	r4, r3, #20
 4391 00b8 07F19003 		add	r3, r7, #144
 4392 00bc 1033     		adds	r3, r3, #16
 4393 00be 0093     		str	r3, [sp]
 4394 00c0 07F19003 		add	r3, r7, #144
 4395 00c4 0C33     		adds	r3, r3, #12
 4396 00c6 0193     		str	r3, [sp, #4]
 4397 00c8 07F19003 		add	r3, r7, #144
 4398 00cc 0833     		adds	r3, r3, #8
 4399 00ce 0293     		str	r3, [sp, #8]
 4400 00d0 07F19003 		add	r3, r7, #144
 4401 00d4 0433     		adds	r3, r3, #4
 4402 00d6 0393     		str	r3, [sp, #12]
 4403 00d8 07F19003 		add	r3, r7, #144
 4404 00dc 0493     		str	r3, [sp, #16]
 4405 00de 0846     		mov	r0, r1
 4406 00e0 6949     		ldr	r1, .L280+44
 4407 00e2 2346     		mov	r3, r4
 4408 00e4 FFF7FEFF 		bl	sscanf
 4409 00e8 C7F8B400 		str	r0, [r7, #180]
 756:../src/main.c **** 					&yh,&t.tm_year,&t.tm_mon,&t.tm_mday,&t.tm_hour,&t.tm_min,&t.tm_sec);
 757:../src/main.c **** 			if(n!=7){
 4410              		.loc 1 757 0
 4411 00ec D7F8B430 		ldr	r3, [r7, #180]
 4412 00f0 072B     		cmp	r3, #7
 4413 00f2 03D0     		beq	.L268
 758:../src/main.c **** 				os_trace("input format error, please again.\n");
 4414              		.loc 1 758 0
 4415 00f4 6548     		ldr	r0, .L280+48
 4416 00f6 FFF7FEFF 		bl	os_trace
 4417 00fa BAE7     		b	.L265
 4418              	.L268:
 759:../src/main.c **** 				goto again;
 760:../src/main.c **** 			}
 761:../src/main.c **** 			t.tm_year = t.tm_year+2000 - 1900;
 4419              		.loc 1 761 0
 4420 00fc D7F8A430 		ldr	r3, [r7, #164]
 4421 0100 6433     		adds	r3, r3, #100
 4422 0102 C7F8A430 		str	r3, [r7, #164]
 762:../src/main.c **** 			t.tm_mon = t.tm_mon-1;
 4423              		.loc 1 762 0
 4424 0106 D7F8A030 		ldr	r3, [r7, #160]
 4425 010a 013B     		subs	r3, r3, #1
 4426 010c C7F8A030 		str	r3, [r7, #160]
 763:../src/main.c **** 			time_t set = mktime(&t);
 4427              		.loc 1 763 0
 4428 0110 07F19003 		add	r3, r7, #144
 4429 0114 1846     		mov	r0, r3
 4430 0116 FFF7FEFF 		bl	mktime
 4431 011a 0346     		mov	r3, r0
 4432 011c C7F88C30 		str	r3, [r7, #140]
 764:../src/main.c **** 			time(&set);
 4433              		.loc 1 764 0
 4434 0120 07F18C03 		add	r3, r7, #140
 4435 0124 1846     		mov	r0, r3
 4436 0126 FFF7FEFF 		bl	time
 765:../src/main.c **** 			store_time();
 4437              		.loc 1 765 0
 4438 012a FFF7FEFF 		bl	store_time
 766:../src/main.c **** 
 767:../src/main.c **** 			localtime_s(&set,&t);
 4439              		.loc 1 767 0
 4440 012e 07F18C02 		add	r2, r7, #140
 4441 0132 07F19003 		add	r3, r7, #144
 4442 0136 1046     		mov	r0, r2
 4443 0138 1946     		mov	r1, r3
 4444 013a FFF7FEFF 		bl	localtime_s
 768:../src/main.c **** 			os_trace("time set: %s",asctime(&t));
 4445              		.loc 1 768 0
 4446 013e 07F19003 		add	r3, r7, #144
 4447 0142 1846     		mov	r0, r3
 4448 0144 FFF7FEFF 		bl	asctime
 4449 0148 0346     		mov	r3, r0
 4450 014a 5148     		ldr	r0, .L280+52
 4451 014c 1946     		mov	r1, r3
 4452 014e FFF7FEFF 		bl	os_trace
 4453 0152 5FE7     		b	.L279
 4454              	.L267:
 4455              	.LBE30:
 769:../src/main.c **** 			continue;
 770:../src/main.c **** 		}
 771:../src/main.c **** 		if(strcmp(buf,"a")==0 || strcmp(buf,"A")==0){
 4456              		.loc 1 771 0
 4457 0154 07F10C03 		add	r3, r7, #12
 4458 0158 1846     		mov	r0, r3
 4459 015a 4E49     		ldr	r1, .L280+56
 4460 015c FFF7FEFF 		bl	strcmp
 4461 0160 0346     		mov	r3, r0
 4462 0162 002B     		cmp	r3, #0
 4463 0164 08D0     		beq	.L270
 4464              		.loc 1 771 0 is_stmt 0 discriminator 1
 4465 0166 07F10C03 		add	r3, r7, #12
 4466 016a 1846     		mov	r0, r3
 4467 016c 4A49     		ldr	r1, .L280+60
 4468 016e FFF7FEFF 		bl	strcmp
 4469 0172 0346     		mov	r3, r0
 4470 0174 002B     		cmp	r3, #0
 4471 0176 2AD1     		bne	.L271
 4472              	.L270:
 4473              	.LBB31:
 772:../src/main.c **** 			for(int i=0;i<sizeof(test_tbl)/sizeof(test_tbl[0]);i++){
 4474              		.loc 1 772 0 is_stmt 1
 4475 0178 0023     		movs	r3, #0
 4476 017a C7F8C830 		str	r3, [r7, #200]
 4477 017e 21E0     		b	.L272
 4478              	.L275:
 4479              	.LBB32:
 773:../src/main.c **** 				os_trace("%s\n",test_tbl[i].testitem);
 4480              		.loc 1 773 0
 4481 0180 3E4A     		ldr	r2, .L280+32
 4482 0182 D7F8C830 		ldr	r3, [r7, #200]
 4483 0186 52F83330 		ldr	r3, [r2, r3, lsl #3]
 4484 018a 4448     		ldr	r0, .L280+64
 4485 018c 1946     		mov	r1, r3
 4486 018e FFF7FEFF 		bl	os_trace
 774:../src/main.c **** 				int res = test_tbl[i].func();
 4487              		.loc 1 774 0
 4488 0192 3A4A     		ldr	r2, .L280+32
 4489 0194 D7F8C830 		ldr	r3, [r7, #200]
 4490 0198 DB00     		lsls	r3, r3, #3
 4491 019a 1344     		add	r3, r3, r2
 4492 019c 5B68     		ldr	r3, [r3, #4]
 4493 019e 9847     		blx	r3
 4494 01a0 C7F8B800 		str	r0, [r7, #184]
 775:../src/main.c **** 				os_trace(">>> %s\n",res==0?"PASS":"FAIL");
 4495              		.loc 1 775 0
 4496 01a4 D7F8B830 		ldr	r3, [r7, #184]
 4497 01a8 002B     		cmp	r3, #0
 4498 01aa 01D1     		bne	.L273
 4499              		.loc 1 775 0 is_stmt 0 discriminator 1
 4500 01ac 3C4B     		ldr	r3, .L280+68
 4501 01ae 00E0     		b	.L274
 4502              	.L273:
 4503              		.loc 1 775 0 discriminator 2
 4504 01b0 3C4B     		ldr	r3, .L280+72
 4505              	.L274:
 4506              		.loc 1 775 0 discriminator 4
 4507 01b2 3D48     		ldr	r0, .L280+76
 4508 01b4 1946     		mov	r1, r3
 4509 01b6 FFF7FEFF 		bl	os_trace
 4510              	.LBE32:
 772:../src/main.c **** 				os_trace("%s\n",test_tbl[i].testitem);
 4511              		.loc 1 772 0 is_stmt 1 discriminator 4
 4512 01ba D7F8C830 		ldr	r3, [r7, #200]
 4513 01be 0133     		adds	r3, r3, #1
 4514 01c0 C7F8C830 		str	r3, [r7, #200]
 4515              	.L272:
 772:../src/main.c **** 				os_trace("%s\n",test_tbl[i].testitem);
 4516              		.loc 1 772 0 is_stmt 0 discriminator 2
 4517 01c4 D7F8C830 		ldr	r3, [r7, #200]
 4518 01c8 0A2B     		cmp	r3, #10
 4519 01ca D9D9     		bls	.L275
 4520              	.LBE31:
 776:../src/main.c **** 			}
 777:../src/main.c **** 			continue;
 4521              		.loc 1 777 0 is_stmt 1
 4522 01cc 45E0     		b	.L269
 4523              	.L271:
 778:../src/main.c **** 		}
 779:../src/main.c **** 		char *err;
 780:../src/main.c **** 		int index = strtoul(buf,&err,10);
 4524              		.loc 1 780 0
 4525 01ce 07F10C02 		add	r2, r7, #12
 4526 01d2 07F1B003 		add	r3, r7, #176
 4527 01d6 1046     		mov	r0, r2
 4528 01d8 1946     		mov	r1, r3
 4529 01da 0A22     		movs	r2, #10
 4530 01dc FFF7FEFF 		bl	strtoul
 4531 01e0 0346     		mov	r3, r0
 4532 01e2 C7F8C030 		str	r3, [r7, #192]
 781:../src/main.c **** 		if(err!=NULL && *err=='\0' && index>=1 && index<=tbllen){
 4533              		.loc 1 781 0
 4534 01e6 D7F8B030 		ldr	r3, [r7, #176]
 4535 01ea 002B     		cmp	r3, #0
 4536 01ec 31D0     		beq	.L276
 4537              		.loc 1 781 0 is_stmt 0 discriminator 1
 4538 01ee D7F8B030 		ldr	r3, [r7, #176]
 4539 01f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4540 01f4 002B     		cmp	r3, #0
 4541 01f6 2CD1     		bne	.L276
 4542              		.loc 1 781 0 discriminator 2
 4543 01f8 D7F8C030 		ldr	r3, [r7, #192]
 4544 01fc 002B     		cmp	r3, #0
 4545 01fe 28DD     		ble	.L276
 4546              		.loc 1 781 0 discriminator 3
 4547 0200 D7F8C020 		ldr	r2, [r7, #192]
 4548 0204 D7F8C430 		ldr	r3, [r7, #196]
 4549 0208 9A42     		cmp	r2, r3
 4550 020a 22DC     		bgt	.L276
 4551              	.LBB33:
 782:../src/main.c **** 			index--;
 4552              		.loc 1 782 0 is_stmt 1
 4553 020c D7F8C030 		ldr	r3, [r7, #192]
 4554 0210 013B     		subs	r3, r3, #1
 4555 0212 C7F8C030 		str	r3, [r7, #192]
 783:../src/main.c **** 			os_trace("%s\n",test_tbl[index].testitem);
 4556              		.loc 1 783 0
 4557 0216 194A     		ldr	r2, .L280+32
 4558 0218 D7F8C030 		ldr	r3, [r7, #192]
 4559 021c 52F83330 		ldr	r3, [r2, r3, lsl #3]
 4560 0220 1E48     		ldr	r0, .L280+64
 4561 0222 1946     		mov	r1, r3
 4562 0224 FFF7FEFF 		bl	os_trace
 784:../src/main.c **** 			int res = test_tbl[index].func();
 4563              		.loc 1 784 0
 4564 0228 144A     		ldr	r2, .L280+32
 4565 022a D7F8C030 		ldr	r3, [r7, #192]
 4566 022e DB00     		lsls	r3, r3, #3
 4567 0230 1344     		add	r3, r3, r2
 4568 0232 5B68     		ldr	r3, [r3, #4]
 4569 0234 9847     		blx	r3
 4570 0236 C7F8BC00 		str	r0, [r7, #188]
 785:../src/main.c **** 			os_trace(">>> %s\n",res==0?"PASS":"FAIL");
 4571              		.loc 1 785 0
 4572 023a D7F8BC30 		ldr	r3, [r7, #188]
 4573 023e 002B     		cmp	r3, #0
 4574 0240 01D1     		bne	.L277
 4575              		.loc 1 785 0 is_stmt 0 discriminator 1
 4576 0242 174B     		ldr	r3, .L280+68
 4577 0244 00E0     		b	.L278
 4578              	.L277:
 4579              		.loc 1 785 0 discriminator 2
 4580 0246 174B     		ldr	r3, .L280+72
 4581              	.L278:
 4582              		.loc 1 785 0 discriminator 4
 4583 0248 1748     		ldr	r0, .L280+76
 4584 024a 1946     		mov	r1, r3
 4585 024c FFF7FEFF 		bl	os_trace
 786:../src/main.c **** 			continue;
 4586              		.loc 1 786 0 is_stmt 1 discriminator 4
 4587 0250 03E0     		b	.L269
 4588              	.L276:
 4589              	.LBE33:
 787:../src/main.c **** 		}
 788:../src/main.c **** 		os_trace("input error, please again.\n");
 4590              		.loc 1 788 0
 4591 0252 1648     		ldr	r0, .L280+80
 4592 0254 FFF7FEFF 		bl	os_trace
 789:../src/main.c **** 		goto again;
 4593              		.loc 1 789 0
 4594 0258 0BE7     		b	.L265
 4595              	.L269:
 4596              	.LBE28:
 790:../src/main.c **** 	}
 4597              		.loc 1 790 0
 4598 025a DBE6     		b	.L279
 4599              	.L281:
 4600              		.align	2
 4601              	.L280:
 4602 025c 20070000 		.word	.LC82
 4603 0260 3C070000 		.word	.LC83
 4604 0264 6C070000 		.word	.LC84
 4605 0268 78070000 		.word	.LC85
 4606 026c 84070000 		.word	.LC86
 4607 0270 B8070000 		.word	.LC87
 4608 0274 F0070000 		.word	.LC88
 4609 0278 0C080000 		.word	.LC89
 4610 027c 00000000 		.word	test_tbl.6725
 4611 0280 28080000 		.word	.LC90
 4612 0284 30080000 		.word	.LC91
 4613 0288 34080000 		.word	.LC92
 4614 028c 54080000 		.word	.LC93
 4615 0290 78080000 		.word	.LC94
 4616 0294 88080000 		.word	.LC95
 4617 0298 8C080000 		.word	.LC96
 4618 029c B8050000 		.word	.LC68
 4619 02a0 90080000 		.word	.LC97
 4620 02a4 98080000 		.word	.LC98
 4621 02a8 A0080000 		.word	.LC99
 4622 02ac A8080000 		.word	.LC100
 4623              		.cfi_endproc
 4624              	.LFE41:
 4626              		.section	.rodata
 4627              		.align	2
 4628              	.LC101:
 4629 08c4 6D61696E 		.ascii	"mainTask\000"
 4629      5461736B 
 4629      00
 4630 08cd 000000   		.align	2
 4631              	.LC102:
 4632 08d0 70645452 		.ascii	"pdTRUE==xTaskCreate(mainTask,\"mainTask\", 4096/4, "
 4632      55453D3D 
 4632      78546173 
 4632      6B437265 
 4632      61746528 
 4633 0901 4E554C4C 		.ascii	"NULL , 5, &mainTaskHandle)\000"
 4633      202C2035 
 4633      2C20266D 
 4633      61696E54 
 4633      61736B48 
 4634              		.section	.text.main,"ax",%progbits
 4635              		.align	2
 4636              		.global	main
 4637              		.thumb
 4638              		.thumb_func
 4640              	main:
 4641              	.LFB42:
 791:../src/main.c **** }
 792:../src/main.c **** 
 793:../src/main.c **** int main()
 794:../src/main.c **** {
 4642              		.loc 1 794 0
 4643              		.cfi_startproc
 4644              		@ args = 0, pretend = 0, frame = 0
 4645              		@ frame_needed = 1, uses_anonymous_args = 0
 4646 0000 80B5     		push	{r7, lr}
 4647              		.cfi_def_cfa_offset 8
 4648              		.cfi_offset 7, -8
 4649              		.cfi_offset 14, -4
 4650 0002 84B0     		sub	sp, sp, #16
 4651              		.cfi_def_cfa_offset 24
 4652 0004 04AF     		add	r7, sp, #16
 4653              		.cfi_def_cfa 7, 8
 795:../src/main.c **** 	WDOG_disable();
 4654              		.loc 1 795 0
 4655 0006 FFF7FEFF 		bl	WDOG_disable
 796:../src/main.c **** 	SOSC_init_8MHz(); /* Initialize system oscilator for 8 MHz xtal */
 4656              		.loc 1 796 0
 4657 000a FFF7FEFF 		bl	SOSC_init_8MHz
 797:../src/main.c **** 	SPLL_init_160MHz(); /* Initialize SPLL to 160 MHz with 8 MHz SOSC */
 4658              		.loc 1 797 0
 4659 000e FFF7FEFF 		bl	SPLL_init_160MHz
 798:../src/main.c **** 	NormalRUNmode_80MHz(); /* Init clocks: 80 MHz sysclk & core, 40 MHz bus, 20 MHz flash */
 4660              		.loc 1 798 0
 4661 0012 FFF7FEFF 		bl	NormalRUNmode_80MHz
 799:../src/main.c **** 	NVIC_init_IRQs();        /* Enable desired interrupts and priorities */
 4662              		.loc 1 799 0
 4663 0016 FFF7FEFF 		bl	NVIC_init_IRQs
 800:../src/main.c **** 	PORT_init();             /* Configure ports */
 4664              		.loc 1 800 0
 4665 001a FFF7FEFF 		bl	PORT_init
 801:../src/main.c **** 
 802:../src/main.c **** 	LPSPI0_init_master();
 4666              		.loc 1 802 0
 4667 001e FFF7FEFF 		bl	LPSPI0_init_master
 803:../src/main.c **** 	MSD0_SPIHighSpeed(0);
 4668              		.loc 1 803 0
 4669 0022 0020     		movs	r0, #0
 4670 0024 FFF7FEFF 		bl	MSD0_SPIHighSpeed
 804:../src/main.c **** 
 805:../src/main.c **** 	FLEXCAN_init(0,0xA,500000);
 4671              		.loc 1 805 0
 4672 0028 0020     		movs	r0, #0
 4673 002a 0A21     		movs	r1, #10
 4674 002c 294A     		ldr	r2, .L286
 4675 002e FFF7FEFF 		bl	FLEXCAN_init
 806:../src/main.c **** 	FLEXCAN_init(1,0xB,500000);
 4676              		.loc 1 806 0
 4677 0032 0120     		movs	r0, #1
 4678 0034 0B21     		movs	r1, #11
 4679 0036 274A     		ldr	r2, .L286
 4680 0038 FFF7FEFF 		bl	FLEXCAN_init
 807:../src/main.c **** 	FLEXCAN_init(2,0xC,500000);
 4681              		.loc 1 807 0
 4682 003c 0220     		movs	r0, #2
 4683 003e 0C21     		movs	r1, #12
 4684 0040 244A     		ldr	r2, .L286
 4685 0042 FFF7FEFF 		bl	FLEXCAN_init
 808:../src/main.c **** 
 809:../src/main.c **** 	uartQueueTbl[0] = xQueueCreate(128, sizeof(uint8_t));
 4686              		.loc 1 809 0
 4687 0046 8020     		movs	r0, #128
 4688 0048 0121     		movs	r1, #1
 4689 004a 0022     		movs	r2, #0
 4690 004c FFF7FEFF 		bl	xQueueGenericCreate
 4691 0050 0246     		mov	r2, r0
 4692 0052 214B     		ldr	r3, .L286+4
 4693 0054 1A60     		str	r2, [r3]
 810:../src/main.c **** 	uartQueueTbl[1] = xQueueCreate(128, sizeof(uint8_t));
 4694              		.loc 1 810 0
 4695 0056 8020     		movs	r0, #128
 4696 0058 0121     		movs	r1, #1
 4697 005a 0022     		movs	r2, #0
 4698 005c FFF7FEFF 		bl	xQueueGenericCreate
 4699 0060 0246     		mov	r2, r0
 4700 0062 1D4B     		ldr	r3, .L286+4
 4701 0064 5A60     		str	r2, [r3, #4]
 811:../src/main.c **** 	uartQueueTbl[2] = xQueueCreate(128, sizeof(uint8_t));
 4702              		.loc 1 811 0
 4703 0066 8020     		movs	r0, #128
 4704 0068 0121     		movs	r1, #1
 4705 006a 0022     		movs	r2, #0
 4706 006c FFF7FEFF 		bl	xQueueGenericCreate
 4707 0070 0246     		mov	r2, r0
 4708 0072 194B     		ldr	r3, .L286+4
 4709 0074 9A60     		str	r2, [r3, #8]
 812:../src/main.c **** 
 813:../src/main.c **** 	LPUART_init(LPUART0, 9600);	//RS485
 4710              		.loc 1 813 0
 4711 0076 1948     		ldr	r0, .L286+8
 4712 0078 4FF41651 		mov	r1, #9600
 4713 007c FFF7FEFF 		bl	LPUART_init
 814:../src/main.c **** 	LPUART_init(LPUART1, 115200);	//4G
 4714              		.loc 1 814 0
 4715 0080 1748     		ldr	r0, .L286+12
 4716 0082 4FF4E131 		mov	r1, #115200
 4717 0086 FFF7FEFF 		bl	LPUART_init
 815:../src/main.c **** 	LPUART_init(LPUART2, 9600);	//GPS
 4718              		.loc 1 815 0
 4719 008a 1648     		ldr	r0, .L286+16
 4720 008c 4FF41651 		mov	r1, #9600
 4721 0090 FFF7FEFF 		bl	LPUART_init
 816:../src/main.c **** 
 817:../src/main.c **** 	os_trace_init();
 4722              		.loc 1 817 0
 4723 0094 FFF7FEFF 		bl	os_trace_init
 818:../src/main.c **** 	OS_ASSERT(pdTRUE==xTaskCreate(mainTask,"mainTask", 4096/4, NULL , 5, &mainTaskHandle));
 4724              		.loc 1 818 0
 4725 0098 0523     		movs	r3, #5
 4726 009a 0093     		str	r3, [sp]
 4727 009c 124B     		ldr	r3, .L286+20
 4728 009e 0193     		str	r3, [sp, #4]
 4729 00a0 0023     		movs	r3, #0
 4730 00a2 0293     		str	r3, [sp, #8]
 4731 00a4 0023     		movs	r3, #0
 4732 00a6 0393     		str	r3, [sp, #12]
 4733 00a8 1048     		ldr	r0, .L286+24
 4734 00aa 1149     		ldr	r1, .L286+28
 4735 00ac 4FF48062 		mov	r2, #1024
 4736 00b0 0023     		movs	r3, #0
 4737 00b2 FFF7FEFF 		bl	xTaskGenericCreate
 4738 00b6 0346     		mov	r3, r0
 4739 00b8 012B     		cmp	r3, #1
 4740 00ba 05D0     		beq	.L283
 4741              		.loc 1 818 0 is_stmt 0 discriminator 1
 4742 00bc 0D48     		ldr	r0, .L286+32
 4743 00be 0E49     		ldr	r1, .L286+36
 4744 00c0 0E4A     		ldr	r2, .L286+40
 4745 00c2 FFF7FEFF 		bl	os_trace
 4746              	.L284:
 4747 00c6 FEE7     		b	.L284
 4748              	.L283:
 819:../src/main.c **** 
 820:../src/main.c **** 	/*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS C
 821:../src/main.c **** 	#ifdef PEX_RTOS_START
 822:../src/main.c **** 	PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS c
 4749              		.loc 1 822 0 is_stmt 1
 4750 00c8 FFF7FEFF 		bl	vTaskStartScheduler
 823:../src/main.c **** 	#endif
 824:../src/main.c **** 
 825:../src/main.c **** 	return 0;
 4751              		.loc 1 825 0
 4752 00cc 0023     		movs	r3, #0
 826:../src/main.c **** }
 4753              		.loc 1 826 0
 4754 00ce 1846     		mov	r0, r3
 4755 00d0 BD46     		mov	sp, r7
 4756              		.cfi_def_cfa_register 13
 4757              		@ sp needed
 4758 00d2 80BD     		pop	{r7, pc}
 4759              	.L287:
 4760              		.align	2
 4761              	.L286:
 4762 00d4 20A10700 		.word	500000
 4763 00d8 00000000 		.word	uartQueueTbl
 4764 00dc 00A00640 		.word	1074176000
 4765 00e0 00B00640 		.word	1074180096
 4766 00e4 00C00640 		.word	1074184192
 4767 00e8 00000000 		.word	mainTaskHandle
 4768 00ec 00000000 		.word	mainTask
 4769 00f0 C4080000 		.word	.LC101
 4770 00f4 60010000 		.word	.LC20
 4771 00f8 00000000 		.word	__FUNCTION__.6752
 4772 00fc D0080000 		.word	.LC102
 4773              		.cfi_endproc
 4774              	.LFE42:
 4776              		.section	.rodata
 4777              		.align	2
 4778              	.LC103:
 4779 091c 0A2A2A2A 		.ascii	"\012*** OS Task Stack Overflow %s.\012\000"
 4779      204F5320 
 4779      5461736B 
 4779      20537461 
 4779      636B204F 
 4780              		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
 4781              		.align	2
 4782              		.global	vApplicationStackOverflowHook
 4783              		.thumb
 4784              		.thumb_func
 4786              	vApplicationStackOverflowHook:
 4787              	.LFB43:
 827:../src/main.c **** 
 828:../src/main.c **** void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
 829:../src/main.c **** {
 4788              		.loc 1 829 0
 4789              		.cfi_startproc
 4790              		@ args = 0, pretend = 0, frame = 8
 4791              		@ frame_needed = 1, uses_anonymous_args = 0
 4792 0000 80B5     		push	{r7, lr}
 4793              		.cfi_def_cfa_offset 8
 4794              		.cfi_offset 7, -8
 4795              		.cfi_offset 14, -4
 4796 0002 82B0     		sub	sp, sp, #8
 4797              		.cfi_def_cfa_offset 16
 4798 0004 00AF     		add	r7, sp, #0
 4799              		.cfi_def_cfa_register 7
 4800 0006 7860     		str	r0, [r7, #4]
 4801 0008 3960     		str	r1, [r7]
 830:../src/main.c **** 	os_trace("\n*** OS Task Stack Overflow %s.\n",pcTaskName);
 4802              		.loc 1 830 0
 4803 000a 0348     		ldr	r0, .L289
 4804 000c 3968     		ldr	r1, [r7]
 4805 000e FFF7FEFF 		bl	os_trace
 831:../src/main.c **** }
 4806              		.loc 1 831 0
 4807 0012 0837     		adds	r7, r7, #8
 4808              		.cfi_def_cfa_offset 8
 4809 0014 BD46     		mov	sp, r7
 4810              		.cfi_def_cfa_register 13
 4811              		@ sp needed
 4812 0016 80BD     		pop	{r7, pc}
 4813              	.L290:
 4814              		.align	2
 4815              	.L289:
 4816 0018 1C090000 		.word	.LC103
 4817              		.cfi_endproc
 4818              	.LFE43:
 4820              		.section	.rodata
 4821 093d 000000   		.align	2
 4822              	.LC104:
 4823 0940 0A2A2A2A 		.ascii	"\012*** OS Malloc Fail.\012\000"
 4823      204F5320 
 4823      4D616C6C 
 4823      6F632046 
 4823      61696C2E 
 4824              		.section	.text.vApplicationMallocFailedHook,"ax",%progbits
 4825              		.align	2
 4826              		.global	vApplicationMallocFailedHook
 4827              		.thumb
 4828              		.thumb_func
 4830              	vApplicationMallocFailedHook:
 4831              	.LFB44:
 832:../src/main.c **** void vApplicationMallocFailedHook(void)
 833:../src/main.c **** {
 4832              		.loc 1 833 0
 4833              		.cfi_startproc
 4834              		@ args = 0, pretend = 0, frame = 0
 4835              		@ frame_needed = 1, uses_anonymous_args = 0
 4836 0000 80B5     		push	{r7, lr}
 4837              		.cfi_def_cfa_offset 8
 4838              		.cfi_offset 7, -8
 4839              		.cfi_offset 14, -4
 4840 0002 00AF     		add	r7, sp, #0
 4841              		.cfi_def_cfa_register 7
 834:../src/main.c **** 	os_trace("\n*** OS Malloc Fail.\n");
 4842              		.loc 1 834 0
 4843 0004 0148     		ldr	r0, .L292
 4844 0006 FFF7FEFF 		bl	os_trace
 835:../src/main.c **** }
 4845              		.loc 1 835 0
 4846 000a 80BD     		pop	{r7, pc}
 4847              	.L293:
 4848              		.align	2
 4849              	.L292:
 4850 000c 40090000 		.word	.LC104
 4851              		.cfi_endproc
 4852              	.LFE44:
 4854              		.section	.rodata.__FUNCTION__.6435,"a",%progbits
 4855              		.align	2
 4858              	__FUNCTION__.6435:
 4859 0000 74657374 		.ascii	"test_can\000"
 4859      5F63616E 
 4859      00
 4860              		.section	.rodata.__FUNCTION__.6561,"a",%progbits
 4861              		.align	2
 4864              	__FUNCTION__.6561:
 4865 0000 74657374 		.ascii	"test_uart\000"
 4865      5F756172 
 4865      7400
 4866              		.section	.rodata.__FUNCTION__.6663,"a",%progbits
 4867              		.align	2
 4870              	__FUNCTION__.6663:
 4871 0000 74657374 		.ascii	"test_rtc\000"
 4871      5F727463 
 4871      00
 4872              		.section	.rodata
 4873 0956 0000     		.align	2
 4874              	.LC105:
 4875 0958 4C454420 		.ascii	"LED Output Test\000"
 4875      4F757470 
 4875      75742054 
 4875      65737400 
 4876              		.align	2
 4877              	.LC106:
 4878 0968 494F5F49 		.ascii	"IO_IN Test\000"
 4878      4E205465 
 4878      737400
 4879 0973 00       		.align	2
 4880              	.LC107:
 4881 0974 55415254 		.ascii	"UART0/1/2 Loop-back Test\000"
 4881      302F312F 
 4881      32204C6F 
 4881      6F702D62 
 4881      61636B20 
 4882 098d 000000   		.align	2
 4883              	.LC108:
 4884 0990 47505320 		.ascii	"GPS Test\000"
 4884      54657374 
 4884      00
 4885 0999 000000   		.align	2
 4886              	.LC109:
 4887 099c 52533438 		.ascii	"RS485 loop-back Test\000"
 4887      35206C6F 
 4887      6F702D62 
 4887      61636B20 
 4887      54657374 
 4888 09b1 000000   		.align	2
 4889              	.LC110:
 4890 09b4 44533234 		.ascii	"DS2411 SN Read Test\000"
 4890      31312053 
 4890      4E205265 
 4890      61642054 
 4890      65737400 
 4891              		.align	2
 4892              	.LC111:
 4893 09c8 52544320 		.ascii	"RTC Test\000"
 4893      54657374 
 4893      00
 4894 09d1 000000   		.align	2
 4895              	.LC112:
 4896 09d4 3447204D 		.ascii	"4G Module Test\000"
 4896      6F64756C 
 4896      65205465 
 4896      737400
 4897 09e3 00       		.align	2
 4898              	.LC113:
 4899 09e4 53442043 		.ascii	"SD Card Test\000"
 4899      61726420 
 4899      54657374 
 4899      00
 4900 09f1 000000   		.align	2
 4901              	.LC114:
 4902 09f4 43414E30 		.ascii	"CAN0/1/2 loop-cycle Test\000"
 4902      2F312F32 
 4902      206C6F6F 
 4902      702D6379 
 4902      636C6520 
 4903 0a0d 000000   		.align	2
 4904              	.LC115:
 4905 0a10 42757A7A 		.ascii	"Buzzer Test\012\000"
 4905      65722054 
 4905      6573740A 
 4905      00
 4906              		.section	.rodata.test_tbl.6725,"a",%progbits
 4907              		.align	2
 4910              	test_tbl.6725:
 4911 0000 58090000 		.word	.LC105
 4912 0004 00000000 		.word	test_led
 4913 0008 68090000 		.word	.LC106
 4914 000c 00000000 		.word	test_io_in
 4915 0010 74090000 		.word	.LC107
 4916 0014 00000000 		.word	test_uart
 4917 0018 90090000 		.word	.LC108
 4918 001c 00000000 		.word	test_gps
 4919 0020 9C090000 		.word	.LC109
 4920 0024 00000000 		.word	test_485
 4921 0028 B4090000 		.word	.LC110
 4922 002c 00000000 		.word	test_ds2411
 4923 0030 C8090000 		.word	.LC111
 4924 0034 00000000 		.word	test_rtc
 4925 0038 D4090000 		.word	.LC112
 4926 003c 00000000 		.word	test_4g
 4927 0040 E4090000 		.word	.LC113
 4928 0044 00000000 		.word	test_sd
 4929 0048 F4090000 		.word	.LC114
 4930 004c 00000000 		.word	test_can
 4931 0050 100A0000 		.word	.LC115
 4932 0054 00000000 		.word	test_buzzer
 4933              		.section	.rodata.__FUNCTION__.6752,"a",%progbits
 4934              		.align	2
 4937              	__FUNCTION__.6752:
 4938 0000 6D61696E 		.ascii	"main\000"
 4938      00
 4939              		.text
 4940              	.Letext0:
 4941              		.file 2 "/home/houxd/prog/NXP/S32DS_ARM_v2.0/S32DS/arm_ewl2/EWL_C/include/cstdint"
 4942              		.file 3 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/include/S32K144.h"
 4943              		.file 4 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/bl/ds3231.h"
 4944              		.file 5 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/bl/ds2411.h"
 4945              		.file 6 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/fatfs/../fatfs/integer.h"
 4946              		.file 7 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/fatfs/ff.h"
 4947              		.file 8 "../src/timelib.h"
 4948              		.file 9 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/../../F
 4949              		.file 10 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/task.h"
 4950              		.file 11 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/../../FreeRTOS/include/queue.
 4951              		.file 12 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/FreeRTOS/include/semphr.h"
 4952              		.file 13 "../src/oswrapper.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccD7FDBc.s:21     .rodata:00000000 $d
     /tmp/ccD7FDBc.s:28     .text.test_buzzer:00000000 $t
     /tmp/ccD7FDBc.s:33     .text.test_buzzer:00000000 test_buzzer
     /tmp/ccD7FDBc.s:95     .text.test_buzzer:0000004c $d
     /tmp/ccD7FDBc.s:141    .text.test_sd:00000000 $t
     /tmp/ccD7FDBc.s:145    .text.test_sd:00000000 test_sd
     /tmp/ccD7FDBc.s:333    .text.test_sd:00000160 $d
     /tmp/ccD7FDBc.s:357    .text.can_task_proc:00000000 $t
     /tmp/ccD7FDBc.s:361    .text.can_task_proc:00000000 can_task_proc
     /tmp/ccD7FDBc.s:455    .text.can_task_proc:00000094 $d
     /tmp/ccD7FDBc.s:494    .text.test_can:00000000 $t
     /tmp/ccD7FDBc.s:498    .text.test_can:00000000 test_can
     /tmp/ccD7FDBc.s:766    .text.test_can:000001b4 $d
     /tmp/ccD7FDBc.s:4858   .rodata.__FUNCTION__.6435:00000000 __FUNCTION__.6435
     /tmp/ccD7FDBc.s:783    .bss.uartQueueTbl:00000000 $d
     /tmp/ccD7FDBc.s:786    .bss.uartQueueTbl:00000000 uartQueueTbl
     /tmp/ccD7FDBc.s:789    .text.UartRxIRQHandler:00000000 $t
     /tmp/ccD7FDBc.s:794    .text.UartRxIRQHandler:00000000 UartRxIRQHandler
     /tmp/ccD7FDBc.s:854    .text.UartRxIRQHandler:0000004c $d
     /tmp/ccD7FDBc.s:860    .text.uart_getc_timeout:00000000 $t
     /tmp/ccD7FDBc.s:865    .text.uart_getc_timeout:00000000 uart_getc_timeout
     /tmp/ccD7FDBc.s:913    .text.uart_getc_timeout:0000003c $d
     /tmp/ccD7FDBc.s:918    .text.uart_rx_flush:00000000 $t
     /tmp/ccD7FDBc.s:923    .text.uart_rx_flush:00000000 uart_rx_flush
     /tmp/ccD7FDBc.s:955    .text.uart_rx_flush:00000020 $d
     /tmp/ccD7FDBc.s:960    .text.uart_gets_timeout:00000000 $t
     /tmp/ccD7FDBc.s:965    .text.uart_gets_timeout:00000000 uart_gets_timeout
     /tmp/ccD7FDBc.s:1065   .text.uart_gets_echo_blocked:00000000 $t
     /tmp/ccD7FDBc.s:1070   .text.uart_gets_echo_blocked:00000000 uart_gets_echo_blocked
     /tmp/ccD7FDBc.s:1554   .text.uart_send:00000000 uart_send
     /tmp/ccD7FDBc.s:1177   .text.uart_gets_echo_blocked:0000008c $d
     /tmp/ccD7FDBc.s:1182   .text.uart_gets_blocked:00000000 $t
     /tmp/ccD7FDBc.s:1187   .text.uart_gets_blocked:00000000 uart_gets_blocked
     /tmp/ccD7FDBc.s:1223   .text.uart_getdata:00000000 $t
     /tmp/ccD7FDBc.s:1228   .text.uart_getdata:00000000 uart_getdata
     /tmp/ccD7FDBc.s:1317   .text.uart_getdata_blocked:00000000 $t
     /tmp/ccD7FDBc.s:1322   .text.uart_getdata_blocked:00000000 uart_getdata_blocked
     /tmp/ccD7FDBc.s:1370   .text.uart_puts:00000000 $t
     /tmp/ccD7FDBc.s:1375   .text.uart_puts:00000000 uart_puts
     /tmp/ccD7FDBc.s:1437   .text.uart_puts:00000054 $d
     /tmp/ccD7FDBc.s:1442   .text.uart_send_lf_crlf:00000000 $t
     /tmp/ccD7FDBc.s:1447   .text.uart_send_lf_crlf:00000000 uart_send_lf_crlf
     /tmp/ccD7FDBc.s:1544   .text.uart_send_lf_crlf:00000090 $d
     /tmp/ccD7FDBc.s:1549   .text.uart_send:00000000 $t
     /tmp/ccD7FDBc.s:1636   .text.uart_send:00000074 $d
     /tmp/ccD7FDBc.s:1654   .text.uart_proc:00000000 $t
     /tmp/ccD7FDBc.s:1658   .text.uart_proc:00000000 uart_proc
     /tmp/ccD7FDBc.s:1754   .text.uart_proc:00000088 $d
     /tmp/ccD7FDBc.s:1783   .text.test_uart:00000000 $t
     /tmp/ccD7FDBc.s:1787   .text.test_uart:00000000 test_uart
     /tmp/ccD7FDBc.s:1990   .text.test_uart:00000140 $d
     /tmp/ccD7FDBc.s:4864   .rodata.__FUNCTION__.6561:00000000 __FUNCTION__.6561
     /tmp/ccD7FDBc.s:2003   .text.nic_io_init:00000000 $t
     /tmp/ccD7FDBc.s:2008   .text.nic_io_init:00000000 nic_io_init
     /tmp/ccD7FDBc.s:2091   .text.nic_io_init:00000088 $d
     /tmp/ccD7FDBc.s:2098   .text.nic_power_onoff:00000000 $t
     /tmp/ccD7FDBc.s:2103   .text.nic_power_onoff:00000000 nic_power_onoff
     /tmp/ccD7FDBc.s:2162   .text.nic_power_onoff:00000064 $d
     /tmp/ccD7FDBc.s:2167   .text.nic_reset:00000000 $t
     /tmp/ccD7FDBc.s:2172   .text.nic_reset:00000000 nic_reset
     /tmp/ccD7FDBc.s:2216   .text.nic_reset:00000044 $d
     /tmp/ccD7FDBc.s:2225   .text.at_csq.6592:00000000 $t
     /tmp/ccD7FDBc.s:2229   .text.at_csq.6592:00000000 at_csq.6592
     /tmp/ccD7FDBc.s:2288   .text.at_csq.6592:00000048 $d
     /tmp/ccD7FDBc.s:2295   .rodata:000003d0 $t
     /tmp/ccD7FDBc.s:2297   .rodata:000003d8 $d
     /tmp/ccD7FDBc.s:2358   .text.test_4g:00000000 $t
     /tmp/ccD7FDBc.s:2362   .text.test_4g:00000000 test_4g
     /tmp/ccD7FDBc.s:2658   .text.test_4g:000002d4 $d
     /tmp/ccD7FDBc.s:2924   .text.at_creg.6597:00000000 at_creg.6597
     /tmp/ccD7FDBc.s:2997   .text.at_cimi.6602:00000000 at_cimi.6602
     /tmp/ccD7FDBc.s:3060   .text.at_miprofile.6604:00000000 at_miprofile.6604
     /tmp/ccD7FDBc.s:3104   .text.at_mipopen.6606:00000000 at_mipopen.6606
     /tmp/ccD7FDBc.s:3162   .text.at_miopen_r.6608:00000000 at_miopen_r.6608
     /tmp/ccD7FDBc.s:3236   .text.at_mipcall.6613:00000000 at_mipcall.6613
     /tmp/ccD7FDBc.s:2682   .text.test_4g:00000328 $t
     /tmp/ccD7FDBc.s:2907   .text.test_4g:000004e8 $d
     /tmp/ccD7FDBc.s:2920   .text.at_creg.6597:00000000 $t
     /tmp/ccD7FDBc.s:2984   .text.at_creg.6597:00000048 $d
     /tmp/ccD7FDBc.s:2993   .text.at_cimi.6602:00000000 $t
     /tmp/ccD7FDBc.s:3047   .text.at_cimi.6602:00000044 $d
     /tmp/ccD7FDBc.s:3056   .text.at_miprofile.6604:00000000 $t
     /tmp/ccD7FDBc.s:3091   .text.at_miprofile.6604:00000020 $d
     /tmp/ccD7FDBc.s:3100   .text.at_mipopen.6606:00000000 $t
     /tmp/ccD7FDBc.s:3149   .text.at_mipopen.6606:00000034 $d
     /tmp/ccD7FDBc.s:3158   .text.at_miopen_r.6608:00000000 $t
     /tmp/ccD7FDBc.s:3223   .text.at_miopen_r.6608:00000048 $d
     /tmp/ccD7FDBc.s:3232   .text.at_mipcall.6613:00000000 $t
     /tmp/ccD7FDBc.s:3291   .text.at_mipcall.6613:00000040 $d
     /tmp/ccD7FDBc.s:3296   .text.load_time:00000000 $t
     /tmp/ccD7FDBc.s:3301   .text.load_time:00000000 load_time
     /tmp/ccD7FDBc.s:3410   .text.store_time:00000000 $t
     /tmp/ccD7FDBc.s:3415   .text.store_time:00000000 store_time
     /tmp/ccD7FDBc.s:3516   .text.store_time:000000a0 $d
     /tmp/ccD7FDBc.s:3525   .text.rtc_proc:00000000 $t
     /tmp/ccD7FDBc.s:3530   .text.rtc_proc:00000000 rtc_proc
     /tmp/ccD7FDBc.s:3569   .text.rtc_proc:00000034 $d
     /tmp/ccD7FDBc.s:3586   .text.test_rtc:00000000 $t
     /tmp/ccD7FDBc.s:3591   .text.test_rtc:00000000 test_rtc
     /tmp/ccD7FDBc.s:3678   .text.test_rtc:00000080 $d
     /tmp/ccD7FDBc.s:4870   .rodata.__FUNCTION__.6663:00000000 __FUNCTION__.6663
     /tmp/ccD7FDBc.s:3701   .text.test_ds2411:00000000 $t
     /tmp/ccD7FDBc.s:3706   .text.test_ds2411:00000000 test_ds2411
     /tmp/ccD7FDBc.s:3793   .text.test_ds2411:00000078 $d
     /tmp/ccD7FDBc.s:3812   .text.test_gps:00000000 $t
     /tmp/ccD7FDBc.s:3817   .text.test_gps:00000000 test_gps
     /tmp/ccD7FDBc.s:3903   .text.test_gps:0000008c $d
     /tmp/ccD7FDBc.s:3921   .text.test_485:00000000 $t
     /tmp/ccD7FDBc.s:3926   .text.test_485:00000000 test_485
     /tmp/ccD7FDBc.s:4000   .text.test_485:0000007c $d
     /tmp/ccD7FDBc.s:4017   .text.test_io_in:00000000 $t
     /tmp/ccD7FDBc.s:4021   .text.test_io_in:00000000 test_io_in
     /tmp/ccD7FDBc.s:4102   .text.test_io_in:00000058 $d
     /tmp/ccD7FDBc.s:4116   .text.test_led:00000000 $t
     /tmp/ccD7FDBc.s:4120   .text.test_led:00000000 test_led
     /tmp/ccD7FDBc.s:4212   .text.test_led:00000070 $d
     /tmp/ccD7FDBc.s:4218   .bss.mainTaskHandle:00000000 $d
     /tmp/ccD7FDBc.s:4221   .bss.mainTaskHandle:00000000 mainTaskHandle
     /tmp/ccD7FDBc.s:4284   .text.mainTask:00000000 $t
     /tmp/ccD7FDBc.s:4289   .text.mainTask:00000000 mainTask
     /tmp/ccD7FDBc.s:4602   .text.mainTask:0000025c $d
     /tmp/ccD7FDBc.s:4910   .rodata.test_tbl.6725:00000000 test_tbl.6725
     /tmp/ccD7FDBc.s:4635   .text.main:00000000 $t
     /tmp/ccD7FDBc.s:4640   .text.main:00000000 main
     /tmp/ccD7FDBc.s:4762   .text.main:000000d4 $d
     /tmp/ccD7FDBc.s:4937   .rodata.__FUNCTION__.6752:00000000 __FUNCTION__.6752
     /tmp/ccD7FDBc.s:4781   .text.vApplicationStackOverflowHook:00000000 $t
     /tmp/ccD7FDBc.s:4786   .text.vApplicationStackOverflowHook:00000000 vApplicationStackOverflowHook
     /tmp/ccD7FDBc.s:4816   .text.vApplicationStackOverflowHook:00000018 $d
     /tmp/ccD7FDBc.s:4825   .text.vApplicationMallocFailedHook:00000000 $t
     /tmp/ccD7FDBc.s:4830   .text.vApplicationMallocFailedHook:00000000 vApplicationMallocFailedHook
     /tmp/ccD7FDBc.s:4850   .text.vApplicationMallocFailedHook:0000000c $d
     /tmp/ccD7FDBc.s:4855   .rodata.__FUNCTION__.6435:00000000 $d
     /tmp/ccD7FDBc.s:4861   .rodata.__FUNCTION__.6561:00000000 $d
     /tmp/ccD7FDBc.s:4867   .rodata.__FUNCTION__.6663:00000000 $d
     /tmp/ccD7FDBc.s:4907   .rodata.test_tbl.6725:00000000 $d
     /tmp/ccD7FDBc.s:4934   .rodata.__FUNCTION__.6752:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.728a2e6911dc01ff85c2d70c52e8fae1
                           .group:00000000 wm4.lib_c99.prefix.8.3580c292f50811c682d980dc4180498e
                           .group:00000000 wm4.common.prefix.16.d7bf937cdf46fd76dde96b376e3b328a
                           .group:00000000 wm4.ewl_c_version.h.9.0bcb57d6a3f89baae1f9b121de2772f5
                           .group:00000000 wm4.os_enum.h.9.f9446d6af68b3fa72a37d4d924d3b347
                           .group:00000000 wm4.ansi_prefix.ARM.h.13.4b23f4c654df3c3277534542f67d200c
                           .group:00000000 wm4.ansi_parms.h.64.90aed58330fdde08746db908036e1f37
                           .group:00000000 wm4.size_t.h.9.f983491a73b5c81f421ee8223b1ac5c0
                           .group:00000000 wm4.wchar_t.h.9.94198016f5b5f455e54ea1f3f054b416
                           .group:00000000 wm4.ewl_lib_ext1.h.14.f9b057cc049671136093886db2a3473f
                           .group:00000000 wm4.ewl_rsize_t.h.11.b283831bb803e76ceb1756da2df9a1b5
                           .group:00000000 wm4.cstddef.32.067e2ea187472b6198f9ace951e27a51
                           .group:00000000 wm4.va_list.h.9.b0bb078841c0305c2667a31da10a9070
                           .group:00000000 wm4.file_struc.h.13.96d07f4b7392ecdee9ce60307cac6248
                           .group:00000000 wm4.stdarg.ARM.h.9.32516e68edcca81ab31f48f233894821
                           .group:00000000 wm4.stdio_api.h.64.7d83b1caa7fdc34505042751a1c33692
                           .group:00000000 wm4.cstdio.1187.51197b0e8ec7388017461af9f7851efe
                           .group:00000000 wm4.string_api.h.9.a9265430fd330d238bc93998aef29e99
                           .group:00000000 wm4.limits_api.h.9.bc6daa20b3abae2bba6c512044e73b43
                           .group:00000000 wm4.cstdint.134.883feaa2838fb8c945f155045ce06256
                           .group:00000000 wm4.cstdlib.44.e27e649b4051799f046eccdb898dfe03
                           .group:00000000 wm4.S32K144.h.177.db9d6057c342cdeacc7fa44375c761e5
                           .group:00000000 wm4.bl.h.9.aca5daeefae41b2ae63ddfaa535b88ff
                           .group:00000000 wm4.SPI_MSD0_Driver.h.10.751670d7185e24a2b9b7290d36663748
                           .group:00000000 wm4.ffconf.h.10.449b8c507c21d4b88b2726fdbe709539
                           .group:00000000 wm4.ff.h.41.f135a9d86c3395dc0cd2883e705fc447
                           .group:00000000 wm4.convert.h.9.7acfc90acb3e9acc9d0cd761674f1d1e
                           .group:00000000 wm4.timelib.h.9.511fe5beaa07f6d0465e284d0d8ae8e6
                           .group:00000000 wm4.FreeRTOSConfig.h.72.75cb346dabad37f1d1a80e0a337065ed
                           .group:00000000 wm4.projdefs.h.71.b3c50e668908413922aad758934ec914
                           .group:00000000 wm4.portmacro.h.72.f619b572c99e5bd3ac77abd33efb542d
                           .group:00000000 wm4.portable.h.106.61ffdda1afafb5a5e1f7197ade95b43a
                           .group:00000000 wm4.mpu_wrappers.h.71.dd245fe44d82bd40288b5a47f895c82c
                           .group:00000000 wm4.FreeRTOS.h.179.860507a4e765cb3b74f37181fc3c9df6
                           .group:00000000 wm4.list.h.103.6a12b7b9a7a136c3cca0ee53675c5498
                           .group:00000000 wm4.task.h.88.249f28f82749d6a86cb49478ec501d6f
                           .group:00000000 wm4.queue.h.72.b79111e1f2901fd0fc4ec217c5b93342
                           .group:00000000 wm4.semphr.h.81.476996112f7cf2dd045dbdd37a9136bc

UNDEFINED SYMBOLS
buzzer_ctrl
os_trace
os_sleep_ms
f_mount
f_open
f_lseek
f_write
memset
f_read
strcmp
f_close
os_mutex_lock
FLEXCAN_transmit_msg
os_mutex_unlock
FLEXCAN_receive_msg
hx_dumphex2str
os_mutex_create
xTaskGenericCreate
vTaskDelete
xQueueGenericSendFromISR
xQueueGenericReceive
xQueueGenericReset
vPortEnterCritical
LPUART_transmit_char
vPortExitCritical
rs485_dir
sscanf
__clear_cache
strlen
strspn
strcpy
snprintf
ds3231_gettime
bcd2int
mktime
__timezone
time
localtime_s
int2bcd
ds3231_settime
asctime
__aeabi_f2d
ds3231_gettempr
ds2411_getsn
get_input_val
led_ctrl
os_console_gets
strncmp
strtoul
WDOG_disable
SOSC_init_8MHz
SPLL_init_160MHz
NormalRUNmode_80MHz
NVIC_init_IRQs
PORT_init
LPSPI0_init_master
MSD0_SPIHighSpeed
FLEXCAN_init
xQueueGenericCreate
LPUART_init
os_trace_init
vTaskStartScheduler
