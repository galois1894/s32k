   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"startup.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.init_data_bss,"ax",%progbits
  21              		.align	2
  22              		.global	init_data_bss
  23              		.thumb
  24              		.thumb_func
  26              	init_data_bss:
  27              	.LFB0:
  28              		.file 1 "../Project_Settings/Startup_Code/startup.c"
   1:../Project_Settings/Startup_Code/startup.c **** /*
   2:../Project_Settings/Startup_Code/startup.c ****  * Copyright (c) 2013 - 2014, Freescale Semiconductor, Inc.
   3:../Project_Settings/Startup_Code/startup.c ****  * Copyright 2016-2017 NXP
   4:../Project_Settings/Startup_Code/startup.c ****  * All rights reserved.
   5:../Project_Settings/Startup_Code/startup.c ****  *
   6:../Project_Settings/Startup_Code/startup.c ****  * THIS SOFTWARE IS PROVIDED BY NXP "AS IS" AND ANY EXPRESSED OR
   7:../Project_Settings/Startup_Code/startup.c ****  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
   8:../Project_Settings/Startup_Code/startup.c ****  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   9:../Project_Settings/Startup_Code/startup.c ****  * IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  10:../Project_Settings/Startup_Code/startup.c ****  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  11:../Project_Settings/Startup_Code/startup.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  12:../Project_Settings/Startup_Code/startup.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  13:../Project_Settings/Startup_Code/startup.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  14:../Project_Settings/Startup_Code/startup.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  15:../Project_Settings/Startup_Code/startup.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  16:../Project_Settings/Startup_Code/startup.c ****  * THE POSSIBILITY OF SUCH DAMAGE.
  17:../Project_Settings/Startup_Code/startup.c ****  */
  18:../Project_Settings/Startup_Code/startup.c **** 
  19:../Project_Settings/Startup_Code/startup.c **** /**
  20:../Project_Settings/Startup_Code/startup.c ****  * @page misra_violations MISRA-C:2012 violations
  21:../Project_Settings/Startup_Code/startup.c ****  *
  22:../Project_Settings/Startup_Code/startup.c ****  * @section [global]
  23:../Project_Settings/Startup_Code/startup.c ****  * Violates MISRA 2012 Advisory Rule 8.9, An object should be defined at block
  24:../Project_Settings/Startup_Code/startup.c ****  * scope if its identifier only appears in a single function.
  25:../Project_Settings/Startup_Code/startup.c ****  * All variables with this problem are defined in the linker files.
  26:../Project_Settings/Startup_Code/startup.c ****  *
  27:../Project_Settings/Startup_Code/startup.c ****  * @section [global]
  28:../Project_Settings/Startup_Code/startup.c ****  * Violates MISRA 2012 Advisory Rule 8.11, When an array with external linkage
  29:../Project_Settings/Startup_Code/startup.c ****  * is declared, its size should be explicitly specified.
  30:../Project_Settings/Startup_Code/startup.c ****  * The size of the arrays can not be explicitly determined.
  31:../Project_Settings/Startup_Code/startup.c ****  *
  32:../Project_Settings/Startup_Code/startup.c ****  * @section [global]
  33:../Project_Settings/Startup_Code/startup.c ****  * Violates MISRA 2012 Advisory Rule 11.4, A conversion should not be performed
  34:../Project_Settings/Startup_Code/startup.c ****  * between a pointer to object and an integer type.
  35:../Project_Settings/Startup_Code/startup.c ****  * The cast is required to initialize a pointer with an unsigned int define,
  36:../Project_Settings/Startup_Code/startup.c ****  * representing an address.
  37:../Project_Settings/Startup_Code/startup.c ****  *
  38:../Project_Settings/Startup_Code/startup.c ****  * @section [global]
  39:../Project_Settings/Startup_Code/startup.c ****  * Violates MISRA 2012 Required Rule 11.6, A cast shall not be performed
  40:../Project_Settings/Startup_Code/startup.c ****  * between pointer to void and an arithmetic type.
  41:../Project_Settings/Startup_Code/startup.c ****  * The cast is required to initialize a pointer with an unsigned int define,
  42:../Project_Settings/Startup_Code/startup.c ****  * representing an address.
  43:../Project_Settings/Startup_Code/startup.c ****  *
  44:../Project_Settings/Startup_Code/startup.c ****  * @section [global]
  45:../Project_Settings/Startup_Code/startup.c ****  * Violates MISRA 2012 Required Rule 2.1, A project shall not contain unreachable
  46:../Project_Settings/Startup_Code/startup.c ****  * code.
  47:../Project_Settings/Startup_Code/startup.c ****  * The condition compares two address defined in linker files that can be different.
  48:../Project_Settings/Startup_Code/startup.c ****  *
  49:../Project_Settings/Startup_Code/startup.c ****  * @section [global]
  50:../Project_Settings/Startup_Code/startup.c ****  * Violates MISRA 2012 Advisory Rule 8.7, External could be made static.
  51:../Project_Settings/Startup_Code/startup.c ****  * Function is defined for usage by application code.
  52:../Project_Settings/Startup_Code/startup.c ****  *
  53:../Project_Settings/Startup_Code/startup.c ****  */
  54:../Project_Settings/Startup_Code/startup.c **** 
  55:../Project_Settings/Startup_Code/startup.c **** #include "startup.h"
  56:../Project_Settings/Startup_Code/startup.c **** #include "device_registers.h"
  57:../Project_Settings/Startup_Code/startup.c **** #include <stdint.h>
  58:../Project_Settings/Startup_Code/startup.c **** 
  59:../Project_Settings/Startup_Code/startup.c **** #if (defined(__ICCARM__))
  60:../Project_Settings/Startup_Code/startup.c ****     #pragma section = ".data"
  61:../Project_Settings/Startup_Code/startup.c ****     #pragma section = ".data_init"
  62:../Project_Settings/Startup_Code/startup.c ****     #pragma section = ".bss"
  63:../Project_Settings/Startup_Code/startup.c **** #endif
  64:../Project_Settings/Startup_Code/startup.c **** 
  65:../Project_Settings/Startup_Code/startup.c **** /*******************************************************************************
  66:../Project_Settings/Startup_Code/startup.c ****  * Code
  67:../Project_Settings/Startup_Code/startup.c ****  ******************************************************************************/
  68:../Project_Settings/Startup_Code/startup.c **** 
  69:../Project_Settings/Startup_Code/startup.c **** /*FUNCTION**********************************************************************
  70:../Project_Settings/Startup_Code/startup.c ****  *
  71:../Project_Settings/Startup_Code/startup.c ****  * Function Name : init_data_bss
  72:../Project_Settings/Startup_Code/startup.c ****  * Description   : Make necessary initializations for RAM.
  73:../Project_Settings/Startup_Code/startup.c ****  * - Copy the vector table from ROM to RAM.
  74:../Project_Settings/Startup_Code/startup.c ****  * - Copy initialized data from ROM to RAM.
  75:../Project_Settings/Startup_Code/startup.c ****  * - Copy code that should reside in RAM from ROM
  76:../Project_Settings/Startup_Code/startup.c ****  * - Clear the zero-initialized data section.
  77:../Project_Settings/Startup_Code/startup.c ****  *
  78:../Project_Settings/Startup_Code/startup.c ****  * Tool Chains:
  79:../Project_Settings/Startup_Code/startup.c ****  *   __GNUC__   : GNU Compiler Collection
  80:../Project_Settings/Startup_Code/startup.c ****  *   __ghs__    : Green Hills ARM Compiler
  81:../Project_Settings/Startup_Code/startup.c ****  *   __ICCARM__ : IAR ARM Compiler
  82:../Project_Settings/Startup_Code/startup.c ****  *   __CSMC__   : Cosmic C Cross Compiler
  83:../Project_Settings/Startup_Code/startup.c ****  *   __DCC__    : Wind River Diab Compiler
  84:../Project_Settings/Startup_Code/startup.c ****  *
  85:../Project_Settings/Startup_Code/startup.c ****  * Implements    : init_data_bss_Activity
  86:../Project_Settings/Startup_Code/startup.c ****  *END**************************************************************************/
  87:../Project_Settings/Startup_Code/startup.c **** void init_data_bss(void)
  88:../Project_Settings/Startup_Code/startup.c **** {
  29              		.loc 1 88 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 40
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 8BB0     		sub	sp, sp, #44
  38              		.cfi_def_cfa_offset 48
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  89:../Project_Settings/Startup_Code/startup.c ****     uint32_t n;
  90:../Project_Settings/Startup_Code/startup.c ****     /* Declare pointers for various data sections. These pointers
  91:../Project_Settings/Startup_Code/startup.c ****      * are initialized using values pulled in from the linker file */
  92:../Project_Settings/Startup_Code/startup.c ****     uint8_t * data_ram;
  93:../Project_Settings/Startup_Code/startup.c ****     uint8_t * code_ram;
  94:../Project_Settings/Startup_Code/startup.c ****     uint8_t * bss_start;
  95:../Project_Settings/Startup_Code/startup.c ****     const uint8_t * data_rom, * data_rom_end;
  96:../Project_Settings/Startup_Code/startup.c ****     const uint8_t * code_rom, * code_rom_end;
  97:../Project_Settings/Startup_Code/startup.c ****     const uint8_t * bss_end;
  98:../Project_Settings/Startup_Code/startup.c **** 
  99:../Project_Settings/Startup_Code/startup.c ****     /* Addresses for VECTOR_TABLE and VECTOR_RAM come from the linker file */
 100:../Project_Settings/Startup_Code/startup.c ****     extern uint32_t __RAM_VECTOR_TABLE_SIZE[];
 101:../Project_Settings/Startup_Code/startup.c ****     extern uint32_t __VECTOR_TABLE[];
 102:../Project_Settings/Startup_Code/startup.c ****     extern uint32_t __VECTOR_RAM[];
 103:../Project_Settings/Startup_Code/startup.c **** 
 104:../Project_Settings/Startup_Code/startup.c ****     /* Get section information from linker files */
 105:../Project_Settings/Startup_Code/startup.c **** #if defined(__ICCARM__)
 106:../Project_Settings/Startup_Code/startup.c ****     /* Data */
 107:../Project_Settings/Startup_Code/startup.c ****     data_ram        = __section_begin(".data");
 108:../Project_Settings/Startup_Code/startup.c ****     data_rom        = __section_begin(".data_init");
 109:../Project_Settings/Startup_Code/startup.c ****     data_rom_end    = __section_end(".data_init");
 110:../Project_Settings/Startup_Code/startup.c **** 
 111:../Project_Settings/Startup_Code/startup.c ****     /* CODE RAM */
 112:../Project_Settings/Startup_Code/startup.c ****     #pragma section = "__CODE_ROM"
 113:../Project_Settings/Startup_Code/startup.c ****     #pragma section = "__CODE_RAM"
 114:../Project_Settings/Startup_Code/startup.c ****     code_ram        = __section_begin("__CODE_RAM");
 115:../Project_Settings/Startup_Code/startup.c ****     code_rom        = __section_begin("__CODE_ROM");
 116:../Project_Settings/Startup_Code/startup.c ****     code_rom_end    = __section_end("__CODE_ROM");
 117:../Project_Settings/Startup_Code/startup.c **** 
 118:../Project_Settings/Startup_Code/startup.c ****     /* BSS */
 119:../Project_Settings/Startup_Code/startup.c ****     bss_start       = __section_begin(".bss");
 120:../Project_Settings/Startup_Code/startup.c ****     bss_end         = __section_end(".bss");
 121:../Project_Settings/Startup_Code/startup.c **** #else
 122:../Project_Settings/Startup_Code/startup.c ****     extern uint32_t __DATA_ROM[];
 123:../Project_Settings/Startup_Code/startup.c ****     extern uint32_t __DATA_RAM[];
 124:../Project_Settings/Startup_Code/startup.c ****     extern uint32_t __DATA_END[];
 125:../Project_Settings/Startup_Code/startup.c **** 
 126:../Project_Settings/Startup_Code/startup.c ****     extern uint32_t __CODE_RAM[];
 127:../Project_Settings/Startup_Code/startup.c ****     extern uint32_t __CODE_ROM[];
 128:../Project_Settings/Startup_Code/startup.c ****     extern uint32_t __CODE_END[];
 129:../Project_Settings/Startup_Code/startup.c **** 
 130:../Project_Settings/Startup_Code/startup.c ****     extern uint32_t __BSS_START[];
 131:../Project_Settings/Startup_Code/startup.c ****     extern uint32_t __BSS_END[];
 132:../Project_Settings/Startup_Code/startup.c **** 
 133:../Project_Settings/Startup_Code/startup.c ****     /* Data */
 134:../Project_Settings/Startup_Code/startup.c ****     data_ram        = (uint8_t *)__DATA_RAM;
  41              		.loc 1 134 0
  42 0006 304B     		ldr	r3, .L12
  43 0008 3B62     		str	r3, [r7, #32]
 135:../Project_Settings/Startup_Code/startup.c ****     data_rom        = (uint8_t *)__DATA_ROM;
  44              		.loc 1 135 0
  45 000a 304B     		ldr	r3, .L12+4
  46 000c 7B61     		str	r3, [r7, #20]
 136:../Project_Settings/Startup_Code/startup.c ****     data_rom_end    = (uint8_t *)__DATA_END;
  47              		.loc 1 136 0
  48 000e 304B     		ldr	r3, .L12+8
  49 0010 FB60     		str	r3, [r7, #12]
 137:../Project_Settings/Startup_Code/startup.c ****     /* CODE RAM */
 138:../Project_Settings/Startup_Code/startup.c ****     code_ram        = (uint8_t *)__CODE_RAM;
  50              		.loc 1 138 0
  51 0012 304B     		ldr	r3, .L12+12
  52 0014 FB61     		str	r3, [r7, #28]
 139:../Project_Settings/Startup_Code/startup.c ****     code_rom        = (uint8_t *)__CODE_ROM;
  53              		.loc 1 139 0
  54 0016 304B     		ldr	r3, .L12+16
  55 0018 3B61     		str	r3, [r7, #16]
 140:../Project_Settings/Startup_Code/startup.c ****     code_rom_end    = (uint8_t *)__CODE_END;
  56              		.loc 1 140 0
  57 001a 304B     		ldr	r3, .L12+20
  58 001c BB60     		str	r3, [r7, #8]
 141:../Project_Settings/Startup_Code/startup.c ****     /* BSS */
 142:../Project_Settings/Startup_Code/startup.c ****     bss_start       = (uint8_t *)__BSS_START;
  59              		.loc 1 142 0
  60 001e 304B     		ldr	r3, .L12+24
  61 0020 BB61     		str	r3, [r7, #24]
 143:../Project_Settings/Startup_Code/startup.c ****     bss_end         = (uint8_t *)__BSS_END;
  62              		.loc 1 143 0
  63 0022 304B     		ldr	r3, .L12+28
  64 0024 7B60     		str	r3, [r7, #4]
 144:../Project_Settings/Startup_Code/startup.c **** #endif
 145:../Project_Settings/Startup_Code/startup.c **** 
 146:../Project_Settings/Startup_Code/startup.c ****     /* Check if VECTOR_TABLE copy is needed */
 147:../Project_Settings/Startup_Code/startup.c ****     if (__VECTOR_RAM != __VECTOR_TABLE)
  65              		.loc 1 147 0
  66 0026 304A     		ldr	r2, .L12+32
  67 0028 304B     		ldr	r3, .L12+36
  68 002a 9A42     		cmp	r2, r3
  69 002c 18D0     		beq	.L2
 148:../Project_Settings/Startup_Code/startup.c ****     {
 149:../Project_Settings/Startup_Code/startup.c ****         /* Copy the vector table from ROM to RAM */
 150:../Project_Settings/Startup_Code/startup.c ****         for (n = 0; n < (((uint32_t)__RAM_VECTOR_TABLE_SIZE)/sizeof(uint32_t)); n++)
  70              		.loc 1 150 0
  71 002e 0023     		movs	r3, #0
  72 0030 7B62     		str	r3, [r7, #36]
  73 0032 0AE0     		b	.L3
  74              	.L4:
 151:../Project_Settings/Startup_Code/startup.c ****         {
 152:../Project_Settings/Startup_Code/startup.c ****             __VECTOR_RAM[n] = __VECTOR_TABLE[n];
  75              		.loc 1 152 0 discriminator 3
  76 0034 2D4A     		ldr	r2, .L12+36
  77 0036 7B6A     		ldr	r3, [r7, #36]
  78 0038 52F82320 		ldr	r2, [r2, r3, lsl #2]
  79 003c 2A49     		ldr	r1, .L12+32
  80 003e 7B6A     		ldr	r3, [r7, #36]
  81 0040 41F82320 		str	r2, [r1, r3, lsl #2]
 150:../Project_Settings/Startup_Code/startup.c ****         {
  82              		.loc 1 150 0 discriminator 3
  83 0044 7B6A     		ldr	r3, [r7, #36]
  84 0046 0133     		adds	r3, r3, #1
  85 0048 7B62     		str	r3, [r7, #36]
  86              	.L3:
 150:../Project_Settings/Startup_Code/startup.c ****         {
  87              		.loc 1 150 0 is_stmt 0 discriminator 1
  88 004a 294B     		ldr	r3, .L12+40
  89 004c 9B08     		lsrs	r3, r3, #2
  90 004e 7A6A     		ldr	r2, [r7, #36]
  91 0050 9A42     		cmp	r2, r3
  92 0052 EFD3     		bcc	.L4
 153:../Project_Settings/Startup_Code/startup.c ****         }
 154:../Project_Settings/Startup_Code/startup.c ****         /* Point the VTOR to the position of vector table */
 155:../Project_Settings/Startup_Code/startup.c ****         INT_VECTOR_Reg = (uint32_t)__VECTOR_RAM;
  93              		.loc 1 155 0 is_stmt 1
  94 0054 4FF0E023 		mov	r3, #-536813568
  95 0058 234A     		ldr	r2, .L12+32
  96 005a C3F8082D 		str	r2, [r3, #3336]
  97 005e 04E0     		b	.L5
  98              	.L2:
 156:../Project_Settings/Startup_Code/startup.c ****     }
 157:../Project_Settings/Startup_Code/startup.c ****     else
 158:../Project_Settings/Startup_Code/startup.c ****     {
 159:../Project_Settings/Startup_Code/startup.c ****         /* Point the VTOR to the position of vector table */
 160:../Project_Settings/Startup_Code/startup.c ****         INT_VECTOR_Reg = (uint32_t)__VECTOR_TABLE;
  99              		.loc 1 160 0
 100 0060 4FF0E023 		mov	r3, #-536813568
 101 0064 214A     		ldr	r2, .L12+36
 102 0066 C3F8082D 		str	r2, [r3, #3336]
 103              	.L5:
 161:../Project_Settings/Startup_Code/startup.c ****     }
 162:../Project_Settings/Startup_Code/startup.c **** 
 163:../Project_Settings/Startup_Code/startup.c ****     /* Copy initialized data from ROM to RAM */
 164:../Project_Settings/Startup_Code/startup.c ****     while (data_rom_end != data_rom)
 104              		.loc 1 164 0
 105 006a 09E0     		b	.L6
 106              	.L7:
 165:../Project_Settings/Startup_Code/startup.c ****     {
 166:../Project_Settings/Startup_Code/startup.c ****         *data_ram = *data_rom;
 107              		.loc 1 166 0
 108 006c 7B69     		ldr	r3, [r7, #20]
 109 006e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 110 0070 3B6A     		ldr	r3, [r7, #32]
 111 0072 1A70     		strb	r2, [r3]
 167:../Project_Settings/Startup_Code/startup.c ****         data_ram++;
 112              		.loc 1 167 0
 113 0074 3B6A     		ldr	r3, [r7, #32]
 114 0076 0133     		adds	r3, r3, #1
 115 0078 3B62     		str	r3, [r7, #32]
 168:../Project_Settings/Startup_Code/startup.c ****         data_rom++;
 116              		.loc 1 168 0
 117 007a 7B69     		ldr	r3, [r7, #20]
 118 007c 0133     		adds	r3, r3, #1
 119 007e 7B61     		str	r3, [r7, #20]
 120              	.L6:
 164:../Project_Settings/Startup_Code/startup.c ****     {
 121              		.loc 1 164 0
 122 0080 FA68     		ldr	r2, [r7, #12]
 123 0082 7B69     		ldr	r3, [r7, #20]
 124 0084 9A42     		cmp	r2, r3
 125 0086 F1D1     		bne	.L7
 169:../Project_Settings/Startup_Code/startup.c ****     }
 170:../Project_Settings/Startup_Code/startup.c **** 
 171:../Project_Settings/Startup_Code/startup.c ****     /* Copy functions from ROM to RAM */
 172:../Project_Settings/Startup_Code/startup.c ****     while (code_rom_end != code_rom)
 126              		.loc 1 172 0
 127 0088 09E0     		b	.L8
 128              	.L9:
 173:../Project_Settings/Startup_Code/startup.c ****     {
 174:../Project_Settings/Startup_Code/startup.c ****         *code_ram = *code_rom;
 129              		.loc 1 174 0
 130 008a 3B69     		ldr	r3, [r7, #16]
 131 008c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 132 008e FB69     		ldr	r3, [r7, #28]
 133 0090 1A70     		strb	r2, [r3]
 175:../Project_Settings/Startup_Code/startup.c ****         code_ram++;
 134              		.loc 1 175 0
 135 0092 FB69     		ldr	r3, [r7, #28]
 136 0094 0133     		adds	r3, r3, #1
 137 0096 FB61     		str	r3, [r7, #28]
 176:../Project_Settings/Startup_Code/startup.c ****         code_rom++;
 138              		.loc 1 176 0
 139 0098 3B69     		ldr	r3, [r7, #16]
 140 009a 0133     		adds	r3, r3, #1
 141 009c 3B61     		str	r3, [r7, #16]
 142              	.L8:
 172:../Project_Settings/Startup_Code/startup.c ****     {
 143              		.loc 1 172 0
 144 009e BA68     		ldr	r2, [r7, #8]
 145 00a0 3B69     		ldr	r3, [r7, #16]
 146 00a2 9A42     		cmp	r2, r3
 147 00a4 F1D1     		bne	.L9
 177:../Project_Settings/Startup_Code/startup.c ****     }
 178:../Project_Settings/Startup_Code/startup.c **** 
 179:../Project_Settings/Startup_Code/startup.c ****     /* Clear the zero-initialized data section */
 180:../Project_Settings/Startup_Code/startup.c ****     while(bss_end != bss_start)
 148              		.loc 1 180 0
 149 00a6 05E0     		b	.L10
 150              	.L11:
 181:../Project_Settings/Startup_Code/startup.c ****     {
 182:../Project_Settings/Startup_Code/startup.c ****         *bss_start = 0;
 151              		.loc 1 182 0
 152 00a8 BB69     		ldr	r3, [r7, #24]
 153 00aa 0022     		movs	r2, #0
 154 00ac 1A70     		strb	r2, [r3]
 183:../Project_Settings/Startup_Code/startup.c ****         bss_start++;
 155              		.loc 1 183 0
 156 00ae BB69     		ldr	r3, [r7, #24]
 157 00b0 0133     		adds	r3, r3, #1
 158 00b2 BB61     		str	r3, [r7, #24]
 159              	.L10:
 180:../Project_Settings/Startup_Code/startup.c ****     {
 160              		.loc 1 180 0
 161 00b4 7A68     		ldr	r2, [r7, #4]
 162 00b6 BB69     		ldr	r3, [r7, #24]
 163 00b8 9A42     		cmp	r2, r3
 164 00ba F5D1     		bne	.L11
 184:../Project_Settings/Startup_Code/startup.c ****     }
 185:../Project_Settings/Startup_Code/startup.c **** }
 165              		.loc 1 185 0
 166 00bc 2C37     		adds	r7, r7, #44
 167              		.cfi_def_cfa_offset 4
 168 00be BD46     		mov	sp, r7
 169              		.cfi_def_cfa_register 13
 170              		@ sp needed
 171 00c0 5DF8047B 		ldr	r7, [sp], #4
 172              		.cfi_restore 7
 173              		.cfi_def_cfa_offset 0
 174 00c4 7047     		bx	lr
 175              	.L13:
 176 00c6 00BF     		.align	2
 177              	.L12:
 178 00c8 00000000 		.word	__DATA_RAM
 179 00cc 00000000 		.word	__DATA_ROM
 180 00d0 00000000 		.word	__DATA_END
 181 00d4 00000000 		.word	__CODE_RAM
 182 00d8 00000000 		.word	__CODE_ROM
 183 00dc 00000000 		.word	__CODE_END
 184 00e0 00000000 		.word	__BSS_START
 185 00e4 00000000 		.word	__BSS_END
 186 00e8 00000000 		.word	__VECTOR_RAM
 187 00ec 00000000 		.word	__VECTOR_TABLE
 188 00f0 00000000 		.word	__RAM_VECTOR_TABLE_SIZE
 189              		.cfi_endproc
 190              	.LFE0:
 192              		.text
 193              	.Letext0:
 194              		.file 2 "/home/houxd/prog/NXP/S32DS_ARM_v2.0/S32DS/arm_ewl2/EWL_C/include/cstdint"
 195              		.file 3 "/home/houxd/workspaceS32DS.ARM.V20/dp1000/include/S32K144.h"
DEFINED SYMBOLS
                            *ABS*:00000000 startup.c
     /tmp/ccEEHDbQ.s:21     .text.init_data_bss:00000000 $t
     /tmp/ccEEHDbQ.s:26     .text.init_data_bss:00000000 init_data_bss
     /tmp/ccEEHDbQ.s:178    .text.init_data_bss:000000c8 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.728a2e6911dc01ff85c2d70c52e8fae1
                           .group:00000000 wm4.lib_c99.prefix.8.3580c292f50811c682d980dc4180498e
                           .group:00000000 wm4.common.prefix.16.d7bf937cdf46fd76dde96b376e3b328a
                           .group:00000000 wm4.ewl_c_version.h.9.0bcb57d6a3f89baae1f9b121de2772f5
                           .group:00000000 wm4.device_registers.h.28.5f158ec6559b3636dff84b94830a157f
                           .group:00000000 wm4.s32_core_cm4.h.46.1c812d13e1fa6d41d91f93ed881f5ca0
                           .group:00000000 wm4.S32K144.h.177.451251ac556d3b0b8a04170a135f92d4
                           .group:00000000 wm4.os_enum.h.9.f9446d6af68b3fa72a37d4d924d3b347
                           .group:00000000 wm4.ansi_prefix.ARM.h.13.4b23f4c654df3c3277534542f67d200c
                           .group:00000000 wm4.ansi_parms.h.64.90aed58330fdde08746db908036e1f37
                           .group:00000000 wm4.limits_api.h.9.bc6daa20b3abae2bba6c512044e73b43
                           .group:00000000 wm4.ewl_lib_ext1.h.14.f9b057cc049671136093886db2a3473f
                           .group:00000000 wm4.cstdint.134.0ece0ba0ee759ce9e45a8fa510ec0d93
                           .group:00000000 wm4.wchar_t.h.9.94198016f5b5f455e54ea1f3f054b416
                           .group:00000000 wm4.cstdint.246.0573fcc3ea2319479988f90b448d87e4
                           .group:00000000 wm4.S32K144.h.190.037de4cd4cd4f94a273a3fe3e68d3ef7
                           .group:00000000 wm4.S32K144_features.h.58.0316094f25a36ca6960c15db460db611
                           .group:00000000 wm4.stdbool.h.9.d885baa6cedb035a1c381d9ef9fbc069

UNDEFINED SYMBOLS
__DATA_RAM
__DATA_ROM
__DATA_END
__CODE_RAM
__CODE_ROM
__CODE_END
__BSS_START
__BSS_END
__VECTOR_RAM
__VECTOR_TABLE
__RAM_VECTOR_TABLE_SIZE
